import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03601");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int4 = node3.getLineno();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "unknown");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType14 = jSTypeRegistry11.createFunctionType(jSType12, jSTypeArray13);
        boolean boolean15 = functionType14.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable16 = functionType14.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType17 = functionType14.unboxesTo();
        boolean boolean19 = functionType14.removeProperty("");
        int int20 = functionType14.getMaxArguments();
        java.lang.String str21 = functionType14.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType27 = jSTypeRegistry24.createFunctionType(jSType25, jSTypeArray26);
        boolean boolean28 = functionType27.isNominalType();
        functionType14.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType27);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry32.createFunctionType(jSType33, jSTypeArray34);
        boolean boolean36 = functionType35.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable37 = functionType35.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType38 = functionType35.unboxesTo();
        boolean boolean40 = functionType35.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType41 = functionType35.getImplicitPrototype();
        functionType14.setPrototypeBasedOn(objectType41);
        boolean boolean44 = jSTypeRegistry8.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType14, "hi!");
        java.lang.Iterable iterable45 = functionType14.getCtorImplementedInterfaces();
        boolean boolean46 = jSTypeExpression6.equals((java.lang.Object) functionType14);
        boolean boolean47 = functionType14.isInstanceType();
        boolean boolean48 = functionType14.isInstanceType();
        com.google.javascript.rhino.jstype.JSType jSType49 = functionType14.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = jSType49.isBooleanObjectType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertNotNull(functionType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable16);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertNotNull(functionType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable37);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(iterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSType49);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03602");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("{proxy:function (): {1960989634}}", jSTypeNative1);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable12 = functionType10.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType13 = functionType10.unboxesTo();
        boolean boolean15 = functionType10.removeProperty("");
        int int16 = functionType10.getMaxArguments();
        java.lang.String str17 = functionType10.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        functionType10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType23);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable33 = functionType31.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType31.unboxesTo();
        boolean boolean36 = functionType31.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType37 = functionType31.getImplicitPrototype();
        functionType10.setPrototypeBasedOn(objectType37);
        boolean boolean40 = jSTypeRegistry4.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType10, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node57.setString("");
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node57);
        node57.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry65.createFunctionType(jSType66, jSTypeArray67);
        boolean boolean69 = functionType68.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry48.createObjectType("hi!", node57, (com.google.javascript.rhino.jstype.ObjectType) functionType68);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry4.createObjectType("", node45, (com.google.javascript.rhino.jstype.ObjectType) functionType68);
        com.google.javascript.rhino.Node node72 = assertionFunctionSpec2.getAssertedParam(node45);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03603");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node15.setString("");
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFromForTree(node15);
        node15.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType26 = jSTypeRegistry23.createFunctionType(jSType24, jSTypeArray25);
        boolean boolean27 = functionType26.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry6.createObjectType("hi!", node15, (com.google.javascript.rhino.jstype.ObjectType) functionType26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node30 = jSTypeRegistry6.createParametersWithVarArgs(jSTypeArray29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        boolean boolean38 = functionType37.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable39 = functionType37.getCtorImplementedInterfaces();
        jSTypeRegistry6.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType46 = jSTypeRegistry43.createFunctionType(jSType44, jSTypeArray45);
        boolean boolean47 = functionType46.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable48 = functionType46.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType49 = functionType46.unboxesTo();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection50 = jSTypeRegistry6.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType46);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType56 = jSTypeRegistry53.createFunctionType(jSType54, jSTypeArray55);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry6.createParametersWithVarArgs(jSTypeArray55);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry2.createUnionType(jSTypeArray55);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative59 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry2.getNativeObjectType(jSTypeNative59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(functionType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable39);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertNotNull(functionType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable48);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNotNull(functionTypeCollection50);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertNotNull(functionType56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSType58);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03604");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType49 = enumElementType48.getConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50, false);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType55 = jSTypeRegistry52.createFunctionType(jSType53, jSTypeArray54);
        boolean boolean56 = functionType55.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable57 = functionType55.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType58 = functionType55.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType.Property property60 = functionType55.getSlot("unknown");
        boolean boolean61 = enumElementType48.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType55);
        boolean boolean62 = enumElementType48.canBeCalled();
        com.google.javascript.rhino.jstype.ObjectType.Property property64 = enumElementType48.getSlot("(function (): {1386872197})");
        com.google.javascript.rhino.jstype.ObjectType.Property property66 = enumElementType48.getSlot("{1452875103}");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertNull(functionType49);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertNotNull(functionType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(property64);
        org.junit.Assert.assertNull(property66);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03605");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNullable();
        int int93 = parameterizedType89.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType.Property property95 = parameterizedType89.getSlot("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = property95.getJSDocInfo();
        com.google.javascript.rhino.jstype.ObjectType.Property property97 = property95.getSymbol();
        com.google.javascript.rhino.JSDocInfo jSDocInfo98 = property97.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType99 = property97.getType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNull(jSDocInfo98);
        org.junit.Assert.assertNotNull(jSType99);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03606");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node8.setString("");
        com.google.javascript.rhino.Node node11 = node4.useSourceInfoIfMissingFromForTree(node8);
        boolean boolean12 = node4.isGetElem();
        int int14 = node4.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isEmpty();
        com.google.javascript.rhino.InputId inputId22 = com.google.javascript.jscomp.NodeUtil.getInputId(node19);
        boolean boolean23 = node15.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node24 = node19.getLastSibling();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node32.setString("");
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean36 = node28.isGetElem();
        com.google.javascript.rhino.Node node37 = node28.cloneNode();
        boolean boolean38 = node37.isExprResult();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((-1), node24, node37, 0, 42);
        com.google.javascript.rhino.Node node42 = node24.removeFirstChild();
        com.google.javascript.rhino.Node node44 = node24.getAncestor(36);
        boolean boolean45 = node24.isEmpty();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable46 = node24.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(ancestorIterable46);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03607");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        boolean boolean10 = functionType5.removeProperty("");
        int int11 = functionType5.getMaxArguments();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType17 = jSTypeRegistry14.createFunctionType(jSType15, jSTypeArray16);
        boolean boolean18 = functionType17.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable19 = functionType17.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType20 = functionType17.unboxesTo();
        boolean boolean22 = functionType17.removeProperty("");
        int int23 = functionType17.getMaxArguments();
        java.lang.String str24 = functionType17.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType30 = jSTypeRegistry27.createFunctionType(jSType28, jSTypeArray29);
        boolean boolean31 = functionType30.isNominalType();
        functionType17.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType30);
        boolean boolean33 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) functionType5, (com.google.javascript.rhino.jstype.JSType) functionType30);
        boolean boolean34 = functionType5.isNullType();
        boolean boolean35 = functionType5.isFunctionPrototypeType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = functionType5.getJSDocInfo();
        functionType5.clearCachedValues();
        com.google.javascript.rhino.jstype.JSType jSType38 = functionType5.autoboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType39 = functionType5.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertNotNull(functionType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable19);
        org.junit.Assert.assertNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(functionType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertNull(jSType38);
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03608");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        boolean boolean46 = enumType45.matchesObjectContext();
        boolean boolean47 = enumType45.hasAnyTemplate();
        com.google.javascript.rhino.jstype.FunctionType functionType48 = enumType45.getOwnerFunction();
        java.util.Set set49 = enumType45.getOwnPropertyNames();
        int int50 = set49.size();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(functionType48);
        org.junit.Assert.assertNotNull(set49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03609");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNullable();
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = parameterizedType89.getOwnPropertyJSDocInfo("Not declared as a type name");
        boolean boolean95 = parameterizedType89.isFunctionPrototypeType();
        boolean boolean96 = parameterizedType89.isUnknownType();
        com.google.javascript.rhino.Node node98 = parameterizedType89.getPropertyNode("STRING hi!");
        boolean boolean99 = parameterizedType89.isNoResolvedType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSDocInfo94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03610");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        boolean boolean25 = functionType22.isStringObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable33 = functionType31.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType31.unboxesTo();
        boolean boolean36 = functionType31.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType37 = functionType31.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType38 = functionType31.dereference();
        com.google.javascript.rhino.jstype.JSType jSType39 = functionType22.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType38);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        boolean boolean46 = functionType45.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        boolean boolean53 = functionType52.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable54 = functionType52.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType55 = functionType52.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType56 = functionType52.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = functionType45.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType52);
        com.google.javascript.rhino.Node node58 = functionType45.getSource();
        boolean boolean60 = functionType45.isPropertyInExterns("(function (): ?|null)");
        boolean boolean61 = jSType39.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) functionType45);
        com.google.javascript.rhino.Node node62 = functionType45.getParametersNode();
        boolean boolean63 = functionType45.isNoResolvedType();
        boolean boolean65 = functionType45.isPropertyTypeInferred("STRING hi!");
        boolean boolean66 = functionType45.isInstanceType();
        int int67 = functionType45.getMinArguments();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType45.getTopMostDefiningType("function (): {1517454195}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03611");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNoResolvedType();
        com.google.javascript.rhino.jstype.JSType jSType93 = parameterizedType89.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType95 = parameterizedType89.getPropertyType("function (): {308555690}");
        boolean boolean96 = parameterizedType89.isInstanceType();
        com.google.javascript.rhino.jstype.JSType jSType97 = parameterizedType89.getParameterType();
        int int98 = parameterizedType89.getPropertiesCount();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03612");
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        boolean boolean15 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "function (): {308555690}");
        boolean boolean16 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "function (): {621165152}");
        boolean boolean17 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "function (): {308555690}");
        boolean boolean18 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "function (): {308555690}");
        boolean boolean19 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "function (): {308555690}");
        boolean boolean20 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "unknown");
        boolean boolean22 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        boolean boolean24 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "PARAM_LIST");
        boolean boolean25 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "function (): {621165152}");
        boolean boolean26 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "JSDocInfo");
        boolean boolean28 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "Not declared as a constructor");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList13.parallelStream();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList34 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList35 = strComparableList34.reverse();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList40 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList45 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean46 = strComparableList40.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList45);
        boolean boolean47 = strComparableList40.isEmpty();
        boolean boolean48 = strComparableList34.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        int int49 = strComparableList40.size();
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;
        int int51 = strComparableList40.indexOf((java.lang.Object) resolveMode50);
        java.util.ListIterator<java.lang.Comparable<java.lang.String>> strComparableItor52 = strComparableList40.listIterator();
        boolean boolean53 = strComparableList13.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        strComparableList13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Comparable<java.lang.String>> strComparableList57 = strComparableList13.subList(10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertNotNull(strComparableList34);
        org.junit.Assert.assertNotNull(strComparableList35);
        org.junit.Assert.assertNotNull(strComparableList40);
        org.junit.Assert.assertNotNull(strComparableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strComparableItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03613");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node9.setString("");
        com.google.javascript.rhino.Node node12 = node5.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean13 = node5.isGetElem();
        com.google.javascript.rhino.Node node14 = node5.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node5);
        boolean boolean16 = node5.isNot();
        com.google.javascript.rhino.Node node17 = node5.cloneNode();
        com.google.javascript.jscomp.CodingConvention.Bind bind18 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node1, node5);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.Bind> bindList19 = com.google.common.collect.ImmutableList.of(bind18);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(bindList19);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03614");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node14.setString("");
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node14);
        boolean boolean18 = node10.isGetElem();
        com.google.javascript.rhino.Node node19 = node10.cloneNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node27.setString("");
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean31 = node23.isGetElem();
        int int33 = node23.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        com.google.javascript.rhino.Node node35 = node10.clonePropsFrom(node23);
        int int36 = node10.getLength();
        jSDocInfo0.setAssociatedNode(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node10.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node10.siblings();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNotNull(nodeIterable39);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03615");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNullable();
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = parameterizedType89.getOwnPropertyJSDocInfo("Not declared as a type name");
        boolean boolean95 = parameterizedType89.isNoResolvedType();
        com.google.javascript.rhino.jstype.UnionType unionType96 = parameterizedType89.toMaybeUnionType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = parameterizedType89.toMaybeEnumElementType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = enumElementType97.isDateType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSDocInfo94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(unionType96);
        org.junit.Assert.assertNull(enumElementType97);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03616");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int4 = node3.getLineno();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "unknown");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType14 = jSTypeRegistry11.createFunctionType(jSType12, jSTypeArray13);
        boolean boolean15 = functionType14.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable16 = functionType14.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType17 = functionType14.unboxesTo();
        boolean boolean19 = functionType14.removeProperty("");
        int int20 = functionType14.getMaxArguments();
        java.lang.String str21 = functionType14.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType27 = jSTypeRegistry24.createFunctionType(jSType25, jSTypeArray26);
        boolean boolean28 = functionType27.isNominalType();
        functionType14.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType27);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry32.createFunctionType(jSType33, jSTypeArray34);
        boolean boolean36 = functionType35.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable37 = functionType35.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType38 = functionType35.unboxesTo();
        boolean boolean40 = functionType35.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType41 = functionType35.getImplicitPrototype();
        functionType14.setPrototypeBasedOn(objectType41);
        boolean boolean44 = jSTypeRegistry8.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType14, "hi!");
        java.lang.Iterable iterable45 = functionType14.getCtorImplementedInterfaces();
        boolean boolean46 = jSTypeExpression6.equals((java.lang.Object) functionType14);
        boolean boolean47 = functionType14.isInstanceType();
        java.util.Set<java.lang.String> strSet48 = functionType14.getOwnPropertyNames();
        int int49 = strSet48.size();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertNotNull(functionType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable16);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertNotNull(functionType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable37);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(iterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03617");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType48 = enumElementType46.getPropertyType("true");
        boolean boolean49 = enumElementType46.canBeCalled();
        boolean boolean50 = enumElementType46.isVoidType();
        com.google.javascript.rhino.jstype.JSType jSType52 = enumElementType46.getPropertyType("PARAM_LIST");
        boolean boolean53 = enumElementType46.isParameterizedType();
        boolean boolean54 = enumElementType46.isEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType61 = jSTypeRegistry58.createFunctionType(jSType59, jSTypeArray60);
        boolean boolean62 = functionType61.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry65.createFunctionType(jSType66, jSTypeArray67);
        boolean boolean69 = functionType68.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable70 = functionType68.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType68.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = functionType61.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType68);
        boolean boolean74 = functionType68.isNumberObjectType();
        boolean boolean75 = functionType68.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType76 = functionType68.getParameterType();
        boolean boolean78 = functionType68.removeProperty("function (): {522475926}");
        com.google.javascript.rhino.jstype.JSType jSType79 = enumElementType46.resolve(errorReporter55, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType68);
        boolean boolean80 = enumElementType46.matchesStringContext();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = enumElementType46.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType82 = enumElementType46.getPrimitiveType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = jSType82.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertNotNull(functionType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable70);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(functionType81);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03618");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable33 = functionType31.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType31.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        functionType31.setJSDocInfo(jSDocInfo35);
        boolean boolean37 = jSDocInfo35.isHidden();
        functionType22.setPropertyJSDocInfo("", jSDocInfo35);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo35.getType();
        boolean boolean40 = jSDocInfo35.hasThisType();
        boolean boolean41 = jSDocInfo35.isNoSideEffects();
        int int42 = jSDocInfo35.getExtendedInterfacesCount();
        boolean boolean43 = jSDocInfo35.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03619");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        boolean boolean10 = functionType5.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType11 = functionType5.getImplicitPrototype();
        com.google.javascript.rhino.jstype.JSType jSType12 = functionType5.getIndexType();
        com.google.javascript.rhino.jstype.ObjectType.Property property14 = functionType5.getSlot("Unknown class name");
        boolean boolean15 = functionType5.hasReferenceName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean27 = node19.isGetElem();
        int int29 = node19.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node38.setString("");
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean42 = node34.isGetElem();
        com.google.javascript.rhino.Node node43 = node34.cloneNode();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node51.setString("");
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean55 = node47.isGetElem();
        int int57 = node47.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        com.google.javascript.rhino.Node node59 = node34.clonePropsFrom(node47);
        boolean boolean60 = node34.isGetElem();
        com.google.javascript.rhino.Node node61 = node30.useSourceInfoFrom(node34);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(40);
        boolean boolean64 = node63.isAdd();
        node61.addChildToFront(node63);
        boolean boolean66 = node61.isNE();
        boolean boolean67 = node61.hasChildren();
        boolean boolean68 = node61.hasChildren();
        functionType5.setSource(node61);
        boolean boolean70 = node61.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03620");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor5 = strComparableList4.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node17.setString("");
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoIfMissingFromForTree(node17);
        node17.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType28 = jSTypeRegistry25.createFunctionType(jSType26, jSTypeArray27);
        boolean boolean29 = functionType28.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry8.createObjectType("hi!", node17, (com.google.javascript.rhino.jstype.ObjectType) functionType28);
        boolean boolean31 = functionType28.isNoObjectType();
        boolean boolean32 = functionType28.isNoObjectType();
        boolean boolean33 = strComparableList4.contains((java.lang.Object) boolean32);
        int int34 = strComparableList4.size();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node42.setString("");
        com.google.javascript.rhino.Node node45 = node38.useSourceInfoIfMissingFromForTree(node42);
        boolean boolean46 = node38.isGetElem();
        int int48 = node38.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node57.setString("");
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean61 = node53.isGetElem();
        com.google.javascript.rhino.Node node62 = node53.cloneNode();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node70.setString("");
        com.google.javascript.rhino.Node node73 = node66.useSourceInfoIfMissingFromForTree(node70);
        boolean boolean74 = node66.isGetElem();
        int int76 = node66.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = com.google.javascript.jscomp.NodeUtil.newExpr(node66);
        com.google.javascript.rhino.Node node78 = node53.clonePropsFrom(node66);
        boolean boolean79 = node53.isGetElem();
        com.google.javascript.rhino.Node node80 = node49.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(40);
        boolean boolean83 = node82.isAdd();
        node80.addChildToFront(node82);
        boolean boolean85 = node80.isVarArgs();
        int int86 = strComparableList4.indexOf((java.lang.Object) boolean85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strComparableList4.add((java.lang.Comparable<java.lang.String>) "function (): {2078692116}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableItor5);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertNotNull(functionType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03621");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        java.lang.String str11 = node3.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo12.setVisibility(visibility14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getEnumParameterType();
        node3.setJSDocInfo(jSDocInfo12);
        jSDocInfo12.setLicense("");
        boolean boolean20 = jSDocInfo12.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo12.getVisibility();
        boolean boolean22 = jSDocInfo12.isNoShadow();
        boolean boolean23 = jSDocInfo12.isDeprecated();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING hi!" + "'", str11, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03622");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        boolean boolean3 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        int int7 = strSet6.size();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node15.setString("");
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean19 = node11.isGetElem();
        int int21 = node11.getIntProp((int) (byte) -1);
        boolean boolean22 = node11.isLabel();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node11, "STRING hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node32.setString("");
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean36 = node28.isGetElem();
        com.google.javascript.rhino.Node node37 = node28.cloneNode();
        boolean boolean38 = node37.isDebugger();
        node11.addChildToFront(node37);
        boolean boolean40 = node37.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((-1), nodeArray42);
        int int44 = node43.getSourceOffset();
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType52 = functionType50.getParameterType();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node60.setString("");
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean64 = node56.isGetElem();
        com.google.javascript.rhino.Node node65 = node56.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node56);
        boolean boolean67 = node56.isNot();
        functionType50.setSource(node56);
        boolean boolean69 = node43.isEquivalentToTyped(node56);
        com.google.javascript.rhino.Node node70 = node37.useSourceInfoFromForTree(node43);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry73.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76, false);
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray80 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry78.createFunctionType(jSType79, jSTypeArray80);
        boolean boolean82 = functionType81.isNominalType();
        boolean boolean83 = jSTypeRegistry73.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType81);
        java.util.Set<java.lang.String> strSet84 = functionType81.getPropertyNames();
        node37.setDirectives(strSet84);
        int int86 = node37.getSideEffectFlags();
        boolean boolean87 = strSet6.contains((java.lang.Object) node37);
        boolean boolean88 = node37.isIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(jSTypeArray80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isDefine();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        boolean boolean12 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03624");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03625");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("hi!");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node10.setString("");
        com.google.javascript.rhino.Node node13 = node6.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean14 = node6.isGetElem();
        com.google.javascript.rhino.Node node15 = node6.cloneNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean27 = node19.isGetElem();
        int int29 = node19.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        com.google.javascript.rhino.Node node31 = node6.clonePropsFrom(node19);
        boolean boolean32 = node6.isGetElem();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType41 = jSTypeRegistry38.createFunctionType(jSType39, jSTypeArray40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = functionType41.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry35.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType41);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable52 = functionType50.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType53 = functionType50.unboxesTo();
        boolean boolean55 = functionType50.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType56 = functionType50.getImplicitPrototype();
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry35.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType56, "unknown");
        com.google.javascript.rhino.jstype.JSType jSType59 = assertionFunctionSpec1.getAssertedType(node6, jSTypeRegistry35);
        boolean boolean61 = jSTypeRegistry35.hasNamespace("function (): {308555690}");
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry65.createFunctionType(jSType66, jSTypeArray67);
        boolean boolean69 = functionType68.isUnionType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable70 = functionType68.getAllImplementedInterfaces();
        boolean boolean71 = jSTypeRegistry35.declareType("function (): {522475926}", (com.google.javascript.rhino.jstype.JSType) functionType68);
        boolean boolean72 = functionType68.isInterface();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertNotNull(functionType41);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03626");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType42 = jSTypeRegistry39.createFunctionType(jSType40, jSTypeArray41);
        boolean boolean43 = functionType42.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable44 = functionType42.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType45 = functionType42.unboxesTo();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection46 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType42);
        boolean boolean48 = functionType42.removeProperty("([, hi!, STRING hi!, STRING hi!])");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable49 = functionType42.getCtorImplementedInterfaces();
        boolean boolean50 = functionType42.isReturnTypeInferred();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertNotNull(functionType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(functionTypeCollection46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03627");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType48 = enumElementType46.autoboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49, false);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType54 = jSTypeRegistry51.createFunctionType(jSType52, jSTypeArray53);
        boolean boolean55 = functionType54.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList60 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor61 = strComparableList60.iterator();
        boolean boolean62 = functionType54.equals((java.lang.Object) strComparableItor61);
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64, false);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry66.createFunctionType(jSType67, jSTypeArray68);
        boolean boolean70 = functionType69.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType69.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node72 = null;
        boolean boolean73 = functionType54.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType69, node72);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot75 = functionType69.getOwnSlot("true");
        boolean boolean76 = enumElementType46.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType69);
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertNotNull(functionType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strComparableList60);
        org.junit.Assert.assertNotNull(strComparableItor61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(jSTypeStaticSlot75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03628");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList56 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableList56.iterator();
        boolean boolean58 = functionType50.equals((java.lang.Object) strComparableItor57);
        boolean boolean59 = functionType50.isArrayType();
        boolean boolean60 = functionType50.isInterface();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType50.getAllImplementedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry64.createAnonymousObjectType();
        boolean boolean66 = objectType65.isNominalType();
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry2.createFunctionTypeWithNewReturnType(functionType50, (com.google.javascript.rhino.jstype.JSType) objectType65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = functionType50.getJSDocInfo();
        boolean boolean70 = functionType50.isPropertyTypeInferred("{proxy:function (): {65551848}}");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableList56);
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03629");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType.Property property10 = functionType5.getSlot("unknown");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = functionType5.getParameters();
        java.lang.Iterable iterable12 = functionType5.getCtorExtendedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry15.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        boolean boolean25 = jSTypeRegistry15.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node34.setString("");
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean38 = node30.isGetElem();
        com.google.javascript.rhino.Node node39 = node30.cloneNode();
        boolean boolean40 = node39.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node39.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = functionType50.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry44.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = functionType50.getJSDocInfo();
        boolean boolean56 = functionType50.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType57 = jSTypeRegistry15.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node39, (com.google.javascript.rhino.jstype.JSType) functionType50);
        com.google.javascript.rhino.jstype.EnumType enumType58 = enumType57.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType59 = enumType58.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType61 = enumElementType59.getPropertyType("true");
        boolean boolean62 = enumElementType59.canBeCalled();
        boolean boolean63 = enumElementType59.isVoidType();
        boolean boolean64 = enumElementType59.matchesObjectContext();
        boolean boolean65 = functionType5.isSubtype((com.google.javascript.rhino.jstype.JSType) enumElementType59);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(property10);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(iterable12);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(enumType57);
        org.junit.Assert.assertNotNull(enumType58);
        org.junit.Assert.assertNotNull(enumElementType59);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03630");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node20.setString("");
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean24 = node16.isGetElem();
        int int26 = node16.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node28 = node3.clonePropsFrom(node16);
        boolean boolean29 = node28.isNot();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node28.siblings();
        boolean boolean31 = node28.isOr();
        boolean boolean32 = node28.isFromExterns();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node28.siblings();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags34.setThrows();
        int int36 = sideEffectFlags34.valueOf();
        sideEffectFlags34.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags40 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags40.setThrows();
        int int42 = sideEffectFlags40.valueOf();
        int int43 = sideEffectFlags40.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags45 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags45.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags(15);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags50 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
        sideEffectFlags50.setThrows();
        sideEffectFlags50.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags54 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) -1);
        sideEffectFlags54.setMutatesGlobalState();
        int int56 = sideEffectFlags54.valueOf();
        int int57 = sideEffectFlags54.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags58 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags58.setAllFlags();
        sideEffectFlags58.setMutatesGlobalState();
        sideEffectFlags58.clearAllFlags();
        boolean boolean62 = sideEffectFlags58.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags63 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags63.clearAllFlags();
        sideEffectFlags63.setMutatesThis();
        sideEffectFlags63.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags68 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
        sideEffectFlags68.setMutatesArguments();
        sideEffectFlags68.clearSideEffectFlags();
        sideEffectFlags68.setMutatesArguments();
        sideEffectFlags68.setMutatesThis();
        sideEffectFlags68.setMutatesArguments();
        sideEffectFlags68.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags75 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean76 = sideEffectFlags75.areAllFlagsSet();
        boolean boolean77 = sideEffectFlags75.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags79 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) -1);
        sideEffectFlags79.setMutatesGlobalState();
        int int81 = sideEffectFlags79.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags83 = new com.google.javascript.rhino.Node.SideEffectFlags(3);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags85 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) -1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags87 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) -1);
        sideEffectFlags87.setMutatesGlobalState();
        int int89 = sideEffectFlags87.valueOf();
        sideEffectFlags87.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags92 = new com.google.javascript.rhino.Node.SideEffectFlags(14);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray93 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags83, sideEffectFlags85, sideEffectFlags87, sideEffectFlags92 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList94 = com.google.common.collect.ImmutableList.copyOf(sideEffectFlagsArray93);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList95 = com.google.common.collect.ImmutableList.copyOf(sideEffectFlagsArray93);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList96 = com.google.common.collect.ImmutableList.of(sideEffectFlags34, sideEffectFlags39, sideEffectFlags40, sideEffectFlags45, sideEffectFlags48, sideEffectFlags50, sideEffectFlags54, sideEffectFlags58, sideEffectFlags63, sideEffectFlags68, sideEffectFlags75, sideEffectFlags79, sideEffectFlagsArray93);
        // The following exception was thrown during execution in test generation
        try {
            node28.setSideEffectFlags(sideEffectFlags79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-8) + "'", int56 == (-8));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-8) + "'", int57 == (-8));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-8) + "'", int81 == (-8));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-8) + "'", int89 == (-8));
        org.junit.Assert.assertNotNull(sideEffectFlagsArray93);
        org.junit.Assert.assertNotNull(sideEffectFlagsList94);
        org.junit.Assert.assertNotNull(sideEffectFlagsList95);
        org.junit.Assert.assertNotNull(sideEffectFlagsList96);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03631");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        boolean boolean7 = functionType5.isInterface();
        com.google.javascript.rhino.jstype.ObjectType.Property property9 = functionType5.getSlot("unknown");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable10 = functionType5.getExtendedInterfaces();
        java.lang.String str11 = functionType5.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = functionType5.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(property9);
        org.junit.Assert.assertNotNull(objectTypeIterable10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "function (): ?" + "'", str11, "function (): ?");
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03632");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        node23.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType34 = jSTypeRegistry31.createFunctionType(jSType32, jSTypeArray33);
        boolean boolean35 = functionType34.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry14.createObjectType("hi!", node23, (com.google.javascript.rhino.jstype.ObjectType) functionType34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node38 = jSTypeRegistry14.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        boolean boolean46 = functionType45.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        boolean boolean53 = functionType52.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable54 = functionType52.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType55 = functionType52.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType56 = functionType52.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = functionType45.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType52);
        boolean boolean58 = functionType52.isNumberObjectType();
        jSTypeRegistry2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType52);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative61 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry2.getNativeObjectType(jSTypeNative61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertNotNull(functionType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03633");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasReturnType();
        boolean boolean2 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        boolean boolean15 = node7.isGetElem();
        com.google.javascript.rhino.Node node16 = node7.cloneNode();
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node16.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo19.hasParameterType("[, hi!, STRING hi!, STRING hi!]");
        node16.setJSDocInfo(jSDocInfo19);
        boolean boolean23 = jSDocInfo19.isNoShadow();
        java.lang.String str24 = jSDocInfo19.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getType();
        boolean boolean26 = strSet3.remove((java.lang.Object) jSDocInfo19);
        boolean boolean28 = jSDocInfo19.hasParameter("{proxy:function (): {922945060}}");
        boolean boolean29 = jSDocInfo19.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03634");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType9 = jSTypeRegistry6.createFunctionType(jSType7, jSTypeArray8);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType16 = jSTypeRegistry13.createFunctionType(jSType14, jSTypeArray15);
        boolean boolean17 = functionType16.isUnionType();
        int int18 = functionType16.getMinArguments();
        jSTypeRegistry6.unregisterPropertyOnType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", (com.google.javascript.rhino.jstype.JSType) functionType16);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType25 = jSTypeRegistry22.createFunctionType(jSType23, jSTypeArray24);
        boolean boolean26 = functionType25.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable27 = functionType25.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType28 = functionType25.unboxesTo();
        boolean boolean30 = functionType25.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = functionType25.getImplicitPrototype();
        boolean boolean32 = functionType16.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        boolean boolean34 = jSTypeRegistry2.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType31, objectType33);
        com.google.javascript.rhino.jstype.JSType jSType35 = objectType31.autoboxesTo();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertNotNull(functionType9);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(functionType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertNotNull(functionType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(jSType35);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03635");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType11 = jSTypeRegistry8.createFunctionType(jSType9, jSTypeArray10);
        boolean boolean12 = functionType11.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType18 = jSTypeRegistry15.createFunctionType(jSType16, jSTypeArray17);
        boolean boolean19 = functionType18.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable20 = functionType18.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType21 = functionType18.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType22 = functionType18.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = functionType11.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType18);
        boolean boolean24 = functionType18.isObject();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType30 = jSTypeRegistry27.createFunctionType(jSType28, jSTypeArray29);
        boolean boolean31 = functionType30.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        boolean boolean38 = functionType37.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable39 = functionType37.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType40 = functionType37.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType41 = functionType37.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = functionType30.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.Node node43 = functionType30.getSource();
        com.google.javascript.rhino.jstype.JSType jSType45 = functionType30.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSTypeRegistry48.createFunctionType(jSType49, jSTypeArray50);
        boolean boolean52 = functionType51.isNominalType();
        int int53 = functionType51.getPropertiesCount();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList65 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor66 = strComparableList65.iterator();
        boolean boolean67 = functionType59.equals((java.lang.Object) strComparableItor66);
        com.google.javascript.rhino.Node node68 = functionType59.getSource();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.FunctionType> functionTypeList69 = com.google.common.collect.ImmutableList.of(functionType5, functionType18, functionType30, functionType51, functionType59);
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70, false);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry72.createFunctionType(jSType73, jSTypeArray74);
        boolean boolean76 = functionType75.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType75.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean80 = functionType59.hasEqualCallType(functionType75);
        com.google.javascript.rhino.jstype.FunctionType functionType81 = functionType75.getOwnerFunction();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertNotNull(functionType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertNotNull(functionType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable20);
        org.junit.Assert.assertNull(jSType21);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(functionType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(functionType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strComparableList65);
        org.junit.Assert.assertNotNull(strComparableItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(functionTypeList69);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(functionType81);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03636");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType20 = jSTypeRegistry17.createFunctionType(jSType18, jSTypeArray19);
        boolean boolean21 = functionType20.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable22 = functionType20.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = functionType5.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType20, node23);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot26 = functionType20.getOwnSlot("true");
        boolean boolean27 = functionType20.matchesObjectContext();
        com.google.javascript.rhino.jstype.ObjectType objectType28 = functionType20.getTypeOfThis();
        boolean boolean29 = functionType20.isEnumType();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertNotNull(functionType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(jSTypeStaticSlot26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03637");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType12 = jSTypeRegistry9.createFunctionType(jSType10, jSTypeArray11);
        boolean boolean13 = functionType12.isUnionType();
        int int14 = functionType12.getMinArguments();
        jSTypeRegistry2.unregisterPropertyOnType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", (com.google.javascript.rhino.jstype.JSType) functionType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("Unknown class name");
        jSTypeRegistry2.clearTemplateTypeNames();
        boolean boolean19 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType21 = jSTypeRegistry2.getNativeFunctionType(jSTypeNative20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertNotNull(functionType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03638");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        boolean boolean37 = functionType33.matchesStringContext();
        boolean boolean38 = functionType33.canBeCalled();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node46.setString("");
        com.google.javascript.rhino.Node node49 = node42.useSourceInfoIfMissingFromForTree(node46);
        java.lang.String str50 = node42.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo51.setVisibility(visibility53);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo51.getEnumParameterType();
        node42.setJSDocInfo(jSDocInfo51);
        functionType33.setJSDocInfo(jSDocInfo51);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList62 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor63 = strComparableList62.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList64 = strComparableList62.reverse();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList65 = strComparableList64.reverse();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean67 = strComparableList64.contains((java.lang.Object) visibility66);
        jSDocInfo51.setVisibility(visibility66);
        boolean boolean69 = jSDocInfo51.isConstructor();
        int int70 = jSDocInfo51.getExtendedInterfacesCount();
        boolean boolean71 = jSDocInfo51.isDefine();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING hi!" + "'", str50, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertNotNull(strComparableList62);
        org.junit.Assert.assertNotNull(strComparableItor63);
        org.junit.Assert.assertNotNull(strComparableList64);
        org.junit.Assert.assertNotNull(strComparableList65);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03639");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 1, 8, (int) (byte) -1);
        boolean boolean4 = node3.isSetterDef();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03640");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int4 = node3.getLineno();
        boolean boolean5 = node3.isEmpty();
        boolean boolean6 = node3.isLocalResultCall();
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative10 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec11 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative10);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node19.setString("");
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node30.setString("");
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node30);
        node30.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node43.setString("");
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean47 = node39.isGetElem();
        int int49 = node39.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node39);
        com.google.javascript.rhino.Node node51 = node30.srcrefTree(node50);
        java.lang.String str52 = node22.checkTreeEquals(node50);
        boolean boolean53 = node50.hasMoreThanOneChild();
        boolean boolean54 = node50.isNE();
        com.google.javascript.rhino.Node node55 = assertionFunctionSpec11.getAssertedParam(node50);
        boolean boolean56 = node55.isOnlyModifiesThisCall();
        boolean boolean57 = node55.isScript();
        com.google.javascript.rhino.Node node58 = node3.srcrefTree(node55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo59.setVisibility(visibility61);
        boolean boolean63 = jSDocInfo59.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo59.getTypedefType();
        int int65 = jSDocInfo59.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo59.getReturnType();
        node3.setJSDocInfo(jSDocInfo59);
        boolean boolean68 = jSDocInfo59.isImplicitCast();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str52, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03641");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "hi!");
        boolean boolean3 = node2.isIn();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        boolean boolean15 = node7.isGetElem();
        com.google.javascript.rhino.Node node16 = node7.cloneNode();
        boolean boolean17 = node16.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node16.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node16.getChildAtIndex((int) (short) -1);
        node16.setSourceEncodedPositionForTree((int) (short) 0);
        boolean boolean23 = node2.isEquivalentTo(node16);
        com.google.javascript.rhino.InputId inputId24 = node2.getInputId();
        boolean boolean25 = node2.isNull();
        boolean boolean27 = node2.getBooleanProp(49);
        java.util.Set<java.lang.String> strSet28 = node2.getDirectives();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03642");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        boolean boolean12 = node3.isFromExterns();
        node3.putIntProp((int) (byte) 100, 4);
        int int16 = node3.getLineno();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node3.new FileLevelJsDocBuilder();
        int int19 = node3.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03643");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int4 = node3.getLineno();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "unknown");
        boolean boolean7 = node3.isObjectLit();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType18 = jSTypeRegistry15.createFunctionType(jSType16, jSTypeArray17);
        boolean boolean19 = functionType18.isNominalType();
        boolean boolean20 = jSTypeRegistry10.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node29.setString("");
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean33 = node25.isGetElem();
        com.google.javascript.rhino.Node node34 = node25.cloneNode();
        boolean boolean35 = node34.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node34.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = functionType45.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry39.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = functionType45.getJSDocInfo();
        boolean boolean51 = functionType45.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType52 = jSTypeRegistry10.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node34, (com.google.javascript.rhino.jstype.JSType) functionType45);
        com.google.javascript.rhino.jstype.EnumType enumType53 = enumType52.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType54 = enumType53.getElementsType();
        boolean boolean56 = enumType53.hasProperty("[, hi!, STRING hi!, STRING hi!]");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType57 = enumType53.getElementsType();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType63 = jSTypeRegistry60.createFunctionType(jSType61, jSTypeArray62);
        boolean boolean64 = functionType63.isNominalType();
        boolean boolean65 = functionType63.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = functionType63.getJSDocInfo();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isNominalType();
        boolean boolean75 = functionType73.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.JSType jSType76 = functionType63.forceResolve(errorReporter67, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = enumType53.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType73);
        boolean boolean78 = enumType53.hasReferenceName();
        boolean boolean79 = enumType53.matchesStringContext();
        java.util.Set set80 = enumType53.getOwnPropertyNames();
        node3.setDirectives((java.util.Set<java.lang.String>) set80);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertNotNull(functionType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(enumType52);
        org.junit.Assert.assertNotNull(enumType53);
        org.junit.Assert.assertNotNull(enumElementType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(enumElementType57);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertNotNull(functionType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo66);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(set80);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03644");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        com.google.javascript.rhino.jstype.ObjectType objectType47 = enumElementType46.getImplicitPrototype();
        com.google.javascript.rhino.jstype.FunctionType functionType48 = enumElementType46.getConstructor();
        boolean boolean49 = enumElementType46.matchesNumberContext();
        boolean boolean51 = enumElementType46.isPropertyInExterns("function (): {1006571299}");
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType57 = jSTypeRegistry54.createFunctionType(jSType55, jSTypeArray56);
        boolean boolean58 = functionType57.isUnionType();
        boolean boolean59 = functionType57.isDateType();
        boolean boolean60 = functionType57.isResolved();
        com.google.javascript.rhino.Node node62 = functionType57.getPropertyNode("[, hi!, STRING hi!, STRING hi!]");
        boolean boolean63 = enumElementType46.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType57);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = enumElementType46.testForEquality(jSType64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertNull(objectType47);
        org.junit.Assert.assertNull(functionType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertNotNull(functionType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03645");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("InputId: hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03646");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node20.setString("");
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean24 = node16.isGetElem();
        int int26 = node16.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node28 = node3.clonePropsFrom(node16);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry31.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType39 = jSTypeRegistry36.createFunctionType(jSType37, jSTypeArray38);
        boolean boolean40 = functionType39.isNominalType();
        boolean boolean41 = jSTypeRegistry31.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node50.setString("");
        com.google.javascript.rhino.Node node53 = node46.useSourceInfoIfMissingFromForTree(node50);
        boolean boolean54 = node46.isGetElem();
        com.google.javascript.rhino.Node node55 = node46.cloneNode();
        boolean boolean56 = node55.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node55.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61, false);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry63.createFunctionType(jSType64, jSTypeArray65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = functionType66.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry60.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = functionType66.getJSDocInfo();
        boolean boolean72 = functionType66.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType73 = jSTypeRegistry31.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node55, (com.google.javascript.rhino.jstype.JSType) functionType66);
        com.google.javascript.rhino.Node node74 = enumType73.getSource();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = node74.getJSDocInfo();
        com.google.javascript.rhino.Node node76 = node28.useSourceInfoFrom(node74);
        int int77 = node74.getSourceOffset();
        node74.setCharno(52);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertNotNull(functionType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(enumType73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(jSDocInfo75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03647");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        boolean boolean46 = enumType45.matchesStringContext();
        boolean boolean48 = enumType45.hasProperty("");
        boolean boolean50 = enumType45.hasProperty("Not declared as a constructor");
        com.google.javascript.rhino.jstype.ObjectType objectType51 = enumType45.getImplicitPrototype();
        java.lang.Iterable iterable52 = enumType45.getCtorImplementedInterfaces();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(iterable52);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03648");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList9 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean10 = strComparableList4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType16 = jSTypeRegistry13.createFunctionType(jSType14, jSTypeArray15);
        boolean boolean17 = functionType16.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable25 = functionType23.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType26 = functionType23.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType27 = functionType23.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = functionType16.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType23);
        com.google.javascript.rhino.Node node29 = functionType16.getSource();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry32.createFunctionType(jSType33, jSTypeArray34);
        boolean boolean36 = functionType35.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList41 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor42 = strComparableList41.iterator();
        boolean boolean43 = functionType35.equals((java.lang.Object) strComparableItor42);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable52 = functionType50.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = functionType35.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType50, node53);
        boolean boolean56 = functionType50.removeProperty("Not declared as a type name");
        boolean boolean57 = functionType16.hasEqualCallType(functionType50);
        boolean boolean58 = strComparableList9.equals((java.lang.Object) functionType16);
        boolean boolean59 = functionType16.isNativeObjectType();
        com.google.javascript.rhino.jstype.JSType jSType60 = functionType16.collapseUnion();
        boolean boolean61 = functionType16.hasReferenceName();
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(functionType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableList41);
        org.junit.Assert.assertNotNull(strComparableItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03649");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isNominalType();
        boolean boolean91 = parameterizedType89.isUnknownType();
        boolean boolean92 = parameterizedType89.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = parameterizedType89.getConstructor();
        boolean boolean94 = parameterizedType89.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType95 = parameterizedType89.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.EnumType enumType96 = parameterizedType89.toMaybeEnumType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(enumElementType95);
        org.junit.Assert.assertNull(enumType96);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03650");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node8.setString("");
        com.google.javascript.rhino.Node node11 = node4.useSourceInfoIfMissingFromForTree(node8);
        boolean boolean12 = node4.isGetElem();
        int int14 = node4.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean27 = node19.isGetElem();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node36.setString("");
        com.google.javascript.rhino.Node node39 = node32.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean40 = node32.isGetElem();
        int int42 = node32.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        com.google.javascript.rhino.Node node44 = node19.clonePropsFrom(node32);
        boolean boolean45 = node19.isGetElem();
        com.google.javascript.rhino.Node node46 = node15.useSourceInfoFrom(node19);
        com.google.javascript.rhino.Node node47 = node46.removeFirstChild();
        boolean boolean48 = node46.isCase();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(51, node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo50.setVisibility(visibility52);
        java.lang.String str54 = jSDocInfo50.getLicense();
        jSDocInfo50.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection57 = jSDocInfo50.getMarkers();
        java.lang.String str58 = jSDocInfo50.getDescription();
        node49.setJSDocInfo(jSDocInfo50);
        boolean boolean60 = node49.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(markerCollection57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03651");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        boolean boolean10 = functionType5.removeProperty("");
        int int11 = functionType5.getMaxArguments();
        java.lang.String str12 = functionType5.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType18 = jSTypeRegistry15.createFunctionType(jSType16, jSTypeArray17);
        boolean boolean19 = functionType18.isNominalType();
        functionType5.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType18);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType26 = jSTypeRegistry23.createFunctionType(jSType24, jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType32 = jSTypeRegistry29.createFunctionType(jSType30, jSTypeArray31);
        boolean boolean33 = functionType32.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType39 = jSTypeRegistry36.createFunctionType(jSType37, jSTypeArray38);
        boolean boolean40 = functionType39.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable41 = functionType39.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType42 = functionType39.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType43 = functionType39.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = functionType32.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType39);
        boolean boolean45 = functionType39.isObject();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSTypeRegistry48.createFunctionType(jSType49, jSTypeArray50);
        boolean boolean52 = functionType51.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry55.createFunctionType(jSType56, jSTypeArray57);
        boolean boolean59 = functionType58.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable60 = functionType58.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType61 = functionType58.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType62 = functionType58.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = functionType51.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType58);
        com.google.javascript.rhino.Node node64 = functionType51.getSource();
        com.google.javascript.rhino.jstype.JSType jSType66 = functionType51.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67, false);
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry69.createFunctionType(jSType70, jSTypeArray71);
        boolean boolean73 = functionType72.isNominalType();
        int int74 = functionType72.getPropertiesCount();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList86 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor87 = strComparableList86.iterator();
        boolean boolean88 = functionType80.equals((java.lang.Object) strComparableItor87);
        com.google.javascript.rhino.Node node89 = functionType80.getSource();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.FunctionType> functionTypeList90 = com.google.common.collect.ImmutableList.of(functionType26, functionType39, functionType51, functionType72, functionType80);
        boolean boolean91 = functionType5.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType) functionType39);
        boolean boolean93 = functionType5.removeProperty("function (): {704344377}");
        java.util.Set<java.lang.String> strSet94 = functionType5.getOwnPropertyNames();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertNotNull(functionType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(functionType26);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertNotNull(functionType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertNotNull(functionType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(functionType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strComparableList86);
        org.junit.Assert.assertNotNull(strComparableItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNotNull(functionTypeList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03652");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType49 = enumElementType48.getConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50, false);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType55 = jSTypeRegistry52.createFunctionType(jSType53, jSTypeArray54);
        boolean boolean56 = functionType55.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable57 = functionType55.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType58 = functionType55.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType.Property property60 = functionType55.getSlot("unknown");
        boolean boolean61 = enumElementType48.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType55);
        com.google.javascript.rhino.jstype.FunctionType functionType62 = enumElementType48.getConstructor();
        boolean boolean64 = enumElementType48.isPropertyTypeInferred("STRING \n");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertNull(functionType49);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertNotNull(functionType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03653");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean48 = enumType45.hasProperty("[, hi!, STRING hi!, STRING hi!]");
        int int49 = enumType45.getPropertiesCount();
        boolean boolean50 = enumType45.matchesStringContext();
        boolean boolean51 = enumType45.matchesStringContext();
        java.lang.Iterable iterable52 = enumType45.getCtorImplementedInterfaces();
        boolean boolean53 = enumType45.canBeCalled();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(iterable52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03654");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType19 = jSTypeRegistry16.createFunctionType(jSType17, jSTypeArray18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = functionType19.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = functionType5.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) functionType19);
        boolean boolean23 = functionType5.isVoidType();
        boolean boolean24 = functionType5.isUnionType();
        boolean boolean25 = functionType5.isNoObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType26 = functionType5.toMaybeFunctionType();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertNotNull(functionType19);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(functionType26);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03655");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        boolean boolean14 = functionType5.isArrayType();
        boolean boolean15 = functionType5.isInterface();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable16 = functionType5.getAllImplementedInterfaces();
        boolean boolean17 = functionType5.isRegexpType();
        com.google.javascript.rhino.jstype.JSType jSType18 = functionType5.getIndexType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType25 = jSTypeRegistry22.createFunctionType(jSType23, jSTypeArray24);
        boolean boolean26 = functionType25.isNominalType();
        boolean boolean27 = functionType25.isInterface();
        com.google.javascript.rhino.jstype.ObjectType.Property property29 = functionType25.getSlot("unknown");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable30 = functionType25.getExtendedInterfaces();
        boolean boolean31 = functionType25.hasCachedValues();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node39.setString("");
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean43 = node35.isGetElem();
        boolean boolean44 = node35.isFromExterns();
        boolean boolean45 = node35.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder46 = node35.new FileLevelJsDocBuilder();
        boolean boolean47 = node35.isDec();
        node35.setLineno(1);
        boolean boolean50 = functionType5.defineSynthesizedProperty("java.io.IOException: function (): {672212780}", (com.google.javascript.rhino.jstype.JSType) functionType25, node35);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertNotNull(functionType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(property29);
        org.junit.Assert.assertNotNull(objectTypeIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03656");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node8.setString("");
        com.google.javascript.rhino.Node node11 = node4.useSourceInfoIfMissingFromForTree(node8);
        boolean boolean12 = node4.isGetElem();
        int int14 = node4.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean27 = node19.isGetElem();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node36.setString("");
        com.google.javascript.rhino.Node node39 = node32.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean40 = node32.isGetElem();
        int int42 = node32.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        com.google.javascript.rhino.Node node44 = node19.clonePropsFrom(node32);
        boolean boolean45 = node19.isGetElem();
        com.google.javascript.rhino.Node node46 = node15.useSourceInfoFrom(node19);
        com.google.javascript.rhino.Node node47 = node46.removeFirstChild();
        boolean boolean48 = node46.isFalse();
        boolean boolean49 = node46.isNot();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node58.setString("");
        com.google.javascript.rhino.Node node61 = node54.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean62 = node54.isGetElem();
        com.google.javascript.rhino.Node node63 = node54.cloneNode();
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node63.cloneTree();
        boolean boolean66 = node63.isLocalResultCall();
        typePosition50.setItem(node63);
        node63.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 10, node46, node63);
        boolean boolean71 = node46.isNot();
        boolean boolean72 = node46.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03657");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNoResolvedType();
        com.google.javascript.rhino.jstype.JSType jSType93 = parameterizedType89.collapseUnion();
        java.util.Set set94 = parameterizedType89.getOwnPropertyNames();
        java.lang.Object[] objArray95 = set94.toArray();
        java.util.Iterator<java.lang.String> strItor96 = set94.iterator();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jSType93);
        org.junit.Assert.assertNotNull(set94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]");
        org.junit.Assert.assertNotNull(strItor96);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03658");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03659");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isNominalType();
        boolean boolean92 = parameterizedType89.hasProperty("function (): {1386872197}");
        com.google.javascript.rhino.jstype.ObjectType objectType93 = parameterizedType89.getTypeOfThis();
        boolean boolean94 = parameterizedType89.isOrdinaryFunction();
        java.lang.String str95 = parameterizedType89.getReferenceName();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = parameterizedType89.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType98 = parameterizedType89.getPropertyType("function (): {957460694}");
        boolean boolean99 = jSType98.isUnknownType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(enumElementType96);
        org.junit.Assert.assertNotNull(jSType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03660");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType30 = jSTypeRegistry27.createFunctionType(jSType28, jSTypeArray29);
        boolean boolean31 = functionType30.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList36 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableList36.iterator();
        boolean boolean38 = functionType30.equals((java.lang.Object) strComparableItor37);
        com.google.javascript.rhino.Node node39 = functionType30.getSource();
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) functionType30, "hi!");
        com.google.javascript.rhino.jstype.JSType jSType43 = functionType30.findPropertyType("{proxy:function (): {145792501}}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = jSType43.isArrayType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(functionType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableList36);
        org.junit.Assert.assertNotNull(strComparableItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertNull(jSType43);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03661");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.Node node6 = functionType5.getRootNode();
        boolean boolean7 = functionType5.isConstructor();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = functionType5.getConstructor();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(functionType8);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03662");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1, false);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node12.setString("");
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node12);
        node12.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry3.createObjectType("hi!", node12, (com.google.javascript.rhino.jstype.ObjectType) functionType23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node33.setString("");
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean37 = node29.isGetElem();
        com.google.javascript.rhino.Node node38 = node29.cloneNode();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node46.setString("");
        com.google.javascript.rhino.Node node49 = node42.useSourceInfoIfMissingFromForTree(node46);
        boolean boolean50 = node42.isGetElem();
        int int52 = node42.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        com.google.javascript.rhino.Node node54 = node29.clonePropsFrom(node42);
        boolean boolean55 = node54.isNot();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node54.siblings();
        boolean boolean57 = node54.isOr();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship58 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node12, node54);
        boolean boolean59 = node12.isGetterDef();
        com.google.javascript.rhino.Node node60 = node12.cloneTree();
        boolean boolean61 = node12.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node62 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03663");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean48 = enumType45.hasProperty("[, hi!, STRING hi!, STRING hi!]");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType49 = enumType45.getElementsType();
        boolean boolean50 = enumElementType49.canBeCalled();
        com.google.javascript.rhino.jstype.FunctionType functionType51 = enumElementType49.getConstructor();
        com.google.javascript.rhino.jstype.ObjectType.Property property53 = enumElementType49.getSlot("(function (): {672212780})");
        boolean boolean54 = enumElementType49.hasReferenceName();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(enumElementType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(functionType51);
        org.junit.Assert.assertNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03664");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable12 = functionType8.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType13 = functionType8.toMaybeEnumType();
        boolean boolean14 = functionType8.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType16 = functionType8.findPropertyType("{proxy:function (): {472163924}}");
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(objectTypeIterable12);
        org.junit.Assert.assertNull(enumType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSType16);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03665");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int4 = node3.getLineno();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "unknown");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression6);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression7);
        com.google.javascript.rhino.Node node9 = jSTypeExpression8.getRoot();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int12 = stringPosition11.getPositionOnStartLine();
        int int13 = stringPosition11.getPositionOnEndLine();
        int int14 = stringPosition11.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition15.setItem("Not declared as a type name");
        java.lang.String str18 = stringPosition15.getItem();
        int int19 = stringPosition15.getEndLine();
        int int20 = stringPosition15.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int22 = stringPosition21.getPositionOnStartLine();
        stringPosition21.setItem("function (): {998360770}");
        int int25 = stringPosition21.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList26 = com.google.common.collect.ImmutableList.of(stringPosition10, stringPosition11, stringPosition15, stringPosition21);
        boolean boolean27 = jSTypeExpression8.equals((java.lang.Object) stringPosition21);
        com.google.javascript.rhino.Node node28 = jSTypeExpression8.getRoot();
        boolean boolean29 = jSTypeExpression8.isOptionalArg();
        boolean boolean30 = jSTypeExpression8.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Not declared as a type name" + "'", str18, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(stringPositionList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03666");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType12 = jSTypeRegistry9.createFunctionType(jSType10, jSTypeArray11);
        boolean boolean13 = functionType12.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable14 = functionType12.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType15 = functionType12.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType16 = functionType12.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = functionType5.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType12);
        boolean boolean18 = functionType5.isConstructor();
        boolean boolean19 = functionType5.isNativeObjectType();
        boolean boolean20 = functionType5.isDateType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType26 = jSTypeRegistry23.createFunctionType(jSType24, jSTypeArray25);
        boolean boolean27 = functionType26.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList32 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableList32.iterator();
        boolean boolean34 = functionType26.equals((java.lang.Object) strComparableItor33);
        boolean boolean35 = functionType26.isArrayType();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType41 = jSTypeRegistry38.createFunctionType(jSType39, jSTypeArray40);
        boolean boolean42 = functionType41.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable43 = functionType41.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType44 = functionType41.unboxesTo();
        boolean boolean46 = functionType41.removeProperty("");
        boolean boolean48 = functionType41.isPropertyTypeDeclared("Not declared as a type name");
        functionType26.matchConstraint((com.google.javascript.rhino.jstype.ObjectType) functionType41);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50, false);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType55 = jSTypeRegistry52.createFunctionType(jSType53, jSTypeArray54);
        boolean boolean56 = functionType55.isNominalType();
        boolean boolean57 = functionType55.isInterface();
        boolean boolean58 = functionType26.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType55);
        functionType5.matchConstraint((com.google.javascript.rhino.jstype.ObjectType) functionType26);
        com.google.javascript.rhino.Node node61 = functionType5.getPropertyNode("function (): {1787671304}");
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertNotNull(functionType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(functionType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableList32);
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertNotNull(functionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable43);
        org.junit.Assert.assertNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray54);
        org.junit.Assert.assertNotNull(functionType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(node61);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03667");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.Node node14 = functionType5.getSource();
        boolean boolean16 = functionType5.isPropertyTypeInferred("Not declared as a type name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = functionType5.getOwnImplementedInterfaces();
        boolean boolean18 = functionType5.isStringValueType();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03668");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        java.util.Iterator<java.lang.String> strItor6 = strSet4.iterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(strItor6);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03669");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int4 = node3.getLineno();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "unknown");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression6);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression7);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType14 = jSTypeRegistry11.createFunctionType(jSType12, jSTypeArray13);
        boolean boolean15 = functionType14.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList20 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableList20.iterator();
        boolean boolean22 = functionType14.equals((java.lang.Object) strComparableItor21);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType29 = jSTypeRegistry26.createFunctionType(jSType27, jSTypeArray28);
        boolean boolean30 = functionType29.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable31 = functionType29.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node32 = null;
        boolean boolean33 = functionType14.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType29, node32);
        boolean boolean35 = functionType14.isPropertyTypeInferred("function (): {384404848}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = functionType14.getOwnPropertyJSDocInfo("Not declared as a type name");
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType43 = jSTypeRegistry40.createFunctionType(jSType41, jSTypeArray42);
        boolean boolean44 = functionType43.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList49 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor50 = strComparableList49.iterator();
        boolean boolean51 = functionType43.equals((java.lang.Object) strComparableItor50);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry55.createFunctionType(jSType56, jSTypeArray57);
        boolean boolean59 = functionType58.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable60 = functionType58.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node61 = null;
        boolean boolean62 = functionType43.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType58, node61);
        boolean boolean64 = functionType58.isPropertyInExterns("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        java.lang.String str65 = functionType58.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair66 = functionType14.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType) functionType58);
        com.google.javascript.rhino.Node node67 = functionType14.getRootNode();
        boolean boolean68 = jSTypeExpression7.equals((java.lang.Object) functionType14);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertNotNull(functionType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strComparableList20);
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertNotNull(functionType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertNotNull(functionType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strComparableList49);
        org.junit.Assert.assertNotNull(strComparableItor50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "function (): {534499737}" + "'", str65, "function (): {534499737}");
        org.junit.Assert.assertNotNull(typePair66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03670");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList5 = strComparableList4.reverse();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList10 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList15 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean16 = strComparableList10.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        boolean boolean17 = strComparableList10.isEmpty();
        boolean boolean18 = strComparableList4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList10);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType24 = jSTypeRegistry21.createFunctionType(jSType22, jSTypeArray23);
        boolean boolean25 = functionType24.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList30 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor31 = strComparableList30.iterator();
        boolean boolean32 = functionType24.equals((java.lang.Object) strComparableItor31);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType39 = jSTypeRegistry36.createFunctionType(jSType37, jSTypeArray38);
        boolean boolean40 = functionType39.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable41 = functionType39.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node42 = null;
        boolean boolean43 = functionType24.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType39, node42);
        boolean boolean45 = functionType39.removeProperty("Not declared as a type name");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = functionType39.getParameters();
        boolean boolean47 = strComparableList10.equals((java.lang.Object) functionType39);
        boolean boolean48 = functionType39.isConstructor();
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableList5);
        org.junit.Assert.assertNotNull(strComparableList10);
        org.junit.Assert.assertNotNull(strComparableList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertNotNull(functionType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strComparableList30);
        org.junit.Assert.assertNotNull(strComparableItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertNotNull(functionType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03671");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder2 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition1);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder3 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder5 = nodeSourcePositionBuilder3.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4);
        int int6 = typePosition4.getStartLine();
        int int7 = typePosition4.getEndLine();
        boolean boolean8 = typePosition4.hasBrackets();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder9 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4);
        int int10 = typePosition4.getEndLine();
        int int11 = typePosition4.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder2);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder3);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03672");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        boolean boolean13 = node12.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node12.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = node12.getChildAtIndex((int) (short) -1);
        node12.setSourceEncodedPositionForTree((int) (short) 0);
        com.google.javascript.rhino.Node node20 = node12.getAncestor(15);
        boolean boolean21 = node12.isInstanceOf();
        node12.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03673");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        boolean boolean46 = enumType44.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumType enumType47 = enumType44.toMaybeEnumType();
        java.util.Set set48 = enumType47.getOwnPropertyNames();
        boolean boolean49 = enumType47.canBeCalled();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isNoCompile();
        java.lang.String str53 = jSDocInfo51.getOriginalCommentString();
        boolean boolean54 = jSDocInfo51.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo51.getType();
        boolean boolean56 = jSDocInfo51.isConstant();
        boolean boolean57 = jSDocInfo51.isNoTypeCheck();
        enumType47.setPropertyJSDocInfo("function (): {1215648818}", jSDocInfo51);
        java.lang.String str59 = enumType47.getDisplayName();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(enumType47);
        org.junit.Assert.assertNotNull(set48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str59, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03674");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isDefine();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean6 = jSDocInfo0.hasModifies();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03675");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((-1), nodeArray2);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(42, nodeArray2);
        int int5 = node4.getLength();
        java.lang.String str9 = node4.toString(true, false, false);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node17.setString("");
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean21 = node13.isGetElem();
        boolean boolean22 = node13.isCase();
        boolean boolean23 = node13.isQualifiedName();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node31.setString("");
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node31);
        java.lang.String str35 = node27.toString();
        boolean boolean36 = node27.isAssignAdd();
        com.google.javascript.rhino.Node node37 = node13.srcrefTree(node27);
        boolean boolean38 = node27.isNot();
        com.google.javascript.rhino.Node node39 = node4.clonePropsFrom(node27);
        boolean boolean40 = node27.isOptionalArg();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "THIS 0" + "'", str9, "THIS 0");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING hi!" + "'", str35, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03676");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("function (): {621165152}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03677");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable33 = functionType31.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType31.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        functionType31.setJSDocInfo(jSDocInfo35);
        boolean boolean37 = jSDocInfo35.isHidden();
        functionType22.setPropertyJSDocInfo("", jSDocInfo35);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo35.getType();
        boolean boolean40 = jSDocInfo35.hasReturnType();
        java.lang.String str41 = jSDocInfo35.getBlockDescription();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03678");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node8.setString("");
        com.google.javascript.rhino.Node node11 = node4.useSourceInfoIfMissingFromForTree(node8);
        boolean boolean12 = node4.isGetElem();
        com.google.javascript.rhino.Node node13 = node4.cloneNode();
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node15 = node13.cloneTree();
        node15.setSourceEncodedPosition((int) (short) 10);
        boolean boolean18 = node15.isSetterDef();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node30.setString("");
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node30);
        node30.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType41 = jSTypeRegistry38.createFunctionType(jSType39, jSTypeArray40);
        boolean boolean42 = functionType41.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry21.createObjectType("hi!", node30, (com.google.javascript.rhino.jstype.ObjectType) functionType41);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node45 = jSTypeRegistry21.createParametersWithVarArgs(jSTypeArray44);
        boolean boolean46 = node45.isIn();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(52, node15, node45, 42, (int) (byte) 0);
        node15.setSourceFileForTesting("STRING hi!");
        java.lang.String str52 = node15.getQualifiedName();
        boolean boolean53 = node15.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertNotNull(functionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03679");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        node23.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType34 = jSTypeRegistry31.createFunctionType(jSType32, jSTypeArray33);
        boolean boolean35 = functionType34.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry14.createObjectType("hi!", node23, (com.google.javascript.rhino.jstype.ObjectType) functionType34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node38 = jSTypeRegistry14.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        boolean boolean46 = functionType45.isUnionType();
        boolean boolean47 = functionType45.isDateType();
        boolean boolean48 = functionType45.isResolved();
        boolean boolean49 = functionType45.isEmptyType();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection50 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType45);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType56 = jSTypeRegistry53.createFunctionType(jSType54, jSTypeArray55);
        boolean boolean57 = functionType56.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList62 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor63 = strComparableList62.iterator();
        boolean boolean64 = functionType56.equals((java.lang.Object) strComparableItor63);
        boolean boolean65 = functionType56.isArrayType();
        boolean boolean66 = functionType56.isInterface();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable67 = functionType56.getAllImplementedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node80.setString("");
        com.google.javascript.rhino.Node node83 = node76.useSourceInfoIfMissingFromForTree(node80);
        node80.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter86 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry88 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter86, false);
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray90 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType91 = jSTypeRegistry88.createFunctionType(jSType89, jSTypeArray90);
        boolean boolean92 = functionType91.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = jSTypeRegistry71.createObjectType("hi!", node80, (com.google.javascript.rhino.jstype.ObjectType) functionType91);
        boolean boolean94 = functionType91.isStringObjectType();
        com.google.javascript.rhino.jstype.JSType jSType95 = functionType56.forceResolve(errorReporter68, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType91);
        boolean boolean96 = functionType91.isString();
        com.google.javascript.rhino.jstype.JSType jSType98 = jSTypeRegistry2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) functionType91, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n.<function (): ?>");
        boolean boolean99 = functionType91.isReturnTypeInferred();
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertNotNull(functionType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection50);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertNotNull(functionType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableList62);
        org.junit.Assert.assertNotNull(strComparableItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable67);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(jSTypeArray90);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(jSType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03680");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isDefine();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("Named type with empty name component");
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        boolean boolean11 = jSDocInfo0.isExport();
        boolean boolean12 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.addSuppression("function (): {605977660}");
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(strCollection16);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03681");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        int int13 = node3.getIntProp((int) (byte) -1);
        boolean boolean14 = node3.isLabel();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING hi!");
        boolean boolean17 = jSTypeExpression16.isVarArgs();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable25 = functionType23.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType26 = functionType23.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        functionType23.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasReturnType();
        boolean boolean31 = jSDocInfo29.containsDeclaration();
        functionType23.setJSDocInfo(jSDocInfo29);
        com.google.javascript.rhino.jstype.ObjectType.Property property34 = functionType23.getOwnSlot("[, hi!, STRING hi!, STRING hi!]");
        boolean boolean35 = functionType23.isResolved();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = functionType23.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.StaticSlot staticSlot38 = functionType23.getSlot("{proxy:function (): {1157916158}}");
        boolean boolean39 = functionType23.matchesStringContext();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry42.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isNominalType();
        boolean boolean52 = jSTypeRegistry42.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node61.setString("");
        com.google.javascript.rhino.Node node64 = node57.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean65 = node57.isGetElem();
        com.google.javascript.rhino.Node node66 = node57.cloneNode();
        boolean boolean67 = node66.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node66.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69, false);
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType77 = jSTypeRegistry74.createFunctionType(jSType75, jSTypeArray76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = functionType77.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry71.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = functionType77.getJSDocInfo();
        boolean boolean83 = functionType77.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType84 = jSTypeRegistry42.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node66, (com.google.javascript.rhino.jstype.JSType) functionType77);
        com.google.javascript.rhino.jstype.EnumType enumType85 = enumType84.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType86 = enumType85.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType88 = enumElementType86.getPropertyType("true");
        boolean boolean89 = enumElementType86.isObject();
        boolean boolean91 = enumElementType86.isPropertyTypeInferred("function (): {308555690}");
        boolean boolean92 = functionType23.isSubtype((com.google.javascript.rhino.jstype.JSType) enumElementType86);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry93 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType94 = jSTypeExpression16.evaluate((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType23, jSTypeRegistry93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(staticSlot38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertNotNull(functionType77);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(enumType84);
        org.junit.Assert.assertNotNull(enumType85);
        org.junit.Assert.assertNotNull(enumElementType86);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03682");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(40);
        boolean boolean3 = node2.isAdd();
        boolean boolean4 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node13.setString("");
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean17 = node9.isGetElem();
        com.google.javascript.rhino.Node node18 = node9.cloneNode();
        boolean boolean19 = node18.isDebugger();
        boolean boolean20 = node18.isNull();
        boolean boolean21 = node18.isComma();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 10, (int) '4');
        int int26 = node24.getIntProp(2);
        boolean boolean27 = node24.isGetterDef();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 1, 100, (int) ' ');
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node39.setString("");
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean43 = node35.isGetElem();
        com.google.javascript.rhino.Node node44 = node35.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node35);
        boolean boolean46 = node35.isNot();
        com.google.javascript.rhino.Node node47 = node31.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), nodeArray49);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(4095, node2, node24, node31, node50, 52, (-1));
        boolean boolean55 = node24.isAdd();
        boolean boolean56 = node24.isWith();
        node24.setCharno(52);
        boolean boolean59 = node24.isBreak();
        boolean boolean60 = node24.isLabelName();
        com.google.javascript.rhino.Node node61 = node24.getNext();
        com.google.javascript.rhino.Node node62 = node24.getParent();
        node24.setVarArgs(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03683");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType13 = jSTypeRegistry10.createFunctionType(jSType11, jSTypeArray12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = functionType13.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry7.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType13);
        boolean boolean17 = functionType13.isOrdinaryFunction();
        boolean boolean18 = functionType13.isFunctionPrototypeType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry21.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType29 = jSTypeRegistry26.createFunctionType(jSType27, jSTypeArray28);
        boolean boolean30 = functionType29.isNominalType();
        boolean boolean31 = jSTypeRegistry21.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node40.setString("");
        com.google.javascript.rhino.Node node43 = node36.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean44 = node36.isGetElem();
        com.google.javascript.rhino.Node node45 = node36.cloneNode();
        boolean boolean46 = node45.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node45.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType56 = jSTypeRegistry53.createFunctionType(jSType54, jSTypeArray55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = functionType56.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry50.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = functionType56.getJSDocInfo();
        boolean boolean62 = functionType56.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType63 = jSTypeRegistry21.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node45, (com.google.javascript.rhino.jstype.JSType) functionType56);
        com.google.javascript.rhino.Node node64 = enumType63.getSource();
        java.lang.String str65 = enumType63.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = enumType63.getOwnPropertyJSDocInfo("true");
        boolean boolean68 = enumType63.matchesNumberContext();
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry2.createFunctionTypeWithNewThisType(functionType13, (com.google.javascript.rhino.jstype.ObjectType) enumType63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode70 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        jSTypeRegistry2.setResolveMode(resolveMode70);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray72 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry2.createUnionType(jSTypeNativeArray72);
        boolean boolean74 = jSType73.isStringValueType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertNotNull(functionType13);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertNotNull(functionType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertNotNull(functionType56);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(enumType63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "enum{Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n}" + "'", str65, "enum{Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n}");
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + resolveMode70 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode70.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertNotNull(jSTypeNativeArray72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03684");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        boolean boolean3 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isConstant();
        java.lang.String str6 = jSDocInfo0.toString();
        java.lang.String str7 = jSDocInfo0.toString();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("(EXPR_RESULT)");
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean12 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03685");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNullable();
        int int93 = parameterizedType89.getPropertiesCount();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType89.toMaybeParameterizedType();
        com.google.javascript.rhino.Node node96 = parameterizedType89.getPropertyNode("{proxy:function (): {1495070375}}");
        boolean boolean97 = parameterizedType89.isCheckedUnknownType();
        boolean boolean98 = parameterizedType89.isConstructor();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03686");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isNominalType();
        boolean boolean91 = parameterizedType89.isUnknownType();
        boolean boolean92 = parameterizedType89.isCheckedUnknownType();
        boolean boolean93 = parameterizedType89.isNullable();
        boolean boolean94 = parameterizedType89.isUnknownType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03687");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor5 = strComparableList4.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList6 = strComparableList4.reverse();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream7 = strComparableList6.parallelStream();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableList6.parallelStream();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableList6.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String> strComparable11 = strComparableList6.remove((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableItor5);
        org.junit.Assert.assertNotNull(strComparableList6);
        org.junit.Assert.assertNotNull(strComparableStream7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNotNull(strComparableItor9);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03688");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((-1), nodeArray1);
        int int3 = node2.getSourceOffset();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType9 = jSTypeRegistry6.createFunctionType(jSType7, jSTypeArray8);
        boolean boolean10 = functionType9.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType11 = functionType9.getParameterType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node19.setString("");
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean23 = node15.isGetElem();
        com.google.javascript.rhino.Node node24 = node15.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node15);
        boolean boolean26 = node15.isNot();
        functionType9.setSource(node15);
        boolean boolean28 = node2.isEquivalentToTyped(node15);
        int int29 = node2.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertNotNull(functionType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03689");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList5 = strComparableList4.reverse();
        int int6 = strComparableList4.size();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40);
        boolean boolean9 = node8.isBlock();
        boolean boolean10 = node8.isDo();
        boolean boolean11 = strComparableList4.contains((java.lang.Object) node8);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.Comparable<java.lang.String>>> strComparableCollectionList12 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList4);
        java.lang.Object[] objArray13 = strComparableList4.toArray();
        boolean boolean14 = strComparableList4.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType20 = jSTypeRegistry17.createFunctionType(jSType18, jSTypeArray19);
        boolean boolean21 = functionType20.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable22 = functionType20.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType23 = functionType20.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        functionType20.setJSDocInfo(jSDocInfo24);
        boolean boolean26 = jSDocInfo24.hasEnumParameterType();
        boolean boolean27 = jSDocInfo24.isExpose();
        java.lang.String str28 = jSDocInfo24.getDeprecationReason();
        boolean boolean29 = strComparableList4.equals((java.lang.Object) jSDocInfo24);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList34 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList35 = strComparableList34.reverse();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node47.setString("");
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node47);
        node47.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry55.createFunctionType(jSType56, jSTypeArray57);
        boolean boolean59 = functionType58.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry38.createObjectType("hi!", node47, (com.google.javascript.rhino.jstype.ObjectType) functionType58);
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61, false);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry63.createFunctionType(jSType64, jSTypeArray65);
        boolean boolean67 = functionType66.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList72 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor73 = strComparableList72.iterator();
        boolean boolean74 = functionType66.equals((java.lang.Object) strComparableItor73);
        com.google.javascript.rhino.Node node75 = functionType66.getSource();
        com.google.javascript.rhino.jstype.JSType jSType77 = jSTypeRegistry38.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) functionType66, "hi!");
        int int78 = strComparableList35.indexOf((java.lang.Object) functionType66);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList79 = strComparableList35.reverse();
        boolean boolean80 = strComparableList4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList35);
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparableCollectionList12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, hi!, STRING hi!, STRING hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, hi!, STRING hi!, STRING hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertNotNull(functionType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable22);
        org.junit.Assert.assertNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strComparableList34);
        org.junit.Assert.assertNotNull(strComparableList35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strComparableList72);
        org.junit.Assert.assertNotNull(strComparableItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(strComparableList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03690");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSTypeRegistry48.createFunctionType(jSType49, jSTypeArray50);
        boolean boolean52 = functionType51.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable53 = functionType51.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType55 = functionType51.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry59.createFunctionType(jSType60, jSTypeArray61);
        boolean boolean63 = functionType62.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable64 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType65 = functionType62.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        functionType62.setJSDocInfo(jSDocInfo66);
        com.google.javascript.rhino.jstype.JSType jSType68 = functionType51.resolve(errorReporter56, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = enumType44.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType51);
        com.google.javascript.rhino.jstype.ObjectType.Property property71 = enumType44.getSlot("");
        boolean boolean73 = enumType44.isPropertyTypeDeclared("");
        com.google.javascript.rhino.Node node74 = enumType44.getSource();
        boolean boolean76 = enumType44.isPropertyTypeDeclared("true");
        boolean boolean78 = enumType44.isPropertyTypeDeclared("{proxy:function (): {1600284777}}");
        boolean boolean79 = enumType44.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType80 = enumType44.autoboxesTo();
        boolean boolean81 = enumType44.isAllType();
        java.util.Set set82 = enumType44.getOwnPropertyNames();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(functionType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNull(property71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(set82);
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03691");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList56 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableList56.iterator();
        boolean boolean58 = functionType50.equals((java.lang.Object) strComparableItor57);
        boolean boolean59 = functionType50.isArrayType();
        boolean boolean60 = functionType50.isInterface();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType50.getAllImplementedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry64.createAnonymousObjectType();
        boolean boolean66 = objectType65.isNominalType();
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry2.createFunctionTypeWithNewReturnType(functionType50, (com.google.javascript.rhino.jstype.JSType) objectType65);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = functionType50.getPossibleToBooleanOutcomes();
        functionType50.clearCachedValues();
        boolean boolean70 = functionType50.isNominalConstructor();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableList56);
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03692");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03693");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2, false);
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray6 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType7 = jSTypeRegistry4.createFunctionType(jSType5, jSTypeArray6);
        boolean boolean8 = functionType7.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable9 = functionType7.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType10 = functionType7.unboxesTo();
        boolean boolean12 = functionType7.removeProperty("");
        int int13 = functionType7.getMaxArguments();
        java.lang.String str14 = functionType7.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType20 = jSTypeRegistry17.createFunctionType(jSType18, jSTypeArray19);
        boolean boolean21 = functionType20.isNominalType();
        functionType7.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType20);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType28 = jSTypeRegistry25.createFunctionType(jSType26, jSTypeArray27);
        boolean boolean29 = functionType28.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable30 = functionType28.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType31 = functionType28.unboxesTo();
        boolean boolean33 = functionType28.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType34 = functionType28.getImplicitPrototype();
        functionType7.setPrototypeBasedOn(objectType34);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType7, "hi!");
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry1.getGreatestSubtypeWithProperty(jSType38, "");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType46 = jSTypeRegistry43.createFunctionType(jSType44, jSTypeArray45);
        boolean boolean47 = functionType46.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList52 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor53 = strComparableList52.iterator();
        boolean boolean54 = functionType46.equals((java.lang.Object) strComparableItor53);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType61 = jSTypeRegistry58.createFunctionType(jSType59, jSTypeArray60);
        boolean boolean62 = functionType61.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType61.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node64 = null;
        boolean boolean65 = functionType46.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType61, node64);
        boolean boolean67 = functionType61.removeProperty("Not declared as a type name");
        com.google.javascript.rhino.jstype.ObjectType objectType68 = jSTypeRegistry1.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType61);
        boolean boolean69 = functionType61.matchesObjectContext();
        boolean boolean70 = functionType61.isNumberObjectType();
        boolean boolean71 = functionType61.isReturnTypeInferred();
        boolean boolean72 = functionType61.isNominalType();
        org.junit.Assert.assertNotNull(jSTypeArray6);
        org.junit.Assert.assertNotNull(functionType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertNotNull(functionType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertNotNull(functionType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertNotNull(functionType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strComparableList52);
        org.junit.Assert.assertNotNull(strComparableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertNotNull(functionType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03694");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType48 = enumElementType46.getPropertyType("true");
        boolean boolean49 = enumElementType46.canBeCalled();
        boolean boolean50 = enumElementType46.isUnionType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = enumElementType46.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType52 = enumElementType46.autoboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry55.createFunctionType(jSType56, jSTypeArray57);
        boolean boolean59 = functionType58.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable60 = functionType58.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType61 = functionType58.unboxesTo();
        boolean boolean63 = functionType58.removeProperty("");
        int int64 = functionType58.getMaxArguments();
        java.lang.String str65 = functionType58.toDebugHashCodeString();
        com.google.javascript.rhino.Node node67 = functionType58.getPropertyNode("JSDocInfo");
        java.lang.String str68 = functionType58.getReferenceName();
        int int69 = functionType58.getPropertiesCount();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = enumElementType46.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType58);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = functionType58.getParameters();
        java.lang.String str72 = functionType58.getReferenceName();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "function (): {1002211251}" + "'", str65, "function (): {1002211251}");
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03695");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        boolean boolean46 = enumType45.matchesObjectContext();
        boolean boolean47 = enumType45.hasCachedValues();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumType45.getElementsType();
        boolean boolean49 = enumElementType48.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = functionType59.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry53.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType59);
        com.google.javascript.rhino.jstype.JSType jSType63 = functionType59.autobox();
        com.google.javascript.rhino.jstype.JSType jSType64 = enumElementType48.forceResolve(errorReporter50, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType59);
        com.google.javascript.rhino.jstype.JSType jSType65 = enumElementType48.getPrimitiveType();
        boolean boolean66 = enumElementType48.isNumberObjectType();
        boolean boolean67 = enumElementType48.isNominalType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03696");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType9 = functionType5.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType16 = jSTypeRegistry13.createFunctionType(jSType14, jSTypeArray15);
        boolean boolean17 = functionType16.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable18 = functionType16.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType19 = functionType16.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        functionType16.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.jstype.JSType jSType22 = functionType5.resolve(errorReporter10, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType16);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node34.setString("");
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node34);
        node34.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        boolean boolean46 = functionType45.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry25.createObjectType("hi!", node34, (com.google.javascript.rhino.jstype.ObjectType) functionType45);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node49 = jSTypeRegistry25.createParametersWithVarArgs(jSTypeArray48);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType56 = jSTypeRegistry53.createFunctionType(jSType54, jSTypeArray55);
        boolean boolean57 = functionType56.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable58 = functionType56.getCtorImplementedInterfaces();
        jSTypeRegistry25.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType56);
        boolean boolean60 = functionType56.matchesStringContext();
        boolean boolean61 = functionType56.isFunctionType();
        boolean boolean63 = functionType56.isPropertyTypeDeclared("function (): {1479300960}");
        boolean boolean64 = functionType16.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType56);
        com.google.javascript.rhino.Node node65 = functionType16.getRootNode();
        com.google.javascript.rhino.jstype.ObjectType objectType66 = functionType16.getImplicitPrototype();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType68 = functionType16.getTopMostDefiningType("{proxy:function (): {158234525}}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNotNull(jSType9);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(functionType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable18);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertNotNull(functionType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(objectType66);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03697");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList9 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean10 = strComparableList4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType16 = jSTypeRegistry13.createFunctionType(jSType14, jSTypeArray15);
        boolean boolean17 = functionType16.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable25 = functionType23.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType26 = functionType23.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType27 = functionType23.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = functionType16.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType23);
        com.google.javascript.rhino.Node node29 = functionType16.getSource();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType35 = jSTypeRegistry32.createFunctionType(jSType33, jSTypeArray34);
        boolean boolean36 = functionType35.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList41 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor42 = strComparableList41.iterator();
        boolean boolean43 = functionType35.equals((java.lang.Object) strComparableItor42);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable52 = functionType50.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = functionType35.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType50, node53);
        boolean boolean56 = functionType50.removeProperty("Not declared as a type name");
        boolean boolean57 = functionType16.hasEqualCallType(functionType50);
        boolean boolean58 = strComparableList9.equals((java.lang.Object) functionType16);
        boolean boolean59 = functionType16.isNativeObjectType();
        java.util.Set<java.lang.String> strSet60 = functionType16.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.JSType jSType61 = functionType16.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = jSType61.isCheckedUnknownType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(functionType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertNotNull(functionType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableList41);
        org.junit.Assert.assertNotNull(strComparableItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(jSType61);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03698");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable33 = functionType31.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType31.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        functionType31.setJSDocInfo(jSDocInfo35);
        boolean boolean37 = jSDocInfo35.isHidden();
        functionType22.setPropertyJSDocInfo("", jSDocInfo35);
        com.google.javascript.rhino.Node node39 = functionType22.getParametersNode();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node47.setString("");
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean51 = node47.isTry();
        com.google.javascript.rhino.Node node52 = node47.removeChildren();
        com.google.javascript.rhino.Node node53 = node39.useSourceInfoFromForTree(node47);
        boolean boolean54 = node47.isDelProp();
        boolean boolean55 = node47.isQualifiedName();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03699");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isNominalType();
        boolean boolean92 = parameterizedType89.hasProperty("function (): {1386872197}");
        com.google.javascript.rhino.jstype.ObjectType objectType93 = parameterizedType89.getTypeOfThis();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = parameterizedType89.getTypeOfThis();
        java.util.Set<java.lang.String> strSet95 = parameterizedType89.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType96 = parameterizedType89.toMaybeParameterizedType();
        boolean boolean97 = parameterizedType96.isAllType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(parameterizedType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03700");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        boolean boolean10 = functionType5.removeProperty("");
        int int11 = functionType5.getMaxArguments();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType17 = jSTypeRegistry14.createFunctionType(jSType15, jSTypeArray16);
        boolean boolean18 = functionType17.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable19 = functionType17.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType20 = functionType17.unboxesTo();
        boolean boolean22 = functionType17.removeProperty("");
        int int23 = functionType17.getMaxArguments();
        java.lang.String str24 = functionType17.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType30 = jSTypeRegistry27.createFunctionType(jSType28, jSTypeArray29);
        boolean boolean31 = functionType30.isNominalType();
        functionType17.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType30);
        boolean boolean33 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) functionType5, (com.google.javascript.rhino.jstype.JSType) functionType30);
        boolean boolean34 = functionType5.isNullType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList39 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList44 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean45 = strComparableList39.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSTypeRegistry48.createFunctionType(jSType49, jSTypeArray50);
        boolean boolean52 = functionType51.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry55.createFunctionType(jSType56, jSTypeArray57);
        boolean boolean59 = functionType58.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable60 = functionType58.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType61 = functionType58.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType62 = functionType58.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = functionType51.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType58);
        com.google.javascript.rhino.Node node64 = functionType51.getSource();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry67.createFunctionType(jSType68, jSTypeArray69);
        boolean boolean71 = functionType70.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList76 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor77 = strComparableList76.iterator();
        boolean boolean78 = functionType70.equals((java.lang.Object) strComparableItor77);
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry82 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80, false);
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType85 = jSTypeRegistry82.createFunctionType(jSType83, jSTypeArray84);
        boolean boolean86 = functionType85.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType85.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node88 = null;
        boolean boolean89 = functionType70.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType85, node88);
        boolean boolean91 = functionType85.removeProperty("Not declared as a type name");
        boolean boolean92 = functionType51.hasEqualCallType(functionType85);
        boolean boolean93 = strComparableList44.equals((java.lang.Object) functionType51);
        boolean boolean94 = functionType51.isNativeObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) functionType51);
        boolean boolean96 = functionType5.equals((java.lang.Object) objectType95);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = functionType5.toMaybeEnumElementType();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertNotNull(functionType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable19);
        org.junit.Assert.assertNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(functionType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strComparableList39);
        org.junit.Assert.assertNotNull(strComparableList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(functionType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strComparableList76);
        org.junit.Assert.assertNotNull(strComparableItor77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertNotNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(enumElementType97);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03701");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        boolean boolean37 = functionType33.isNativeObjectType();
        boolean boolean38 = functionType33.isStringObjectType();
        boolean boolean39 = functionType33.hasReferenceName();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03702");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        java.lang.String str11 = node3.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo12.setVisibility(visibility14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getEnumParameterType();
        node3.setJSDocInfo(jSDocInfo12);
        jSDocInfo12.setLicense("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo12.getVisibility();
        boolean boolean21 = jSDocInfo12.isNoCompile();
        boolean boolean22 = jSDocInfo12.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo12.getEnumParameterType();
        int int24 = jSDocInfo12.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo12.getMarkers();
        java.lang.String str26 = jSDocInfo12.getLendsName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING hi!" + "'", str11, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03703");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType.Property property10 = functionType5.getSlot("unknown");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = functionType5.getParameters();
        com.google.javascript.rhino.jstype.JSType jSType12 = functionType5.autoboxesTo();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(property10);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNull(jSType12);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03704");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(3);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03705");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        boolean boolean49 = enumElementType46.isNullable();
        boolean boolean50 = enumElementType46.hasReferenceName();
        boolean boolean51 = enumElementType46.matchesObjectContext();
        boolean boolean52 = enumElementType46.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType54 = enumElementType46.findPropertyType("function (): {2039596927}");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSType54);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03706");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        boolean boolean25 = functionType22.isStringObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable33 = functionType31.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType31.unboxesTo();
        boolean boolean36 = functionType31.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType37 = functionType31.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType38 = functionType31.dereference();
        com.google.javascript.rhino.jstype.JSType jSType39 = functionType22.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType38);
        boolean boolean40 = objectType38.isOrdinaryFunction();
        boolean boolean41 = objectType38.isArrayType();
        boolean boolean42 = objectType38.isParameterizedType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable33);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03707");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        int int13 = node3.getIntProp((int) (byte) -1);
        boolean boolean14 = node3.isLabel();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node24.setString("");
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean28 = node20.isGetElem();
        com.google.javascript.rhino.Node node29 = node20.cloneNode();
        boolean boolean30 = node29.isDebugger();
        node3.addChildToFront(node29);
        com.google.javascript.rhino.jstype.JSType jSType32 = node29.getJSType();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry35.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType43 = jSTypeRegistry40.createFunctionType(jSType41, jSTypeArray42);
        boolean boolean44 = functionType43.isNominalType();
        boolean boolean45 = jSTypeRegistry35.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node54.setString("");
        com.google.javascript.rhino.Node node57 = node50.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean58 = node50.isGetElem();
        com.google.javascript.rhino.Node node59 = node50.cloneNode();
        boolean boolean60 = node59.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node59.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry67.createFunctionType(jSType68, jSTypeArray69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = functionType70.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry64.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = functionType70.getJSDocInfo();
        boolean boolean76 = functionType70.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType77 = jSTypeRegistry35.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node59, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.jstype.EnumType enumType78 = enumType77.toMaybeEnumType();
        boolean boolean79 = enumType78.matchesObjectContext();
        boolean boolean80 = enumType78.hasAnyTemplate();
        boolean boolean81 = enumType78.hasReferenceName();
        java.lang.String str82 = enumType78.getReferenceName();
        boolean boolean84 = enumType78.hasProperty("function (): {351349817}");
        node29.setJSType((com.google.javascript.rhino.jstype.JSType) enumType78);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) enumType78);
        com.google.javascript.rhino.jstype.JSType jSType87 = enumType78.unboxesTo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertNotNull(functionType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(enumType77);
        org.junit.Assert.assertNotNull(enumType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "enum{Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n}" + "'", str82, "enum{Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n}");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertNull(jSType87);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03708");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2, false);
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray6 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType7 = jSTypeRegistry4.createFunctionType(jSType5, jSTypeArray6);
        boolean boolean8 = functionType7.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable9 = functionType7.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType10 = functionType7.unboxesTo();
        boolean boolean12 = functionType7.removeProperty("");
        int int13 = functionType7.getMaxArguments();
        java.lang.String str14 = functionType7.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType20 = jSTypeRegistry17.createFunctionType(jSType18, jSTypeArray19);
        boolean boolean21 = functionType20.isNominalType();
        functionType7.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType20);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType28 = jSTypeRegistry25.createFunctionType(jSType26, jSTypeArray27);
        boolean boolean29 = functionType28.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable30 = functionType28.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType31 = functionType28.unboxesTo();
        boolean boolean33 = functionType28.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType34 = functionType28.getImplicitPrototype();
        functionType7.setPrototypeBasedOn(objectType34);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType7, "hi!");
        java.lang.Iterable iterable38 = functionType7.getCtorImplementedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node50.setString("");
        com.google.javascript.rhino.Node node53 = node46.useSourceInfoIfMissingFromForTree(node50);
        node50.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType61 = jSTypeRegistry58.createFunctionType(jSType59, jSTypeArray60);
        boolean boolean62 = functionType61.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry41.createObjectType("hi!", node50, (com.google.javascript.rhino.jstype.ObjectType) functionType61);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node65 = jSTypeRegistry41.createParametersWithVarArgs(jSTypeArray64);
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67, false);
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry69.createFunctionType(jSType70, jSTypeArray71);
        boolean boolean73 = functionType72.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType72.getCtorImplementedInterfaces();
        jSTypeRegistry41.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType72);
        boolean boolean76 = functionType72.matchesStringContext();
        boolean boolean77 = functionType7.isSubtype((com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.jstype.JSType jSType78 = functionType72.collapseUnion();
        boolean boolean79 = functionType72.isConstructor();
        org.junit.Assert.assertNotNull(jSTypeArray6);
        org.junit.Assert.assertNotNull(functionType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertNotNull(functionType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertNotNull(functionType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iterable38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertNotNull(functionType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03709");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("function (): {998360770}");
        int int4 = stringPosition0.getStartLine();
        java.lang.String str5 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "function (): {998360770}" + "'", str5, "function (): {998360770}");
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03710");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node15.setString("");
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFromForTree(node15);
        node15.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType26 = jSTypeRegistry23.createFunctionType(jSType24, jSTypeArray25);
        boolean boolean27 = functionType26.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry6.createObjectType("hi!", node15, (com.google.javascript.rhino.jstype.ObjectType) functionType26);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node30 = jSTypeRegistry6.createParametersWithVarArgs(jSTypeArray29);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        boolean boolean38 = functionType37.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable39 = functionType37.getCtorImplementedInterfaces();
        jSTypeRegistry6.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType46 = jSTypeRegistry43.createFunctionType(jSType44, jSTypeArray45);
        boolean boolean47 = functionType46.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable48 = functionType46.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType49 = functionType46.unboxesTo();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection50 = jSTypeRegistry6.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType46);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType56 = jSTypeRegistry53.createFunctionType(jSType54, jSTypeArray55);
        com.google.javascript.rhino.Node node57 = jSTypeRegistry6.createParametersWithVarArgs(jSTypeArray55);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry2.createUnionType(jSTypeArray55);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry2.createAnonymousObjectType();
        boolean boolean60 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        boolean boolean62 = jSTypeRegistry2.isForwardDeclaredType("function (): {1353551047}");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry2.getNativeObjectType(jSTypeNative63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(functionType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable39);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertNotNull(functionType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable48);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNotNull(functionTypeCollection50);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertNotNull(functionType56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03711");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        java.lang.String str11 = node3.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo12.setVisibility(visibility14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getEnumParameterType();
        node3.setJSDocInfo(jSDocInfo12);
        java.lang.String str18 = jSDocInfo12.getDeprecationReason();
        java.lang.String str19 = jSDocInfo12.getFileOverview();
        boolean boolean20 = jSDocInfo12.isExterns();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo12.getModifies();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo12.getSuppressions();
        java.lang.String str23 = jSDocInfo12.getVersion();
        boolean boolean24 = jSDocInfo12.hasType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING hi!" + "'", str11, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03712");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType12 = jSTypeRegistry9.createFunctionType(jSType10, jSTypeArray11);
        boolean boolean13 = functionType12.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable14 = functionType12.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType15 = functionType12.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType16 = functionType12.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = functionType5.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType12);
        boolean boolean18 = functionType12.isNumberObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType24 = jSTypeRegistry21.createFunctionType(jSType22, jSTypeArray23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = functionType24.getOwnPropertyJSDocInfo("");
        java.lang.Iterable iterable27 = functionType24.getCtorExtendedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry31.createAnonymousObjectType();
        boolean boolean33 = objectType32.isNominalType();
        boolean boolean34 = objectType32.isNominalType();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType43 = jSTypeRegistry40.createFunctionType(jSType41, jSTypeArray42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = functionType43.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry37.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType43);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node58.setString("");
        com.google.javascript.rhino.Node node61 = node54.useSourceInfoIfMissingFromForTree(node58);
        node58.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64, false);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry66.createFunctionType(jSType67, jSTypeArray68);
        boolean boolean70 = functionType69.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry49.createObjectType("hi!", node58, (com.google.javascript.rhino.jstype.ObjectType) functionType69);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node73 = jSTypeRegistry49.createParametersWithVarArgs(jSTypeArray72);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry37.createParametersWithVarArgs(jSTypeArray72);
        boolean boolean75 = functionType24.defineInferredProperty("hi!", (com.google.javascript.rhino.jstype.JSType) objectType32, node74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = functionType12.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType24);
        boolean boolean77 = functionType24.isConstructor();
        boolean boolean78 = functionType24.isEnumElementType();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertNotNull(functionType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertNotNull(functionType24);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertNotNull(iterable27);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertNotNull(functionType43);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03713");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isNominalType();
        boolean boolean92 = parameterizedType89.hasProperty("function (): {1386872197}");
        com.google.javascript.rhino.jstype.ObjectType objectType93 = parameterizedType89.getTypeOfThis();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = parameterizedType89.getTypeOfThis();
        java.util.Set<java.lang.String> strSet95 = parameterizedType89.getOwnPropertyNames();
        boolean boolean97 = parameterizedType89.removeProperty("function (): {1941136791}");
        boolean boolean98 = parameterizedType89.isInterface();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03714");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType42 = jSTypeRegistry39.createFunctionType(jSType40, jSTypeArray41);
        boolean boolean43 = functionType42.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable44 = functionType42.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType45 = functionType42.unboxesTo();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection46 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType42);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray51);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry2.getType("PARAM_LIST");
        jSTypeRegistry2.clearNamedTypes();
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry2.createNamedType("function (): {226997228}", "true", 53, 4095);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable64 = jSTypeRegistry2.getEachReferenceTypeWithProperty("function (): {1730712169}");
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry2.createAnonymousObjectType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertNotNull(functionType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(functionTypeCollection46);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertNotNull(objectTypeIterable64);
        org.junit.Assert.assertNotNull(objectType65);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03715");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.Node node45 = enumType44.getSource();
        boolean boolean47 = enumType44.removeProperty("JSDocInfo");
        java.util.Set set48 = enumType44.getOwnPropertyNames();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(set48);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03716");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        boolean boolean49 = enumElementType48.matchesStringContext();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03717");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        int int2 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03718");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((-1), nodeArray3);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(16, nodeArray3, 8, (int) (byte) 0);
        com.google.common.collect.ImmutableList<java.lang.Cloneable> cloneableList8 = com.google.common.collect.ImmutableList.copyOf((java.lang.Cloneable[]) nodeArray3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(16, nodeArray3);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node17.setString("");
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node28.setString("");
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoIfMissingFromForTree(node28);
        node28.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node41.setString("");
        com.google.javascript.rhino.Node node44 = node37.useSourceInfoIfMissingFromForTree(node41);
        boolean boolean45 = node37.isGetElem();
        int int47 = node37.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        com.google.javascript.rhino.Node node49 = node28.srcrefTree(node48);
        java.lang.String str50 = node20.checkTreeEquals(node48);
        boolean boolean51 = node48.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node59.setString("");
        com.google.javascript.rhino.Node node62 = node55.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node70.setString("");
        com.google.javascript.rhino.Node node73 = node66.useSourceInfoIfMissingFromForTree(node70);
        node70.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node83.setString("");
        com.google.javascript.rhino.Node node86 = node79.useSourceInfoIfMissingFromForTree(node83);
        boolean boolean87 = node79.isGetElem();
        int int89 = node79.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node90 = com.google.javascript.jscomp.NodeUtil.newExpr(node79);
        com.google.javascript.rhino.Node node91 = node70.srcrefTree(node90);
        java.lang.String str92 = node62.checkTreeEquals(node90);
        com.google.javascript.rhino.Node node93 = node48.useSourceInfoFrom(node90);
        com.google.javascript.rhino.Node node94 = node9.copyInformationFromForTree(node48);
        java.lang.String str95 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo96 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(cloneableList8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str50, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str92, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03719");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        jSTypeRegistry2.clearNamedTypes();
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode7 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode> resolveModeList15 = com.google.common.collect.ImmutableList.of(resolveMode6, resolveMode7, resolveMode8, resolveMode9, resolveMode10, resolveMode11, resolveMode12, resolveMode13, resolveMode14);
        jSTypeRegistry2.setResolveMode(resolveMode9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node25.setString("");
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean29 = node21.isGetElem();
        com.google.javascript.rhino.Node node30 = node21.cloneNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node38.setString("");
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean42 = node34.isGetElem();
        int int44 = node34.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        com.google.javascript.rhino.Node node46 = node21.clonePropsFrom(node34);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node54.setString("");
        com.google.javascript.rhino.Node node57 = node50.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean58 = node54.isTry();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node54.getAncestors();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node54);
        com.google.javascript.rhino.Node node61 = node34.copyInformationFromForTree(node54);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry64.createFunctionType(jSType65, jSTypeArray66);
        boolean boolean68 = functionType67.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType67.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType67.unboxesTo();
        boolean boolean72 = functionType67.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType67.getImplicitPrototype();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection76 = jSDocInfo74.getMarkers();
        functionType67.setJSDocInfo(jSDocInfo74);
        boolean boolean78 = functionType67.isCheckedUnknownType();
        functionType67.clearCachedValues();
        com.google.javascript.rhino.jstype.EnumType enumType80 = jSTypeRegistry2.createEnumType("function (): {360640502}", node61, (com.google.javascript.rhino.jstype.JSType) functionType67);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = jSTypeRegistry2.getEachReferenceTypeWithProperty("(function (): {775781814})");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode7 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode7.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
        org.junit.Assert.assertNotNull(resolveModeList15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertNotNull(nodeCollection60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(markerCollection76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(enumType80);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03720");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node7.isTry();
        com.google.javascript.rhino.Node node12 = node7.removeChildren();
        boolean boolean13 = node7.isStringKey();
        boolean boolean14 = node7.isIf();
        boolean boolean15 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03721");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        java.lang.String str11 = node3.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo12.setVisibility(visibility14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getEnumParameterType();
        node3.setJSDocInfo(jSDocInfo12);
        jSDocInfo12.setLicense("");
        boolean boolean20 = jSDocInfo12.hasThisType();
        java.lang.String str21 = jSDocInfo12.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo12.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo12.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo12.getEnumParameterType();
        boolean boolean25 = jSDocInfo12.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo12.getImplementedInterfaces();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING hi!" + "'", str11, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03722");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        boolean boolean12 = node3.isFromExterns();
        boolean boolean13 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node3.new FileLevelJsDocBuilder();
        boolean boolean15 = node3.isEmpty();
        boolean boolean16 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node24.setString("");
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean28 = node20.isGetElem();
        com.google.javascript.rhino.Node node29 = node20.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node20);
        boolean boolean31 = node20.isTypeOf();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node39.setString("");
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean43 = node35.isGetElem();
        com.google.javascript.rhino.Node node44 = node35.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node35);
        boolean boolean46 = node35.isTypeOf();
        boolean boolean47 = node20.hasChild(node35);
        com.google.javascript.rhino.Node node48 = node20.cloneTree();
        node3.addChildrenToFront(node20);
        node20.setSourceEncodedPosition((int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03723");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        boolean boolean49 = enumElementType46.isNullable();
        boolean boolean50 = enumElementType46.hasReferenceName();
        boolean boolean51 = enumElementType46.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property53 = enumElementType46.getSlot("function (): {1619070806}");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList65 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor66 = strComparableList65.iterator();
        boolean boolean67 = functionType59.equals((java.lang.Object) strComparableItor66);
        boolean boolean68 = functionType59.isArrayType();
        boolean boolean69 = functionType59.isInterface();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot71 = functionType59.getSlot("function (): {276907456}");
        boolean boolean73 = functionType59.isPropertyInExterns("Unknown class name");
        boolean boolean74 = enumElementType46.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) functionType59);
        boolean boolean75 = functionType59.isConstructor();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(property53);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strComparableList65);
        org.junit.Assert.assertNotNull(strComparableItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03724");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node20.setString("");
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean24 = node16.isGetElem();
        int int26 = node16.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node28 = node3.clonePropsFrom(node16);
        node16.setSourceEncodedPosition((int) '4');
        boolean boolean31 = node16.isNew();
        java.lang.String str32 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node16);
        boolean boolean33 = node16.isTry();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection34 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node16);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator35 = nodeCollection34.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeCollection34);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03725");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        int int48 = enumElementType46.getPropertiesCount();
        boolean boolean49 = enumElementType46.isNominalType();
        boolean boolean50 = enumElementType46.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType51 = enumElementType46.autoboxesTo();
        boolean boolean52 = enumElementType46.isNominalType();
        boolean boolean53 = enumElementType46.canBeCalled();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03726");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        node23.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType34 = jSTypeRegistry31.createFunctionType(jSType32, jSTypeArray33);
        boolean boolean35 = functionType34.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry14.createObjectType("hi!", node23, (com.google.javascript.rhino.jstype.ObjectType) functionType34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node38 = jSTypeRegistry14.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        boolean boolean46 = functionType45.isUnionType();
        boolean boolean47 = functionType45.isDateType();
        boolean boolean48 = functionType45.isResolved();
        boolean boolean49 = functionType45.isEmptyType();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection50 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType45);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType51 = functionType45.toMaybeEnumElementType();
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertNotNull(functionType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection50);
        org.junit.Assert.assertNull(enumElementType51);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03727");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        int int13 = node3.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node22.setString("");
        com.google.javascript.rhino.Node node25 = node18.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean26 = node18.isGetElem();
        com.google.javascript.rhino.Node node27 = node18.cloneNode();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node35.setString("");
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean39 = node31.isGetElem();
        int int41 = node31.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        com.google.javascript.rhino.Node node43 = node18.clonePropsFrom(node31);
        boolean boolean44 = node18.isGetElem();
        com.google.javascript.rhino.Node node45 = node14.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node54.setString("");
        com.google.javascript.rhino.Node node57 = node50.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean58 = node50.isGetElem();
        com.google.javascript.rhino.Node node59 = node50.cloneNode();
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node61 = node59.cloneTree();
        node61.setSourceEncodedPosition((int) (short) 10);
        boolean boolean64 = node61.isSetterDef();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node76.setString("");
        com.google.javascript.rhino.Node node79 = node72.useSourceInfoIfMissingFromForTree(node76);
        node76.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter82 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry84 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter82, false);
        com.google.javascript.rhino.jstype.JSType jSType85 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray86 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType87 = jSTypeRegistry84.createFunctionType(jSType85, jSTypeArray86);
        boolean boolean88 = functionType87.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry67.createObjectType("hi!", node76, (com.google.javascript.rhino.jstype.ObjectType) functionType87);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray90 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node91 = jSTypeRegistry67.createParametersWithVarArgs(jSTypeArray90);
        boolean boolean92 = node91.isIn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(52, node61, node91, 42, (int) (byte) 0);
        boolean boolean96 = node18.hasChild(node95);
        boolean boolean97 = node18.hasChildren();
        boolean boolean98 = node18.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(jSTypeArray86);
        org.junit.Assert.assertNotNull(functionType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNotNull(jSTypeArray90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03728");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNoResolvedType();
        boolean boolean93 = parameterizedType89.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType89.toMaybeParameterizedType();
        boolean boolean95 = parameterizedType94.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.ObjectType objectType96 = parameterizedType94.getTypeOfThis();
        boolean boolean97 = parameterizedType94.isParameterizedType();
        boolean boolean98 = parameterizedType94.isOrdinaryFunction();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03729");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable12 = functionType8.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType13 = functionType8.toMaybeEnumType();
        boolean boolean14 = functionType8.matchesNumberContext();
        com.google.javascript.rhino.Node node15 = functionType8.getRootNode();
        boolean boolean16 = functionType8.isUnionType();
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(objectTypeIterable12);
        org.junit.Assert.assertNull(enumType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03730");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection2 = jSDocInfo0.getMarkers();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(markerCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strCollection4);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03731");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        com.google.javascript.rhino.jstype.JSType jSType90 = parameterizedType89.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType91 = parameterizedType89.getIndexType();
        com.google.javascript.rhino.jstype.FunctionType functionType92 = parameterizedType89.toMaybeFunctionType();
        parameterizedType89.clearCachedValues();
        boolean boolean94 = parameterizedType89.isNoObjectType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertNotNull(jSType90);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNotNull(functionType92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03732");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1, false);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node12.setString("");
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node12);
        node12.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry3.createObjectType("hi!", node12, (com.google.javascript.rhino.jstype.ObjectType) functionType23);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node27 = jSTypeRegistry3.createParametersWithVarArgs(jSTypeArray26);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType34 = jSTypeRegistry31.createFunctionType(jSType32, jSTypeArray33);
        boolean boolean35 = functionType34.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable36 = functionType34.getCtorImplementedInterfaces();
        jSTypeRegistry3.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType34);
        boolean boolean38 = functionType34.isUnknownType();
        boolean boolean39 = functionType34.canBeCalled();
        com.google.javascript.rhino.jstype.JSType jSType40 = functionType34.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType objectType41 = functionType34.getPrototype();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node49.setString("");
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean53 = node45.isGetElem();
        com.google.javascript.rhino.Node node54 = node45.cloneNode();
        boolean boolean55 = node54.isContinue();
        boolean boolean56 = node54.isThrow();
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node54);
        boolean boolean58 = node57.isGetElem();
        functionType34.setSource(node57);
        int int60 = node57.getLength();
        boolean boolean61 = node57.isComma();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((-1), nodeArray64);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(42, nodeArray64);
        int int67 = node66.getLength();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node75.setString("");
        com.google.javascript.rhino.Node node78 = node71.useSourceInfoIfMissingFromForTree(node75);
        boolean boolean79 = node71.isGetElem();
        int int81 = node71.getIntProp((int) (byte) -1);
        boolean boolean82 = node71.isLabel();
        com.google.javascript.rhino.Node node83 = node71.getLastChild();
        boolean boolean84 = node71.isDebugger();
        boolean boolean86 = node71.getBooleanProp(2);
        node71.addSuppression("EXPR_RESULT");
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(4, node57, node66, node71);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile90 = node71.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertNotNull(functionType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(staticSourceFile90);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03733");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "true");
        boolean boolean3 = node2.isBlock();
        boolean boolean4 = node2.hasMoreThanOneChild();
        boolean boolean5 = node2.isDec();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03734");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry13.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType21 = jSTypeRegistry18.createFunctionType(jSType19, jSTypeArray20);
        boolean boolean22 = functionType21.isNominalType();
        boolean boolean23 = jSTypeRegistry13.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType21);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node32.setString("");
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean36 = node28.isGetElem();
        com.google.javascript.rhino.Node node37 = node28.cloneNode();
        boolean boolean38 = node37.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node37.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType48 = jSTypeRegistry45.createFunctionType(jSType46, jSTypeArray47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = functionType48.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry42.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = functionType48.getJSDocInfo();
        boolean boolean54 = functionType48.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType55 = jSTypeRegistry13.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node37, (com.google.javascript.rhino.jstype.JSType) functionType48);
        boolean boolean56 = node37.isGetElem();
        node37.setWasEmptyNode(true);
        boolean boolean59 = node10.hasChild(node37);
        node10.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node69.setString("");
        com.google.javascript.rhino.Node node72 = node65.useSourceInfoIfMissingFromForTree(node69);
        boolean boolean73 = node72.isFalse();
        int int74 = node72.getLineno();
        node10.addChildToFront(node72);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertNotNull(functionType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertNotNull(functionType48);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(enumType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03735");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNoResolvedType();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = parameterizedType89.getConstructor();
        com.google.javascript.rhino.jstype.FunctionType functionType94 = parameterizedType89.toMaybeFunctionType();
        boolean boolean96 = parameterizedType89.hasOwnProperty("{proxy:function (): {922945060}}");
        boolean boolean97 = parameterizedType89.isRegexpType();
        java.lang.String str98 = parameterizedType89.getReferenceName();
        boolean boolean99 = parameterizedType89.isNativeObjectType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertNotNull(functionType94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03736");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = functionType5.getOwnPropertyJSDocInfo("");
        boolean boolean8 = functionType5.isNullType();
        boolean boolean9 = functionType5.isInstanceType();
        boolean boolean10 = functionType5.isCheckedUnknownType();
        java.lang.String str11 = functionType5.toDebugHashCodeString();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNull(jSDocInfo7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "function (): {129155110}" + "'", str11, "function (): {129155110}");
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03737");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        boolean boolean13 = functionType10.isRecordType();
        int int14 = functionType10.getMaxArguments();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType21 = jSTypeRegistry18.createFunctionType(jSType19, jSTypeArray20);
        boolean boolean22 = functionType21.isNominalType();
        int int23 = functionType21.getPropertiesCount();
        boolean boolean25 = functionType21.removeProperty("JSDocInfo");
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType32 = jSTypeRegistry29.createFunctionType(jSType30, jSTypeArray31);
        boolean boolean33 = functionType32.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable34 = functionType32.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType35 = functionType32.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        functionType32.setJSDocInfo(jSDocInfo36);
        boolean boolean38 = jSDocInfo36.isHidden();
        jSDocInfo36.setDeprecated(false);
        functionType21.setPropertyJSDocInfo("", jSDocInfo36);
        java.lang.String str42 = jSDocInfo36.getBlockDescription();
        boolean boolean43 = jSDocInfo36.isNoCompile();
        functionType10.setPropertyJSDocInfo("function (): {780271264}", jSDocInfo36);
        boolean boolean45 = jSDocInfo36.isDeprecated();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertNotNull(functionType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertNotNull(functionType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable34);
        org.junit.Assert.assertNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03738");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        boolean boolean3 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03739");
        java.io.IOException iOException1 = new java.io.IOException("([, hi!, STRING hi!, STRING hi!])");
        java.io.IOException iOException3 = new java.io.IOException("function (): {467905151}");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03740");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType42 = jSTypeRegistry39.createFunctionType(jSType40, jSTypeArray41);
        boolean boolean43 = functionType42.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable44 = functionType42.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType45 = functionType42.unboxesTo();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection46 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType42);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray51);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry2.getType("PARAM_LIST");
        jSTypeRegistry2.clearNamedTypes();
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node69.setString("");
        com.google.javascript.rhino.Node node72 = node65.useSourceInfoIfMissingFromForTree(node69);
        node69.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType82 = jSTypeRegistry60.createObjectType("hi!", node69, (com.google.javascript.rhino.jstype.ObjectType) functionType80);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray83 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node84 = jSTypeRegistry60.createParametersWithVarArgs(jSTypeArray83);
        com.google.javascript.rhino.ErrorReporter errorReporter86 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry88 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter86, false);
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray90 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType91 = jSTypeRegistry88.createFunctionType(jSType89, jSTypeArray90);
        boolean boolean92 = functionType91.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable93 = functionType91.getCtorImplementedInterfaces();
        jSTypeRegistry60.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType91);
        boolean boolean95 = functionType91.matchesStringContext();
        boolean boolean96 = functionType91.canBeCalled();
        int int97 = functionType91.getMaxArguments();
        com.google.javascript.rhino.jstype.JSType jSType98 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) functionType91);
        boolean boolean99 = jSType98.isArrayType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertNotNull(functionType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(functionTypeCollection46);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(jSTypeArray83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSTypeArray90);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(jSType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03741");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNoResolvedType();
        boolean boolean93 = parameterizedType89.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType89.toMaybeParameterizedType();
        boolean boolean95 = parameterizedType94.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.ObjectType objectType96 = parameterizedType94.getTypeOfThis();
        boolean boolean97 = parameterizedType94.isParameterizedType();
        boolean boolean98 = parameterizedType94.matchesStringContext();
        boolean boolean99 = parameterizedType94.hasReferenceName();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03742");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.Node node45 = enumType44.getSource();
        boolean boolean47 = enumType44.removeProperty("function (): {621165152}");
        boolean boolean48 = enumType44.isNumberValueType();
        com.google.javascript.rhino.jstype.JSType jSType49 = enumType44.getIndexType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSType49);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03743");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, true);
        jSTypeRegistry2.forwardDeclareType("function (): {1006571299}");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = functionType10.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = functionType10.getJSDocInfo();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType20 = jSTypeRegistry17.createFunctionType(jSType18, jSTypeArray19);
        boolean boolean21 = functionType20.isNominalType();
        boolean boolean22 = functionType20.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.JSType jSType23 = functionType10.forceResolve(errorReporter14, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType20);
        boolean boolean24 = functionType10.isRegexpType();
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) functionType10, "function (): {415000397}");
        java.util.List<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = jSTypeRegistry2.createParameters(jSTypeList27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertNotNull(functionType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSType26);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03744");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node9.setString("");
        com.google.javascript.rhino.Node node12 = node5.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean13 = node5.isGetElem();
        int int15 = node5.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node24.setString("");
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean28 = node20.isGetElem();
        com.google.javascript.rhino.Node node29 = node20.cloneNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node37.setString("");
        com.google.javascript.rhino.Node node40 = node33.useSourceInfoIfMissingFromForTree(node37);
        boolean boolean41 = node33.isGetElem();
        int int43 = node33.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        com.google.javascript.rhino.Node node45 = node20.clonePropsFrom(node33);
        boolean boolean46 = node20.isGetElem();
        com.google.javascript.rhino.Node node47 = node16.useSourceInfoFrom(node20);
        com.google.javascript.rhino.Node node48 = node47.removeFirstChild();
        boolean boolean49 = node47.isCase();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(51, node47);
        boolean boolean51 = node47.isLabelName();
        int int53 = node47.getIntProp(31);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(0, node47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03745");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node20.setString("");
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean24 = node16.isGetElem();
        int int26 = node16.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node28 = node3.clonePropsFrom(node16);
        boolean boolean29 = node28.isNot();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node28.siblings();
        boolean boolean31 = node28.isOr();
        boolean boolean32 = node28.isBlock();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType38 = jSTypeRegistry35.createFunctionType(jSType36, jSTypeArray37);
        boolean boolean39 = functionType38.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList44 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor45 = strComparableList44.iterator();
        boolean boolean46 = functionType38.equals((java.lang.Object) strComparableItor45);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        boolean boolean53 = functionType52.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable54 = functionType52.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType56 = functionType52.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean57 = jSType56.isNoType();
        boolean boolean58 = functionType38.canAssignTo(jSType56);
        boolean boolean59 = functionType38.hasReferenceName();
        com.google.javascript.rhino.jstype.UnionType unionType60 = functionType38.toMaybeUnionType();
        com.google.javascript.rhino.Node node61 = functionType38.getParametersNode();
        boolean boolean62 = node28.hasChild(node61);
        com.google.javascript.rhino.Node node63 = node61.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node63.setSideEffectFlags(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertNotNull(functionType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strComparableList44);
        org.junit.Assert.assertNotNull(strComparableItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable54);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(unionType60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03746");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node8.setString("");
        com.google.javascript.rhino.Node node11 = node4.useSourceInfoIfMissingFromForTree(node8);
        boolean boolean12 = node4.isGetElem();
        com.google.javascript.rhino.Node node13 = node4.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] { node4, node26 };
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, nodeArray28, 4095, 46);
        boolean boolean32 = node31.isBreak();
        node31.addSuppression("{proxy:function (): {1997758754}}");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03747");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((-1), nodeArray2);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(42, nodeArray2);
        int int5 = node4.getLength();
        boolean boolean6 = node4.wasEmptyNode();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node14.setString("");
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node14);
        boolean boolean18 = node10.isGetElem();
        com.google.javascript.rhino.Node node19 = node10.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node10);
        node4.addChildToBack(node10);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node29.setString("");
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean33 = node25.isGetElem();
        int int35 = node25.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int41 = node40.getLineno();
        boolean boolean42 = node40.isEmpty();
        com.google.javascript.rhino.InputId inputId43 = com.google.javascript.jscomp.NodeUtil.getInputId(node40);
        boolean boolean44 = node36.isEquivalentToTyped(node40);
        com.google.javascript.rhino.Node node45 = node40.getLastSibling();
        boolean boolean46 = node40.isNull();
        boolean boolean47 = node40.isString();
        com.google.javascript.rhino.Node node48 = node4.useSourceInfoFromForTree(node40);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03748");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType12 = jSTypeRegistry9.createFunctionType(jSType10, jSTypeArray11);
        boolean boolean13 = functionType12.isUnionType();
        int int14 = functionType12.getMinArguments();
        jSTypeRegistry2.unregisterPropertyOnType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", (com.google.javascript.rhino.jstype.JSType) functionType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("Unknown class name");
        jSTypeRegistry2.clearTemplateTypeNames();
        boolean boolean19 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        boolean boolean21 = jSTypeRegistry2.isForwardDeclaredType("function (): {1534343319}");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry2.getNativeObjectType(jSTypeNative22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertNotNull(functionType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03749");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSTypeRegistry48.createFunctionType(jSType49, jSTypeArray50);
        boolean boolean52 = functionType51.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable53 = functionType51.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType55 = functionType51.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry59.createFunctionType(jSType60, jSTypeArray61);
        boolean boolean63 = functionType62.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable64 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType65 = functionType62.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        functionType62.setJSDocInfo(jSDocInfo66);
        com.google.javascript.rhino.jstype.JSType jSType68 = functionType51.resolve(errorReporter56, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = enumType44.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType51);
        com.google.javascript.rhino.jstype.ObjectType.Property property71 = enumType44.getSlot("");
        java.lang.Iterable iterable72 = enumType44.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType73 = enumType44.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType74 = enumType44.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType75 = enumType44.unboxesTo();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(functionType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNull(property71);
        org.junit.Assert.assertNotNull(iterable72);
        org.junit.Assert.assertNotNull(enumElementType73);
        org.junit.Assert.assertNotNull(enumElementType74);
        org.junit.Assert.assertNull(jSType75);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03750");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        boolean boolean10 = functionType5.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType11 = functionType5.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType12 = functionType5.dereference();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType13 = functionType5.toMaybeParameterizedType();
        boolean boolean14 = functionType5.hasImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType15 = functionType5.getImplicitPrototype();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType21 = jSTypeRegistry18.createFunctionType(jSType19, jSTypeArray20);
        boolean boolean22 = functionType21.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList27 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor28 = strComparableList27.iterator();
        boolean boolean29 = functionType21.equals((java.lang.Object) strComparableItor28);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType36 = jSTypeRegistry33.createFunctionType(jSType34, jSTypeArray35);
        boolean boolean37 = functionType36.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable38 = functionType36.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = functionType21.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType36, node39);
        com.google.javascript.rhino.jstype.JSType jSType42 = functionType21.getPropertyType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable43 = functionType21.getImplementedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType49 = jSTypeRegistry46.createFunctionType(jSType47, jSTypeArray48);
        boolean boolean50 = functionType49.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray55 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType56 = jSTypeRegistry53.createFunctionType(jSType54, jSTypeArray55);
        boolean boolean57 = functionType56.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable58 = functionType56.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType59 = functionType56.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType60 = functionType56.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = functionType49.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType56);
        com.google.javascript.rhino.Node node62 = functionType49.getParametersNode();
        boolean boolean63 = functionType21.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType) functionType49);
        boolean boolean64 = functionType5.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType) functionType21);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNull(parameterizedType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertNotNull(functionType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableList27);
        org.junit.Assert.assertNotNull(strComparableItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertNotNull(functionType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(objectTypeIterable43);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertNotNull(functionType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray55);
        org.junit.Assert.assertNotNull(functionType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03751");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.Node node14 = functionType5.getSource();
        boolean boolean16 = functionType5.isPropertyTypeInferred("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType jSType17 = functionType5.autoboxesTo();
        boolean boolean18 = functionType5.isInterface();
        boolean boolean19 = functionType5.isReturnTypeInferred();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03752");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType8 = functionType5.unboxesTo();
        boolean boolean10 = functionType5.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType11 = functionType5.getImplicitPrototype();
        com.google.javascript.rhino.jstype.JSType jSType12 = functionType5.getIndexType();
        com.google.javascript.rhino.jstype.ObjectType.Property property14 = functionType5.getSlot("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry17.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType25 = jSTypeRegistry22.createFunctionType(jSType23, jSTypeArray24);
        boolean boolean26 = functionType25.isNominalType();
        boolean boolean27 = jSTypeRegistry17.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node36.setString("");
        com.google.javascript.rhino.Node node39 = node32.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean40 = node32.isGetElem();
        com.google.javascript.rhino.Node node41 = node32.cloneNode();
        boolean boolean42 = node41.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node41.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = functionType52.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry46.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType52);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = functionType52.getJSDocInfo();
        boolean boolean58 = functionType52.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType59 = jSTypeRegistry17.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node41, (com.google.javascript.rhino.jstype.JSType) functionType52);
        com.google.javascript.rhino.jstype.EnumType enumType60 = enumType59.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType61 = enumType60.getElementsType();
        boolean boolean62 = enumElementType61.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType63 = enumElementType61.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType65 = enumElementType61.getPropertyType("function (): {672212780}");
        boolean boolean66 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) functionType5, jSType65);
        com.google.javascript.rhino.Node node68 = functionType5.getPropertyNode("(function (): {1006571299})");
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(property14);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertNotNull(functionType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(enumType59);
        org.junit.Assert.assertNotNull(enumType60);
        org.junit.Assert.assertNotNull(enumElementType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(enumElementType63);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03753");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1, false);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node12.setString("");
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node12);
        node12.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry3.createObjectType("hi!", node12, (com.google.javascript.rhino.jstype.ObjectType) functionType23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node33.setString("");
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node44.setString("");
        com.google.javascript.rhino.Node node47 = node40.useSourceInfoIfMissingFromForTree(node44);
        node44.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node57.setString("");
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean61 = node53.isGetElem();
        int int63 = node53.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        com.google.javascript.rhino.Node node65 = node44.srcrefTree(node64);
        java.lang.String str66 = node36.checkTreeEquals(node64);
        boolean boolean67 = node64.hasMoreThanOneChild();
        boolean boolean68 = node64.isNE();
        node64.setVarArgs(true);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(0, node12, node64, 44, 4);
        boolean boolean74 = node64.isName();
        boolean boolean75 = node64.isReturn();
        boolean boolean76 = node64.isBlock();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str66, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03754");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(40);
        boolean boolean2 = node1.isAdd();
        boolean boolean3 = node1.isDefaultCase();
        boolean boolean4 = node1.isString();
        boolean boolean5 = node1.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03755");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        boolean boolean46 = enumType44.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumType enumType47 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = enumType47.getJSDocInfo();
        com.google.javascript.rhino.jstype.ObjectType objectType49 = enumType47.getImplicitPrototype();
        java.lang.String str50 = objectType49.getNormalizedReferenceName();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(enumType47);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Object" + "'", str50, "Object");
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03756");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.JSType jSType45 = functionType37.restrictByNotNullOrUndefined();
        boolean boolean47 = functionType37.isPropertyInExterns("");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType53 = jSTypeRegistry50.createFunctionType(jSType51, jSTypeArray52);
        boolean boolean54 = functionType53.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable55 = functionType53.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType57 = functionType53.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType64 = jSTypeRegistry61.createFunctionType(jSType62, jSTypeArray63);
        boolean boolean65 = functionType64.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType64.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType67 = functionType64.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        functionType64.setJSDocInfo(jSDocInfo68);
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType53.resolve(errorReporter58, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType64);
        boolean boolean71 = functionType64.isVoidType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType64.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType74 = functionType64.findPropertyType("{proxy:function (): {922945060}}");
        com.google.javascript.rhino.jstype.JSType.TypePair typePair75 = functionType37.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) functionType64);
        boolean boolean77 = functionType37.isPropertyTypeInferred("function (): {1206011622}");
        com.google.javascript.rhino.jstype.ObjectType objectType78 = functionType37.dereference();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertNotNull(functionType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable55);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertNotNull(functionType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(typePair75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectType78);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03757");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node14 = node12.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo15.hasParameterType("[, hi!, STRING hi!, STRING hi!]");
        node12.setJSDocInfo(jSDocInfo15);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node12.getAncestors();
        boolean boolean20 = node12.isFunction();
        boolean boolean21 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((-1), nodeArray24);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, nodeArray24);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((-1), nodeArray29);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(16, nodeArray29, 8, (int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node26.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node35 = node12.srcref(node26);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node12.setStaticSourceFile(staticSourceFile36);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03758");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        boolean boolean12 = functionType8.isOrdinaryFunction();
        boolean boolean13 = functionType8.isFunctionPrototypeType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable14 = functionType8.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType15 = functionType8.getTypeOfThis();
        boolean boolean16 = functionType8.hasInstanceType();
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03759");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        boolean boolean49 = enumElementType46.isNullable();
        boolean boolean50 = enumElementType46.hasReferenceName();
        com.google.javascript.rhino.jstype.ObjectType.Property property52 = enumElementType46.getSlot("([, hi!, STRING hi!, STRING hi!])");
        boolean boolean53 = enumElementType46.canBeCalled();
        boolean boolean55 = enumElementType46.hasProperty("{1452875103}");
        boolean boolean56 = enumElementType46.isNullable();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03760");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        boolean boolean46 = enumType44.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumType enumType47 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope48 = enumType47.getParentScope();
        boolean boolean49 = enumType47.isEmptyType();
        boolean boolean51 = enumType47.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: PARAM_LIST\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = enumType47.getOwnPropertyJSDocInfo("function (): {979749933}");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(enumType47);
        org.junit.Assert.assertNotNull(jSTypeStaticScope48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03761");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList56 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableList56.iterator();
        boolean boolean58 = functionType50.equals((java.lang.Object) strComparableItor57);
        boolean boolean59 = functionType50.isArrayType();
        boolean boolean60 = functionType50.isInterface();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType50.getAllImplementedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry64.createAnonymousObjectType();
        boolean boolean66 = objectType65.isNominalType();
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry2.createFunctionTypeWithNewReturnType(functionType50, (com.google.javascript.rhino.jstype.JSType) objectType65);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = functionType50.getPossibleToBooleanOutcomes();
        functionType50.clearCachedValues();
        boolean boolean70 = functionType50.isFunctionPrototypeType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableList56);
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03762");
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(throwableList0);
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03763");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = enumElementType46.toMaybeEnumElementType();
        enumElementType46.clearResolved();
        java.lang.String str50 = enumElementType46.getReferenceName();
        boolean boolean52 = enumElementType46.hasProperty("Object");
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(enumElementType48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str50, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03764");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "true");
        boolean boolean3 = node2.isBlock();
        boolean boolean4 = node2.isFor();
        node2.putBooleanProp(14, true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03765");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray11 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType12 = jSTypeRegistry9.createFunctionType(jSType10, jSTypeArray11);
        boolean boolean13 = functionType12.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable14 = functionType12.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType15 = functionType12.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType16 = functionType12.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = functionType5.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType12);
        com.google.javascript.rhino.Node node18 = functionType5.getParametersNode();
        boolean boolean19 = node18.isNot();
        boolean boolean20 = node18.wasEmptyNode();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection21 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node18);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray11);
        org.junit.Assert.assertNotNull(functionType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeCollection21);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03766");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isInstanceType();
        com.google.javascript.rhino.jstype.TemplateType templateType91 = parameterizedType89.toMaybeTemplateType();
        com.google.javascript.rhino.jstype.EnumType enumType92 = parameterizedType89.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumType enumType93 = parameterizedType89.toMaybeEnumType();
        boolean boolean94 = parameterizedType89.isEnumElementType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(templateType91);
        org.junit.Assert.assertNull(enumType92);
        org.junit.Assert.assertNull(enumType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03767");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        java.lang.String str11 = node3.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo12.setVisibility(visibility14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getEnumParameterType();
        node3.setJSDocInfo(jSDocInfo12);
        jSDocInfo12.setLicense("");
        boolean boolean20 = jSDocInfo12.isExport();
        boolean boolean21 = jSDocInfo12.hasBaseType();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo12.getModifies();
        java.lang.String str23 = jSDocInfo12.getLendsName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING hi!" + "'", str11, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03768");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.Node node6 = functionType5.getRootNode();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node15.setString("");
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFromForTree(node15);
        java.lang.String str19 = node11.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo20.setVisibility(visibility22);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getEnumParameterType();
        node11.setJSDocInfo(jSDocInfo20);
        jSDocInfo20.setLicense("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo20.getVisibility();
        functionType5.setPropertyJSDocInfo("hi!", jSDocInfo20);
        java.lang.String str30 = jSDocInfo20.getReturnDescription();
        boolean boolean32 = jSDocInfo20.hasDescriptionForParameter("Not declared as a type name");
        java.lang.String str33 = jSDocInfo20.getVersion();
        java.lang.String str34 = jSDocInfo20.getDescription();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING hi!" + "'", str19, "STRING hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03769");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList9 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean10 = strComparableList4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType18 = jSTypeRegistry15.createFunctionType(jSType16, jSTypeArray17);
        boolean boolean19 = functionType18.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable20 = functionType18.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType21 = functionType18.unboxesTo();
        boolean boolean23 = functionType18.removeProperty("");
        int int24 = functionType18.getMaxArguments();
        java.lang.String str25 = functionType18.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType31 = jSTypeRegistry28.createFunctionType(jSType29, jSTypeArray30);
        boolean boolean32 = functionType31.isNominalType();
        functionType18.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType) functionType31);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType39 = jSTypeRegistry36.createFunctionType(jSType37, jSTypeArray38);
        boolean boolean40 = functionType39.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable41 = functionType39.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType42 = functionType39.unboxesTo();
        boolean boolean44 = functionType39.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType45 = functionType39.getImplicitPrototype();
        functionType18.setPrototypeBasedOn(objectType45);
        boolean boolean48 = jSTypeRegistry12.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType18, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node65.setString("");
        com.google.javascript.rhino.Node node68 = node61.useSourceInfoIfMissingFromForTree(node65);
        node65.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry73.createFunctionType(jSType74, jSTypeArray75);
        boolean boolean77 = functionType76.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry56.createObjectType("hi!", node65, (com.google.javascript.rhino.jstype.ObjectType) functionType76);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry12.createObjectType("", node53, (com.google.javascript.rhino.jstype.ObjectType) functionType76);
        boolean boolean80 = functionType76.isNominalType();
        com.google.javascript.rhino.jstype.JSType jSType82 = functionType76.getPropertyType("PARAM_LIST");
        boolean boolean83 = functionType76.isNativeObjectType();
        int int84 = strComparableList9.lastIndexOf((java.lang.Object) boolean83);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isNoCompile();
        boolean boolean87 = jSDocInfo85.isConstructor();
        boolean boolean88 = jSDocInfo85.hasBaseType();
        java.util.Collection<java.lang.String> strCollection89 = jSDocInfo85.getAuthors();
        int int90 = strComparableList9.indexOf((java.lang.Object) jSDocInfo85);
        java.lang.String[] strArray97 = new java.lang.String[] { "function (): {704344377}", "true", "([, hi!, STRING hi!, STRING hi!])", "function (): {1534343319}", "BITXOR hi!", "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" };
        java.lang.String[] strArray98 = strComparableList9.toArray(strArray97);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList99 = com.google.common.collect.ImmutableList.copyOf(strArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 4");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertNotNull(functionType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable20);
        org.junit.Assert.assertNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(functionType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertNotNull(functionType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(strCollection89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(strArray98);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03770");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = functionType8.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType11 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType8);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        node23.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType34 = jSTypeRegistry31.createFunctionType(jSType32, jSTypeArray33);
        boolean boolean35 = functionType34.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry14.createObjectType("hi!", node23, (com.google.javascript.rhino.jstype.ObjectType) functionType34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node38 = jSTypeRegistry14.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray37);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType45 = jSTypeRegistry42.createFunctionType(jSType43, jSTypeArray44);
        boolean boolean46 = functionType45.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        boolean boolean53 = functionType52.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable54 = functionType52.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType55 = functionType52.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType56 = functionType52.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = functionType45.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType52);
        boolean boolean58 = functionType52.isNumberObjectType();
        jSTypeRegistry2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) functionType52);
        jSTypeRegistry2.clearTemplateTypeNames();
        jSTypeRegistry2.identifyNonNullableName("function (): {170974891}");
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(jSType11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertNotNull(functionType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(functionType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03771");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        boolean boolean37 = functionType33.isUnknownType();
        boolean boolean38 = functionType33.canBeCalled();
        int int39 = functionType33.getMinArguments();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03772");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType51 = jSTypeRegistry48.createFunctionType(jSType49, jSTypeArray50);
        boolean boolean52 = functionType51.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable53 = functionType51.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType54 = functionType51.unboxesTo();
        boolean boolean56 = functionType51.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType57 = functionType51.getImplicitPrototype();
        boolean boolean58 = objectType57.isNullable();
        boolean boolean59 = enumType45.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.Node node60 = enumType45.getSource();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo61 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertNotNull(functionType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03773");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable7 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType9 = functionType5.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType15 = jSTypeRegistry12.createFunctionType(jSType13, jSTypeArray14);
        boolean boolean16 = functionType15.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable24 = functionType22.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType25 = functionType22.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType26 = functionType22.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = functionType15.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType22);
        boolean boolean28 = functionType22.isObject();
        boolean boolean30 = functionType22.isPropertyTypeInferred("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.jstype.JSType jSType31 = functionType5.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) functionType22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = functionType22.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType34 = functionType22.getPropertyType("");
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable7);
        org.junit.Assert.assertNotNull(jSType9);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertNotNull(functionType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertNotNull(jSType34);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03774");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, true);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray7 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType8 = jSTypeRegistry5.createFunctionType(jSType6, jSTypeArray7);
        boolean boolean9 = functionType8.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList14 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableList14.iterator();
        boolean boolean16 = functionType8.equals((java.lang.Object) strComparableItor15);
        boolean boolean17 = functionType8.isArrayType();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType23 = jSTypeRegistry20.createFunctionType(jSType21, jSTypeArray22);
        boolean boolean24 = functionType23.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable25 = functionType23.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType26 = functionType23.unboxesTo();
        boolean boolean28 = functionType23.removeProperty("");
        boolean boolean30 = functionType23.isPropertyTypeDeclared("Not declared as a type name");
        functionType8.matchConstraint((com.google.javascript.rhino.jstype.ObjectType) functionType23);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry34.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType42 = jSTypeRegistry39.createFunctionType(jSType40, jSTypeArray41);
        boolean boolean43 = functionType42.isNominalType();
        boolean boolean44 = jSTypeRegistry34.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node53.setString("");
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean57 = node49.isGetElem();
        com.google.javascript.rhino.Node node58 = node49.cloneNode();
        boolean boolean59 = node58.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node58.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61, false);
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64, false);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry66.createFunctionType(jSType67, jSTypeArray68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = functionType69.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry63.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType69.getJSDocInfo();
        boolean boolean75 = functionType69.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType76 = jSTypeRegistry34.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node58, (com.google.javascript.rhino.jstype.JSType) functionType69);
        com.google.javascript.rhino.Node node77 = enumType76.getSource();
        java.lang.String str78 = enumType76.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = enumType76.getOwnPropertyJSDocInfo("true");
        boolean boolean81 = enumType76.matchesNumberContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = enumType76.getJSDocInfo();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = jSTypeRegistry2.createFunctionTypeWithNewThisType(functionType23, (com.google.javascript.rhino.jstype.ObjectType) enumType76);
        boolean boolean84 = enumType76.isFunctionType();
        boolean boolean86 = enumType76.removeProperty("(EXPR_RESULT)");
        boolean boolean87 = enumType76.hasCachedValues();
        org.junit.Assert.assertNotNull(jSTypeArray7);
        org.junit.Assert.assertNotNull(functionType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparableList14);
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertNotNull(functionType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertNotNull(functionType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(enumType76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "enum{Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n}" + "'", str78, "enum{Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n}");
        org.junit.Assert.assertNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo82);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03775");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("hi!");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node10.setString("");
        com.google.javascript.rhino.Node node13 = node6.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean14 = node6.isGetElem();
        com.google.javascript.rhino.Node node15 = node6.cloneNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean27 = node19.isGetElem();
        int int29 = node19.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        com.google.javascript.rhino.Node node31 = node6.clonePropsFrom(node19);
        boolean boolean32 = node6.isGetElem();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType41 = jSTypeRegistry38.createFunctionType(jSType39, jSTypeArray40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = functionType41.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry35.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType41);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType50 = jSTypeRegistry47.createFunctionType(jSType48, jSTypeArray49);
        boolean boolean51 = functionType50.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable52 = functionType50.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType53 = functionType50.unboxesTo();
        boolean boolean55 = functionType50.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType56 = functionType50.getImplicitPrototype();
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry35.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType56, "unknown");
        com.google.javascript.rhino.jstype.JSType jSType59 = assertionFunctionSpec1.getAssertedType(node6, jSTypeRegistry35);
        boolean boolean61 = jSTypeRegistry35.hasNamespace("function (): {308555690}");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType63 = jSTypeRegistry35.getNativeFunctionType(jSTypeNative62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertNotNull(functionType41);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertNotNull(functionType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03776");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.Node node45 = enumType44.getSource();
        boolean boolean47 = enumType44.removeProperty("function (): {621165152}");
        boolean boolean48 = enumType44.isNativeObjectType();
        boolean boolean50 = enumType44.isPropertyTypeDeclared("Not declared as a type name");
        boolean boolean51 = enumType44.isAllType();
        boolean boolean52 = enumType44.isStringObjectType();
        boolean boolean53 = enumType44.isResolved();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03777");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        node7.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node20.setString("");
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean24 = node16.isGetElem();
        int int26 = node16.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node28 = node7.srcrefTree(node27);
        int int29 = node27.getSideEffectFlags();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isNumber();
        boolean boolean35 = node27.getBooleanProp((int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03778");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node3.isGetElem();
        com.google.javascript.rhino.Node node12 = node3.cloneNode();
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node14 = node12.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo15.hasParameterType("[, hi!, STRING hi!, STRING hi!]");
        node12.setJSDocInfo(jSDocInfo15);
        boolean boolean20 = jSDocInfo15.hasParameter("unknown");
        java.lang.String str21 = jSDocInfo15.getSourceName();
        jSDocInfo15.setDeprecated(true);
        java.lang.String str24 = jSDocInfo15.getLicense();
        boolean boolean25 = jSDocInfo15.isOverride();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03779");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.jstype.EnumType enumType45 = enumType44.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType46 = enumType45.getElementsType();
        boolean boolean47 = enumElementType46.matchesObjectContext();
        int int48 = enumElementType46.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType49 = enumElementType46.getConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50, false);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType58 = jSTypeRegistry55.createFunctionType(jSType56, jSTypeArray57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = functionType58.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry52.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType58);
        jSTypeRegistry52.forwardDeclareType("Not declared as a type name");
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64, false);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry66.createFunctionType(jSType67, jSTypeArray68);
        boolean boolean70 = functionType69.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList75 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor76 = strComparableList75.iterator();
        boolean boolean77 = functionType69.equals((java.lang.Object) strComparableItor76);
        com.google.javascript.rhino.Node node78 = functionType69.getSource();
        boolean boolean79 = functionType69.isNumberObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = functionType69.getBindReturnType(0);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry52.createNullableType((com.google.javascript.rhino.jstype.JSType) functionType81);
        boolean boolean83 = enumElementType46.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) functionType81);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType81.getCtorExtendedInterfaces();
        boolean boolean85 = functionType81.isDateType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(enumType45);
        org.junit.Assert.assertNotNull(enumElementType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(functionType49);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertNotNull(functionType58);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strComparableList75);
        org.junit.Assert.assertNotNull(strComparableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03780");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.Node node14 = functionType5.getSource();
        boolean boolean15 = functionType5.isNumberObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType17 = functionType5.getBindReturnType(0);
        boolean boolean18 = functionType5.isConstructor();
        com.google.javascript.rhino.jstype.JSType jSType20 = functionType5.findPropertyType("STRING hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType21 = functionType5.getTypeOfThis();
        boolean boolean22 = objectType21.isFunctionPrototypeType();
        boolean boolean23 = objectType21.isUnknownType();
        com.google.javascript.rhino.jstype.JSType jSType25 = objectType21.getRestrictedTypeGivenToBooleanOutcome(false);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(functionType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSType20);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(jSType25);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03781");
        java.io.IOException iOException1 = new java.io.IOException("InputId: STRING hi!");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException4 = new java.io.IOException("Named type with empty name component");
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03782");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        boolean boolean25 = functionType22.isStringObjectType();
        boolean boolean26 = functionType22.isFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType27 = functionType22.dereference();
        boolean boolean29 = objectType27.hasProperty("(function (): {1006571299})");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03783");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int5 = namePosition4.getPositionOnEndLine();
        int int6 = namePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int8 = namePosition7.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition2, namePosition4, namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node18.setString("");
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean22 = node14.isGetElem();
        boolean boolean23 = node14.isFromExterns();
        namePosition10.setItem(node14);
        int int25 = namePosition10.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int27 = namePosition26.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition28 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int29 = namePosition28.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int31 = namePosition30.getPositionOnEndLine();
        int int32 = namePosition30.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList35 = com.google.common.collect.ImmutableList.of(namePosition26, namePosition28, namePosition30, namePosition33);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition36 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int37 = namePosition36.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int39 = namePosition38.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int41 = namePosition40.getPositionOnEndLine();
        int int42 = namePosition40.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int44 = namePosition43.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList45 = com.google.common.collect.ImmutableList.of(namePosition36, namePosition38, namePosition40, namePosition43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int49 = namePosition48.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition50 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int51 = namePosition50.getPositionOnEndLine();
        int int52 = namePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int54 = namePosition53.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList55 = com.google.common.collect.ImmutableList.of(namePosition46, namePosition48, namePosition50, namePosition53);
        int int56 = namePosition48.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition57 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int58 = namePosition57.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition59 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int60 = namePosition59.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition61 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int62 = namePosition61.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int64 = namePosition63.getPositionOnEndLine();
        int int65 = namePosition63.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int67 = namePosition66.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList68 = com.google.common.collect.ImmutableList.of(namePosition59, namePosition61, namePosition63, namePosition66);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList69 = com.google.common.collect.ImmutableList.of(namePosition4, namePosition10, namePosition26, namePosition36, namePosition48, namePosition57, namePosition66);
        int int70 = namePosition4.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(namePositionList35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(namePositionList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(namePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(namePositionList68);
        org.junit.Assert.assertNotNull(namePositionList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03784");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasReturnType();
        boolean boolean17 = jSDocInfo15.containsDeclaration();
        functionType5.setPropertyJSDocInfo("STRING hi!", jSDocInfo15);
        java.lang.Iterable iterable19 = functionType5.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType20 = functionType5.toMaybeEnumElementType();
        boolean boolean21 = functionType5.isReturnTypeInferred();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasReturnType();
        boolean boolean25 = jSDocInfo22.hasDescriptionForParameter("hi!");
        int int26 = jSDocInfo22.getParameterCount();
        boolean boolean27 = jSDocInfo22.hasType();
        boolean boolean28 = jSDocInfo22.isConstant();
        functionType5.setJSDocInfo(jSDocInfo22);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node41.setString("");
        com.google.javascript.rhino.Node node44 = node37.useSourceInfoIfMissingFromForTree(node41);
        node41.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType52 = jSTypeRegistry49.createFunctionType(jSType50, jSTypeArray51);
        boolean boolean53 = functionType52.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry32.createObjectType("hi!", node41, (com.google.javascript.rhino.jstype.ObjectType) functionType52);
        boolean boolean55 = functionType52.isStringObjectType();
        boolean boolean56 = functionType52.isFunctionType();
        com.google.javascript.rhino.Node node57 = functionType52.getParametersNode();
        boolean boolean58 = node57.isBreak();
        functionType5.setSource(node57);
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iterable19);
        org.junit.Assert.assertNull(enumElementType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(functionType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03785");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>>> strComparableListBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(strComparableListBuilder0);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03786");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        com.google.javascript.rhino.Node node7 = functionType5.getPropertyNode("hi!");
        java.util.Set<java.lang.String> strSet8 = functionType5.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType9 = functionType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        node21.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType32 = jSTypeRegistry29.createFunctionType(jSType30, jSTypeArray31);
        boolean boolean33 = functionType32.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry12.createObjectType("hi!", node21, (com.google.javascript.rhino.jstype.ObjectType) functionType32);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType41 = jSTypeRegistry38.createFunctionType(jSType39, jSTypeArray40);
        boolean boolean42 = functionType41.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable43 = functionType41.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType44 = functionType41.unboxesTo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        functionType41.setJSDocInfo(jSDocInfo45);
        boolean boolean47 = jSDocInfo45.isHidden();
        functionType32.setPropertyJSDocInfo("", jSDocInfo45);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo45.getType();
        boolean boolean50 = jSDocInfo45.isConsistentIdGenerator();
        objectType9.setJSDocInfo(jSDocInfo45);
        com.google.javascript.rhino.Node node52 = objectType9.getRootNode();
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertNotNull(functionType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertNotNull(functionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable43);
        org.junit.Assert.assertNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03787");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean90 = parameterizedType89.isNominalType();
        boolean boolean91 = parameterizedType89.isUnknownType();
        boolean boolean92 = parameterizedType89.isUnknownType();
        com.google.javascript.rhino.jstype.ObjectType.Property property94 = parameterizedType89.getOwnSlot("{235784506}");
        boolean boolean96 = parameterizedType89.hasOwnProperty("function (): {1806989755}");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(property94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03788");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray4 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType5 = jSTypeRegistry2.createFunctionType(jSType3, jSTypeArray4);
        boolean boolean6 = functionType5.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableList11.iterator();
        boolean boolean13 = functionType5.equals((java.lang.Object) strComparableItor12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType19 = jSTypeRegistry16.createFunctionType(jSType17, jSTypeArray18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = functionType19.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = functionType5.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) functionType19);
        boolean boolean23 = functionType5.isNominalType();
        functionType5.clearCachedValues();
        boolean boolean25 = functionType5.isNullType();
        boolean boolean26 = functionType5.isVoidType();
        boolean boolean27 = functionType5.isInterface();
        boolean boolean29 = functionType5.removeProperty("Named type with empty name component");
        org.junit.Assert.assertNotNull(jSTypeArray4);
        org.junit.Assert.assertNotNull(functionType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableList11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertNotNull(functionType19);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03789");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        boolean boolean91 = parameterizedType89.isPropertyTypeDeclared("function (): {308555690}");
        boolean boolean92 = parameterizedType89.isNoResolvedType();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = parameterizedType89.getConstructor();
        boolean boolean95 = parameterizedType89.isPropertyInExterns("function (): {384404848}");
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType89.getIndexType();
        boolean boolean98 = parameterizedType89.removeProperty("function (): {2045378132}");
        boolean boolean99 = parameterizedType89.isUnknownType();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.lang.String str5 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(nodeCollection6);
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03791");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node11.setString("");
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node11);
        node11.setIsSyntheticBlock(false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType22 = jSTypeRegistry19.createFunctionType(jSType20, jSTypeArray21);
        boolean boolean23 = functionType22.isNominalType();
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry2.createObjectType("hi!", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType22);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node26 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray25);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType33 = jSTypeRegistry30.createFunctionType(jSType31, jSTypeArray32);
        boolean boolean34 = functionType33.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = functionType33.getCtorImplementedInterfaces();
        jSTypeRegistry2.registerPropertyOnType("hi!", (com.google.javascript.rhino.jstype.JSType) functionType33);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry2.getType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType44 = jSTypeRegistry41.createFunctionType(jSType42, jSTypeArray43);
        boolean boolean45 = functionType44.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList50 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableList50.iterator();
        boolean boolean52 = functionType44.equals((java.lang.Object) strComparableItor51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType59 = jSTypeRegistry56.createFunctionType(jSType57, jSTypeArray58);
        boolean boolean60 = functionType59.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable61 = functionType59.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = functionType44.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType59, node62);
        java.util.Set<java.lang.String> strSet64 = functionType44.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = functionType44.getParentScope();
        com.google.javascript.rhino.Node node67 = functionType44.getPropertyNode("");
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry70.createFunctionType(jSType71, jSTypeArray72);
        boolean boolean74 = functionType73.isUnionType();
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry77.createFunctionType(jSType78, jSTypeArray79);
        boolean boolean81 = functionType80.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType80.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType83 = functionType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType80.getReturnType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = functionType73.testForEquality((com.google.javascript.rhino.jstype.JSType) functionType80);
        boolean boolean86 = functionType80.isNumberObjectType();
        boolean boolean87 = functionType80.isReturnTypeInferred();
        com.google.javascript.rhino.jstype.JSType jSType88 = functionType80.getParameterType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType89 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType44, jSType88);
        com.google.javascript.rhino.jstype.JSType jSType90 = parameterizedType89.collapseUnion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = parameterizedType89.getJSDocInfo();
        boolean boolean92 = parameterizedType89.isInterface();
        boolean boolean93 = parameterizedType89.isNoType();
        java.util.Set set94 = parameterizedType89.getOwnPropertyNames();
        boolean boolean96 = parameterizedType89.isPropertyInExterns("InputId: {proxy:function (): {1157916158}}");
        java.lang.Iterable iterable97 = parameterizedType89.getCtorImplementedInterfaces();
        boolean boolean99 = parameterizedType89.isPropertyInExterns("function (): {1517454195}");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertNotNull(functionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(functionType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertNotNull(functionType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableList50);
        org.junit.Assert.assertNotNull(strComparableItor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertNotNull(functionType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(parameterizedType89);
        org.junit.Assert.assertNotNull(jSType90);
        org.junit.Assert.assertNull(jSDocInfo91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(set94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(iterable97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03792");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList4 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor5 = strComparableList4.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList6 = strComparableList4.reverse();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream7 = strComparableList6.parallelStream();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        int int9 = strComparableList6.indexOf((java.lang.Object) visibility8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType15 = jSTypeRegistry12.createFunctionType(jSType13, jSTypeArray14);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType21 = jSTypeRegistry18.createFunctionType(jSType19, jSTypeArray20);
        boolean boolean22 = functionType21.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList27 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor28 = strComparableList27.iterator();
        boolean boolean29 = functionType21.equals((java.lang.Object) strComparableItor28);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType36 = jSTypeRegistry33.createFunctionType(jSType34, jSTypeArray35);
        boolean boolean37 = functionType36.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable38 = functionType36.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = functionType21.defineSynthesizedProperty("", (com.google.javascript.rhino.jstype.JSType) functionType36, node39);
        boolean boolean42 = functionType36.removeProperty("Not declared as a type name");
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType48 = jSTypeRegistry45.createFunctionType(jSType46, jSTypeArray47);
        boolean boolean49 = functionType48.isUnionType();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList54 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor55 = strComparableList54.iterator();
        boolean boolean56 = functionType48.equals((java.lang.Object) strComparableItor55);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry59.createFunctionType(jSType60, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = functionType62.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType.TypePair typePair65 = functionType48.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) functionType62);
        boolean boolean66 = jSTypeRegistry12.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) functionType36, (com.google.javascript.rhino.jstype.ObjectType) functionType62);
        boolean boolean67 = strComparableList6.contains((java.lang.Object) functionType62);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator68 = strComparableList6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList69 = strComparableList6.reverse();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder70 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder72 = nodeSourcePositionBuilder70.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node80.setString("");
        com.google.javascript.rhino.Node node83 = node76.useSourceInfoIfMissingFromForTree(node80);
        boolean boolean84 = node76.isGetElem();
        int int86 = node76.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = com.google.javascript.jscomp.NodeUtil.newExpr(node76);
        com.google.javascript.rhino.Node node88 = node76.detachFromParent();
        boolean boolean89 = node76.isQuotedString();
        boolean boolean90 = node76.isNoSideEffectsCall();
        typePosition71.setItem(node76);
        int int92 = typePosition71.getPositionOnEndLine();
        boolean boolean93 = strComparableList6.contains((java.lang.Object) typePosition71);
        int int94 = typePosition71.getEndLine();
        typePosition71.setPositionInformation((int) (short) 1, 3, 29, (int) (short) 1);
        org.junit.Assert.assertNotNull(strComparableList4);
        org.junit.Assert.assertNotNull(strComparableItor5);
        org.junit.Assert.assertNotNull(strComparableList6);
        org.junit.Assert.assertNotNull(strComparableStream7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertNotNull(functionType15);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertNotNull(functionType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableList27);
        org.junit.Assert.assertNotNull(strComparableItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertNotNull(functionType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertNotNull(functionType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strComparableList54);
        org.junit.Assert.assertNotNull(strComparableItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNull(jSDocInfo64);
        org.junit.Assert.assertNotNull(typePair65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator68);
        org.junit.Assert.assertNotNull(strComparableList69);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder70);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03793");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        boolean boolean11 = node10.isFalse();
        int int12 = node10.getLineno();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec14 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        java.lang.String str15 = assertionFunctionSpec14.getFunctionName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node23.setString("");
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean27 = node19.isGetElem();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node19);
        boolean boolean30 = node19.isTypeOf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node38.setString("");
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean42 = node34.isGetElem();
        com.google.javascript.rhino.Node node43 = node34.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node34);
        boolean boolean45 = node34.isTypeOf();
        boolean boolean46 = node19.hasChild(node34);
        boolean boolean47 = node19.isInstanceOf();
        node19.setLength(51);
        com.google.javascript.rhino.Node node50 = assertionFunctionSpec14.getAssertedParam(node19);
        boolean boolean51 = node50.isGetterDef();
        com.google.javascript.rhino.Node node52 = node50.removeFirstChild();
        int int53 = node10.getIndexOfChild(node50);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str15, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03794");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType10 = jSTypeRegistry7.createFunctionType(jSType8, jSTypeArray9);
        boolean boolean11 = functionType10.isNominalType();
        boolean boolean12 = jSTypeRegistry2.declareType("function (): {621165152}", (com.google.javascript.rhino.jstype.JSType) functionType10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node21.setString("");
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean25 = node17.isGetElem();
        com.google.javascript.rhino.Node node26 = node17.cloneNode();
        boolean boolean27 = node26.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node26.getStaticSourceFile();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType37 = jSTypeRegistry34.createFunctionType(jSType35, jSTypeArray36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = functionType37.getOwnPropertyJSDocInfo("");
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry31.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = functionType37.getJSDocInfo();
        boolean boolean43 = functionType37.hasOwnProperty("Unknown class name");
        com.google.javascript.rhino.jstype.EnumType enumType44 = jSTypeRegistry2.createEnumType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", node26, (com.google.javascript.rhino.jstype.JSType) functionType37);
        com.google.javascript.rhino.Node node45 = enumType44.getSource();
        boolean boolean47 = enumType44.removeProperty("JSDocInfo");
        com.google.javascript.rhino.jstype.ObjectType objectType48 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) enumType44);
        boolean boolean49 = objectType48.isNullType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = objectType48.getPossibleToBooleanOutcomes();
        boolean boolean51 = objectType48.isNullType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertNotNull(functionType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertNotNull(functionType37);
        org.junit.Assert.assertNull(jSDocInfo39);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(enumType44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03795");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("");
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("{415622228}");
        boolean boolean10 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03796");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(40);
        boolean boolean3 = node2.isAdd();
        boolean boolean4 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node13.setString("");
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean17 = node9.isGetElem();
        com.google.javascript.rhino.Node node18 = node9.cloneNode();
        boolean boolean19 = node18.isDebugger();
        boolean boolean20 = node18.isNull();
        boolean boolean21 = node18.isComma();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 10, (int) '4');
        int int26 = node24.getIntProp(2);
        boolean boolean27 = node24.isGetterDef();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 1, 100, (int) ' ');
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node39.setString("");
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean43 = node35.isGetElem();
        com.google.javascript.rhino.Node node44 = node35.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node35);
        boolean boolean46 = node35.isNot();
        com.google.javascript.rhino.Node node47 = node31.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), nodeArray49);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(4095, node2, node24, node31, node50, 52, (-1));
        boolean boolean55 = node24.isCatch();
        boolean boolean56 = node24.wasEmptyNode();
        boolean boolean57 = node24.isLabelName();
        node24.putBooleanProp(51, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03797");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        int int5 = node4.getLineno();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node13.setString("");
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean17 = node9.isGetElem();
        com.google.javascript.rhino.Node node18 = node9.cloneNode();
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node18.cloneTree();
        node20.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node20.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(46, node4, node20, (int) (byte) -1, (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node34.setString("");
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean38 = node30.isGetElem();
        int int40 = node30.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node49.setString("");
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean53 = node45.isGetElem();
        com.google.javascript.rhino.Node node54 = node45.cloneNode();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node62.setString("");
        com.google.javascript.rhino.Node node65 = node58.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean66 = node58.isGetElem();
        int int68 = node58.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        com.google.javascript.rhino.Node node70 = node45.clonePropsFrom(node58);
        boolean boolean71 = node45.isGetElem();
        com.google.javascript.rhino.Node node72 = node41.useSourceInfoFrom(node45);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(40);
        boolean boolean75 = node74.isAdd();
        node72.addChildToFront(node74);
        com.google.javascript.rhino.Node node77 = node4.useSourceInfoFrom(node74);
        boolean boolean78 = node4.isCatch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03798");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4, false);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType9 = jSTypeRegistry6.createFunctionType(jSType7, jSTypeArray8);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType16 = jSTypeRegistry13.createFunctionType(jSType14, jSTypeArray15);
        boolean boolean17 = functionType16.isUnionType();
        int int18 = functionType16.getMinArguments();
        jSTypeRegistry6.unregisterPropertyOnType("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n", (com.google.javascript.rhino.jstype.JSType) functionType16);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.FunctionType functionType25 = jSTypeRegistry22.createFunctionType(jSType23, jSTypeArray24);
        boolean boolean26 = functionType25.isNominalType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable27 = functionType25.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType28 = functionType25.unboxesTo();
        boolean boolean30 = functionType25.removeProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = functionType25.getImplicitPrototype();
        boolean boolean32 = functionType16.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        boolean boolean34 = jSTypeRegistry2.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType31, objectType33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = objectType31.getTypeOfThis();
        boolean boolean36 = objectType35.isBooleanValueType();
        org.junit.Assert.assertNotNull(objectType3);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertNotNull(functionType9);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(functionType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertNotNull(functionType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03799");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList8 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableList8.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList10 = strComparableList8.reverse();
        boolean boolean11 = strSet2.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList8);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList20 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableList20.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList22 = strComparableList20.reverse();
        boolean boolean23 = strSet14.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList32 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableList32.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList34 = strComparableList32.reverse();
        boolean boolean35 = strSet26.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList44 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor45 = strComparableList44.iterator();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList46 = strComparableList44.reverse();
        boolean boolean47 = strSet38.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList48 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet2, (java.util.AbstractSet<java.lang.String>) strSet14, (java.util.AbstractSet<java.lang.String>) strSet26, (java.util.AbstractSet<java.lang.String>) strSet38);
        int int49 = strSet38.size();
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList54 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList59 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!", (java.lang.Comparable<java.lang.String>) "STRING hi!");
        boolean boolean60 = strComparableList54.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList59);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags61 = new com.google.javascript.rhino.Node.SideEffectFlags();
        int int62 = strComparableList54.lastIndexOf((java.lang.Object) sideEffectFlags61);
        boolean boolean63 = strSet38.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList54);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator64 = strComparableList54.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Comparable<java.lang.String>> strComparableItor66 = strComparableList54.listIterator(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (16) must not be greater than size (4)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparableList8);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNotNull(strComparableList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strComparableList20);
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertNotNull(strComparableList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableList32);
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertNotNull(strComparableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableList44);
        org.junit.Assert.assertNotNull(strComparableItor45);
        org.junit.Assert.assertNotNull(strComparableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSetList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(strComparableList54);
        org.junit.Assert.assertNotNull(strComparableList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator64);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test03800");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node7.setString("");
        com.google.javascript.rhino.Node node10 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node18.setString("");
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node18);
        node18.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node31.setString("");
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean35 = node27.isGetElem();
        int int37 = node27.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newExpr(node27);
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node38);
        java.lang.String str40 = node10.checkTreeEquals(node38);
        boolean boolean41 = node38.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node49.setString("");
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node60.setString("");
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node60);
        node60.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("hi!", 54, (int) (short) -1);
        node73.setString("");
        com.google.javascript.rhino.Node node76 = node69.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean77 = node69.isGetElem();
        int int79 = node69.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.jscomp.NodeUtil.newExpr(node69);
        com.google.javascript.rhino.Node node81 = node60.srcrefTree(node80);
        java.lang.String str82 = node52.checkTreeEquals(node80);
        com.google.javascript.rhino.Node node83 = node38.useSourceInfoFrom(node80);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node80.siblings();
        java.lang.String str85 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node80);
        node80.setSourceEncodedPositionForTree(2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str40, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n" + "'", str82, "Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nEXPR_RESULT\n    STRING hi!\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: EXPR_RESULT\n    STRING hi!\n");
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertNull(str85);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        long long25 = secondMoment20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        long long27 = variance26.getN();
        variance26.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long31 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double double48 = secondMoment32.evaluate(doubleArray44);
        variance30.incrementAll(doubleArray44);
        double double51 = variance26.evaluate(doubleArray44, (double) (short) -1);
        double double52 = variance18.evaluate(doubleArray44);
        java.lang.Class<?> wildcardClass53 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 24.666666666666668d + "'", double51 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 24.666666666666668d + "'", double52 == 24.666666666666668d);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        variance1.clear();
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) (short) -1);
        secondMoment7.clear();
        double double14 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        secondMoment15.increment((double) (short) 0);
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double double31 = secondMoment15.evaluate(doubleArray27);
        secondMoment7.incrementAll(doubleArray27, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = variance1.evaluate(doubleArray27, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5d + "'", double20 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 74.0d + "'", double31 == 74.0d);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        long long16 = secondMoment2.getN();
        secondMoment2.clear();
        double double18 = secondMoment2.getResult();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        secondMoment25.increment((double) (short) 0);
        double double30 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        double double41 = secondMoment25.evaluate(doubleArray37);
        double[] doubleArray42 = new double[] {};
        secondMoment25.incrementAll(doubleArray42);
        double double44 = secondMoment22.evaluate(doubleArray42);
        variance21.incrementAll(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double[] doubleArray60 = new double[] { 10, (byte) 100 };
        double double61 = secondMoment48.evaluate(doubleArray60);
        double double62 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment48);
        long long64 = secondMoment48.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment48);
        double double66 = secondMoment48.getResult();
        secondMoment48.clear();
        secondMoment48.increment(Double.NaN);
        secondMoment48.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long74 = variance73.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        secondMoment75.increment((double) (short) 0);
        double double80 = secondMoment75.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double double91 = secondMoment75.evaluate(doubleArray87);
        variance73.incrementAll(doubleArray87);
        secondMoment48.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance21.evaluate(doubleArray87, 7077.0d, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5d + "'", double30 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 74.0d + "'", double41 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 4050.0d + "'", double62 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2L + "'", long64 == 2L);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.5d + "'", double80 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 74.0d + "'", double91 == 74.0d);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        secondMoment0.increment((double) (short) -1);
        java.lang.Class<?> wildcardClass7 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        double double36 = variance8.evaluate(doubleArray33, 0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        secondMoment38.increment((double) (short) -1);
        long long44 = secondMoment38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        double double47 = secondMoment38.getResult();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double[] doubleArray61 = new double[] { 10, (byte) 100 };
        double double62 = secondMoment49.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        secondMoment64.increment((double) (short) 0);
        double double69 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double double80 = secondMoment64.evaluate(doubleArray76);
        double[] doubleArray81 = new double[] {};
        secondMoment64.incrementAll(doubleArray81);
        double double85 = variance63.evaluate(doubleArray81, (int) (byte) 0, 0);
        double double86 = secondMoment49.evaluate(doubleArray81);
        secondMoment38.incrementAll(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            variance8.incrementAll(doubleArray81, (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 2025.0d + "'", double36 == 2025.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 544.5d + "'", double47 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 4050.0d + "'", double62 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.5d + "'", double69 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4050.0d + "'", double86 == 4050.0d);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (short) 10);
        secondMoment0.increment((double) 2L);
        double double7 = secondMoment0.getResult();
        double double8 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        secondMoment22.incrementAll(doubleArray45);
        double double49 = variance21.evaluate(doubleArray45, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = secondMoment0.evaluate(doubleArray45, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 482.66666666666663d + "'", double7 == 482.66666666666663d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 482.66666666666663d + "'", double8 == 482.66666666666663d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        variance27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment((double) (short) -1);
        secondMoment39.clear();
        secondMoment39.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double double66 = secondMoment39.evaluate(doubleArray61);
        double double67 = variance27.evaluate(doubleArray61);
        double double68 = secondMoment11.evaluate(doubleArray61);
        secondMoment11.increment((double) (byte) 0);
        double double71 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        double[] doubleArray78 = new double[] { (-1L), 0, 10L };
        secondMoment72.incrementAll(doubleArray78, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = secondMoment11.evaluate(doubleArray78, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 37.0d + "'", double67 == 37.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 80.75d + "'", double71 == 80.75d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        double[] doubleArray63 = new double[] {};
        secondMoment46.incrementAll(doubleArray63);
        double double65 = secondMoment43.evaluate(doubleArray63);
        variance0.incrementAll(doubleArray63);
        variance0.clear();
        variance0.setBiasCorrected(false);
        double[] doubleArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double73 = variance0.evaluate(doubleArray70, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        long long6 = secondMoment0.getN();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        long long27 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        secondMoment30.increment((double) (short) 0);
        double double35 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        secondMoment36.increment((double) (short) 0);
        double double41 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double double52 = secondMoment36.evaluate(doubleArray48);
        double[] doubleArray53 = new double[] {};
        secondMoment36.incrementAll(doubleArray53);
        secondMoment30.incrementAll(doubleArray53);
        double double57 = variance28.evaluate(doubleArray53, (double) 6L);
        double double58 = variance8.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long61 = variance60.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        secondMoment62.increment((double) (short) 0);
        double double67 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double double78 = secondMoment62.evaluate(doubleArray74);
        double double80 = variance60.evaluate(doubleArray74, (double) 4L);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = variance8.evaluate(doubleArray74, (int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 544.5d + "'", double7 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.5d + "'", double67 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 74.0d + "'", double78 == 74.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 37.0d + "'", double80 == 37.0d);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        double[] doubleArray19 = new double[] { (short) 1 };
        secondMoment1.incrementAll(doubleArray19);
        long long21 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        java.lang.Class<?> wildcardClass23 = secondMoment1.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        java.lang.Class<?> wildcardClass5 = secondMoment1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1L);
        variance2.increment((double) (byte) -1);
        variance2.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        double[] doubleArray22 = new double[] { 10, (byte) 100 };
        double double23 = secondMoment10.evaluate(doubleArray22);
        long long24 = secondMoment10.getN();
        secondMoment10.clear();
        double double26 = secondMoment10.getResult();
        secondMoment10.increment((double) 1.0f);
        secondMoment10.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        long long37 = secondMoment32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        secondMoment39.incrementAll(doubleArray62);
        secondMoment32.incrementAll(doubleArray62);
        double double66 = secondMoment10.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = variance2.evaluate(doubleArray62, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 2.0d + "'", double66 == 2.0d);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double double24 = secondMoment8.evaluate(doubleArray20);
        double[] doubleArray25 = new double[] {};
        secondMoment8.incrementAll(doubleArray25);
        double double29 = variance7.evaluate(doubleArray25, (int) (byte) 0, 0);
        variance6.incrementAll(doubleArray25);
        double double31 = secondMoment0.evaluate(doubleArray25);
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = secondMoment0.evaluate(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 74.0d + "'", double24 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        variance9.clear();
        variance9.increment((double) 10.0f);
        variance9.increment(2025.0d);
        variance9.increment((double) 4L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment(272.25d);
        secondMoment28.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long46 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        double[] doubleArray67 = new double[] {};
        secondMoment50.incrementAll(doubleArray67);
        double double69 = secondMoment47.evaluate(doubleArray67);
        double double70 = variance45.evaluate(doubleArray67);
        secondMoment28.incrementAll(doubleArray67, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = variance9.evaluate(doubleArray67, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance6.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        double[] doubleArray26 = new double[] {};
        secondMoment9.incrementAll(doubleArray26);
        double double30 = variance8.evaluate(doubleArray26, (int) (byte) 0, 0);
        long long31 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double double48 = secondMoment32.evaluate(doubleArray44);
        variance8.incrementAll(doubleArray44);
        long long50 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        secondMoment54.increment((double) (short) 0);
        double double59 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double double70 = secondMoment54.evaluate(doubleArray66);
        double[] doubleArray71 = new double[] {};
        secondMoment54.incrementAll(doubleArray71);
        double double73 = secondMoment51.evaluate(doubleArray71);
        variance8.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            variance6.incrementAll(doubleArray71, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3L + "'", long50 == 3L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.5d + "'", double59 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.increment(1.0d);
        double[] doubleArray10 = new double[] { (-1L), 0, 10L };
        secondMoment4.incrementAll(doubleArray10, 0, 0);
        double[] doubleArray16 = new double[] { 10, (byte) 100 };
        double double17 = secondMoment4.evaluate(doubleArray16);
        long long18 = secondMoment4.getN();
        double double19 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) (short) -1);
        secondMoment20.clear();
        double double27 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        secondMoment20.incrementAll(doubleArray40, 0, (int) (short) 0);
        double double48 = secondMoment4.evaluate(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = variance1.evaluate(doubleArray40, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        variance9.clear();
        variance9.increment((double) 10.0f);
        variance9.increment(2025.0d);
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = variance9.evaluate(doubleArray26, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment((double) ' ');
        double double47 = secondMoment44.getResult();
        boolean boolean48 = variance28.equals((java.lang.Object) double47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = variance28.evaluate(doubleArray55);
        variance28.clear();
        variance28.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 37.0d + "'", double59 == 37.0d);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        double[] doubleArray33 = new double[] { (-1L), 0, 10L };
        secondMoment27.incrementAll(doubleArray33, 0, 0);
        double[] doubleArray39 = new double[] { 10, (byte) 100 };
        double double40 = secondMoment27.evaluate(doubleArray39);
        double double41 = secondMoment27.getResult();
        long long42 = secondMoment27.getN();
        long long43 = secondMoment27.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        boolean boolean45 = secondMoment20.equals((java.lang.Object) secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        variance47.clear();
        variance47.clear();
        double double50 = variance47.getResult();
        variance47.clear();
        long long52 = variance47.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        long long63 = secondMoment53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        secondMoment53.incrementAll(doubleArray70, 0, (int) (short) 1);
        double double77 = variance47.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = secondMoment1.evaluate(doubleArray70, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4050.0d + "'", double40 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 4050.0d + "'", double41 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 37.0d + "'", double77 == 37.0d);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        long long21 = variance8.getN();
        double double22 = variance8.getResult();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 272.25d + "'", double22 == 272.25d);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        long long11 = secondMoment6.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        long long22 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        secondMoment12.incrementAll(doubleArray29, 0, (int) (short) 1);
        secondMoment6.incrementAll(doubleArray29, (int) (byte) 0, (int) (byte) 1);
        secondMoment0.incrementAll(doubleArray29);
        double double40 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 806.0d + "'", double40 == 806.0d);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long8 = variance7.getN();
        variance7.clear();
        variance7.increment((double) 0L);
        variance7.increment(2.880385675555556E7d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        secondMoment0.clear();
        double double16 = secondMoment0.getResult();
        secondMoment0.clear();
        java.lang.Class<?> wildcardClass18 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double double36 = secondMoment20.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] {};
        secondMoment20.incrementAll(doubleArray37);
        double double39 = secondMoment17.evaluate(doubleArray37);
        double double40 = variance16.evaluate(doubleArray37);
        long long41 = variance16.getN();
        double double42 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment((double) ' ');
        secondMoment43.increment((double) (-1.0f));
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        long long60 = variance59.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double72 = variance59.evaluate(doubleArray67, (double) (short) -1);
        double double73 = secondMoment43.evaluate(doubleArray67);
        variance16.incrementAll(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = secondMoment0.evaluate(doubleArray67, (int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 40.5d + "'", double5 == 40.5d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 74.0d + "'", double36 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 37.0d + "'", double72 == 37.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 74.0d + "'", double73 == 74.0d);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        secondMoment1.clear();
        secondMoment1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        double[] doubleArray30 = new double[] { 0L, (byte) 1, 6140.666666666667d, 544.5d, (byte) 100 };
        double double31 = secondMoment21.evaluate(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance19.evaluate(doubleArray30, (double) 0.0f, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0, 6140.666666666667, 544.5, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.880385675555556E7d + "'", double31 == 2.880385675555556E7d);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance15.increment((double) (short) 100);
        variance15.clear();
        variance15.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long31 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long34 = variance33.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        variance33.incrementAll(doubleArray47);
        double double53 = secondMoment21.evaluate(doubleArray47);
        double double54 = variance15.evaluate(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray47, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 37.0d + "'", double54 == 37.0d);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment0.evaluate(doubleArray15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        boolean boolean32 = secondMoment18.equals((java.lang.Object) secondMoment27);
        secondMoment18.clear();
        long long34 = secondMoment18.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        secondMoment36.increment((double) (short) 0);
        long long41 = secondMoment36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        secondMoment43.increment((double) (short) -1);
        secondMoment43.clear();
        secondMoment43.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        boolean boolean57 = secondMoment43.equals((java.lang.Object) secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = secondMoment58.evaluate(doubleArray73);
        secondMoment43.incrementAll(doubleArray73);
        secondMoment36.incrementAll(doubleArray73, (int) (short) 0, 0);
        double double80 = secondMoment18.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray73, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2L + "'", long41 == 2L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 4050.0d + "'", double80 == 4050.0d);
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.clear();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        secondMoment6.increment((double) (short) -1);
        secondMoment6.clear();
        secondMoment6.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double[] doubleArray29 = new double[] { 10, (byte) 100 };
        double double30 = secondMoment17.evaluate(doubleArray29);
        double double31 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        secondMoment34.increment((double) (short) 0);
        double double39 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double50 = secondMoment34.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] {};
        secondMoment34.incrementAll(doubleArray51);
        double double55 = variance33.evaluate(doubleArray51, (int) (byte) 0, 0);
        double double56 = variance32.evaluate(doubleArray51);
        double double57 = variance15.evaluate(doubleArray51);
        long long58 = variance15.getN();
        variance15.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long63 = variance62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        secondMoment64.increment((double) (short) 0);
        double double69 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double double80 = secondMoment64.evaluate(doubleArray76);
        variance62.incrementAll(doubleArray76);
        double double82 = variance15.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance2.evaluate(doubleArray76, 5.49755813888E11d, (int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 4050.0d + "'", double30 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.5d + "'", double39 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 74.0d + "'", double50 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.5d + "'", double69 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 37.0d + "'", double82 == 37.0d);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double28 = secondMoment12.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] {};
        secondMoment12.incrementAll(doubleArray29);
        double double33 = variance11.evaluate(doubleArray29, (int) (byte) 0, 0);
        variance10.incrementAll(doubleArray29);
        double double37 = variance8.evaluate(doubleArray29, 0, (int) (short) 0);
        long long38 = variance8.getN();
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) (short) -1);
        secondMoment40.clear();
        secondMoment40.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        variance49.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            variance8.incrementAll(doubleArray56, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 74.0d + "'", double28 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        double double14 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long16 = variance15.getN();
        variance15.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.increment((double) (short) -1);
        secondMoment19.clear();
        secondMoment19.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        variance28.incrementAll(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) (short) -1);
        secondMoment40.clear();
        secondMoment40.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        double double67 = secondMoment40.evaluate(doubleArray62);
        double double68 = variance28.evaluate(doubleArray62);
        variance15.incrementAll(doubleArray62);
        double double72 = secondMoment0.evaluate(doubleArray62, (int) (short) 0, (int) (byte) 0);
        long long73 = secondMoment0.getN();
        secondMoment0.increment(7020.75d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 37.0d + "'", double68 == 37.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment8.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = variance36.evaluate(doubleArray49);
        long long52 = variance36.getN();
        double double53 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double[] doubleArray66 = new double[] { 10, (byte) 100 };
        double double67 = secondMoment54.evaluate(doubleArray66);
        double double68 = secondMoment54.getResult();
        secondMoment54.increment((double) (short) -1);
        double[] doubleArray72 = new double[] { (short) 1 };
        secondMoment54.incrementAll(doubleArray72);
        double double74 = variance36.evaluate(doubleArray72);
        double double77 = secondMoment1.evaluate(doubleArray72, (int) (short) 1, 0);
        secondMoment1.increment(40.5d);
        double double80 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1067.1666666666667d + "'", double80 == 1067.1666666666667d);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        secondMoment10.increment((double) (short) 0);
        double double15 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment(1.0d);
        double[] doubleArray22 = new double[] { (-1L), 0, 10L };
        secondMoment16.incrementAll(doubleArray22, 0, 0);
        double double26 = secondMoment10.evaluate(doubleArray22);
        double[] doubleArray27 = new double[] {};
        secondMoment10.incrementAll(doubleArray27);
        double double31 = variance9.evaluate(doubleArray27, (int) (byte) 0, 0);
        long long32 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        secondMoment33.increment((double) (short) 0);
        double double38 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double double49 = secondMoment33.evaluate(doubleArray45);
        variance9.incrementAll(doubleArray45);
        long long51 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double68 = secondMoment52.evaluate(doubleArray64);
        double[] doubleArray69 = new double[] {};
        secondMoment52.incrementAll(doubleArray69);
        double double71 = variance9.evaluate(doubleArray69);
        double double72 = secondMoment0.evaluate(doubleArray69);
        secondMoment0.clear();
        secondMoment0.increment(74.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 74.0d + "'", double26 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.5d + "'", double38 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        long long26 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) (short) -1);
        secondMoment28.clear();
        secondMoment28.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double double55 = secondMoment28.evaluate(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = secondMoment0.evaluate(doubleArray50, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) '4');
        secondMoment0.increment((double) 0.0f);
        long long7 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double[] doubleArray26 = new double[] { 10, (byte) 100 };
        double double27 = secondMoment14.evaluate(doubleArray26);
        double double28 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        long long30 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        double double32 = secondMoment14.getResult();
        secondMoment14.clear();
        secondMoment14.increment(Double.NaN);
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long40 = variance39.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        double double57 = secondMoment41.evaluate(doubleArray53);
        variance39.incrementAll(doubleArray53);
        secondMoment14.incrementAll(doubleArray53);
        variance10.incrementAll(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment0.evaluate(doubleArray53, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4050.0d + "'", double27 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4050.0d + "'", double28 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2L + "'", long30 == 2L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance10.evaluate(doubleArray31);
        variance10.increment(37.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long48 = variance47.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double60 = variance47.evaluate(doubleArray55, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = variance10.evaluate(doubleArray55, (double) '4', 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 37.0d + "'", double60 == 37.0d);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) '4');
        long long5 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment((double) ' ');
        double double9 = secondMoment6.getResult();
        double double10 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment6.evaluate(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = secondMoment0.evaluate(doubleArray23, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance8.increment((double) (short) 0);
        variance8.clear();
        variance8.increment((double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double double24 = variance8.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        secondMoment25.increment((double) (short) 0);
        double double30 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment((double) ' ');
        double double34 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        boolean boolean36 = secondMoment25.equals((java.lang.Object) variance35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        secondMoment37.clear();
        secondMoment37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long47 = variance46.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        secondMoment51.increment((double) (short) 0);
        double double56 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        double double67 = secondMoment51.evaluate(doubleArray63);
        double[] doubleArray68 = new double[] {};
        secondMoment51.incrementAll(doubleArray68);
        double double70 = secondMoment48.evaluate(doubleArray68);
        double double71 = variance46.evaluate(doubleArray68);
        double double72 = secondMoment25.evaluate(doubleArray68);
        double double73 = variance8.evaluate(doubleArray68);
        double double74 = variance8.getResult();
        long long75 = variance8.getN();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 24.666666666666668d + "'", double24 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5d + "'", double30 == 0.5d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.5d + "'", double56 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5d + "'", double72 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double23 = variance10.evaluate(doubleArray18, (double) (short) -1);
        double double24 = variance10.getResult();
        variance10.clear();
        long long26 = variance10.getN();
        double double27 = variance10.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37.0d + "'", double23 == 37.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance28.increment((double) '4');
        variance28.increment(3602.0d);
        variance28.setBiasCorrected(false);
        java.lang.Class<?> wildcardClass35 = variance28.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double10 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double[] doubleArray24 = new double[] { 10, (byte) 100 };
        double double25 = secondMoment12.evaluate(doubleArray24);
        double double26 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        long long28 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment((double) ' ');
        secondMoment29.increment((double) (-1.0f));
        secondMoment29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        long long46 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        double double58 = variance45.evaluate(doubleArray53, (double) (short) -1);
        double double59 = secondMoment29.evaluate(doubleArray53);
        double double60 = secondMoment12.evaluate(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment0.evaluate(doubleArray53, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 37.0d + "'", double58 == 37.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 74.0d + "'", double60 == 74.0d);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment15);
        long long26 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        double double31 = secondMoment28.getResult();
        double double32 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double[] doubleArray45 = new double[] { 10, (byte) 100 };
        double double46 = secondMoment33.evaluate(doubleArray45);
        double double47 = secondMoment28.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        secondMoment55.increment((double) (short) 0);
        double double60 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = secondMoment55.evaluate(doubleArray67);
        double[] doubleArray72 = new double[] {};
        secondMoment55.incrementAll(doubleArray72);
        secondMoment49.incrementAll(doubleArray72);
        secondMoment49.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double[] doubleArray90 = new double[] { 10, (byte) 100 };
        double double91 = secondMoment78.evaluate(doubleArray90);
        double double92 = variance77.evaluate(doubleArray90);
        double double93 = variance48.evaluate(doubleArray90);
        double double94 = secondMoment28.evaluate(doubleArray90);
        boolean boolean95 = secondMoment15.equals((java.lang.Object) secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.Variance variance96 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4050.0d + "'", double46 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5d + "'", double60 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1.0f);
        variance2.clear();
        variance2.increment(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        boolean boolean46 = secondMoment21.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        double double70 = variance48.evaluate(doubleArray66, (int) (byte) 0, 0);
        long long71 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        variance48.incrementAll(doubleArray84);
        double double91 = variance47.evaluate(doubleArray84, (double) '#');
        double double94 = variance19.evaluate(doubleArray84, 0, (int) (byte) 1);
        variance19.clear();
        variance19.increment(2.0d);
        variance19.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 24.666666666666668d + "'", double91 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double22 = secondMoment0.evaluate(doubleArray20);
        java.lang.Class<?> wildcardClass23 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(24.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        double double38 = secondMoment22.evaluate(doubleArray34);
        double[] doubleArray39 = new double[] {};
        secondMoment22.incrementAll(doubleArray39);
        double double41 = secondMoment19.evaluate(doubleArray39);
        secondMoment1.incrementAll(doubleArray39);
        long long43 = secondMoment1.getN();
        java.lang.Class<?> wildcardClass44 = secondMoment1.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 74.0d + "'", double38 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        long long15 = secondMoment9.getN();
        double double16 = secondMoment9.getResult();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double20 = secondMoment9.evaluate(doubleArray17, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long35 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double double47 = variance34.evaluate(doubleArray42, (double) (short) -1);
        double double48 = secondMoment18.evaluate(doubleArray42);
        double double49 = secondMoment1.evaluate(doubleArray42);
        java.lang.Class<?> wildcardClass50 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 37.0d + "'", double47 == 37.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = secondMoment2.evaluate(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment(1.0d);
        double[] doubleArray22 = new double[] { (-1L), 0, 10L };
        secondMoment16.incrementAll(doubleArray22, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long27 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        double double39 = variance26.evaluate(doubleArray34, (double) (short) -1);
        double double40 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        secondMoment41.incrementAll(doubleArray64);
        secondMoment41.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double[] doubleArray82 = new double[] { 10, (byte) 100 };
        double double83 = secondMoment70.evaluate(doubleArray82);
        double double84 = variance69.evaluate(doubleArray82);
        double double87 = variance26.evaluate(doubleArray82, (int) (short) 1, 0);
        double double88 = variance15.evaluate(doubleArray82);
        java.lang.Class<?> wildcardClass89 = variance15.getClass();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 37.0d + "'", double39 == 37.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean2 = variance1.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        long long22 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double[] doubleArray38 = new double[] { 10, (byte) 100 };
        double double39 = secondMoment26.evaluate(doubleArray38);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        secondMoment41.incrementAll(doubleArray64);
        secondMoment41.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double[] doubleArray82 = new double[] { 10, (byte) 100 };
        double double83 = secondMoment70.evaluate(doubleArray82);
        double double84 = variance69.evaluate(doubleArray82);
        double double85 = secondMoment26.evaluate(doubleArray82);
        secondMoment12.incrementAll(doubleArray82, (int) (short) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance10.evaluate(doubleArray82, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4050.0d + "'", double39 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        double[] doubleArray19 = new double[] { (short) 1 };
        secondMoment1.incrementAll(doubleArray19);
        long long21 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance22.clear();
        boolean boolean24 = variance22.isBiasCorrected();
        variance22.clear();
        variance22.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long35 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double double47 = variance34.evaluate(doubleArray42, (double) (short) -1);
        double double48 = secondMoment18.evaluate(doubleArray42);
        double double49 = secondMoment1.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(4050.0d);
        double double55 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 37.0d + "'", double47 == 37.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.increment((double) (short) 1);
        secondMoment1.increment(0.5d);
        secondMoment1.clear();
        secondMoment1.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        long long44 = variance28.getN();
        long long45 = variance28.getN();
        variance28.setBiasCorrected(false);
        variance28.increment(5226.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        boolean boolean19 = variance16.isBiasCorrected();
        boolean boolean20 = variance16.isBiasCorrected();
        variance16.setBiasCorrected(true);
        double double23 = variance16.getResult();
        variance16.clear();
        double double25 = variance16.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance10.increment((double) (short) 100);
        variance10.clear();
        variance10.increment(Double.NaN);
        double[] doubleArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = variance10.evaluate(doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double[] doubleArray32 = new double[] { 10, (byte) 100 };
        double double33 = secondMoment20.evaluate(doubleArray32);
        long long34 = secondMoment20.getN();
        secondMoment20.clear();
        double double36 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double double49 = variance38.evaluate(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = variance18.evaluate(doubleArray45, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 37.0d + "'", double49 == 37.0d);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        java.lang.Class<?> wildcardClass21 = variance8.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray9 = new double[] { 0L, (byte) 1, 6140.666666666667d, 544.5d, (byte) 100 };
        double double10 = secondMoment0.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (short) -1);
        secondMoment11.clear();
        secondMoment11.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        boolean boolean21 = secondMoment0.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) 1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double31 = variance26.evaluate(doubleArray27, 100.0d, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0, 6140.666666666667, 544.5, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.880385675555556E7d + "'", double10 == 2.880385675555556E7d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long30 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        secondMoment31.increment((double) (short) 0);
        double double36 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double double47 = secondMoment31.evaluate(doubleArray43);
        double double49 = variance29.evaluate(doubleArray43, (double) 4L);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray43, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.5d + "'", double36 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 74.0d + "'", double47 == 74.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 37.0d + "'", double49 == 37.0d);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (short) -1);
        secondMoment5.clear();
        secondMoment5.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        secondMoment15.increment((double) (short) 0);
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double double31 = secondMoment15.evaluate(doubleArray27);
        double double32 = secondMoment5.evaluate(doubleArray27);
        double double33 = secondMoment5.getResult();
        secondMoment5.increment(4034.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double[] doubleArray50 = new double[] { 10, (byte) 100 };
        double double51 = secondMoment38.evaluate(doubleArray50);
        long long52 = secondMoment38.getN();
        secondMoment38.clear();
        double double54 = secondMoment38.getResult();
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        double double67 = variance56.evaluate(doubleArray63);
        double double69 = variance36.evaluate(doubleArray63, 40.5d);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = secondMoment0.evaluate(doubleArray63, (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5d + "'", double20 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 74.0d + "'", double31 == 74.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 74.0d + "'", double32 == 74.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 74.0d + "'", double33 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 37.0d + "'", double67 == 37.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 37.0d + "'", double69 == 37.0d);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance8.increment((double) (short) 0);
        variance8.clear();
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        variance18.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        double double38 = secondMoment22.evaluate(doubleArray34);
        double[] doubleArray39 = new double[] {};
        secondMoment22.incrementAll(doubleArray39);
        double double43 = variance21.evaluate(doubleArray39, (int) (byte) 0, 0);
        long long44 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        variance21.incrementAll(doubleArray57);
        long long63 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        secondMoment67.increment((double) (short) 0);
        double double72 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        double[] doubleArray79 = new double[] { (-1L), 0, 10L };
        secondMoment73.incrementAll(doubleArray79, 0, 0);
        double double83 = secondMoment67.evaluate(doubleArray79);
        double[] doubleArray84 = new double[] {};
        secondMoment67.incrementAll(doubleArray84);
        double double86 = secondMoment64.evaluate(doubleArray84);
        variance21.incrementAll(doubleArray84);
        double double90 = variance18.evaluate(doubleArray84, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance8.evaluate(doubleArray84, (int) (short) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 74.0d + "'", double38 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3L + "'", long63 == 3L);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5d + "'", double72 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 74.0d + "'", double83 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        secondMoment0.increment((double) 1L);
        secondMoment0.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        variance32.increment((double) (short) 100);
        variance32.clear();
        variance32.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        secondMoment38.increment((double) (short) -1);
        secondMoment38.clear();
        secondMoment38.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        long long48 = secondMoment38.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long51 = variance50.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double68 = secondMoment52.evaluate(doubleArray64);
        variance50.incrementAll(doubleArray64);
        double double70 = secondMoment38.evaluate(doubleArray64);
        double double71 = variance32.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double double89 = variance32.evaluate(doubleArray84);
        double double90 = secondMoment0.evaluate(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 37.0d + "'", double71 == 37.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 37.0d + "'", double89 == 37.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        double double14 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double[] doubleArray27 = new double[] { 10, (byte) 100 };
        double double28 = secondMoment15.evaluate(doubleArray27);
        double double29 = secondMoment15.getResult();
        secondMoment15.increment((double) (short) -1);
        double[] doubleArray33 = new double[] { (short) 1 };
        secondMoment15.incrementAll(doubleArray33);
        long long35 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        long long46 = variance45.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        double[] doubleArray67 = new double[] {};
        secondMoment50.incrementAll(doubleArray67);
        double double69 = secondMoment47.evaluate(doubleArray67);
        double double70 = variance45.evaluate(doubleArray67);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        double[] doubleArray91 = new double[] {};
        secondMoment74.incrementAll(doubleArray91);
        double double93 = secondMoment71.evaluate(doubleArray91);
        variance45.incrementAll(doubleArray91);
        double double95 = secondMoment15.evaluate(doubleArray91);
        double double96 = variance13.evaluate(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment0.evaluate(doubleArray91, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4050.0d + "'", double28 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 4050.0d + "'", double29 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 7077.0d + "'", double95 == 7077.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) (short) -1);
        secondMoment7.clear();
        secondMoment7.increment((double) 0L);
        boolean boolean16 = secondMoment0.equals((java.lang.Object) 0L);
        double double17 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        secondMoment1.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double double28 = secondMoment1.evaluate(doubleArray23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        java.lang.Class<?> wildcardClass30 = variance29.getClass();
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 74.0d + "'", double28 == 74.0d);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        double double22 = secondMoment8.getResult();
        long long23 = secondMoment8.getN();
        long long24 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = variance28.evaluate(doubleArray29, 1376.0d, (int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 10);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        secondMoment12.clear();
        secondMoment12.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        variance21.incrementAll(doubleArray28);
        variance11.incrementAll(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray28, (-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        secondMoment0.clear();
        secondMoment0.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass18 = variance17.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance19.increment((double) 0.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        long long33 = variance32.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double45 = variance32.evaluate(doubleArray40, (double) (short) -1);
        double double46 = variance32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        secondMoment53.increment((double) (short) 0);
        double double58 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        double[] doubleArray65 = new double[] { (-1L), 0, 10L };
        secondMoment59.incrementAll(doubleArray65, 0, 0);
        double double69 = secondMoment53.evaluate(doubleArray65);
        double[] doubleArray70 = new double[] {};
        secondMoment53.incrementAll(doubleArray70);
        secondMoment47.incrementAll(doubleArray70);
        secondMoment47.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        double[] doubleArray88 = new double[] { 10, (byte) 100 };
        double double89 = secondMoment76.evaluate(doubleArray88);
        double double90 = variance75.evaluate(doubleArray88);
        double double93 = variance32.evaluate(doubleArray88, (int) (short) 1, 0);
        variance19.incrementAll(doubleArray88, (int) (byte) 0, (int) (byte) 1);
        long long97 = variance19.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 37.0d + "'", double45 == 37.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.5d + "'", double58 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 74.0d + "'", double69 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4050.0d + "'", double89 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4050.0d + "'", double90 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long8 = variance7.getN();
        double double9 = variance7.getResult();
        double double10 = variance7.getResult();
        double double11 = variance7.getResult();
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.increment((double) (short) -1);
        secondMoment13.clear();
        secondMoment13.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        long long23 = variance22.getN();
        variance22.increment(200.0d);
        variance22.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        secondMoment42.increment((double) (short) 0);
        double double47 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double double58 = secondMoment42.evaluate(doubleArray54);
        double[] doubleArray59 = new double[] {};
        secondMoment42.incrementAll(doubleArray59);
        double double61 = secondMoment39.evaluate(doubleArray59);
        double double62 = variance38.evaluate(doubleArray59);
        double double63 = variance22.evaluate(doubleArray59);
        double double64 = variance7.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = secondMoment0.evaluate(doubleArray59, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.5d + "'", double47 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 74.0d + "'", double58 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double24 = variance2.evaluate(doubleArray20, (int) (byte) 0, 0);
        variance1.incrementAll(doubleArray20);
        variance1.setBiasCorrected(false);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.increment((double) (short) -1);
        secondMoment29.clear();
        secondMoment29.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        double double55 = secondMoment39.evaluate(doubleArray51);
        double double56 = secondMoment29.evaluate(doubleArray51);
        double double57 = secondMoment29.getResult();
        secondMoment29.increment(4034.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double[] doubleArray74 = new double[] { 10, (byte) 100 };
        double double75 = secondMoment62.evaluate(doubleArray74);
        double double76 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        secondMoment78.increment((double) (short) 0);
        double double83 = secondMoment78.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment84 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment84.increment(1.0d);
        double[] doubleArray90 = new double[] { (-1L), 0, 10L };
        secondMoment84.incrementAll(doubleArray90, 0, 0);
        double double94 = secondMoment78.evaluate(doubleArray90);
        double[] doubleArray95 = new double[] {};
        secondMoment78.incrementAll(doubleArray95);
        variance77.incrementAll(doubleArray95);
        boolean boolean98 = variance60.equals((java.lang.Object) doubleArray95);
        variance1.incrementAll(doubleArray95);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.5d + "'", double83 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 74.0d + "'", double94 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        double double22 = secondMoment8.getResult();
        long long23 = secondMoment8.getN();
        long long24 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance27.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment((double) ' ');
        double double38 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        boolean boolean40 = secondMoment29.equals((java.lang.Object) variance39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        secondMoment41.increment((double) (short) -1);
        secondMoment41.clear();
        secondMoment41.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long51 = variance50.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        secondMoment55.increment((double) (short) 0);
        double double60 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = secondMoment55.evaluate(doubleArray67);
        double[] doubleArray72 = new double[] {};
        secondMoment55.incrementAll(doubleArray72);
        double double74 = secondMoment52.evaluate(doubleArray72);
        double double75 = variance50.evaluate(doubleArray72);
        double double76 = secondMoment29.evaluate(doubleArray72);
        double double77 = variance27.evaluate(doubleArray72);
        java.lang.Class<?> wildcardClass78 = doubleArray72.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5d + "'", double60 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.5d + "'", double76 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        double[] doubleArray34 = new double[] { 10, (byte) 100 };
        double double35 = secondMoment22.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        secondMoment37.clear();
        secondMoment37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        boolean boolean47 = secondMoment22.equals((java.lang.Object) secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        double[] doubleArray67 = new double[] {};
        secondMoment50.incrementAll(doubleArray67);
        double double71 = variance49.evaluate(doubleArray67, (int) (byte) 0, 0);
        long long72 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        secondMoment73.increment((double) (short) 0);
        double double78 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double double89 = secondMoment73.evaluate(doubleArray85);
        variance49.incrementAll(doubleArray85);
        double double92 = variance48.evaluate(doubleArray85, (double) '#');
        variance8.incrementAll(doubleArray85);
        double[] doubleArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance8.evaluate(doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5d + "'", double78 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 24.666666666666668d + "'", double92 == 24.666666666666668d);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment7);
        double double26 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long28 = variance27.getN();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        secondMoment0.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        double double22 = secondMoment8.getResult();
        secondMoment8.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        long long32 = secondMoment27.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        long long34 = variance33.getN();
        variance33.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long38 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        double double55 = secondMoment39.evaluate(doubleArray51);
        variance37.incrementAll(doubleArray51);
        double double58 = variance33.evaluate(doubleArray51, (double) (short) -1);
        double double59 = variance25.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = secondMoment0.evaluate(doubleArray51, (int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 24.666666666666668d + "'", double58 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 24.666666666666668d + "'", double59 == 24.666666666666668d);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double[] doubleArray27 = new double[] { 10, (byte) 100 };
        double double28 = secondMoment15.evaluate(doubleArray27);
        long long29 = secondMoment15.getN();
        double double30 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        secondMoment31.increment((double) (short) -1);
        secondMoment31.clear();
        double double38 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        double double55 = secondMoment39.evaluate(doubleArray51);
        secondMoment31.incrementAll(doubleArray51, 0, (int) (short) 0);
        double double59 = secondMoment15.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        secondMoment60.increment((double) (short) 0);
        long long65 = secondMoment60.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        double[] doubleArray72 = new double[] { (-1L), 0, 10L };
        secondMoment66.incrementAll(doubleArray72, 0, 0);
        long long76 = secondMoment66.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        double[] doubleArray83 = new double[] { (-1L), 0, 10L };
        secondMoment77.incrementAll(doubleArray83, 0, 0);
        secondMoment66.incrementAll(doubleArray83, 0, (int) (short) 1);
        secondMoment60.incrementAll(doubleArray83, (int) (byte) 0, (int) (byte) 1);
        secondMoment15.incrementAll(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = secondMoment9.evaluate(doubleArray83, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4050.0d + "'", double28 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2L + "'", long29 == 2L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 4050.0d + "'", double30 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = variance19.evaluate(doubleArray26);
        variance19.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        secondMoment33.increment((double) (short) 0);
        double double38 = secondMoment33.getResult();
        secondMoment33.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment((double) ' ');
        secondMoment41.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        double[] doubleArray59 = new double[] { 10, (byte) 100 };
        double double60 = secondMoment47.evaluate(doubleArray59);
        double double61 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        long long63 = secondMoment47.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment((double) ' ');
        secondMoment64.increment((double) (-1.0f));
        secondMoment64.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long81 = variance80.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment82.increment(1.0d);
        double[] doubleArray88 = new double[] { (-1L), 0, 10L };
        secondMoment82.incrementAll(doubleArray88, 0, 0);
        double double93 = variance80.evaluate(doubleArray88, (double) (short) -1);
        double double94 = secondMoment64.evaluate(doubleArray88);
        double double95 = secondMoment47.evaluate(doubleArray88);
        secondMoment41.incrementAll(doubleArray88);
        secondMoment33.incrementAll(doubleArray88);
        double double98 = variance19.evaluate(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 37.0d + "'", double30 == 37.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.5d + "'", double38 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2L + "'", long63 == 2L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 37.0d + "'", double93 == 37.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 74.0d + "'", double94 == 74.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 74.0d + "'", double95 == 74.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 24.666666666666668d + "'", double98 == 24.666666666666668d);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        secondMoment2.increment((double) (short) 0);
        long long7 = secondMoment2.getN();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        secondMoment9.clear();
        secondMoment9.increment((double) 0L);
        boolean boolean18 = secondMoment2.equals((java.lang.Object) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance19.increment(40.5d);
        variance19.increment(0.0d);
        double double24 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        secondMoment36.increment((double) (-1.0f));
        secondMoment36.clear();
        boolean boolean42 = variance35.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        secondMoment43.incrementAll(doubleArray66);
        secondMoment43.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        double[] doubleArray78 = new double[] { (-1L), 0, 10L };
        secondMoment72.incrementAll(doubleArray78, 0, 0);
        double[] doubleArray84 = new double[] { 10, (byte) 100 };
        double double85 = secondMoment72.evaluate(doubleArray84);
        double double86 = variance71.evaluate(doubleArray84);
        secondMoment36.incrementAll(doubleArray84);
        variance19.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray84, 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4050.0d + "'", double86 == 4050.0d);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double9 = secondMoment1.getResult();
        secondMoment1.clear();
        java.lang.Class<?> wildcardClass11 = secondMoment1.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long1 = secondMoment0.getN();
        double double2 = secondMoment0.getResult();
        long long3 = secondMoment0.getN();
        secondMoment0.increment(1067.1666666666667d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        double double9 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        variance14.clear();
        double[] doubleArray22 = new double[] { (byte) -1, (short) -1, 0, 'a', 100.0d, 1.0f };
        variance14.incrementAll(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = secondMoment2.evaluate(doubleArray22, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 544.5d + "'", double9 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, -1.0, 0.0, 97.0, 100.0, 1.0]");
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment7);
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) (short) -1);
        secondMoment28.clear();
        secondMoment28.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        boolean boolean42 = secondMoment28.equals((java.lang.Object) secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = secondMoment43.evaluate(doubleArray58);
        secondMoment28.incrementAll(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = secondMoment0.evaluate(doubleArray58, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = variance26.evaluate(doubleArray45);
        double double51 = variance9.evaluate(doubleArray45);
        long long52 = variance9.getN();
        variance9.setBiasCorrected(false);
        variance9.increment(0.5d);
        boolean boolean57 = variance9.isBiasCorrected();
        java.lang.Class<?> wildcardClass58 = variance9.getClass();
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        boolean boolean19 = variance16.isBiasCorrected();
        boolean boolean20 = variance16.isBiasCorrected();
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment((double) ' ');
        secondMoment23.increment((double) (-1.0f));
        secondMoment23.clear();
        secondMoment23.clear();
        double double30 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        secondMoment31.increment((double) (short) 0);
        double double36 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        double double42 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double double53 = secondMoment37.evaluate(doubleArray49);
        double[] doubleArray54 = new double[] {};
        secondMoment37.incrementAll(doubleArray54);
        secondMoment31.incrementAll(doubleArray54);
        secondMoment31.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double[] doubleArray72 = new double[] { 10, (byte) 100 };
        double double73 = secondMoment60.evaluate(doubleArray72);
        double double74 = variance59.evaluate(doubleArray72);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment((double) ' ');
        double double78 = secondMoment75.getResult();
        boolean boolean79 = variance59.equals((java.lang.Object) double78);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = variance59.evaluate(doubleArray86);
        secondMoment23.incrementAll(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance16.evaluate(doubleArray86, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.5d + "'", double36 == 0.5d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5d + "'", double42 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4050.0d + "'", double73 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 37.0d + "'", double90 == 37.0d);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        secondMoment1.clear();
        secondMoment1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long20 = secondMoment1.getN();
        long long21 = secondMoment1.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment8.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = variance36.evaluate(doubleArray49);
        long long52 = variance36.getN();
        double double53 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double[] doubleArray66 = new double[] { 10, (byte) 100 };
        double double67 = secondMoment54.evaluate(doubleArray66);
        double double68 = secondMoment54.getResult();
        secondMoment54.increment((double) (short) -1);
        double[] doubleArray72 = new double[] { (short) 1 };
        secondMoment54.incrementAll(doubleArray72);
        double double74 = variance36.evaluate(doubleArray72);
        double double77 = secondMoment1.evaluate(doubleArray72, (int) (short) 1, 0);
        secondMoment1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        java.lang.Class<?> wildcardClass81 = variance80.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance9.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] {};
        secondMoment38.incrementAll(doubleArray55);
        double double57 = secondMoment35.evaluate(doubleArray55);
        variance9.incrementAll(doubleArray55);
        variance9.clear();
        double double60 = variance9.getResult();
        variance9.setBiasCorrected(true);
        long long63 = variance9.getN();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment((double) ' ');
        double double47 = secondMoment44.getResult();
        boolean boolean48 = variance28.equals((java.lang.Object) double47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = variance28.evaluate(doubleArray55);
        variance28.setBiasCorrected(false);
        long long62 = variance28.getN();
        variance28.increment(3602.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long67 = variance66.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double84 = secondMoment68.evaluate(doubleArray80);
        variance66.incrementAll(doubleArray80);
        double double86 = variance28.evaluate(doubleArray80);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 37.0d + "'", double59 == 37.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3L + "'", long62 == 3L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 24.666666666666668d + "'", double86 == 24.666666666666668d);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        boolean boolean6 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) (short) 0);
        long long12 = secondMoment7.getN();
        double double13 = secondMoment7.getResult();
        long long14 = secondMoment7.getN();
        double double15 = secondMoment7.getResult();
        secondMoment7.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        secondMoment7.incrementAll(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance2.evaluate(doubleArray30, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long8 = variance7.getN();
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long12 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double double29 = secondMoment13.evaluate(doubleArray25);
        variance11.incrementAll(doubleArray25);
        double double32 = variance7.evaluate(doubleArray25, (double) (short) -1);
        long long33 = variance7.getN();
        variance7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double[] doubleArray48 = new double[] { 10, (byte) 100 };
        double double49 = secondMoment36.evaluate(doubleArray48);
        double double50 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        secondMoment36.increment(24.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        secondMoment57.increment((double) (short) 0);
        double double62 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment(1.0d);
        double[] doubleArray69 = new double[] { (-1L), 0, 10L };
        secondMoment63.incrementAll(doubleArray69, 0, 0);
        double double73 = secondMoment57.evaluate(doubleArray69);
        double[] doubleArray74 = new double[] {};
        secondMoment57.incrementAll(doubleArray74);
        double double76 = secondMoment54.evaluate(doubleArray74);
        secondMoment36.incrementAll(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = variance7.evaluate(doubleArray74, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 74.0d + "'", double29 == 74.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 24.666666666666668d + "'", double32 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.5d + "'", double62 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 74.0d + "'", double73 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        long long7 = secondMoment0.getN();
        double double8 = secondMoment0.getResult();
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = secondMoment0.evaluate(doubleArray9, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        double[] doubleArray26 = new double[] {};
        secondMoment9.incrementAll(doubleArray26);
        double double30 = variance8.evaluate(doubleArray26, (int) (byte) 0, 0);
        long long31 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double double48 = secondMoment32.evaluate(doubleArray44);
        variance8.incrementAll(doubleArray44);
        long long50 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        secondMoment54.increment((double) (short) 0);
        double double59 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double double70 = secondMoment54.evaluate(doubleArray66);
        double[] doubleArray71 = new double[] {};
        secondMoment54.incrementAll(doubleArray71);
        double double73 = secondMoment51.evaluate(doubleArray71);
        variance8.incrementAll(doubleArray71);
        double double77 = variance5.evaluate(doubleArray71, (int) (byte) 0, 0);
        long long78 = variance5.getN();
        variance5.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3L + "'", long50 == 3L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.5d + "'", double59 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double[] doubleArray73 = new double[] {};
        secondMoment56.incrementAll(doubleArray73);
        secondMoment50.incrementAll(doubleArray73);
        double double76 = secondMoment0.evaluate(doubleArray73);
        long long77 = secondMoment0.getN();
        secondMoment0.increment((double) (byte) 1);
        double[] doubleArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        boolean boolean4 = variance2.isBiasCorrected();
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double28 = secondMoment12.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] {};
        secondMoment12.incrementAll(doubleArray29);
        secondMoment6.incrementAll(doubleArray29);
        secondMoment6.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        secondMoment6.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long48 = variance47.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double60 = variance47.evaluate(doubleArray55, (double) (short) -1);
        double double63 = secondMoment6.evaluate(doubleArray55, (int) (byte) 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance2.evaluate(doubleArray55, (double) (short) 10, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 74.0d + "'", double28 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 37.0d + "'", double60 == 37.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double17 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        long long35 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        secondMoment37.clear();
        secondMoment37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        variance46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) (short) -1);
        secondMoment58.clear();
        secondMoment58.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double84 = secondMoment68.evaluate(doubleArray80);
        double double85 = secondMoment58.evaluate(doubleArray80);
        double double86 = variance46.evaluate(doubleArray80);
        variance36.incrementAll(doubleArray80);
        secondMoment0.incrementAll(doubleArray80);
        double double89 = secondMoment0.getResult();
        double double90 = secondMoment0.getResult();
        long long91 = secondMoment0.getN();
        secondMoment0.clear();
        java.lang.Class<?> wildcardClass93 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 74.0d + "'", double85 == 74.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 37.0d + "'", double86 == 37.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 7881.333333333333d + "'", double89 == 7881.333333333333d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 7881.333333333333d + "'", double90 == 7881.333333333333d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 6L + "'", long91 == 6L);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        double double18 = secondMoment0.getResult();
        double[] doubleArray22 = new double[] { (byte) 0, 1.8376716740740743E7d, 1376.0d };
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray22, (int) (byte) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.8376716740740743E7, 1376.0]");
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        variance9.increment(200.0d);
        double double13 = variance9.getResult();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.setBiasCorrected(false);
        variance8.increment(482.66666666666663d);
        variance8.setBiasCorrected(true);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long18 = variance17.getN();
        double double19 = variance17.getResult();
        variance17.increment((double) (short) 100);
        boolean boolean22 = variance17.isBiasCorrected();
        double double23 = variance17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment((double) ' ');
        secondMoment24.increment((double) (-1.0f));
        secondMoment24.clear();
        secondMoment24.clear();
        double double31 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] {};
        secondMoment38.incrementAll(doubleArray55);
        secondMoment32.incrementAll(doubleArray55);
        secondMoment32.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = variance60.evaluate(doubleArray73);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment((double) ' ');
        double double79 = secondMoment76.getResult();
        boolean boolean80 = variance60.equals((java.lang.Object) double79);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double double91 = variance60.evaluate(doubleArray87);
        secondMoment24.incrementAll(doubleArray87);
        double double96 = variance17.evaluate(doubleArray87, 32.2d, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = variance8.evaluate(doubleArray87, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 37.0d + "'", double91 == 37.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        long long15 = secondMoment9.getN();
        double double16 = secondMoment9.getResult();
        java.lang.Class<?> wildcardClass17 = secondMoment9.getClass();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.increment((double) 100L);
        variance2.increment((double) (-1L));
        variance2.clear();
        variance2.setBiasCorrected(false);
        boolean boolean13 = variance2.isBiasCorrected();
        boolean boolean14 = variance2.isBiasCorrected();
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = variance2.evaluate(doubleArray15, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment15);
        secondMoment15.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double[] doubleArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment15.incrementAll(doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment15);
        long long26 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        variance27.increment((double) (short) 100);
        java.lang.Class<?> wildcardClass30 = variance27.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double[] doubleArray73 = new double[] {};
        secondMoment56.incrementAll(doubleArray73);
        secondMoment50.incrementAll(doubleArray73);
        double double76 = secondMoment0.evaluate(doubleArray73);
        long long77 = secondMoment0.getN();
        secondMoment0.increment(200.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        long long91 = secondMoment81.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance92 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment81);
        org.apache.commons.math.stat.descriptive.moment.Variance variance93 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment81);
        double[] doubleArray94 = new double[] {};
        double double95 = secondMoment81.evaluate(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray94, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.clear();
        variance2.increment((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.clear();
        double double17 = secondMoment0.getResult();
        java.lang.Class<?> wildcardClass18 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        secondMoment1.clear();
        secondMoment1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double20 = variance19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) (short) -1);
        long long28 = secondMoment22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double41 = variance29.evaluate(doubleArray36, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = variance19.evaluate(doubleArray36, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 24.666666666666668d + "'", double41 == 24.666666666666668d);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        secondMoment1.incrementAll(doubleArray21, 0, (int) (short) 0);
        secondMoment1.clear();
        double double30 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) '4');
        secondMoment32.increment((double) 100);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        secondMoment41.increment((double) '4');
        double double47 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        secondMoment48.increment((double) (short) 0);
        double double53 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        secondMoment54.increment((double) (short) 0);
        double double59 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double double70 = secondMoment54.evaluate(doubleArray66);
        double[] doubleArray71 = new double[] {};
        secondMoment54.incrementAll(doubleArray71);
        secondMoment48.incrementAll(doubleArray71);
        secondMoment48.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        double[] doubleArray83 = new double[] { (-1L), 0, 10L };
        secondMoment77.incrementAll(doubleArray83, 0, 0);
        double[] doubleArray89 = new double[] { 10, (byte) 100 };
        double double90 = secondMoment77.evaluate(doubleArray89);
        double double91 = variance76.evaluate(doubleArray89);
        double double92 = secondMoment41.evaluate(doubleArray89);
        double double93 = secondMoment32.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance31.evaluate(doubleArray89, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 200.0d + "'", double47 == 200.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.5d + "'", double59 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4050.0d + "'", double90 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double8 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        double[] doubleArray22 = new double[] { 10, (byte) 100 };
        double double23 = secondMoment10.evaluate(doubleArray22);
        double double24 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        double double49 = variance25.evaluate(doubleArray44);
        secondMoment0.incrementAll(doubleArray44);
        double double51 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double74 = secondMoment58.evaluate(doubleArray70);
        double[] doubleArray75 = new double[] {};
        secondMoment58.incrementAll(doubleArray75);
        secondMoment52.incrementAll(doubleArray75);
        secondMoment52.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double[] doubleArray93 = new double[] { 10, (byte) 100 };
        double double94 = secondMoment81.evaluate(doubleArray93);
        double double95 = variance80.evaluate(doubleArray93);
        long long96 = variance80.getN();
        double double97 = variance80.getResult();
        boolean boolean98 = variance80.isBiasCorrected();
        boolean boolean99 = secondMoment0.equals((java.lang.Object) variance80);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4050.0d + "'", double95 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 3L + "'", long96 == 3L);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance9.clear();
        variance9.setBiasCorrected(true);
        variance9.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 544.5d + "'", double8 == 544.5d);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        secondMoment52.increment((double) (short) -1);
        secondMoment52.clear();
        secondMoment52.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        variance61.incrementAll(doubleArray68);
        double double73 = secondMoment0.evaluate(doubleArray68);
        secondMoment0.clear();
        double[] doubleArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray75, 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 74.0d + "'", double73 == 74.0d);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1.0f);
        variance2.clear();
        variance2.increment(0.0d);
        variance2.setBiasCorrected(false);
        variance2.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment((double) ' ');
        secondMoment13.increment((double) (-1.0f));
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        long long30 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        double double42 = variance29.evaluate(doubleArray37, (double) (short) -1);
        double double43 = secondMoment13.evaluate(doubleArray37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double45 = variance44.getResult();
        variance44.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = variance2.equals((java.lang.Object) variance44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 37.0d + "'", double42 == 37.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 37.0d + "'", double45 == 37.0d);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double double45 = secondMoment18.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = secondMoment46.getResult();
        secondMoment46.increment((double) (short) -1);
        double[] doubleArray64 = new double[] { (short) 1 };
        secondMoment46.incrementAll(doubleArray64);
        double double66 = secondMoment18.evaluate(doubleArray64);
        double double67 = secondMoment1.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance68.increment((double) 1);
        long long71 = variance68.getN();
        double[] doubleArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance68.evaluate(doubleArray72, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) (byte) 10);
        secondMoment0.clear();
        secondMoment0.increment(4663.407407407407d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] {};
        secondMoment38.incrementAll(doubleArray55);
        secondMoment32.incrementAll(doubleArray55);
        secondMoment32.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = variance60.evaluate(doubleArray73);
        double double76 = variance31.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = secondMoment0.evaluate(doubleArray73, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        variance19.increment((double) (short) 100);
        variance19.clear();
        variance19.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.increment((double) (short) -1);
        secondMoment25.clear();
        secondMoment25.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        long long35 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long38 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        double double55 = secondMoment39.evaluate(doubleArray51);
        variance37.incrementAll(doubleArray51);
        double double57 = secondMoment25.evaluate(doubleArray51);
        double double58 = variance19.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray51, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 37.0d + "'", double58 == 37.0d);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        variance9.increment(200.0d);
        variance9.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double[] doubleArray46 = new double[] {};
        secondMoment29.incrementAll(doubleArray46);
        double double48 = secondMoment26.evaluate(doubleArray46);
        double double49 = variance25.evaluate(doubleArray46);
        double double50 = variance9.evaluate(doubleArray46);
        double[] doubleArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double55 = variance9.evaluate(doubleArray51, 482.66666666666663d, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = secondMoment0.evaluate(doubleArray5, 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        long long12 = variance10.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        secondMoment19.increment((double) (short) 0);
        double double24 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double double35 = secondMoment19.evaluate(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = variance18.evaluate(doubleArray31, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 74.0d + "'", double35 == 74.0d);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        long long16 = secondMoment6.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        secondMoment6.incrementAll(doubleArray23, 0, (int) (short) 1);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment((double) ' ');
        secondMoment31.increment((double) (-1.0f));
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        long long48 = variance47.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double60 = variance47.evaluate(doubleArray55, (double) (short) -1);
        double double61 = secondMoment31.evaluate(doubleArray55);
        double double62 = secondMoment6.evaluate(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray55, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 37.0d + "'", double60 == 37.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) (short) 0);
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double[] doubleArray46 = new double[] {};
        secondMoment29.incrementAll(doubleArray46);
        secondMoment23.incrementAll(doubleArray46);
        secondMoment23.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double[] doubleArray64 = new double[] { 10, (byte) 100 };
        double double65 = secondMoment52.evaluate(doubleArray64);
        double double66 = variance51.evaluate(doubleArray64);
        double double67 = secondMoment8.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance7.evaluate(doubleArray64, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5d + "'", double28 == 0.5d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.clear();
        secondMoment11.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) (short) 0);
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double[] doubleArray46 = new double[] {};
        secondMoment29.incrementAll(doubleArray46);
        secondMoment23.incrementAll(doubleArray46);
        secondMoment23.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double[] doubleArray64 = new double[] { 10, (byte) 100 };
        double double65 = secondMoment52.evaluate(doubleArray64);
        double double66 = variance51.evaluate(doubleArray64);
        double double67 = secondMoment18.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        double[] doubleArray91 = new double[] {};
        secondMoment74.incrementAll(doubleArray91);
        secondMoment68.incrementAll(doubleArray91);
        double double94 = secondMoment18.evaluate(doubleArray91);
        double double95 = secondMoment11.evaluate(doubleArray91);
        double double96 = variance10.evaluate(doubleArray91);
        double double97 = variance0.evaluate(doubleArray91);
        double double98 = variance0.getResult();
        long long99 = variance0.getN();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5d + "'", double28 == 0.5d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertTrue(Double.isNaN(double98));
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double28 = secondMoment12.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] {};
        secondMoment12.incrementAll(doubleArray29);
        double double33 = variance11.evaluate(doubleArray29, (int) (byte) 0, 0);
        variance10.incrementAll(doubleArray29);
        double double37 = variance8.evaluate(doubleArray29, 0, (int) (short) 0);
        variance8.increment((double) ' ');
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 74.0d + "'", double28 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        boolean boolean20 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long31 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        double[] doubleArray52 = new double[] {};
        secondMoment35.incrementAll(doubleArray52);
        double double54 = secondMoment32.evaluate(doubleArray52);
        double double55 = variance30.evaluate(doubleArray52);
        double double57 = variance19.evaluate(doubleArray52, (double) 1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = secondMoment61.getResult();
        secondMoment61.increment((double) (short) -1);
        double[] doubleArray79 = new double[] { (short) 1 };
        secondMoment61.incrementAll(doubleArray79);
        secondMoment58.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance19.evaluate(doubleArray79, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment((double) (short) -1);
        secondMoment16.clear();
        secondMoment16.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        variance27.increment((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        double double5 = secondMoment0.getResult();
        secondMoment0.increment(2.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 544.5d + "'", double5 == 544.5d);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.increment((double) 100);
        double double8 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5304.666666666667d + "'", double8 == 5304.666666666667d);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = variance26.evaluate(doubleArray45);
        double double51 = variance9.evaluate(doubleArray45);
        variance9.increment((double) (short) 1);
        java.lang.Class<?> wildcardClass54 = variance9.getClass();
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean2 = variance1.isBiasCorrected();
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (short) -1);
        secondMoment5.clear();
        secondMoment5.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        variance14.incrementAll(doubleArray21);
        variance4.incrementAll(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray21, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        boolean boolean19 = variance16.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) (short) -1);
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double28 = secondMoment20.getResult();
        long long29 = secondMoment20.getN();
        double double30 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        double[] doubleArray43 = new double[] { 10, (byte) 100 };
        double double44 = secondMoment31.evaluate(doubleArray43);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double68 = secondMoment52.evaluate(doubleArray64);
        double[] doubleArray69 = new double[] {};
        secondMoment52.incrementAll(doubleArray69);
        secondMoment46.incrementAll(doubleArray69);
        secondMoment46.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance74 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double[] doubleArray87 = new double[] { 10, (byte) 100 };
        double double88 = secondMoment75.evaluate(doubleArray87);
        double double89 = variance74.evaluate(doubleArray87);
        double double90 = secondMoment31.evaluate(doubleArray87);
        secondMoment20.incrementAll(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            variance16.incrementAll(doubleArray87, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4050.0d + "'", double44 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4050.0d + "'", double89 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4050.0d + "'", double90 == 4050.0d);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double22 = secondMoment0.evaluate(doubleArray20);
        secondMoment0.increment((double) 3L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double47 = secondMoment25.evaluate(doubleArray45);
        secondMoment25.increment((double) 3L);
        secondMoment25.increment(24.666666666666668d);
        boolean boolean52 = secondMoment0.equals((java.lang.Object) secondMoment25);
        secondMoment0.clear();
        double double54 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        secondMoment0.increment(7186.0d);
        java.lang.Class<?> wildcardClass10 = secondMoment0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) (short) -1);
        secondMoment20.clear();
        secondMoment20.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long30 = variance29.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        secondMoment34.increment((double) (short) 0);
        double double39 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double50 = secondMoment34.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] {};
        secondMoment34.incrementAll(doubleArray51);
        double double53 = secondMoment31.evaluate(doubleArray51);
        double double54 = variance29.evaluate(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double74 = secondMoment58.evaluate(doubleArray70);
        double[] doubleArray75 = new double[] {};
        secondMoment58.incrementAll(doubleArray75);
        double double77 = secondMoment55.evaluate(doubleArray75);
        variance29.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = variance19.evaluate(doubleArray75, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.5d + "'", double39 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 74.0d + "'", double50 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        java.lang.Class<?> wildcardClass10 = secondMoment1.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        double double16 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long18 = secondMoment1.getN();
        double double19 = secondMoment1.getResult();
        secondMoment1.clear();
        secondMoment1.increment((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double9 = secondMoment1.getResult();
        secondMoment1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.increment((double) (short) -1);
        secondMoment13.clear();
        secondMoment13.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        variance22.incrementAll(doubleArray29);
        variance12.incrementAll(doubleArray29);
        double double35 = secondMoment1.evaluate(doubleArray29);
        long long36 = secondMoment1.getN();
        java.lang.Class<?> wildcardClass37 = secondMoment1.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 74.0d + "'", double35 == 74.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double[] doubleArray21 = new double[] { 10, (byte) 100 };
        double double22 = secondMoment9.evaluate(doubleArray21);
        double double23 = secondMoment9.getResult();
        secondMoment9.increment((double) (short) -1);
        double[] doubleArray27 = new double[] { (short) 1 };
        secondMoment9.incrementAll(doubleArray27);
        long long29 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        secondMoment31.increment((double) (short) 0);
        long long36 = secondMoment31.getN();
        double double37 = secondMoment31.getResult();
        secondMoment31.increment((double) (byte) 10);
        secondMoment31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long52 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double64 = variance51.evaluate(doubleArray59, (double) (short) -1);
        double double65 = secondMoment31.evaluate(doubleArray59);
        double double66 = secondMoment9.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = secondMoment1.evaluate(doubleArray59, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4L + "'", long29 == 4L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 37.0d + "'", double64 == 37.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) '4');
        double double6 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance12.incrementAll(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 200.0d + "'", double6 == 200.0d);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.setBiasCorrected(false);
        variance2.increment(1376.0d);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment((double) ' ');
        double double6 = secondMoment3.getResult();
        double double7 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        double double22 = secondMoment3.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        secondMoment30.increment((double) (short) 0);
        double double35 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double double46 = secondMoment30.evaluate(doubleArray42);
        double[] doubleArray47 = new double[] {};
        secondMoment30.incrementAll(doubleArray47);
        secondMoment24.incrementAll(doubleArray47);
        secondMoment24.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double[] doubleArray65 = new double[] { 10, (byte) 100 };
        double double66 = secondMoment53.evaluate(doubleArray65);
        double double67 = variance52.evaluate(doubleArray65);
        double double68 = variance23.evaluate(doubleArray65);
        double double69 = secondMoment3.evaluate(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = variance1.evaluate(doubleArray65, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 74.0d + "'", double46 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 4050.0d + "'", double69 == 4050.0d);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        secondMoment9.clear();
        secondMoment9.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        variance18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.increment((double) (short) -1);
        secondMoment30.clear();
        secondMoment30.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        double double57 = secondMoment30.evaluate(doubleArray52);
        double double58 = variance18.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment((double) ' ');
        secondMoment59.increment((double) (-1.0f));
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long76 = variance75.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        double[] doubleArray83 = new double[] { (-1L), 0, 10L };
        secondMoment77.incrementAll(doubleArray83, 0, 0);
        double double88 = variance75.evaluate(doubleArray83, (double) (short) -1);
        double double89 = secondMoment59.evaluate(doubleArray83);
        double double90 = variance18.evaluate(doubleArray83);
        double double91 = variance8.evaluate(doubleArray83);
        variance8.clear();
        variance8.increment(200.0d);
        variance8.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 37.0d + "'", double58 == 37.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 37.0d + "'", double88 == 37.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 37.0d + "'", double90 == 37.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 24.666666666666668d + "'", double91 == 24.666666666666668d);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double22 = secondMoment0.evaluate(doubleArray20);
        secondMoment0.increment((double) 3L);
        double double25 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.0d + "'", double25 == 2.0d);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        double double18 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment1.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double35 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        variance1.increment((double) (short) 100);
        variance1.increment((double) 3L);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        double[] doubleArray26 = new double[] {};
        secondMoment9.incrementAll(doubleArray26);
        variance1.incrementAll(doubleArray26);
        variance1.clear();
        variance1.setBiasCorrected(true);
        double double32 = variance1.getResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        long long6 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        boolean boolean24 = variance17.equals((java.lang.Object) secondMoment18);
        variance17.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        secondMoment28.clear();
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long53 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double double65 = variance52.evaluate(doubleArray60, (double) (short) -1);
        double double66 = secondMoment36.evaluate(doubleArray60);
        double double67 = secondMoment28.evaluate(doubleArray60);
        double double70 = variance17.evaluate(doubleArray60, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = secondMoment0.evaluate(doubleArray60, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 37.0d + "'", double65 == 37.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        variance27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment((double) (short) -1);
        secondMoment39.clear();
        secondMoment39.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double double66 = secondMoment39.evaluate(doubleArray61);
        double double67 = variance27.evaluate(doubleArray61);
        double double68 = secondMoment11.evaluate(doubleArray61);
        secondMoment11.clear();
        secondMoment11.increment((double) (short) 100);
        double double72 = secondMoment11.getResult();
        secondMoment11.increment(0.0d);
        secondMoment11.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 37.0d + "'", double67 == 37.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        double double16 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            variance17.incrementAll(doubleArray18, (int) (short) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        secondMoment0.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        secondMoment28.increment((double) (-1.0f));
        secondMoment28.clear();
        boolean boolean34 = variance27.equals((java.lang.Object) secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        secondMoment35.increment((double) (short) -1);
        secondMoment35.clear();
        secondMoment35.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        variance44.incrementAll(doubleArray51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        secondMoment56.increment((double) (short) -1);
        secondMoment56.clear();
        secondMoment56.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        secondMoment66.increment((double) (short) 0);
        double double71 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        double[] doubleArray78 = new double[] { (-1L), 0, 10L };
        secondMoment72.incrementAll(doubleArray78, 0, 0);
        double double82 = secondMoment66.evaluate(doubleArray78);
        double double83 = secondMoment56.evaluate(doubleArray78);
        double double84 = variance44.evaluate(doubleArray78);
        double double85 = secondMoment28.evaluate(doubleArray78);
        secondMoment0.incrementAll(doubleArray78);
        double[] doubleArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = secondMoment0.evaluate(doubleArray87, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.5d + "'", double71 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 74.0d + "'", double82 == 74.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 74.0d + "'", double83 == 74.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 37.0d + "'", double84 == 37.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 74.0d + "'", double85 == 74.0d);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = variance8.evaluate(doubleArray21, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        long long10 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) '4');
        double double18 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        secondMoment19.increment((double) (short) 0);
        double double24 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        secondMoment25.increment((double) (short) 0);
        double double30 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        double double41 = secondMoment25.evaluate(doubleArray37);
        double[] doubleArray42 = new double[] {};
        secondMoment25.incrementAll(doubleArray42);
        secondMoment19.incrementAll(doubleArray42);
        secondMoment19.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double[] doubleArray60 = new double[] { 10, (byte) 100 };
        double double61 = secondMoment48.evaluate(doubleArray60);
        double double62 = variance47.evaluate(doubleArray60);
        double double63 = secondMoment12.evaluate(doubleArray60);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        secondMoment66.increment((double) (short) -1);
        secondMoment66.clear();
        secondMoment66.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        variance75.incrementAll(doubleArray82);
        variance65.incrementAll(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = variance11.evaluate(doubleArray82, (double) 1.0f, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 200.0d + "'", double18 == 200.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5d + "'", double30 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 74.0d + "'", double41 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 4050.0d + "'", double62 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment7);
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) (short) -1);
        secondMoment28.clear();
        secondMoment28.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long38 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        secondMoment42.increment((double) (short) 0);
        double double47 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double double58 = secondMoment42.evaluate(doubleArray54);
        double[] doubleArray59 = new double[] {};
        secondMoment42.incrementAll(doubleArray59);
        double double61 = secondMoment39.evaluate(doubleArray59);
        double double62 = variance37.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment0.evaluate(doubleArray59, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.5d + "'", double47 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 74.0d + "'", double58 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long10 = variance9.getN();
        double double11 = variance9.getResult();
        double double12 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.increment((double) (short) -1);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        double double21 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double[] doubleArray35 = new double[] { 10, (byte) 100 };
        double double36 = secondMoment23.evaluate(doubleArray35);
        double double37 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        double[] doubleArray57 = new double[] {};
        secondMoment40.incrementAll(doubleArray57);
        double double61 = variance39.evaluate(doubleArray57, (int) (byte) 0, 0);
        double double62 = variance38.evaluate(doubleArray57);
        secondMoment13.incrementAll(doubleArray57);
        double double64 = variance9.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = variance7.evaluate(doubleArray57, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4050.0d + "'", double36 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = secondMoment43.evaluate(doubleArray55);
        double[] doubleArray60 = new double[] {};
        secondMoment43.incrementAll(doubleArray60);
        double double62 = variance0.evaluate(doubleArray60);
        variance0.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean67 = variance66.isBiasCorrected();
        variance66.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        long long80 = variance79.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double double92 = variance79.evaluate(doubleArray87, (double) (short) -1);
        double double93 = variance66.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance0.evaluate(doubleArray87, 4050.0d, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 37.0d + "'", double92 == 37.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 24.666666666666668d + "'", double93 == 24.666666666666668d);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        secondMoment0.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double double36 = secondMoment20.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] {};
        secondMoment20.incrementAll(doubleArray37);
        double double41 = variance19.evaluate(doubleArray37, (int) (byte) 0, 0);
        variance18.incrementAll(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = secondMoment0.evaluate(doubleArray37, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 74.0d + "'", double36 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) '4');
        double double8 = secondMoment2.getResult();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double double36 = secondMoment20.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] {};
        secondMoment20.incrementAll(doubleArray37);
        secondMoment14.incrementAll(doubleArray37);
        secondMoment14.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double[] doubleArray55 = new double[] { 10, (byte) 100 };
        double double56 = secondMoment43.evaluate(doubleArray55);
        double double57 = variance42.evaluate(doubleArray55);
        long long58 = variance42.getN();
        double double59 = variance42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double[] doubleArray72 = new double[] { 10, (byte) 100 };
        double double73 = secondMoment60.evaluate(doubleArray72);
        double double74 = secondMoment60.getResult();
        secondMoment60.increment((double) (short) -1);
        double[] doubleArray78 = new double[] { (short) 1 };
        secondMoment60.incrementAll(doubleArray78);
        double double80 = variance42.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment2.incrementAll(doubleArray78, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 200.0d + "'", double8 == 200.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 74.0d + "'", double36 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 4050.0d + "'", double57 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4050.0d + "'", double73 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long17 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double29 = variance16.evaluate(doubleArray24, (double) (short) -1);
        double double30 = secondMoment0.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double32 = variance31.getResult();
        variance31.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        variance39.setBiasCorrected(true);
        double double42 = variance39.getResult();
        boolean boolean43 = variance31.equals((java.lang.Object) variance39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        variance54.increment((double) (short) 100);
        variance54.clear();
        variance54.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        secondMoment60.increment((double) (short) -1);
        secondMoment60.clear();
        secondMoment60.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        long long70 = secondMoment60.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long73 = variance72.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        variance72.incrementAll(doubleArray86);
        double double92 = secondMoment60.evaluate(doubleArray86);
        double double93 = variance54.evaluate(doubleArray86);
        double double95 = variance39.evaluate(doubleArray86, 4663.407407407407d);
        variance39.increment(30671.375d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 37.0d + "'", double29 == 37.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 37.0d + "'", double32 == 37.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 74.0d + "'", double92 == 74.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 37.0d + "'", double93 == 37.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 37.00000000372529d + "'", double95 == 37.00000000372529d);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) '4');
        double double6 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        double double10 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        secondMoment12.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        boolean boolean20 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        secondMoment21.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        double[] doubleArray33 = new double[] { (-1L), 0, 10L };
        secondMoment27.incrementAll(doubleArray33, 0, 0);
        double[] doubleArray39 = new double[] { 10, (byte) 100 };
        double double40 = secondMoment27.evaluate(doubleArray39);
        double double41 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        long long43 = secondMoment27.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment((double) ' ');
        secondMoment44.increment((double) (-1.0f));
        secondMoment44.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        long long61 = variance60.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double73 = variance60.evaluate(doubleArray68, (double) (short) -1);
        double double74 = secondMoment44.evaluate(doubleArray68);
        double double75 = secondMoment27.evaluate(doubleArray68);
        secondMoment21.incrementAll(doubleArray68);
        double double79 = variance19.evaluate(doubleArray68, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = secondMoment0.evaluate(doubleArray68, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 200.0d + "'", double6 == 200.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4050.0d + "'", double40 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 4050.0d + "'", double41 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 37.0d + "'", double73 == 37.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 74.0d + "'", double75 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long19 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long22 = secondMoment3.getN();
        secondMoment3.clear();
        double double24 = secondMoment3.getResult();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        double double18 = variance10.getResult();
        variance10.increment(3602.0d);
        double double21 = variance10.getResult();
        variance10.increment(2.880385675555556E7d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        secondMoment26.increment((double) (short) 0);
        double double31 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        double[] doubleArray38 = new double[] { (-1L), 0, 10L };
        secondMoment32.incrementAll(doubleArray38, 0, 0);
        double double42 = secondMoment26.evaluate(doubleArray38);
        double[] doubleArray43 = new double[] {};
        secondMoment26.incrementAll(doubleArray43);
        secondMoment20.incrementAll(doubleArray43);
        double double47 = variance19.evaluate(doubleArray43, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = secondMoment0.evaluate(doubleArray43, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.5d + "'", double31 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 74.0d + "'", double42 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) '4');
        secondMoment0.clear();
        java.lang.Class<?> wildcardClass6 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        double double18 = variance10.getResult();
        variance10.increment(3602.0d);
        long long21 = variance10.getN();
        variance10.increment(24.666666666666668d);
        variance10.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double[] doubleArray46 = new double[] {};
        secondMoment29.incrementAll(doubleArray46);
        double double48 = secondMoment26.evaluate(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = variance10.evaluate(doubleArray46, 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        long long44 = variance28.getN();
        double double45 = variance28.getResult();
        variance28.setBiasCorrected(true);
        boolean boolean48 = variance28.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double[] doubleArray63 = new double[] { 10, (byte) 100 };
        double double64 = secondMoment51.evaluate(doubleArray63);
        double double65 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        long long67 = secondMoment51.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment51);
        double double69 = secondMoment51.getResult();
        secondMoment51.clear();
        secondMoment51.increment(Double.NaN);
        secondMoment51.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long77 = variance76.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        secondMoment78.increment((double) (short) 0);
        double double83 = secondMoment78.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment84 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment84.increment(1.0d);
        double[] doubleArray90 = new double[] { (-1L), 0, 10L };
        secondMoment84.incrementAll(doubleArray90, 0, 0);
        double double94 = secondMoment78.evaluate(doubleArray90);
        variance76.incrementAll(doubleArray90);
        secondMoment51.incrementAll(doubleArray90);
        double double97 = variance28.evaluate(doubleArray90);
        boolean boolean98 = variance28.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 4050.0d + "'", double69 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.5d + "'", double83 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 74.0d + "'", double94 == 74.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 37.0d + "'", double97 == 37.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        variance1.increment((double) 4L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment((double) ' ');
        secondMoment5.increment((double) '4');
        long long10 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        double double12 = variance11.getResult();
        variance11.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) (short) -1);
        secondMoment14.clear();
        secondMoment14.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        long long24 = variance23.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double47 = secondMoment25.evaluate(doubleArray45);
        double double48 = variance23.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double68 = secondMoment52.evaluate(doubleArray64);
        double[] doubleArray69 = new double[] {};
        secondMoment52.incrementAll(doubleArray69);
        double double71 = secondMoment49.evaluate(doubleArray69);
        variance23.incrementAll(doubleArray69);
        double double74 = variance11.evaluate(doubleArray69, 7077.0d);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray69, (int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 200.0d + "'", double12 == 200.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        secondMoment52.increment((double) (short) -1);
        secondMoment52.clear();
        secondMoment52.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        variance61.incrementAll(doubleArray68);
        double double73 = secondMoment0.evaluate(doubleArray68);
        secondMoment0.increment(0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 74.0d + "'", double73 == 74.0d);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        secondMoment1.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long11 = variance10.getN();
        double double12 = variance10.getResult();
        double double13 = variance10.getResult();
        double double14 = variance10.getResult();
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment((double) (short) -1);
        secondMoment16.clear();
        secondMoment16.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long26 = variance25.getN();
        variance25.increment(200.0d);
        variance25.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        double double64 = secondMoment42.evaluate(doubleArray62);
        double double65 = variance41.evaluate(doubleArray62);
        double double66 = variance25.evaluate(doubleArray62);
        double double67 = variance10.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = variance8.evaluate(doubleArray62, (double) 10, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        secondMoment9.clear();
        secondMoment9.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double[] doubleArray32 = new double[] { 10, (byte) 100 };
        double double33 = secondMoment20.evaluate(doubleArray32);
        double double34 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        double double42 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double double53 = secondMoment37.evaluate(doubleArray49);
        double[] doubleArray54 = new double[] {};
        secondMoment37.incrementAll(doubleArray54);
        double double58 = variance36.evaluate(doubleArray54, (int) (byte) 0, 0);
        double double59 = variance35.evaluate(doubleArray54);
        double double60 = variance18.evaluate(doubleArray54);
        long long61 = variance18.getN();
        variance18.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long66 = variance65.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        secondMoment67.increment((double) (short) 0);
        double double72 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        double[] doubleArray79 = new double[] { (-1L), 0, 10L };
        secondMoment73.incrementAll(doubleArray79, 0, 0);
        double double83 = secondMoment67.evaluate(doubleArray79);
        variance65.incrementAll(doubleArray79);
        double double85 = variance18.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray79, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5d + "'", double42 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5d + "'", double72 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 74.0d + "'", double83 == 74.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 37.0d + "'", double85 == 37.0d);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        double double6 = secondMoment0.getResult();
        secondMoment0.increment((double) (byte) 10);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        long long21 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        double double33 = variance20.evaluate(doubleArray28, (double) (short) -1);
        double double34 = secondMoment0.evaluate(doubleArray28);
        secondMoment0.increment(11282.0d);
        double double37 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 37.0d + "'", double33 == 37.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 9.541195475E7d + "'", double37 == 9.541195475E7d);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double11 = secondMoment2.getResult();
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        double[] doubleArray19 = new double[] { (-1L), 0, 10L };
        secondMoment13.incrementAll(doubleArray19, 0, 0);
        double[] doubleArray25 = new double[] { 10, (byte) 100 };
        double double26 = secondMoment13.evaluate(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = secondMoment13.evaluate(doubleArray45);
        secondMoment2.incrementAll(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        double double54 = secondMoment2.getResult();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 544.5d + "'", double11 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        long long6 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) (short) -1);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        double double32 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        double[] doubleArray52 = new double[] {};
        secondMoment35.incrementAll(doubleArray52);
        double double56 = variance34.evaluate(doubleArray52, (int) (byte) 0, 0);
        double double57 = variance33.evaluate(doubleArray52);
        secondMoment8.incrementAll(doubleArray52);
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        double[] doubleArray91 = new double[] {};
        secondMoment74.incrementAll(doubleArray91);
        double double93 = secondMoment71.evaluate(doubleArray91);
        double double94 = variance70.evaluate(doubleArray91);
        secondMoment8.incrementAll(doubleArray91);
        double double96 = variance7.evaluate(doubleArray91);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) '4');
        secondMoment0.increment((double) 0.0f);
        long long7 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double[] doubleArray21 = new double[] { 10, (byte) 100 };
        double double22 = secondMoment9.evaluate(doubleArray21);
        double double23 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        long long25 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        secondMoment26.increment((double) (-1.0f));
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        double[] doubleArray38 = new double[] { (-1L), 0, 10L };
        secondMoment32.incrementAll(doubleArray38, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long43 = variance42.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double55 = variance42.evaluate(doubleArray50, (double) (short) -1);
        double double56 = secondMoment26.evaluate(doubleArray50);
        double double57 = secondMoment9.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long61 = variance60.getN();
        double double62 = variance60.getResult();
        variance60.increment((double) (short) 100);
        variance60.increment((double) 3L);
        variance60.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double84 = secondMoment68.evaluate(doubleArray80);
        double[] doubleArray85 = new double[] {};
        secondMoment68.incrementAll(doubleArray85);
        variance60.incrementAll(doubleArray85);
        secondMoment9.incrementAll(doubleArray85);
        double double89 = secondMoment0.evaluate(doubleArray85);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 37.0d + "'", double55 == 37.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1376.0d + "'", double89 == 1376.0d);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.increment(1.0d);
        double[] doubleArray10 = new double[] { (-1L), 0, 10L };
        secondMoment4.incrementAll(doubleArray10, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double34 = secondMoment18.evaluate(doubleArray30);
        double[] doubleArray35 = new double[] {};
        secondMoment18.incrementAll(doubleArray35);
        double double37 = secondMoment15.evaluate(doubleArray35);
        double double38 = variance14.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double[] doubleArray53 = new double[] { 10, (byte) 100 };
        double double54 = secondMoment41.evaluate(doubleArray53);
        long long55 = secondMoment41.getN();
        secondMoment41.clear();
        double double57 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        secondMoment64.increment((double) (short) 0);
        double double69 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double double80 = secondMoment64.evaluate(doubleArray76);
        double[] doubleArray81 = new double[] {};
        secondMoment64.incrementAll(doubleArray81);
        double double83 = secondMoment61.evaluate(doubleArray81);
        variance60.incrementAll(doubleArray81);
        double double85 = variance14.evaluate(doubleArray81);
        double double86 = variance1.evaluate(doubleArray81);
        variance1.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.5d + "'", double69 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        variance10.clear();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance10.evaluate(doubleArray13, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.increment(1.0d);
        secondMoment4.increment((double) (short) 0);
        long long9 = secondMoment4.getN();
        double double10 = secondMoment4.getResult();
        secondMoment4.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double35 = variance13.evaluate(doubleArray31, (int) (byte) 0, 0);
        long long36 = variance13.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        double double42 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double double53 = secondMoment37.evaluate(doubleArray49);
        variance13.incrementAll(doubleArray49);
        long long55 = variance13.getN();
        variance13.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = secondMoment58.evaluate(doubleArray73);
        variance13.incrementAll(doubleArray73);
        double double77 = secondMoment4.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray73, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5d + "'", double42 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3L + "'", long55 == 3L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4050.0d + "'", double77 == 4050.0d);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance10.evaluate(doubleArray31);
        variance10.increment(37.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double[] doubleArray51 = new double[] { 10, (byte) 100 };
        double double52 = secondMoment39.evaluate(doubleArray51);
        double double53 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        long long55 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment39);
        boolean boolean57 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) (short) -1);
        secondMoment58.clear();
        secondMoment58.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long68 = variance67.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        double double92 = variance67.evaluate(doubleArray89);
        double double94 = variance56.evaluate(doubleArray89, (double) 1);
        variance10.incrementAll(doubleArray89);
        java.lang.Class<?> wildcardClass96 = variance10.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4050.0d + "'", double52 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        variance16.clear();
        long long20 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        long long30 = secondMoment22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment((double) ' ');
        secondMoment42.increment((double) (-1.0f));
        secondMoment42.clear();
        boolean boolean48 = variance41.equals((java.lang.Object) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        secondMoment55.increment((double) (short) 0);
        double double60 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = secondMoment55.evaluate(doubleArray67);
        double[] doubleArray72 = new double[] {};
        secondMoment55.incrementAll(doubleArray72);
        secondMoment49.incrementAll(doubleArray72);
        secondMoment49.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double[] doubleArray90 = new double[] { 10, (byte) 100 };
        double double91 = secondMoment78.evaluate(doubleArray90);
        double double92 = variance77.evaluate(doubleArray90);
        secondMoment42.incrementAll(doubleArray90);
        secondMoment22.incrementAll(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance16.evaluate(doubleArray90, 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5d + "'", double60 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        secondMoment1.incrementAll(doubleArray21, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double19 = variance18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        double double35 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        long long37 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        secondMoment38.increment((double) (-1.0f));
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long55 = variance54.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double67 = variance54.evaluate(doubleArray62, (double) (short) -1);
        double double68 = secondMoment38.evaluate(doubleArray62);
        double double69 = secondMoment21.evaluate(doubleArray62);
        variance18.incrementAll(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = secondMoment0.evaluate(doubleArray62, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 37.0d + "'", double67 == 37.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 74.0d + "'", double69 == 74.0d);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment15);
        double double26 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        double double28 = secondMoment15.getResult();
        double double29 = secondMoment15.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance10.evaluate(doubleArray31);
        variance10.increment(37.0d);
        variance10.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment0.evaluate(doubleArray15);
        secondMoment0.clear();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        long long19 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) (short) -1);
        secondMoment20.clear();
        secondMoment20.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        boolean boolean34 = secondMoment20.equals((java.lang.Object) secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double[] doubleArray50 = new double[] { 10, (byte) 100 };
        double double51 = secondMoment38.evaluate(doubleArray50);
        double double52 = secondMoment35.evaluate(doubleArray50);
        secondMoment20.incrementAll(doubleArray50);
        double double54 = variance16.evaluate(doubleArray50);
        variance16.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4050.0d + "'", double52 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2025.0d + "'", double54 == 2025.0d);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        double double16 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long18 = secondMoment1.getN();
        double double19 = secondMoment1.getResult();
        long long20 = secondMoment1.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.increment((double) (short) 1);
        secondMoment1.increment(0.5d);
        secondMoment1.clear();
        secondMoment1.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        variance0.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double[] doubleArray60 = new double[] { 10, (byte) 100 };
        double double61 = secondMoment48.evaluate(doubleArray60);
        double double62 = secondMoment45.evaluate(doubleArray60);
        variance0.incrementAll(doubleArray60);
        variance0.clear();
        variance0.setBiasCorrected(false);
        double double67 = variance0.getResult();
        variance0.increment(9714674.75d);
        long long70 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        secondMoment72.increment((double) (short) -1);
        secondMoment72.clear();
        secondMoment72.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment82.increment(1.0d);
        double[] doubleArray88 = new double[] { (-1L), 0, 10L };
        secondMoment82.incrementAll(doubleArray88, 0, 0);
        variance81.incrementAll(doubleArray88);
        variance71.incrementAll(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance0.evaluate(doubleArray88, (double) 0.0f, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 4050.0d + "'", double62 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance8.increment((double) (short) 0);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double[] doubleArray26 = new double[] { 10, (byte) 100 };
        double double27 = secondMoment14.evaluate(doubleArray26);
        double double28 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        long long30 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        long long50 = secondMoment34.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment((double) ' ');
        secondMoment51.increment((double) (-1.0f));
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long68 = variance67.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        double double80 = variance67.evaluate(doubleArray75, (double) (short) -1);
        double double81 = secondMoment51.evaluate(doubleArray75);
        double double82 = secondMoment34.evaluate(doubleArray75);
        double double83 = secondMoment14.evaluate(doubleArray75);
        double double84 = variance8.evaluate(doubleArray75);
        long long85 = variance8.getN();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4050.0d + "'", double27 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4050.0d + "'", double28 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2L + "'", long30 == 2L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 37.0d + "'", double80 == 37.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 74.0d + "'", double81 == 74.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 74.0d + "'", double82 == 74.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 74.0d + "'", double83 == 74.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 24.666666666666668d + "'", double84 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.increment(200.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double[] doubleArray36 = new double[] { 10, (byte) 100 };
        double double37 = secondMoment24.evaluate(doubleArray36);
        double double38 = secondMoment21.evaluate(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray36, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4050.0d + "'", double38 == 4050.0d);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        double double15 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        double double32 = secondMoment15.evaluate(doubleArray30);
        secondMoment0.incrementAll(doubleArray30);
        double double34 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        long long42 = secondMoment36.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double55 = variance43.evaluate(doubleArray50, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long58 = variance57.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        secondMoment59.increment((double) (short) 0);
        double double64 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        double double75 = secondMoment59.evaluate(doubleArray71);
        double double77 = variance57.evaluate(doubleArray71, (double) 4L);
        double double78 = variance43.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment0.evaluate(doubleArray71, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5226.0d + "'", double34 == 5226.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 24.666666666666668d + "'", double55 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.5d + "'", double64 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 74.0d + "'", double75 == 74.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 37.0d + "'", double77 == 37.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 24.666666666666668d + "'", double78 == 24.666666666666668d);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double double24 = secondMoment8.evaluate(doubleArray20);
        secondMoment0.incrementAll(doubleArray20, 0, (int) (short) 0);
        long long28 = secondMoment0.getN();
        secondMoment0.increment((double) (short) 1);
        secondMoment0.clear();
        secondMoment0.increment((double) (-1));
        secondMoment0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 74.0d + "'", double24 == 74.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = variance26.evaluate(doubleArray45);
        double double51 = variance9.evaluate(doubleArray45);
        long long52 = variance9.getN();
        variance9.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long57 = variance56.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double74 = secondMoment58.evaluate(doubleArray70);
        variance56.incrementAll(doubleArray70);
        double double76 = variance9.evaluate(doubleArray70);
        double double77 = variance9.getResult();
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 37.0d + "'", double76 == 37.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) (short) -1);
        secondMoment8.clear();
        secondMoment8.increment((double) 0L);
        boolean boolean17 = secondMoment1.equals((java.lang.Object) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.increment((double) (short) -1);
        secondMoment19.clear();
        secondMoment19.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double double46 = secondMoment19.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        double[] doubleArray59 = new double[] { 10, (byte) 100 };
        double double60 = secondMoment47.evaluate(doubleArray59);
        double double61 = secondMoment47.getResult();
        secondMoment47.increment((double) (short) -1);
        double[] doubleArray65 = new double[] { (short) 1 };
        secondMoment47.incrementAll(doubleArray65);
        double double67 = secondMoment19.evaluate(doubleArray65);
        double double68 = variance18.evaluate(doubleArray65);
        long long69 = variance18.getN();
        boolean boolean70 = variance18.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 74.0d + "'", double46 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        long long26 = secondMoment1.getN();
        long long27 = secondMoment1.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment1.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        secondMoment35.increment((double) (short) -1);
        secondMoment35.clear();
        secondMoment35.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        secondMoment44.increment((double) (short) 0);
        boolean boolean49 = secondMoment35.equals((java.lang.Object) secondMoment44);
        secondMoment35.clear();
        long long51 = secondMoment35.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        secondMoment53.increment((double) (short) 0);
        long long58 = secondMoment53.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        secondMoment60.increment((double) (short) -1);
        secondMoment60.clear();
        secondMoment60.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        secondMoment69.increment((double) (short) 0);
        boolean boolean74 = secondMoment60.equals((java.lang.Object) secondMoment69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double[] doubleArray90 = new double[] { 10, (byte) 100 };
        double double91 = secondMoment78.evaluate(doubleArray90);
        double double92 = secondMoment75.evaluate(doubleArray90);
        secondMoment60.incrementAll(doubleArray90);
        secondMoment53.incrementAll(doubleArray90, (int) (short) 0, 0);
        double double97 = secondMoment35.evaluate(doubleArray90);
        secondMoment1.incrementAll(doubleArray90);
        secondMoment1.clear();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2L + "'", long58 == 2L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 4050.0d + "'", double97 == 4050.0d);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance8.increment((double) (short) 0);
        long long11 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        long long17 = secondMoment12.getN();
        secondMoment12.increment(0.0d);
        secondMoment12.increment(688.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double[] doubleArray35 = new double[] { 10, (byte) 100 };
        double double36 = secondMoment23.evaluate(doubleArray35);
        long long37 = secondMoment23.getN();
        secondMoment23.clear();
        double double39 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        secondMoment41.incrementAll(doubleArray64);
        secondMoment41.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double[] doubleArray82 = new double[] { 10, (byte) 100 };
        double double83 = secondMoment70.evaluate(doubleArray82);
        double double84 = variance69.evaluate(doubleArray82);
        double double85 = secondMoment23.evaluate(doubleArray82);
        double double86 = secondMoment12.evaluate(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance8.evaluate(doubleArray82, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4050.0d + "'", double36 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4050.0d + "'", double86 == 4050.0d);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        double[] doubleArray41 = new double[] {};
        secondMoment24.incrementAll(doubleArray41);
        secondMoment18.incrementAll(doubleArray41);
        secondMoment18.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        double[] doubleArray59 = new double[] { 10, (byte) 100 };
        double double60 = secondMoment47.evaluate(doubleArray59);
        double double61 = variance46.evaluate(doubleArray59);
        secondMoment11.incrementAll(doubleArray59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment64);
        secondMoment64.increment((double) (short) -1);
        long long70 = secondMoment64.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment64);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        double[] doubleArray78 = new double[] { (-1L), 0, 10L };
        secondMoment72.incrementAll(doubleArray78, 0, 0);
        double double83 = variance71.evaluate(doubleArray78, (double) 1L);
        double double84 = secondMoment11.evaluate(doubleArray78);
        double double85 = secondMoment11.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2L + "'", long70 == 2L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 24.666666666666668d + "'", double83 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 74.0d + "'", double85 == 74.0d);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double34 = secondMoment18.evaluate(doubleArray30);
        double[] doubleArray35 = new double[] {};
        secondMoment18.incrementAll(doubleArray35);
        double double39 = variance17.evaluate(doubleArray35, (int) (byte) 0, 0);
        double double40 = variance16.evaluate(doubleArray35);
        java.lang.Class<?> wildcardClass41 = doubleArray35.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        double double42 = variance0.getResult();
        double double43 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        secondMoment44.increment((double) (short) -1);
        secondMoment44.clear();
        secondMoment44.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        variance53.incrementAll(doubleArray60);
        long long65 = variance53.getN();
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        secondMoment67.increment((double) (short) 0);
        double double72 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        secondMoment73.increment((double) (short) 0);
        double double78 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double double89 = secondMoment73.evaluate(doubleArray85);
        double[] doubleArray90 = new double[] {};
        secondMoment73.incrementAll(doubleArray90);
        secondMoment67.incrementAll(doubleArray90);
        double double93 = variance53.evaluate(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = variance0.evaluate(doubleArray90, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 37.0d + "'", double42 == 37.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 37.0d + "'", double43 == 37.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5d + "'", double72 == 0.5d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5d + "'", double78 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.setBiasCorrected(false);
        boolean boolean8 = variance2.isBiasCorrected();
        variance2.increment(7077.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long22 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double double34 = variance21.evaluate(doubleArray29, (double) (short) -1);
        double double35 = variance21.getResult();
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        secondMoment39.incrementAll(doubleArray62);
        secondMoment39.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double[] doubleArray80 = new double[] { 10, (byte) 100 };
        double double81 = secondMoment68.evaluate(doubleArray80);
        double double82 = variance67.evaluate(doubleArray80);
        double double83 = variance38.evaluate(doubleArray80);
        double double84 = variance21.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance2.evaluate(doubleArray80, (int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 37.0d + "'", double34 == 37.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4050.0d + "'", double82 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.setBiasCorrected(false);
        variance2.setBiasCorrected(true);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        boolean boolean46 = secondMoment21.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        double double70 = variance48.evaluate(doubleArray66, (int) (byte) 0, 0);
        long long71 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        variance48.incrementAll(doubleArray84);
        double double91 = variance47.evaluate(doubleArray84, (double) '#');
        double double94 = variance19.evaluate(doubleArray84, 0, (int) (byte) 1);
        variance19.clear();
        variance19.increment(36.916666666666664d);
        variance19.increment(26.916666666666668d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 24.666666666666668d + "'", double91 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) '4');
        secondMoment1.increment((double) 100);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double double11 = variance10.getResult();
        variance10.increment(6993.1875d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) '4');
        secondMoment14.increment((double) 100);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.increment((double) '4');
        double double29 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        secondMoment30.increment((double) (short) 0);
        double double35 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        secondMoment36.increment((double) (short) 0);
        double double41 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double double52 = secondMoment36.evaluate(doubleArray48);
        double[] doubleArray53 = new double[] {};
        secondMoment36.incrementAll(doubleArray53);
        secondMoment30.incrementAll(doubleArray53);
        secondMoment30.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        double[] doubleArray65 = new double[] { (-1L), 0, 10L };
        secondMoment59.incrementAll(doubleArray65, 0, 0);
        double[] doubleArray71 = new double[] { 10, (byte) 100 };
        double double72 = secondMoment59.evaluate(doubleArray71);
        double double73 = variance58.evaluate(doubleArray71);
        double double74 = secondMoment23.evaluate(doubleArray71);
        double double75 = secondMoment14.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = variance10.evaluate(doubleArray71, (int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 200.0d + "'", double29 == 200.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 4050.0d + "'", double72 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4050.0d + "'", double73 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long22 = variance21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double double34 = variance21.evaluate(doubleArray29, (double) (short) -1);
        double double35 = variance21.getResult();
        variance21.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        secondMoment39.incrementAll(doubleArray62);
        secondMoment39.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double[] doubleArray80 = new double[] { 10, (byte) 100 };
        double double81 = secondMoment68.evaluate(doubleArray80);
        double double82 = variance67.evaluate(doubleArray80);
        double double83 = variance38.evaluate(doubleArray80);
        double double84 = variance21.evaluate(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = secondMoment0.evaluate(doubleArray80, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 37.0d + "'", double34 == 37.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4050.0d + "'", double82 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        java.lang.Class<?> wildcardClass18 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        secondMoment13.increment((double) (short) -1);
        secondMoment13.clear();
        secondMoment13.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        variance22.incrementAll(doubleArray29);
        variance12.incrementAll(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = variance11.evaluate(doubleArray29, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray10 = new double[] { 0L, (byte) 1, 6140.666666666667d, 544.5d, (byte) 100 };
        double double11 = secondMoment1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        secondMoment12.clear();
        secondMoment12.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        boolean boolean22 = secondMoment1.equals((java.lang.Object) secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        double double24 = secondMoment12.getResult();
        double double25 = secondMoment12.getResult();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0, 6140.666666666667, 544.5, 100.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.880385675555556E7d + "'", double11 == 2.880385675555556E7d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double double45 = secondMoment18.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = secondMoment46.getResult();
        secondMoment46.increment((double) (short) -1);
        double[] doubleArray64 = new double[] { (short) 1 };
        secondMoment46.incrementAll(doubleArray64);
        double double66 = secondMoment18.evaluate(doubleArray64);
        double double67 = secondMoment1.evaluate(doubleArray64);
        secondMoment1.clear();
        secondMoment1.clear();
        secondMoment1.clear();
        double double71 = secondMoment1.getResult();
        double double72 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.clear();
        secondMoment10.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        secondMoment22.incrementAll(doubleArray45);
        secondMoment22.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double[] doubleArray63 = new double[] { 10, (byte) 100 };
        double double64 = secondMoment51.evaluate(doubleArray63);
        double double65 = variance50.evaluate(doubleArray63);
        double double66 = secondMoment17.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        secondMoment67.increment((double) (short) 0);
        double double72 = secondMoment67.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        secondMoment73.increment((double) (short) 0);
        double double78 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double double89 = secondMoment73.evaluate(doubleArray85);
        double[] doubleArray90 = new double[] {};
        secondMoment73.incrementAll(doubleArray90);
        secondMoment67.incrementAll(doubleArray90);
        double double93 = secondMoment17.evaluate(doubleArray90);
        double double94 = secondMoment10.evaluate(doubleArray90);
        double double95 = variance9.evaluate(doubleArray90);
        boolean boolean96 = variance9.isBiasCorrected();
        double double97 = variance9.getResult();
        variance9.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5d + "'", double72 == 0.5d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5d + "'", double78 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(24.666666666666668d);
        secondMoment0.clear();
        secondMoment0.increment((-1.0d));
        secondMoment0.increment(7130.75d);
        java.lang.Object obj36 = null;
        boolean boolean37 = secondMoment0.equals(obj36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double[] doubleArray55 = new double[] { 10, (byte) 100 };
        double double56 = secondMoment43.evaluate(doubleArray55);
        double double57 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment43);
        long long59 = secondMoment43.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment((double) ' ');
        secondMoment60.increment((double) (-1.0f));
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        double[] doubleArray72 = new double[] { (-1L), 0, 10L };
        secondMoment66.incrementAll(doubleArray72, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment66);
        long long77 = variance76.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double89 = variance76.evaluate(doubleArray84, (double) (short) -1);
        double double90 = secondMoment60.evaluate(doubleArray84);
        double double91 = secondMoment43.evaluate(doubleArray84);
        secondMoment38.incrementAll(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = secondMoment0.evaluate(doubleArray84, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 4050.0d + "'", double57 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 37.0d + "'", double89 == 37.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 74.0d + "'", double91 == 74.0d);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double28 = secondMoment12.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] {};
        secondMoment12.incrementAll(doubleArray29);
        double double33 = variance11.evaluate(doubleArray29, (int) (byte) 0, 0);
        variance10.incrementAll(doubleArray29);
        double double37 = variance8.evaluate(doubleArray29, 0, (int) (short) 0);
        long long38 = variance8.getN();
        variance8.clear();
        double double40 = variance8.getResult();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 74.0d + "'", double28 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) (short) 0);
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        double[] doubleArray19 = new double[] { (-1L), 0, 10L };
        secondMoment13.incrementAll(doubleArray19, 0, 0);
        double double23 = secondMoment7.evaluate(doubleArray19);
        double[] doubleArray24 = new double[] {};
        secondMoment7.incrementAll(doubleArray24);
        secondMoment1.incrementAll(doubleArray24);
        long long27 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double[] doubleArray42 = new double[] { 10, (byte) 100 };
        double double43 = secondMoment30.evaluate(doubleArray42);
        double double44 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        long long46 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment((double) ' ');
        secondMoment47.increment((double) (-1.0f));
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long64 = variance63.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        double double76 = variance63.evaluate(doubleArray71, (double) (short) -1);
        double double77 = secondMoment47.evaluate(doubleArray71);
        double double78 = secondMoment30.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment1.evaluate(doubleArray71, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5d + "'", double12 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 74.0d + "'", double23 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4050.0d + "'", double44 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 37.0d + "'", double76 == 37.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 74.0d + "'", double77 == 74.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 74.0d + "'", double78 == 74.0d);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        long long10 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(10.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        boolean boolean29 = secondMoment15.equals((java.lang.Object) secondMoment24);
        secondMoment15.clear();
        long long31 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        secondMoment33.increment((double) (short) 0);
        long long38 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) (short) -1);
        secondMoment40.clear();
        secondMoment40.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        boolean boolean54 = secondMoment40.equals((java.lang.Object) secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double[] doubleArray70 = new double[] { 10, (byte) 100 };
        double double71 = secondMoment58.evaluate(doubleArray70);
        double double72 = secondMoment55.evaluate(doubleArray70);
        secondMoment40.incrementAll(doubleArray70);
        secondMoment33.incrementAll(doubleArray70, (int) (short) 0, 0);
        double double77 = secondMoment15.evaluate(doubleArray70);
        double double78 = secondMoment0.evaluate(doubleArray70);
        secondMoment0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4050.0d + "'", double71 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 4050.0d + "'", double72 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4050.0d + "'", double77 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 4050.0d + "'", double78 == 4050.0d);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment(7881.333333333333d);
        secondMoment0.clear();
        secondMoment0.clear();
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = secondMoment0.evaluate(doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        double double94 = secondMoment1.getResult();
        secondMoment1.increment(7077.0d);
        long long97 = secondMoment1.getN();
        java.lang.Class<?> wildcardClass98 = secondMoment1.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 3L + "'", long97 == 3L);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        java.lang.Class<?> wildcardClass9 = secondMoment1.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) -1);
        double[] doubleArray23 = new double[] { (short) 1 };
        secondMoment5.incrementAll(doubleArray23);
        long long25 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.increment((double) (short) -1);
        secondMoment26.clear();
        secondMoment26.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long36 = variance35.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        double[] doubleArray57 = new double[] {};
        secondMoment40.incrementAll(doubleArray57);
        double double59 = secondMoment37.evaluate(doubleArray57);
        double double60 = variance35.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        secondMoment64.increment((double) (short) 0);
        double double69 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double double80 = secondMoment64.evaluate(doubleArray76);
        double[] doubleArray81 = new double[] {};
        secondMoment64.incrementAll(doubleArray81);
        double double83 = secondMoment61.evaluate(doubleArray81);
        variance35.incrementAll(doubleArray81);
        double double85 = secondMoment5.evaluate(doubleArray81);
        double double86 = variance3.evaluate(doubleArray81);
        variance3.clear();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4L + "'", long25 == 4L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.5d + "'", double69 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 7077.0d + "'", double85 == 7077.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        variance9.clear();
        variance9.increment((double) 10.0f);
        variance9.increment(2025.0d);
        boolean boolean26 = variance9.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        secondMoment33.increment((double) (short) 0);
        double double38 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double double49 = secondMoment33.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] {};
        secondMoment33.incrementAll(doubleArray50);
        secondMoment27.incrementAll(doubleArray50);
        variance9.incrementAll(doubleArray50, 0, (int) (byte) 0);
        java.lang.Class<?> wildcardClass56 = variance9.getClass();
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.5d + "'", double38 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        long long35 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        secondMoment37.clear();
        secondMoment37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        variance46.incrementAll(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) (short) -1);
        secondMoment58.clear();
        secondMoment58.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double84 = secondMoment68.evaluate(doubleArray80);
        double double85 = secondMoment58.evaluate(doubleArray80);
        double double86 = variance46.evaluate(doubleArray80);
        variance36.incrementAll(doubleArray80);
        secondMoment0.incrementAll(doubleArray80);
        double double89 = secondMoment0.getResult();
        double double90 = secondMoment0.getResult();
        long long91 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass92 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 74.0d + "'", double85 == 74.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 37.0d + "'", double86 == 37.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 7881.333333333333d + "'", double89 == 7881.333333333333d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 7881.333333333333d + "'", double90 == 7881.333333333333d);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 6L + "'", long91 == 6L);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment(4402.666666666667d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        secondMoment12.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        double double32 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        long long34 = secondMoment18.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment((double) ' ');
        secondMoment35.increment((double) (-1.0f));
        secondMoment35.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long52 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double64 = variance51.evaluate(doubleArray59, (double) (short) -1);
        double double65 = secondMoment35.evaluate(doubleArray59);
        double double66 = secondMoment18.evaluate(doubleArray59);
        secondMoment12.incrementAll(doubleArray59);
        secondMoment1.incrementAll(doubleArray59);
        java.lang.Class<?> wildcardClass69 = doubleArray59.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 37.0d + "'", double64 == 37.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.setBiasCorrected(false);
        variance8.increment(482.66666666666663d);
        variance8.setBiasCorrected(true);
        java.lang.Class<?> wildcardClass15 = variance8.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        double double6 = secondMoment0.getResult();
        long long7 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) (short) -1);
        secondMoment8.clear();
        secondMoment8.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double34 = secondMoment18.evaluate(doubleArray30);
        double double35 = secondMoment8.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double[] doubleArray48 = new double[] { 10, (byte) 100 };
        double double49 = secondMoment36.evaluate(doubleArray48);
        double double50 = secondMoment36.getResult();
        secondMoment36.increment((double) (short) -1);
        double[] doubleArray54 = new double[] { (short) 1 };
        secondMoment36.incrementAll(doubleArray54);
        double double56 = secondMoment8.evaluate(doubleArray54);
        secondMoment8.increment((double) (short) 1);
        boolean boolean59 = secondMoment0.equals((java.lang.Object) secondMoment8);
        long long60 = secondMoment0.getN();
        double double61 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 74.0d + "'", double35 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2L + "'", long60 == 2L);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        double[] doubleArray10 = new double[] { (byte) -1, (short) -1, 0, 'a', 100.0d, 1.0f };
        variance2.incrementAll(doubleArray10);
        boolean boolean12 = variance2.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 0.0, 97.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray9 = new double[] { 0L, (byte) 1, 6140.666666666667d, 544.5d, (byte) 100 };
        double double10 = secondMoment0.evaluate(doubleArray9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (short) -1);
        secondMoment11.clear();
        secondMoment11.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        boolean boolean21 = secondMoment0.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) 1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean27 = variance26.isBiasCorrected();
        double double28 = variance26.getResult();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0, 6140.666666666667, 544.5, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.880385675555556E7d + "'", double10 == 2.880385675555556E7d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long35 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double double47 = variance34.evaluate(doubleArray42, (double) (short) -1);
        double double48 = secondMoment18.evaluate(doubleArray42);
        double double49 = secondMoment1.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double51 = secondMoment1.getResult();
        double double52 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 37.0d + "'", double47 == 37.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long7 = secondMoment1.getN();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        long long14 = secondMoment9.getN();
        double double15 = secondMoment9.getResult();
        double double16 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double[] doubleArray29 = new double[] { 10, (byte) 100 };
        double double30 = secondMoment17.evaluate(doubleArray29);
        long long31 = secondMoment17.getN();
        double double32 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        secondMoment33.increment((double) (short) -1);
        secondMoment33.clear();
        double double40 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        double double57 = secondMoment41.evaluate(doubleArray53);
        secondMoment33.incrementAll(doubleArray53, 0, (int) (short) 0);
        double double61 = secondMoment17.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        secondMoment62.increment((double) (short) 0);
        long long67 = secondMoment62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        long long78 = secondMoment68.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        secondMoment68.incrementAll(doubleArray85, 0, (int) (short) 1);
        secondMoment62.incrementAll(doubleArray85, (int) (byte) 0, (int) (byte) 1);
        secondMoment17.incrementAll(doubleArray85);
        double double96 = secondMoment9.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment1.evaluate(doubleArray85, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 4050.0d + "'", double30 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 74.0d + "'", double96 == 74.0d);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance18.clear();
        variance18.clear();
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        double[] doubleArray34 = new double[] { 10, (byte) 100 };
        double double35 = secondMoment22.evaluate(doubleArray34);
        long long36 = secondMoment22.getN();
        double double37 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        secondMoment38.increment((double) (short) -1);
        secondMoment38.clear();
        double double45 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        secondMoment38.incrementAll(doubleArray58, 0, (int) (short) 0);
        double double66 = secondMoment22.evaluate(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = variance18.evaluate(doubleArray58, 7142.8d, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        double double19 = variance16.getResult();
        variance16.setBiasCorrected(false);
        long long22 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        secondMoment26.increment((double) (short) 0);
        double double31 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        double[] doubleArray38 = new double[] { (-1L), 0, 10L };
        secondMoment32.incrementAll(doubleArray38, 0, 0);
        double double42 = secondMoment26.evaluate(doubleArray38);
        double[] doubleArray43 = new double[] {};
        secondMoment26.incrementAll(doubleArray43);
        double double47 = variance25.evaluate(doubleArray43, (int) (byte) 0, 0);
        variance24.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = variance16.evaluate(doubleArray43, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2025.0d + "'", double19 == 2025.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.5d + "'", double31 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 74.0d + "'", double42 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        variance9.clear();
        variance9.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        secondMoment30.increment((double) (short) 0);
        double double35 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double double46 = secondMoment30.evaluate(doubleArray42);
        double[] doubleArray47 = new double[] {};
        secondMoment30.incrementAll(doubleArray47);
        secondMoment24.incrementAll(doubleArray47);
        secondMoment24.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double[] doubleArray65 = new double[] { 10, (byte) 100 };
        double double66 = secondMoment53.evaluate(doubleArray65);
        double double67 = variance52.evaluate(doubleArray65);
        double double69 = variance9.evaluate(doubleArray65, 100.0d);
        long long70 = variance9.getN();
        variance9.clear();
        double double72 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        double[] doubleArray79 = new double[] { (-1L), 0, 10L };
        secondMoment73.incrementAll(doubleArray79, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance9.evaluate(doubleArray79, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 74.0d + "'", double46 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 4050.0d + "'", double69 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = variance9.evaluate(doubleArray10, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) (short) -1);
        secondMoment8.clear();
        secondMoment8.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = variance2.equals((java.lang.Object) secondMoment8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        long long18 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        long long26 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        secondMoment34.increment((double) (short) 0);
        double double39 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double50 = secondMoment34.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] {};
        secondMoment34.incrementAll(doubleArray51);
        secondMoment28.incrementAll(doubleArray51);
        secondMoment28.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        double[] doubleArray69 = new double[] { 10, (byte) 100 };
        double double70 = secondMoment57.evaluate(doubleArray69);
        double double71 = variance56.evaluate(doubleArray69);
        long long72 = variance56.getN();
        double double73 = variance56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double[] doubleArray86 = new double[] { 10, (byte) 100 };
        double double87 = secondMoment74.evaluate(doubleArray86);
        double double88 = secondMoment74.getResult();
        secondMoment74.increment((double) (short) -1);
        double[] doubleArray92 = new double[] { (short) 1 };
        secondMoment74.incrementAll(doubleArray92);
        double double94 = variance56.evaluate(doubleArray92);
        double double97 = secondMoment21.evaluate(doubleArray92, (int) (short) 1, 0);
        variance19.incrementAll(doubleArray92);
        double double99 = variance19.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.5d + "'", double39 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 74.0d + "'", double50 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 4050.0d + "'", double70 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4050.0d + "'", double71 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3L + "'", long72 == 3L);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4050.0d + "'", double87 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.5d + "'", double97 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.increment((double) 100L);
        variance2.setBiasCorrected(true);
        variance2.increment(1376.0d);
        variance2.increment(74.0d);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance9.evaluate(doubleArray31);
        variance9.increment((double) (byte) -1);
        long long37 = variance9.getN();
        double[] doubleArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double40 = variance9.evaluate(doubleArray38, 26.916666666666668d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        boolean boolean20 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long31 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        double[] doubleArray52 = new double[] {};
        secondMoment35.incrementAll(doubleArray52);
        double double54 = secondMoment32.evaluate(doubleArray52);
        double double55 = variance30.evaluate(doubleArray52);
        double double57 = variance19.evaluate(doubleArray52, (double) 1);
        variance19.clear();
        long long59 = variance19.getN();
        variance19.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double9 = secondMoment1.getResult();
        secondMoment1.increment(10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double[] doubleArray73 = new double[] {};
        secondMoment56.incrementAll(doubleArray73);
        secondMoment50.incrementAll(doubleArray73);
        double double76 = secondMoment0.evaluate(doubleArray73);
        long long77 = secondMoment0.getN();
        secondMoment0.increment(200.0d);
        secondMoment0.increment((double) 5L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        long long15 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        secondMoment9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double[] doubleArray32 = new double[] { 10, (byte) 100 };
        double double33 = secondMoment20.evaluate(doubleArray32);
        double double34 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        long long36 = secondMoment20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        secondMoment38.increment((double) (short) -1);
        secondMoment38.clear();
        secondMoment38.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        variance47.incrementAll(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        secondMoment59.increment((double) (short) -1);
        secondMoment59.clear();
        secondMoment59.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        secondMoment69.increment((double) (short) 0);
        double double74 = secondMoment69.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double double85 = secondMoment69.evaluate(doubleArray81);
        double double86 = secondMoment59.evaluate(doubleArray81);
        double double87 = variance47.evaluate(doubleArray81);
        variance37.incrementAll(doubleArray81);
        secondMoment9.incrementAll(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray81, 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.5d + "'", double74 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 74.0d + "'", double85 == 74.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 37.0d + "'", double87 == 37.0d);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        long long16 = secondMoment6.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        secondMoment6.incrementAll(doubleArray23, 0, (int) (short) 1);
        secondMoment0.incrementAll(doubleArray23, (int) (byte) 0, (int) (byte) 1);
        secondMoment0.clear();
        java.lang.Object obj34 = null;
        boolean boolean35 = secondMoment0.equals(obj34);
        double double36 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment(7881.333333333333d);
        secondMoment0.increment(200.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long13 = variance12.getN();
        double double14 = variance12.getResult();
        double double15 = variance12.getResult();
        double double16 = variance12.getResult();
        variance12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        long long28 = variance27.getN();
        variance27.increment(200.0d);
        variance27.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        double double66 = secondMoment44.evaluate(doubleArray64);
        double double67 = variance43.evaluate(doubleArray64);
        double double68 = variance27.evaluate(doubleArray64);
        double double69 = variance12.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray64, 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = variance19.evaluate(doubleArray26);
        double[] doubleArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double34 = variance19.evaluate(doubleArray31, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 37.0d + "'", double30 == 37.0d);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 0);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = secondMoment1.evaluate(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment((double) 10);
        secondMoment2.increment(2.0d);
        long long13 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double47 = secondMoment25.evaluate(doubleArray45);
        double double48 = variance24.evaluate(doubleArray45);
        double double51 = secondMoment2.evaluate(doubleArray45, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance52.increment(9725402.75d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 32.0d + "'", double51 == 32.0d);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        boolean boolean11 = variance9.isBiasCorrected();
        long long12 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment((double) ' ');
        secondMoment13.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        long long35 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        secondMoment36.increment((double) (-1.0f));
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long53 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double double65 = variance52.evaluate(doubleArray60, (double) (short) -1);
        double double66 = secondMoment36.evaluate(doubleArray60);
        double double67 = secondMoment19.evaluate(doubleArray60);
        secondMoment13.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            variance9.incrementAll(doubleArray60, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 37.0d + "'", double65 == 37.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double double19 = variance18.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        boolean boolean12 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        secondMoment19.increment((double) (short) 0);
        double double24 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double double35 = secondMoment19.evaluate(doubleArray31);
        double[] doubleArray36 = new double[] {};
        secondMoment19.incrementAll(doubleArray36);
        secondMoment13.incrementAll(doubleArray36);
        secondMoment13.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double[] doubleArray54 = new double[] { 10, (byte) 100 };
        double double55 = secondMoment42.evaluate(doubleArray54);
        double double56 = variance41.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment((double) ' ');
        double double60 = secondMoment57.getResult();
        boolean boolean61 = variance41.equals((java.lang.Object) double60);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = variance41.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance10.evaluate(doubleArray68, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 74.0d + "'", double35 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4050.0d + "'", double55 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 37.0d + "'", double72 == 37.0d);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        long long18 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        variance19.increment((double) 2L);
        java.lang.Class<?> wildcardClass22 = variance19.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        double double65 = variance20.evaluate(doubleArray62);
        double double66 = secondMoment0.evaluate(doubleArray62);
        secondMoment0.increment(5304.666666666667d);
        long long69 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3L + "'", long69 == 3L);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.increment((double) 100L);
        variance2.setBiasCorrected(true);
        variance2.increment(1376.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        long long23 = variance22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double35 = variance22.evaluate(doubleArray30, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray30, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 37.0d + "'", double35 == 37.0d);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance5.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double[] doubleArray21 = new double[] { 10, (byte) 100 };
        double double22 = secondMoment9.evaluate(doubleArray21);
        double double23 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        long long25 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        secondMoment26.increment((double) (-1.0f));
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        double[] doubleArray38 = new double[] { (-1L), 0, 10L };
        secondMoment32.incrementAll(doubleArray38, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long43 = variance42.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double55 = variance42.evaluate(doubleArray50, (double) (short) -1);
        double double56 = secondMoment26.evaluate(doubleArray50);
        double double57 = secondMoment9.evaluate(doubleArray50);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        double double59 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        secondMoment61.increment((double) (short) 0);
        long long66 = secondMoment61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment61);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        double[] doubleArray91 = new double[] {};
        secondMoment74.incrementAll(doubleArray91);
        secondMoment68.incrementAll(doubleArray91);
        secondMoment61.incrementAll(doubleArray91);
        double double97 = secondMoment9.evaluate(doubleArray91, (int) (short) 0, 0);
        variance5.incrementAll(doubleArray91);
        long long99 = variance5.getN();
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 37.0d + "'", double55 == 37.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 74.0d + "'", double97 == 74.0d);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L + "'", long99 == 1L);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double[] doubleArray32 = new double[] { 10, (byte) 100 };
        double double33 = secondMoment20.evaluate(doubleArray32);
        double double34 = secondMoment20.getResult();
        secondMoment20.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        long long44 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        long long46 = variance45.getN();
        variance45.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long50 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        secondMoment51.increment((double) (short) 0);
        double double56 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        double double67 = secondMoment51.evaluate(doubleArray63);
        variance49.incrementAll(doubleArray63);
        double double70 = variance45.evaluate(doubleArray63, (double) (short) -1);
        double double71 = variance37.evaluate(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance18.evaluate(doubleArray63, 0.0d, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.5d + "'", double56 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 24.666666666666668d + "'", double70 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 24.666666666666668d + "'", double71 == 24.666666666666668d);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        secondMoment0.increment((double) 1L);
        secondMoment0.increment((double) (byte) 100);
        double double22 = secondMoment0.getResult();
        secondMoment0.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11282.0d + "'", double22 == 11282.0d);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        boolean boolean6 = variance2.isBiasCorrected();
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double double24 = secondMoment8.evaluate(doubleArray20);
        secondMoment0.incrementAll(doubleArray20, 0, (int) (short) 0);
        secondMoment0.clear();
        double double29 = secondMoment0.getResult();
        secondMoment0.increment(24.666666666666668d);
        java.lang.Class<?> wildcardClass32 = secondMoment0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 74.0d + "'", double24 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double[] doubleArray24 = new double[] { 10, (byte) 100 };
        double double25 = secondMoment12.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) (short) -1);
        secondMoment27.clear();
        secondMoment27.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        boolean boolean37 = secondMoment12.equals((java.lang.Object) secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        double[] doubleArray57 = new double[] {};
        secondMoment40.incrementAll(doubleArray57);
        double double61 = variance39.evaluate(doubleArray57, (int) (byte) 0, 0);
        long long62 = variance39.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment(1.0d);
        secondMoment63.increment((double) (short) 0);
        double double68 = secondMoment63.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        double double79 = secondMoment63.evaluate(doubleArray75);
        variance39.incrementAll(doubleArray75);
        double double82 = variance38.evaluate(doubleArray75, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double86 = variance2.evaluate(doubleArray75, 458.6666666666667d, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5d + "'", double68 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 74.0d + "'", double79 == 74.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 24.666666666666668d + "'", double82 == 24.666666666666668d);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean7 = variance6.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (short) -1);
        secondMoment5.clear();
        secondMoment5.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        variance14.incrementAll(doubleArray21);
        long long26 = variance14.getN();
        variance14.clear();
        boolean boolean28 = variance14.isBiasCorrected();
        variance14.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        double double42 = variance14.evaluate(doubleArray37, (double) '4');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        long long48 = secondMoment43.getN();
        double double49 = secondMoment43.getResult();
        secondMoment43.increment((double) (byte) 10);
        secondMoment43.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        long long64 = variance63.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        double double76 = variance63.evaluate(doubleArray71, (double) (short) -1);
        double double77 = secondMoment43.evaluate(doubleArray71);
        variance14.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment0.evaluate(doubleArray71, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 24.666666666666668d + "'", double42 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5d + "'", double49 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 37.0d + "'", double76 == 37.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 74.0d + "'", double77 == 74.0d);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        variance27.incrementAll(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment((double) (short) -1);
        secondMoment39.clear();
        secondMoment39.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double double66 = secondMoment39.evaluate(doubleArray61);
        double double67 = variance27.evaluate(doubleArray61);
        double double68 = secondMoment11.evaluate(doubleArray61);
        secondMoment11.increment((double) (byte) 0);
        double double71 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        double[] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment11.incrementAll(doubleArray73, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 37.0d + "'", double67 == 37.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 80.75d + "'", double71 == 80.75d);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        long long15 = secondMoment0.getN();
        long long16 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double34 = secondMoment18.evaluate(doubleArray30);
        double[] doubleArray35 = new double[] {};
        secondMoment18.incrementAll(doubleArray35);
        double double39 = variance17.evaluate(doubleArray35, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        long long46 = secondMoment41.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        secondMoment48.increment((double) (short) 0);
        double double53 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        secondMoment54.increment((double) (short) 0);
        double double59 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double double70 = secondMoment54.evaluate(doubleArray66);
        double[] doubleArray71 = new double[] {};
        secondMoment54.incrementAll(doubleArray71);
        secondMoment48.incrementAll(doubleArray71);
        secondMoment41.incrementAll(doubleArray71);
        double double76 = variance17.evaluate(doubleArray71, (double) (byte) 0);
        double double77 = secondMoment0.evaluate(doubleArray71);
        double double78 = secondMoment0.getResult();
        java.lang.Class<?> wildcardClass79 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.5d + "'", double59 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4050.0d + "'", double77 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 4050.0d + "'", double78 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        secondMoment28.increment((double) (byte) 0);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment35);
        secondMoment35.increment((double) (short) -1);
        long long41 = secondMoment35.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double double54 = variance42.evaluate(doubleArray49, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long57 = variance56.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double74 = secondMoment58.evaluate(doubleArray70);
        double double76 = variance56.evaluate(doubleArray70, (double) 4L);
        double double77 = variance42.evaluate(doubleArray70);
        secondMoment28.incrementAll(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment7.evaluate(doubleArray70, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2L + "'", long41 == 2L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 24.666666666666668d + "'", double54 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 37.0d + "'", double76 == 37.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 24.666666666666668d + "'", double77 == 24.666666666666668d);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        long long26 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) (short) -1);
        secondMoment27.clear();
        secondMoment27.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        double double42 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double double53 = secondMoment37.evaluate(doubleArray49);
        double double54 = secondMoment27.evaluate(doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double[] doubleArray67 = new double[] { 10, (byte) 100 };
        double double68 = secondMoment55.evaluate(doubleArray67);
        double double69 = secondMoment55.getResult();
        secondMoment55.increment((double) (short) -1);
        double[] doubleArray73 = new double[] { (short) 1 };
        secondMoment55.incrementAll(doubleArray73);
        double double75 = secondMoment27.evaluate(doubleArray73);
        secondMoment0.incrementAll(doubleArray73);
        double double77 = secondMoment0.getResult();
        double[] doubleArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment0.evaluate(doubleArray78, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5d + "'", double42 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 4050.0d + "'", double69 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.6666666666666666d + "'", double77 == 0.6666666666666666d);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        double double22 = secondMoment8.getResult();
        long long23 = secondMoment8.getN();
        long long24 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance27.increment((double) '#');
        java.lang.Class<?> wildcardClass30 = variance27.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        secondMoment0.clear();
        double double15 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray18, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean2 = variance1.isBiasCorrected();
        variance1.clear();
        boolean boolean4 = variance1.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double double21 = secondMoment5.evaluate(doubleArray17);
        long long22 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        variance31.increment((double) (short) 0);
        variance31.clear();
        variance31.increment((double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double double47 = variance31.evaluate(doubleArray43);
        secondMoment5.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray43, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 74.0d + "'", double21 == 74.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 24.666666666666668d + "'", double47 == 24.666666666666668d);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) '4');
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) (short) 0);
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double double29 = secondMoment13.evaluate(doubleArray25);
        double[] doubleArray30 = new double[] {};
        secondMoment13.incrementAll(doubleArray30);
        secondMoment7.incrementAll(doubleArray30);
        secondMoment7.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double[] doubleArray48 = new double[] { 10, (byte) 100 };
        double double49 = secondMoment36.evaluate(doubleArray48);
        double double50 = variance35.evaluate(doubleArray48);
        double double51 = secondMoment0.evaluate(doubleArray48);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long54 = secondMoment0.getN();
        long long55 = secondMoment0.getN();
        double double56 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 200.0d + "'", double6 == 200.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5d + "'", double12 == 0.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 74.0d + "'", double29 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment5.getResult();
        secondMoment5.increment((double) (short) -1);
        double[] doubleArray23 = new double[] { (short) 1 };
        secondMoment5.incrementAll(doubleArray23);
        long long25 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.increment((double) (short) -1);
        secondMoment26.clear();
        secondMoment26.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        long long36 = variance35.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        double[] doubleArray57 = new double[] {};
        secondMoment40.incrementAll(doubleArray57);
        double double59 = secondMoment37.evaluate(doubleArray57);
        double double60 = variance35.evaluate(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        secondMoment64.increment((double) (short) 0);
        double double69 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double double80 = secondMoment64.evaluate(doubleArray76);
        double[] doubleArray81 = new double[] {};
        secondMoment64.incrementAll(doubleArray81);
        double double83 = secondMoment61.evaluate(doubleArray81);
        variance35.incrementAll(doubleArray81);
        double double85 = secondMoment5.evaluate(doubleArray81);
        double double86 = variance3.evaluate(doubleArray81);
        variance3.setBiasCorrected(false);
        variance3.clear();
        double double90 = variance3.getResult();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4L + "'", long25 == 4L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.5d + "'", double69 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 7077.0d + "'", double85 == 7077.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance7.increment((double) (byte) 100);
        variance7.increment(74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long19 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        double[] doubleArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = variance21.evaluate(doubleArray22, 2.880385675555556E7d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        boolean boolean8 = variance7.isBiasCorrected();
        variance7.increment((double) (-1L));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        long long21 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double[] doubleArray37 = new double[] { 10, (byte) 100 };
        double double38 = secondMoment25.evaluate(doubleArray37);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        double[] doubleArray63 = new double[] {};
        secondMoment46.incrementAll(doubleArray63);
        secondMoment40.incrementAll(doubleArray63);
        secondMoment40.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        double[] doubleArray81 = new double[] { 10, (byte) 100 };
        double double82 = secondMoment69.evaluate(doubleArray81);
        double double83 = variance68.evaluate(doubleArray81);
        double double84 = secondMoment25.evaluate(doubleArray81);
        secondMoment11.incrementAll(doubleArray81, (int) (short) 1, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance7.evaluate(doubleArray81, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4050.0d + "'", double38 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4050.0d + "'", double82 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double[] doubleArray73 = new double[] {};
        secondMoment56.incrementAll(doubleArray73);
        secondMoment50.incrementAll(doubleArray73);
        double double76 = secondMoment0.evaluate(doubleArray73);
        long long77 = secondMoment0.getN();
        secondMoment0.increment((double) (byte) 1);
        secondMoment0.increment(0.0d);
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        double double26 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(482.66666666666663d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        secondMoment1.incrementAll(doubleArray21, 0, (int) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        long long32 = variance31.getN();
        boolean boolean33 = variance31.isBiasCorrected();
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        secondMoment0.clear();
        double double16 = secondMoment0.getResult();
        secondMoment0.increment((double) 1.0f);
        secondMoment0.increment((-1.0d));
        secondMoment0.clear();
        long long22 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double[] doubleArray36 = new double[] { 10, (byte) 100 };
        double double37 = secondMoment24.evaluate(doubleArray36);
        double double38 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        secondMoment24.increment(24.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        double double64 = secondMoment42.evaluate(doubleArray62);
        secondMoment24.incrementAll(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray62, (int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4050.0d + "'", double38 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        long long44 = variance28.getN();
        double double45 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = secondMoment46.getResult();
        secondMoment46.increment((double) (short) -1);
        double[] doubleArray64 = new double[] { (short) 1 };
        secondMoment46.incrementAll(doubleArray64);
        double double66 = variance28.evaluate(doubleArray64);
        variance28.increment((double) 100);
        variance28.increment(0.0d);
        long long71 = variance28.getN();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.increment(4050.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        long long18 = secondMoment12.getN();
        double double19 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        long long65 = variance49.getN();
        double double66 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double[] doubleArray79 = new double[] { 10, (byte) 100 };
        double double80 = secondMoment67.evaluate(doubleArray79);
        double double81 = secondMoment67.getResult();
        secondMoment67.increment((double) (short) -1);
        double[] doubleArray85 = new double[] { (short) 1 };
        secondMoment67.incrementAll(doubleArray85);
        double double87 = variance49.evaluate(doubleArray85);
        double double88 = variance20.evaluate(doubleArray85);
        double double89 = variance8.evaluate(doubleArray85);
        variance8.clear();
        variance8.increment(1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 544.5d + "'", double19 == 544.5d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 4050.0d + "'", double80 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        double double6 = secondMoment0.getResult();
        secondMoment0.increment((double) (byte) 10);
        double double9 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        double double32 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        secondMoment34.increment((double) (short) 0);
        double double39 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double50 = secondMoment34.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] {};
        secondMoment34.incrementAll(doubleArray51);
        variance33.incrementAll(doubleArray51);
        double double54 = secondMoment11.evaluate(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = secondMoment0.evaluate(doubleArray51, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 60.666666666666664d + "'", double9 == 60.666666666666664d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.5d + "'", double39 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 74.0d + "'", double50 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 200.0d + "'", double54 == 200.0d);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance8.increment((double) (short) 0);
        long long11 = variance8.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment19.getResult();
        long long34 = secondMoment19.getN();
        long long35 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        boolean boolean37 = secondMoment12.equals((java.lang.Object) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment((double) ' ');
        double double42 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        long long44 = variance43.getN();
        variance43.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        secondMoment47.increment((double) (short) -1);
        secondMoment47.clear();
        secondMoment47.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        variance56.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        secondMoment68.increment((double) (short) -1);
        secondMoment68.clear();
        secondMoment68.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment68);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        secondMoment78.increment((double) (short) 0);
        double double83 = secondMoment78.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment84 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment84.increment(1.0d);
        double[] doubleArray90 = new double[] { (-1L), 0, 10L };
        secondMoment84.incrementAll(doubleArray90, 0, 0);
        double double94 = secondMoment78.evaluate(doubleArray90);
        double double95 = secondMoment68.evaluate(doubleArray90);
        double double96 = variance56.evaluate(doubleArray90);
        variance43.incrementAll(doubleArray90);
        secondMoment19.incrementAll(doubleArray90);
        variance8.incrementAll(doubleArray90);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.5d + "'", double83 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 74.0d + "'", double94 == 74.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 74.0d + "'", double95 == 74.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 37.0d + "'", double96 == 37.0d);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) '4');
        long long5 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance6.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        secondMoment9.clear();
        secondMoment9.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        variance18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment((double) ' ');
        secondMoment30.increment((double) '4');
        long long35 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance39.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double[] doubleArray55 = new double[] { 10, (byte) 100 };
        double double56 = secondMoment43.evaluate(doubleArray55);
        double double57 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment43);
        long long59 = secondMoment43.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment43);
        double double61 = secondMoment43.getResult();
        secondMoment43.clear();
        secondMoment43.increment(Double.NaN);
        secondMoment43.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long69 = variance68.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        secondMoment70.increment((double) (short) 0);
        double double75 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        double double86 = secondMoment70.evaluate(doubleArray82);
        variance68.incrementAll(doubleArray82);
        secondMoment43.incrementAll(doubleArray82);
        variance39.incrementAll(doubleArray82);
        double double92 = secondMoment30.evaluate(doubleArray82, 0, (int) (byte) 0);
        double double95 = variance18.evaluate(doubleArray82, 1, (int) (byte) 1);
        double double96 = variance6.evaluate(doubleArray82);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 4050.0d + "'", double57 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5d + "'", double75 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 24.666666666666668d + "'", double96 == 24.666666666666668d);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double10 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double[] doubleArray24 = new double[] { 10, (byte) 100 };
        double double25 = secondMoment12.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        double double49 = secondMoment12.evaluate(doubleArray44);
        secondMoment1.incrementAll(doubleArray44);
        java.lang.Class<?> wildcardClass51 = secondMoment1.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 544.5d + "'", double10 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double11 = variance10.getResult();
        variance10.increment(6993.1875d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) (short) -1);
        secondMoment14.clear();
        secondMoment14.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double[] doubleArray37 = new double[] { 10, (byte) 100 };
        double double38 = secondMoment25.evaluate(doubleArray37);
        double double39 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        secondMoment42.increment((double) (short) 0);
        double double47 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double double58 = secondMoment42.evaluate(doubleArray54);
        double[] doubleArray59 = new double[] {};
        secondMoment42.incrementAll(doubleArray59);
        double double63 = variance41.evaluate(doubleArray59, (int) (byte) 0, 0);
        double double64 = variance40.evaluate(doubleArray59);
        double double65 = variance23.evaluate(doubleArray59);
        long long66 = variance23.getN();
        variance23.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long71 = variance70.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        variance70.incrementAll(doubleArray84);
        double double90 = variance23.evaluate(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance10.evaluate(doubleArray84, 0.0d, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4050.0d + "'", double38 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4050.0d + "'", double39 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.5d + "'", double47 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 74.0d + "'", double58 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 37.0d + "'", double90 == 37.0d);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        double double18 = secondMoment0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        variance9.clear();
        variance9.increment((double) 10.0f);
        variance9.increment(2025.0d);
        java.lang.Class<?> wildcardClass26 = variance9.getClass();
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        secondMoment1.increment((double) 1.0f);
        secondMoment1.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) (short) 0);
        long long28 = secondMoment23.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        secondMoment30.increment((double) (short) 0);
        double double35 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        secondMoment36.increment((double) (short) 0);
        double double41 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double double52 = secondMoment36.evaluate(doubleArray48);
        double[] doubleArray53 = new double[] {};
        secondMoment36.incrementAll(doubleArray53);
        secondMoment30.incrementAll(doubleArray53);
        secondMoment23.incrementAll(doubleArray53);
        double double57 = secondMoment1.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance58.evaluate(doubleArray59, 3.033666413425926E7d, 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5d + "'", double35 == 0.5d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2.0d + "'", double57 == 2.0d);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long17 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double29 = variance16.evaluate(doubleArray24, (double) (short) -1);
        double double30 = secondMoment0.evaluate(doubleArray24);
        secondMoment0.clear();
        double double32 = secondMoment0.getResult();
        double double33 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long36 = variance35.getN();
        double double37 = variance35.getResult();
        variance35.increment((double) (short) 100);
        variance35.increment((double) 3L);
        variance35.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = secondMoment43.evaluate(doubleArray55);
        double[] doubleArray60 = new double[] {};
        secondMoment43.incrementAll(doubleArray60);
        variance35.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment0.evaluate(doubleArray60, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 37.0d + "'", double29 == 37.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double11 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        secondMoment12.clear();
        double double19 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double double36 = secondMoment20.evaluate(doubleArray32);
        secondMoment12.incrementAll(doubleArray32, 0, (int) (short) 0);
        secondMoment12.increment((double) (-1.0f));
        secondMoment12.clear();
        boolean boolean43 = variance10.equals((java.lang.Object) secondMoment12);
        boolean boolean44 = variance10.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 74.0d + "'", double36 == 74.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        double double6 = secondMoment0.getResult();
        long long7 = secondMoment0.getN();
        long long8 = secondMoment0.getN();
        double double9 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        long long20 = secondMoment10.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double[] doubleArray36 = new double[] { 10, (byte) 100 };
        double double37 = secondMoment24.evaluate(doubleArray36);
        secondMoment24.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        secondMoment39.incrementAll(doubleArray62);
        secondMoment39.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double[] doubleArray80 = new double[] { 10, (byte) 100 };
        double double81 = secondMoment68.evaluate(doubleArray80);
        double double82 = variance67.evaluate(doubleArray80);
        double double83 = secondMoment24.evaluate(doubleArray80);
        secondMoment10.incrementAll(doubleArray80, (int) (short) 1, 1);
        secondMoment0.incrementAll(doubleArray80);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.5d + "'", double9 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4050.0d + "'", double82 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance7.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        secondMoment10.increment((double) (short) 0);
        double double15 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment(1.0d);
        secondMoment16.increment((double) (short) 0);
        double double21 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        double double32 = secondMoment16.evaluate(doubleArray28);
        double[] doubleArray33 = new double[] {};
        secondMoment16.incrementAll(doubleArray33);
        secondMoment10.incrementAll(doubleArray33);
        secondMoment10.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        secondMoment10.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        long long52 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double64 = variance51.evaluate(doubleArray59, (double) (short) -1);
        double double67 = secondMoment10.evaluate(doubleArray59, (int) (byte) 1, (int) (byte) 1);
        double double68 = variance7.evaluate(doubleArray59);
        long long69 = variance7.getN();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 74.0d + "'", double32 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 37.0d + "'", double64 == 37.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 37.0d + "'", double68 == 37.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        double double21 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.FirstMoment firstMoment22 = new org.apache.commons.math.stat.descriptive.moment.FirstMoment();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) (short) 0);
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double[] doubleArray46 = new double[] {};
        secondMoment29.incrementAll(doubleArray46);
        secondMoment23.incrementAll(doubleArray46);
        secondMoment23.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        long long65 = variance64.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        double[] doubleArray72 = new double[] { (-1L), 0, 10L };
        secondMoment66.incrementAll(doubleArray72, 0, 0);
        double double77 = variance64.evaluate(doubleArray72, (double) (short) -1);
        double double80 = secondMoment23.evaluate(doubleArray72, (int) (byte) 1, (int) (byte) 1);
        firstMoment22.incrementAll(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance8.evaluate(doubleArray72, 4.321154463792899E13d, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 272.25d + "'", double21 == 272.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5d + "'", double28 == 0.5d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 37.0d + "'", double77 == 37.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long1 = secondMoment0.getN();
        double double2 = secondMoment0.getResult();
        double double3 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        secondMoment4.increment((double) (short) -1);
        secondMoment4.clear();
        secondMoment4.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        boolean boolean18 = secondMoment4.equals((java.lang.Object) secondMoment13);
        secondMoment4.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        secondMoment32.increment((double) (-1.0f));
        secondMoment32.clear();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        secondMoment39.increment((double) (short) -1);
        secondMoment39.clear();
        secondMoment39.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        variance48.incrementAll(doubleArray55);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance63 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        secondMoment60.increment((double) (short) -1);
        secondMoment60.clear();
        secondMoment60.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment60);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        secondMoment70.increment((double) (short) 0);
        double double75 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        double double86 = secondMoment70.evaluate(doubleArray82);
        double double87 = secondMoment60.evaluate(doubleArray82);
        double double88 = variance48.evaluate(doubleArray82);
        double double89 = secondMoment32.evaluate(doubleArray82);
        secondMoment4.incrementAll(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray82, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5d + "'", double75 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 74.0d + "'", double87 == 74.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 37.0d + "'", double88 == 37.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long11 = variance10.getN();
        double double12 = variance10.getResult();
        double double13 = variance10.getResult();
        double double14 = variance10.getResult();
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment((double) (short) -1);
        secondMoment16.clear();
        secondMoment16.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        long long26 = variance25.getN();
        variance25.increment(200.0d);
        variance25.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        double double64 = secondMoment42.evaluate(doubleArray62);
        double double65 = variance41.evaluate(doubleArray62);
        double double66 = variance25.evaluate(doubleArray62);
        double double67 = variance10.evaluate(doubleArray62);
        double double68 = secondMoment0.evaluate(doubleArray62);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        double[] doubleArray10 = new double[] { (byte) -1, (short) -1, 0, 'a', 100.0d, 1.0f };
        variance2.incrementAll(doubleArray10);
        boolean boolean13 = variance2.equals((java.lang.Object) "");
        variance2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        secondMoment15.increment((double) (short) 0);
        long long20 = secondMoment15.getN();
        double double21 = secondMoment15.getResult();
        long long22 = secondMoment15.getN();
        double double23 = secondMoment15.getResult();
        secondMoment15.increment(10.0d);
        double double26 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        long long32 = secondMoment27.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        long long43 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        secondMoment33.incrementAll(doubleArray50, 0, (int) (short) 1);
        secondMoment27.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment((double) ' ');
        secondMoment61.increment((double) '4');
        secondMoment61.increment((double) 0.0f);
        long long68 = secondMoment61.getN();
        long long69 = secondMoment61.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long72 = variance71.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        secondMoment73.increment((double) (short) 0);
        double double78 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double double89 = secondMoment73.evaluate(doubleArray85);
        variance71.incrementAll(doubleArray85);
        double double91 = secondMoment61.evaluate(doubleArray85);
        double double92 = secondMoment27.evaluate(doubleArray85);
        secondMoment15.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance2.evaluate(doubleArray85, (double) (short) 100, (int) (byte) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 0.0, 97.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 60.666666666666664d + "'", double26 == 60.666666666666664d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3L + "'", long69 == 3L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5d + "'", double78 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 74.0d + "'", double91 == 74.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 74.0d + "'", double92 == 74.0d);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        long long7 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        long long14 = secondMoment0.getN();
        double double15 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment((double) (short) -1);
        secondMoment16.clear();
        double double23 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        secondMoment16.incrementAll(doubleArray36, 0, (int) (short) 0);
        double double44 = secondMoment0.evaluate(doubleArray36);
        double double45 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        secondMoment53.increment((double) (short) 0);
        double double58 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        double[] doubleArray65 = new double[] { (-1L), 0, 10L };
        secondMoment59.incrementAll(doubleArray65, 0, 0);
        double double69 = secondMoment53.evaluate(doubleArray65);
        double[] doubleArray70 = new double[] {};
        secondMoment53.incrementAll(doubleArray70);
        secondMoment47.incrementAll(doubleArray70);
        secondMoment47.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        double[] doubleArray88 = new double[] { 10, (byte) 100 };
        double double89 = secondMoment76.evaluate(doubleArray88);
        double double90 = variance75.evaluate(doubleArray88);
        double double91 = variance46.evaluate(doubleArray88);
        double double92 = secondMoment0.evaluate(doubleArray88);
        double double93 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment(1376.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.5d + "'", double58 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 74.0d + "'", double69 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4050.0d + "'", double89 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4050.0d + "'", double90 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(4402.666666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) (short) -1);
        secondMoment14.clear();
        secondMoment14.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        double double41 = secondMoment14.evaluate(doubleArray36);
        secondMoment14.increment((double) 'a');
        secondMoment14.increment(3.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        double double68 = variance46.evaluate(doubleArray64, (int) (byte) 0, 0);
        double double69 = secondMoment14.evaluate(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment2.incrementAll(doubleArray64, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 74.0d + "'", double41 == 74.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 7142.8d + "'", double69 == 7142.8d);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass8 = variance7.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 544.5d + "'", double5 == 544.5d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        long long44 = variance28.getN();
        long long45 = variance28.getN();
        variance28.setBiasCorrected(false);
        variance28.setBiasCorrected(true);
        double double50 = variance28.getResult();
        java.lang.Class<?> wildcardClass51 = variance28.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        long long35 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double[] doubleArray51 = new double[] { 10, (byte) 100 };
        double double52 = secondMoment39.evaluate(doubleArray51);
        double double53 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        long long55 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment((double) ' ');
        secondMoment56.increment((double) (-1.0f));
        secondMoment56.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        long long73 = variance72.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double85 = variance72.evaluate(doubleArray80, (double) (short) -1);
        double double86 = secondMoment56.evaluate(doubleArray80);
        double double87 = secondMoment39.evaluate(doubleArray80);
        double double88 = secondMoment19.evaluate(doubleArray80);
        double double89 = secondMoment1.evaluate(doubleArray80);
        org.apache.commons.math.stat.descriptive.moment.Variance variance90 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double91 = secondMoment1.getResult();
        double double92 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4050.0d + "'", double52 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 37.0d + "'", double85 == 37.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 74.0d + "'", double87 == 74.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 74.0d + "'", double91 == 74.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 74.0d + "'", double92 == 74.0d);
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment15);
        long long26 = secondMoment0.getN();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        // The following exception was thrown during execution in test generation
        try {
            double double2 = variance1.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        secondMoment18.increment((double) (short) -1);
        secondMoment18.clear();
        secondMoment18.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double double45 = secondMoment18.evaluate(doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = secondMoment46.getResult();
        secondMoment46.increment((double) (short) -1);
        double[] doubleArray64 = new double[] { (short) 1 };
        secondMoment46.incrementAll(doubleArray64);
        double double66 = secondMoment18.evaluate(doubleArray64);
        double double67 = secondMoment1.evaluate(doubleArray64);
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double69 = variance68.getResult();
        variance68.increment(3.033666413425926E7d);
        double double72 = variance68.getResult();
        variance68.increment(7130.75d);
        boolean boolean75 = variance68.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance18.clear();
        variance18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        long long27 = secondMoment22.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        double[] doubleArray52 = new double[] {};
        secondMoment35.incrementAll(doubleArray52);
        secondMoment29.incrementAll(doubleArray52);
        secondMoment29.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double[] doubleArray70 = new double[] { 10, (byte) 100 };
        double double71 = secondMoment58.evaluate(doubleArray70);
        double double72 = variance57.evaluate(doubleArray70);
        long long73 = variance57.getN();
        double double74 = variance57.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double[] doubleArray87 = new double[] { 10, (byte) 100 };
        double double88 = secondMoment75.evaluate(doubleArray87);
        double double89 = secondMoment75.getResult();
        secondMoment75.increment((double) (short) -1);
        double[] doubleArray93 = new double[] { (short) 1 };
        secondMoment75.incrementAll(doubleArray93);
        double double95 = variance57.evaluate(doubleArray93);
        double double98 = secondMoment22.evaluate(doubleArray93, (int) (short) 1, 0);
        double double99 = variance18.evaluate(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4050.0d + "'", double71 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 4050.0d + "'", double72 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3L + "'", long73 == 3L);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4050.0d + "'", double89 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.5d + "'", double98 == 0.5d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double20 = variance8.evaluate(doubleArray15, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        double[] doubleArray28 = new double[] { (-1L), 0, 10L };
        secondMoment22.incrementAll(doubleArray28, 0, 0);
        double[] doubleArray34 = new double[] { 10, (byte) 100 };
        double double35 = secondMoment22.evaluate(doubleArray34);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        secondMoment37.clear();
        secondMoment37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        boolean boolean47 = secondMoment22.equals((java.lang.Object) secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        double[] doubleArray67 = new double[] {};
        secondMoment50.incrementAll(doubleArray67);
        double double71 = variance49.evaluate(doubleArray67, (int) (byte) 0, 0);
        long long72 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        secondMoment73.increment((double) (short) 0);
        double double78 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double double89 = secondMoment73.evaluate(doubleArray85);
        variance49.incrementAll(doubleArray85);
        double double92 = variance48.evaluate(doubleArray85, (double) '#');
        variance8.incrementAll(doubleArray85);
        variance8.clear();
        variance8.setBiasCorrected(false);
        variance8.clear();
        variance8.clear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 24.666666666666668d + "'", double20 == 24.666666666666668d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5d + "'", double78 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 24.666666666666668d + "'", double92 == 24.666666666666668d);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        boolean boolean11 = variance10.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment13);
        variance20.increment((double) (short) 0);
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double[] doubleArray37 = new double[] { 10, (byte) 100 };
        double double38 = secondMoment25.evaluate(doubleArray37);
        double double39 = secondMoment25.getResult();
        secondMoment25.increment((double) (short) -1);
        double[] doubleArray43 = new double[] { (short) 1 };
        secondMoment25.incrementAll(doubleArray43);
        long long45 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        long long52 = secondMoment47.getN();
        double double53 = secondMoment47.getResult();
        secondMoment47.increment((double) (byte) 10);
        secondMoment47.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment57);
        long long68 = variance67.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        double double80 = variance67.evaluate(doubleArray75, (double) (short) -1);
        double double81 = secondMoment47.evaluate(doubleArray75);
        double double82 = secondMoment25.evaluate(doubleArray75);
        variance20.incrementAll(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = variance10.evaluate(doubleArray75, 146040.96296296292d, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4050.0d + "'", double38 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4050.0d + "'", double39 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4L + "'", long45 == 4L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 37.0d + "'", double80 == 37.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 74.0d + "'", double81 == 74.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 74.0d + "'", double82 == 74.0d);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double10 = variance9.getResult();
        long long11 = variance9.getN();
        boolean boolean12 = variance9.isBiasCorrected();
        double double13 = variance9.getResult();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double18 = secondMoment0.getResult();
        java.lang.Class<?> wildcardClass19 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        secondMoment2.increment((double) (short) 0);
        secondMoment2.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        long long10 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        long long12 = variance11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) '4');
        secondMoment14.increment((double) 100);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double[] doubleArray36 = new double[] { 10, (byte) 100 };
        double double37 = secondMoment24.evaluate(doubleArray36);
        long long38 = secondMoment24.getN();
        double double39 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) (short) -1);
        secondMoment40.clear();
        double double47 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        secondMoment48.increment((double) (short) 0);
        double double53 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double double64 = secondMoment48.evaluate(doubleArray60);
        secondMoment40.incrementAll(doubleArray60, 0, (int) (short) 0);
        double double68 = secondMoment24.evaluate(doubleArray60);
        secondMoment14.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = variance11.evaluate(doubleArray60, (double) 100, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3L + "'", long10 == 3L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4050.0d + "'", double39 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 74.0d + "'", double64 == 74.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1.0f);
        variance2.clear();
        variance2.increment(0.0d);
        variance2.setBiasCorrected(false);
        variance2.increment((-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            long long13 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance10.evaluate(doubleArray31);
        variance10.increment(37.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double[] doubleArray51 = new double[] { 10, (byte) 100 };
        double double52 = secondMoment39.evaluate(doubleArray51);
        double double53 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment39);
        long long55 = secondMoment39.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment39);
        boolean boolean57 = variance56.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) (short) -1);
        secondMoment58.clear();
        secondMoment58.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        long long68 = variance67.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        double double92 = variance67.evaluate(doubleArray89);
        double double94 = variance56.evaluate(doubleArray89, (double) 1);
        variance10.incrementAll(doubleArray89);
        variance10.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4050.0d + "'", double52 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        long long44 = variance28.getN();
        double double45 = variance28.getResult();
        boolean boolean46 = variance28.isBiasCorrected();
        java.lang.Class<?> wildcardClass47 = variance28.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double10 = secondMoment1.getResult();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double double29 = secondMoment13.evaluate(doubleArray25);
        double[] doubleArray30 = new double[] {};
        secondMoment13.incrementAll(doubleArray30);
        double double34 = variance12.evaluate(doubleArray30, (int) (byte) 0, 0);
        long long35 = variance12.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        secondMoment36.increment((double) (short) 0);
        double double41 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double double52 = secondMoment36.evaluate(doubleArray48);
        variance12.incrementAll(doubleArray48);
        double double54 = secondMoment1.evaluate(doubleArray48);
        double double55 = secondMoment1.getResult();
        secondMoment1.increment((-1.0d));
        double double58 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 544.5d + "'", double10 == 544.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 74.0d + "'", double29 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 86.0d + "'", double58 == 86.0d);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        double double9 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double[] doubleArray24 = new double[] { 10, (byte) 100 };
        double double25 = secondMoment12.evaluate(doubleArray24);
        long long26 = secondMoment12.getN();
        secondMoment12.clear();
        double double28 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        double[] doubleArray52 = new double[] {};
        secondMoment35.incrementAll(doubleArray52);
        double double54 = secondMoment32.evaluate(doubleArray52);
        variance31.incrementAll(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = secondMoment0.evaluate(doubleArray52, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean2 = variance1.isBiasCorrected();
        variance1.clear();
        variance1.increment(6140.666666666667d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        double[] doubleArray18 = new double[] { 10, (byte) 100 };
        double double19 = secondMoment6.evaluate(doubleArray18);
        secondMoment6.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        double double65 = secondMoment6.evaluate(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance1.evaluate(doubleArray62, (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double double24 = secondMoment8.evaluate(doubleArray20);
        secondMoment0.incrementAll(doubleArray20, 0, (int) (short) 0);
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) (short) -1);
        secondMoment32.clear();
        secondMoment32.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long42 = variance41.getN();
        variance41.increment(200.0d);
        variance41.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        secondMoment61.increment((double) (short) 0);
        double double66 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double double77 = secondMoment61.evaluate(doubleArray73);
        double[] doubleArray78 = new double[] {};
        secondMoment61.incrementAll(doubleArray78);
        double double80 = secondMoment58.evaluate(doubleArray78);
        double double81 = variance57.evaluate(doubleArray78);
        double double82 = variance41.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance31.evaluate(doubleArray78, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 74.0d + "'", double24 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.5d + "'", double66 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 74.0d + "'", double77 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (short) 10);
        long long5 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass6 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment((double) ' ');
        double double47 = secondMoment44.getResult();
        boolean boolean48 = variance28.equals((java.lang.Object) double47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = variance28.evaluate(doubleArray55);
        variance28.clear();
        long long61 = variance28.getN();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 37.0d + "'", double59 == 37.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.increment(4050.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        long long18 = secondMoment12.getN();
        double double19 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        long long65 = variance49.getN();
        double double66 = variance49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double[] doubleArray79 = new double[] { 10, (byte) 100 };
        double double80 = secondMoment67.evaluate(doubleArray79);
        double double81 = secondMoment67.getResult();
        secondMoment67.increment((double) (short) -1);
        double[] doubleArray85 = new double[] { (short) 1 };
        secondMoment67.incrementAll(doubleArray85);
        double double87 = variance49.evaluate(doubleArray85);
        double double88 = variance20.evaluate(doubleArray85);
        double double89 = variance8.evaluate(doubleArray85);
        variance8.clear();
        double double91 = variance8.getResult();
        long long92 = variance8.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 544.5d + "'", double19 == 544.5d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 4050.0d + "'", double80 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment((double) (short) -1);
        secondMoment16.clear();
        secondMoment16.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        double double34 = secondMoment29.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        double double45 = secondMoment29.evaluate(doubleArray41);
        double[] doubleArray46 = new double[] {};
        secondMoment29.incrementAll(doubleArray46);
        double double50 = variance28.evaluate(doubleArray46, (int) (byte) 0, 0);
        long long51 = variance28.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double68 = secondMoment52.evaluate(doubleArray64);
        variance28.incrementAll(doubleArray64);
        double double71 = variance27.evaluate(doubleArray64, (double) '#');
        double double72 = variance27.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 74.0d + "'", double45 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 24.666666666666668d + "'", double71 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        variance1.increment((double) (short) 100);
        boolean boolean6 = variance1.isBiasCorrected();
        double double7 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        long long13 = secondMoment8.getN();
        double double14 = secondMoment8.getResult();
        long long15 = secondMoment8.getN();
        double double16 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) (short) 0);
        double double22 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double double33 = secondMoment17.evaluate(doubleArray29);
        double[] doubleArray34 = new double[] {};
        secondMoment17.incrementAll(doubleArray34);
        double double36 = secondMoment8.evaluate(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = variance1.evaluate(doubleArray34, (int) (byte) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 74.0d + "'", double33 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.5d + "'", double36 == 0.5d);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        long long25 = secondMoment11.getN();
        double double26 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) (short) -1);
        secondMoment27.clear();
        double double34 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        secondMoment27.incrementAll(doubleArray47, 0, (int) (short) 0);
        double double55 = secondMoment11.evaluate(doubleArray47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        long long61 = secondMoment56.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        long long72 = secondMoment62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        double[] doubleArray79 = new double[] { (-1L), 0, 10L };
        secondMoment73.incrementAll(doubleArray79, 0, 0);
        secondMoment62.incrementAll(doubleArray79, 0, (int) (short) 1);
        secondMoment56.incrementAll(doubleArray79, (int) (byte) 0, (int) (byte) 1);
        secondMoment11.incrementAll(doubleArray79);
        double double90 = variance10.evaluate(doubleArray79);
        double double91 = secondMoment0.evaluate(doubleArray79);
        double[] doubleArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = secondMoment0.evaluate(doubleArray92, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 74.0d + "'", double55 == 74.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2L + "'", long61 == 2L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 24.666666666666668d + "'", double90 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 74.0d + "'", double91 == 74.0d);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double5 = variance4.getResult();
        java.lang.Class<?> wildcardClass6 = variance4.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = variance26.evaluate(doubleArray45);
        double double51 = variance9.evaluate(doubleArray45);
        long long52 = variance9.getN();
        variance9.clear();
        long long54 = variance9.getN();
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double22 = secondMoment0.evaluate(doubleArray20);
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance26.increment(7881.333333333333d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean20 = variance19.isBiasCorrected();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        secondMoment1.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double double9 = variance8.getResult();
        double double10 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (short) -1);
        secondMoment11.clear();
        double double18 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        secondMoment21.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        long long29 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment((double) ' ');
        secondMoment41.increment((double) (-1.0f));
        secondMoment41.clear();
        boolean boolean47 = variance40.equals((java.lang.Object) secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        secondMoment48.increment((double) (short) 0);
        double double53 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        secondMoment54.increment((double) (short) 0);
        double double59 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double double70 = secondMoment54.evaluate(doubleArray66);
        double[] doubleArray71 = new double[] {};
        secondMoment54.incrementAll(doubleArray71);
        secondMoment48.incrementAll(doubleArray71);
        secondMoment48.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance76 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        double[] doubleArray83 = new double[] { (-1L), 0, 10L };
        secondMoment77.incrementAll(doubleArray83, 0, 0);
        double[] doubleArray89 = new double[] { 10, (byte) 100 };
        double double90 = secondMoment77.evaluate(doubleArray89);
        double double91 = variance76.evaluate(doubleArray89);
        secondMoment41.incrementAll(doubleArray89);
        secondMoment21.incrementAll(doubleArray89);
        double double94 = variance19.evaluate(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance8.evaluate(doubleArray89, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1801.0d + "'", double9 == 1801.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1801.0d + "'", double10 == 1801.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.5d + "'", double59 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4050.0d + "'", double90 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) (short) -1);
        long long14 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        double double17 = secondMoment8.getResult();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double double36 = secondMoment20.evaluate(doubleArray32);
        double[] doubleArray37 = new double[] {};
        secondMoment20.incrementAll(doubleArray37);
        double double41 = variance19.evaluate(doubleArray37, (int) (byte) 0, 0);
        long long42 = variance19.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = secondMoment43.evaluate(doubleArray55);
        variance19.incrementAll(doubleArray55);
        double double61 = secondMoment8.evaluate(doubleArray55);
        secondMoment0.incrementAll(doubleArray55);
        secondMoment0.increment(3602.0d);
        double double65 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 544.5d + "'", double5 == 544.5d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 544.5d + "'", double17 == 544.5d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 74.0d + "'", double36 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 9714674.75d + "'", double65 == 9714674.75d);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        double double19 = variance16.getResult();
        variance16.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        long long27 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        secondMoment29.increment((double) (short) 0);
        long long34 = secondMoment29.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment29);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        boolean boolean50 = secondMoment36.equals((java.lang.Object) secondMoment45);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double[] doubleArray66 = new double[] { 10, (byte) 100 };
        double double67 = secondMoment54.evaluate(doubleArray66);
        double double68 = secondMoment51.evaluate(doubleArray66);
        secondMoment36.incrementAll(doubleArray66);
        secondMoment29.incrementAll(doubleArray66, (int) (short) 0, 0);
        secondMoment21.incrementAll(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance16.evaluate(doubleArray66, 0.0d, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2025.0d + "'", double19 == 2025.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.increment((double) '4');
        double double9 = secondMoment3.getResult();
        double double10 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        long long18 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double[] doubleArray35 = new double[] { 10, (byte) 100 };
        double double36 = secondMoment23.evaluate(doubleArray35);
        double double37 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        long long39 = secondMoment23.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        secondMoment41.increment((double) (short) -1);
        secondMoment41.clear();
        secondMoment41.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        variance50.incrementAll(doubleArray57);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        secondMoment62.increment((double) (short) -1);
        secondMoment62.clear();
        secondMoment62.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double double89 = secondMoment62.evaluate(doubleArray84);
        double double90 = variance50.evaluate(doubleArray84);
        variance40.incrementAll(doubleArray84);
        secondMoment12.incrementAll(doubleArray84);
        double double95 = secondMoment3.evaluate(doubleArray84, (int) (byte) 0, (int) (short) 1);
        double double99 = variance1.evaluate(doubleArray84, 2.5105698E7d, 0, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 200.0d + "'", double9 == 200.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 200.0d + "'", double10 == 200.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4050.0d + "'", double36 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 37.0d + "'", double90 == 37.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.increment((double) (short) 1);
        secondMoment1.increment(0.5d);
        double double98 = secondMoment1.getResult();
        double double99 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 6993.1875d + "'", double98 == 6993.1875d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 6993.1875d + "'", double99 == 6993.1875d);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 10);
        double double10 = secondMoment1.getResult();
        double double11 = secondMoment1.getResult();
        long long12 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        long long18 = secondMoment13.getN();
        secondMoment13.increment(0.0d);
        secondMoment13.increment(688.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double[] doubleArray36 = new double[] { 10, (byte) 100 };
        double double37 = secondMoment24.evaluate(doubleArray36);
        long long38 = secondMoment24.getN();
        secondMoment24.clear();
        double double40 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        secondMoment42.increment((double) (short) 0);
        double double47 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        secondMoment48.increment((double) (short) 0);
        double double53 = secondMoment48.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double double64 = secondMoment48.evaluate(doubleArray60);
        double[] doubleArray65 = new double[] {};
        secondMoment48.incrementAll(doubleArray65);
        secondMoment42.incrementAll(doubleArray65);
        secondMoment42.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        double[] doubleArray77 = new double[] { (-1L), 0, 10L };
        secondMoment71.incrementAll(doubleArray77, 0, 0);
        double[] doubleArray83 = new double[] { 10, (byte) 100 };
        double double84 = secondMoment71.evaluate(doubleArray83);
        double double85 = variance70.evaluate(doubleArray83);
        double double86 = secondMoment24.evaluate(doubleArray83);
        double double87 = secondMoment13.evaluate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment1.incrementAll(doubleArray83, 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.5d + "'", double47 == 0.5d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 74.0d + "'", double64 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4050.0d + "'", double86 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4050.0d + "'", double87 == 4050.0d);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        long long25 = secondMoment7.getN();
        double double26 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        double[] doubleArray33 = new double[] { (-1L), 0, 10L };
        secondMoment27.incrementAll(doubleArray33, 0, 0);
        double[] doubleArray39 = new double[] { 10, (byte) 100 };
        double double40 = secondMoment27.evaluate(doubleArray39);
        double double41 = secondMoment27.getResult();
        secondMoment27.increment((double) (short) -1);
        double double44 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        double[] doubleArray57 = new double[] { 10, (byte) 100 };
        double double58 = secondMoment45.evaluate(doubleArray57);
        double double59 = secondMoment27.evaluate(doubleArray57);
        secondMoment7.incrementAll(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment0.evaluate(doubleArray57, 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4050.0d + "'", double40 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 4050.0d + "'", double41 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6140.666666666667d + "'", double44 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 4050.0d + "'", double58 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        secondMoment1.clear();
        secondMoment1.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long20 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        secondMoment32.increment((double) (-1.0f));
        secondMoment32.clear();
        boolean boolean38 = variance31.equals((java.lang.Object) secondMoment32);
        secondMoment32.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        secondMoment42.increment((double) (short) 0);
        double double47 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double double58 = secondMoment42.evaluate(doubleArray54);
        double[] doubleArray59 = new double[] {};
        secondMoment42.incrementAll(doubleArray59);
        double double63 = variance41.evaluate(doubleArray59, (int) (byte) 0, 0);
        double double64 = secondMoment32.evaluate(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = secondMoment1.evaluate(doubleArray59, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.5d + "'", double47 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 74.0d + "'", double58 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.increment((double) 100L);
        variance2.increment((double) (-1L));
        variance2.increment((double) 100L);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment8.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = variance36.evaluate(doubleArray49);
        long long52 = variance36.getN();
        double double53 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double[] doubleArray66 = new double[] { 10, (byte) 100 };
        double double67 = secondMoment54.evaluate(doubleArray66);
        double double68 = secondMoment54.getResult();
        secondMoment54.increment((double) (short) -1);
        double[] doubleArray72 = new double[] { (short) 1 };
        secondMoment54.incrementAll(doubleArray72);
        double double74 = variance36.evaluate(doubleArray72);
        double double77 = secondMoment1.evaluate(doubleArray72, (int) (short) 1, 0);
        secondMoment1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance80.clear();
        variance80.clear();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = variance26.evaluate(doubleArray45);
        double double51 = variance9.evaluate(doubleArray45);
        long long52 = variance9.getN();
        variance9.increment((double) 5L);
        variance9.increment((double) (byte) 1);
        double double57 = variance9.getResult();
        variance9.clear();
        variance9.clear();
        double double60 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = secondMoment61.getResult();
        secondMoment61.increment((double) (short) -1);
        double double78 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double[] doubleArray91 = new double[] { 10, (byte) 100 };
        double double92 = secondMoment79.evaluate(doubleArray91);
        double double93 = secondMoment61.evaluate(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = variance9.evaluate(doubleArray91, 2.0d, (int) '#', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 6140.666666666667d + "'", double78 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) (short) -1);
        secondMoment28.clear();
        secondMoment28.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        variance37.incrementAll(doubleArray44);
        variance37.clear();
        variance37.increment((double) 10.0f);
        variance37.increment(2025.0d);
        boolean boolean54 = secondMoment7.equals((java.lang.Object) 2025.0d);
        double double55 = secondMoment7.getResult();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (short) 10);
        secondMoment0.increment((double) 2L);
        secondMoment0.clear();
        long long8 = secondMoment0.getN();
        secondMoment0.increment(7186.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        boolean boolean46 = secondMoment21.equals((java.lang.Object) secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        double double70 = variance48.evaluate(doubleArray66, (int) (byte) 0, 0);
        long long71 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        variance48.incrementAll(doubleArray84);
        double double91 = variance47.evaluate(doubleArray84, (double) '#');
        double double94 = variance19.evaluate(doubleArray84, 0, (int) (byte) 1);
        variance19.clear();
        variance19.increment(36.916666666666664d);
        variance19.increment(5.49755813888E11d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 24.666666666666668d + "'", double91 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        secondMoment11.increment((double) (short) -1);
        double[] doubleArray29 = new double[] { (short) 1 };
        secondMoment11.incrementAll(doubleArray29);
        long long31 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) (short) -1);
        secondMoment32.clear();
        secondMoment32.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long42 = variance41.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        double[] doubleArray63 = new double[] {};
        secondMoment46.incrementAll(doubleArray63);
        double double65 = secondMoment43.evaluate(doubleArray63);
        double double66 = variance41.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        secondMoment70.increment((double) (short) 0);
        double double75 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        double double86 = secondMoment70.evaluate(doubleArray82);
        double[] doubleArray87 = new double[] {};
        secondMoment70.incrementAll(doubleArray87);
        double double89 = secondMoment67.evaluate(doubleArray87);
        variance41.incrementAll(doubleArray87);
        double double91 = secondMoment11.evaluate(doubleArray87);
        double double92 = variance9.evaluate(doubleArray87);
        double double93 = secondMoment0.evaluate(doubleArray87);
        secondMoment0.increment((double) 3L);
        double[] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray96, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4L + "'", long31 == 4L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5d + "'", double75 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 7077.0d + "'", double91 == 7077.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 544.5d + "'", double93 == 544.5d);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        secondMoment2.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment((double) ' ');
        secondMoment20.increment((double) (-1.0f));
        secondMoment20.clear();
        boolean boolean26 = variance19.equals((java.lang.Object) secondMoment20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        double[] doubleArray33 = new double[] { (-1L), 0, 10L };
        secondMoment27.incrementAll(doubleArray33, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        long long38 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double double50 = variance37.evaluate(doubleArray45, (double) (short) -1);
        boolean boolean51 = variance19.equals((java.lang.Object) doubleArray45);
        secondMoment2.incrementAll(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = variance1.evaluate(doubleArray45, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 37.0d + "'", double50 == 37.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.increment((double) (short) 1);
        secondMoment1.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double10 = variance9.getResult();
        double double11 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) (short) 0);
        double double22 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) (short) 0);
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double double39 = secondMoment23.evaluate(doubleArray35);
        double[] doubleArray40 = new double[] {};
        secondMoment23.incrementAll(doubleArray40);
        secondMoment17.incrementAll(doubleArray40);
        secondMoment17.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = variance45.evaluate(doubleArray58);
        double double61 = secondMoment12.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        long long72 = secondMoment62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        double[] doubleArray79 = new double[] { (-1L), 0, 10L };
        secondMoment73.incrementAll(doubleArray79, 0, 0);
        secondMoment62.incrementAll(doubleArray79, 0, (int) (short) 1);
        double double86 = secondMoment12.evaluate(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = variance9.evaluate(doubleArray79, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 544.5d + "'", double10 == 544.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 544.5d + "'", double11 == 544.5d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5d + "'", double28 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 74.0d + "'", double39 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        double double94 = secondMoment1.getResult();
        secondMoment1.increment(7077.0d);
        secondMoment1.increment(3.033666413425926E7d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long18 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double double30 = variance17.evaluate(doubleArray25, (double) (short) -1);
        double double31 = secondMoment1.evaluate(doubleArray25);
        secondMoment1.increment((double) 10L);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        java.lang.Class<?> wildcardClass36 = secondMoment1.getClass();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 37.0d + "'", double30 == 37.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 74.0d + "'", double31 == 74.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = secondMoment43.evaluate(doubleArray55);
        double[] doubleArray60 = new double[] {};
        secondMoment43.incrementAll(doubleArray60);
        double double62 = variance0.evaluate(doubleArray60);
        variance0.increment((double) 1.0f);
        double double65 = variance0.getResult();
        double double66 = variance0.getResult();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 25.666666666666668d + "'", double65 == 25.666666666666668d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 25.666666666666668d + "'", double66 == 25.666666666666668d);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.increment((double) (short) 1);
        secondMoment1.increment(0.5d);
        secondMoment1.clear();
        double double99 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        variance0.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment48.increment(1.0d);
        double[] doubleArray54 = new double[] { (-1L), 0, 10L };
        secondMoment48.incrementAll(doubleArray54, 0, 0);
        double[] doubleArray60 = new double[] { 10, (byte) 100 };
        double double61 = secondMoment48.evaluate(doubleArray60);
        double double62 = secondMoment45.evaluate(doubleArray60);
        variance0.incrementAll(doubleArray60);
        variance0.clear();
        variance0.setBiasCorrected(false);
        double double67 = variance0.getResult();
        variance0.setBiasCorrected(true);
        double double70 = variance0.getResult();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 4050.0d + "'", double62 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        secondMoment0.increment((double) 1L);
        secondMoment0.increment((double) (byte) 100);
        double double22 = secondMoment0.getResult();
        long long23 = secondMoment0.getN();
        secondMoment0.increment((double) 1.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment((double) '4');
        secondMoment27.increment((double) 100);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment27);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        secondMoment52.increment((double) (short) 0);
        double double57 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double74 = secondMoment58.evaluate(doubleArray70);
        double[] doubleArray75 = new double[] {};
        secondMoment58.incrementAll(doubleArray75);
        secondMoment52.incrementAll(doubleArray75);
        secondMoment52.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double[] doubleArray93 = new double[] { 10, (byte) 100 };
        double double94 = secondMoment81.evaluate(doubleArray93);
        double double95 = variance80.evaluate(doubleArray93);
        double double96 = secondMoment37.evaluate(doubleArray93);
        double double97 = secondMoment27.evaluate(doubleArray93);
        secondMoment0.incrementAll(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11282.0d + "'", double22 == 11282.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5L + "'", long23 == 5L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5d + "'", double57 == 0.5d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4050.0d + "'", double95 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 4050.0d + "'", double96 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 4050.0d + "'", double97 == 4050.0d);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) -1);
        double double18 = secondMoment1.getResult();
        secondMoment1.increment((double) 0.0f);
        secondMoment1.clear();
        secondMoment1.increment((double) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment((double) ' ');
        secondMoment25.increment((double) (byte) 0);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) (short) -1);
        long long38 = secondMoment32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double51 = variance39.evaluate(doubleArray46, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long54 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        secondMoment55.increment((double) (short) 0);
        double double60 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = secondMoment55.evaluate(doubleArray67);
        double double73 = variance53.evaluate(doubleArray67, (double) 4L);
        double double74 = variance39.evaluate(doubleArray67);
        secondMoment25.incrementAll(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = variance24.evaluate(doubleArray67, 80.75d, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 24.666666666666668d + "'", double51 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5d + "'", double60 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 37.0d + "'", double73 == 37.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 24.666666666666668d + "'", double74 == 24.666666666666668d);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        double[] doubleArray10 = new double[] { (byte) -1, (short) -1, 0, 'a', 100.0d, 1.0f };
        variance2.incrementAll(doubleArray10);
        boolean boolean13 = variance2.equals((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            long long14 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, -1.0, 0.0, 97.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        long long16 = secondMoment6.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        secondMoment6.incrementAll(doubleArray23, 0, (int) (short) 1);
        secondMoment0.incrementAll(doubleArray23, (int) (byte) 0, (int) (byte) 1);
        secondMoment0.clear();
        double double34 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        double[] doubleArray23 = new double[] { 10, (byte) 100 };
        double double24 = secondMoment11.evaluate(doubleArray23);
        double double25 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double49 = variance27.evaluate(doubleArray45, (int) (byte) 0, 0);
        double double50 = variance26.evaluate(doubleArray45);
        double double51 = variance9.evaluate(doubleArray45);
        long long52 = variance9.getN();
        variance9.setBiasCorrected(false);
        variance9.increment(0.5d);
        boolean boolean57 = variance9.isBiasCorrected();
        variance9.clear();
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 4050.0d + "'", double24 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        double double18 = variance10.getResult();
        variance10.increment(3602.0d);
        long long21 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double[] doubleArray35 = new double[] { 10, (byte) 100 };
        double double36 = secondMoment23.evaluate(doubleArray35);
        long long37 = secondMoment23.getN();
        secondMoment23.clear();
        double double39 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        secondMoment41.incrementAll(doubleArray64);
        secondMoment41.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double[] doubleArray82 = new double[] { 10, (byte) 100 };
        double double83 = secondMoment70.evaluate(doubleArray82);
        double double84 = variance69.evaluate(doubleArray82);
        double double85 = secondMoment23.evaluate(doubleArray82);
        double double87 = variance10.evaluate(doubleArray82, 351992.75d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4050.0d + "'", double36 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4050.0d + "'", double87 == 4050.0d);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long5 = variance4.getN();
        boolean boolean6 = variance4.isBiasCorrected();
        boolean boolean7 = variance4.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        secondMoment8.increment((double) (short) -1);
        secondMoment8.clear();
        secondMoment8.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        long long18 = variance17.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        double double38 = secondMoment22.evaluate(doubleArray34);
        double[] doubleArray39 = new double[] {};
        secondMoment22.incrementAll(doubleArray39);
        double double41 = secondMoment19.evaluate(doubleArray39);
        double double42 = variance17.evaluate(doubleArray39);
        variance17.increment((double) (byte) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double[] doubleArray73 = new double[] {};
        secondMoment56.incrementAll(doubleArray73);
        secondMoment50.incrementAll(doubleArray73);
        secondMoment50.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance78 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment50);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double[] doubleArray91 = new double[] { 10, (byte) 100 };
        double double92 = secondMoment79.evaluate(doubleArray91);
        double double93 = variance78.evaluate(doubleArray91);
        double double94 = secondMoment45.evaluate(doubleArray91);
        double double96 = variance17.evaluate(doubleArray91, 25.666666666666668d);
        double double97 = variance4.evaluate(doubleArray91);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 74.0d + "'", double38 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 4049.9999999999995d + "'", double96 == 4049.9999999999995d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 4050.0d + "'", double97 == 4050.0d);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        double[] doubleArray63 = new double[] {};
        secondMoment46.incrementAll(doubleArray63);
        double double65 = secondMoment43.evaluate(doubleArray63);
        variance0.incrementAll(doubleArray63);
        variance0.clear();
        variance0.increment((double) (-1L));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        secondMoment1.incrementAll(doubleArray21, 0, (int) (short) 0);
        secondMoment1.clear();
        double double30 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance31.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double11 = variance10.getResult();
        variance10.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double[] doubleArray29 = new double[] { 10, (byte) 100 };
        double double30 = secondMoment17.evaluate(doubleArray29);
        double double31 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        long long33 = secondMoment17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment17);
        double double35 = secondMoment17.getResult();
        secondMoment17.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        secondMoment39.increment((double) (short) 0);
        double double44 = secondMoment39.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        secondMoment39.incrementAll(doubleArray62);
        secondMoment39.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double[] doubleArray80 = new double[] { 10, (byte) 100 };
        double double81 = secondMoment68.evaluate(doubleArray80);
        double double82 = variance67.evaluate(doubleArray80);
        double double84 = variance38.evaluate(doubleArray80, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance10.evaluate(doubleArray80, 1067.1666666666667d, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 4050.0d + "'", double30 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.5d + "'", double44 == 0.5d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4050.0d + "'", double82 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.clear();
        variance2.increment((double) (short) -1);
        boolean boolean7 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double[] doubleArray21 = new double[] { 10, (byte) 100 };
        double double22 = secondMoment9.evaluate(doubleArray21);
        double double23 = secondMoment9.getResult();
        secondMoment9.increment((double) (short) -1);
        double[] doubleArray27 = new double[] { (short) 1 };
        secondMoment9.incrementAll(doubleArray27);
        long long29 = secondMoment9.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment9);
        variance30.clear();
        boolean boolean32 = variance30.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment34);
        variance49.increment(0.0d);
        long long52 = variance49.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment53);
        secondMoment53.increment((double) (short) -1);
        secondMoment53.clear();
        secondMoment53.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        secondMoment62.increment((double) (short) 0);
        boolean boolean67 = secondMoment53.equals((java.lang.Object) secondMoment62);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        double[] doubleArray77 = new double[] { (-1L), 0, 10L };
        secondMoment71.incrementAll(doubleArray77, 0, 0);
        double[] doubleArray83 = new double[] { 10, (byte) 100 };
        double double84 = secondMoment71.evaluate(doubleArray83);
        double double85 = secondMoment68.evaluate(doubleArray83);
        secondMoment53.incrementAll(doubleArray83);
        double double87 = variance49.evaluate(doubleArray83);
        double double89 = variance30.evaluate(doubleArray83, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = variance2.evaluate(doubleArray83, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4L + "'", long29 == 4L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2025.0d + "'", double87 == 2025.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2025.0d + "'", double89 == 2025.0d);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        secondMoment5.increment((double) (short) 0);
        double double10 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        double[] doubleArray23 = new double[] { (-1L), 0, 10L };
        secondMoment17.incrementAll(doubleArray23, 0, 0);
        double double27 = secondMoment11.evaluate(doubleArray23);
        double[] doubleArray28 = new double[] {};
        secondMoment11.incrementAll(doubleArray28);
        secondMoment5.incrementAll(doubleArray28);
        secondMoment5.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double[] doubleArray46 = new double[] { 10, (byte) 100 };
        double double47 = secondMoment34.evaluate(doubleArray46);
        double double48 = variance33.evaluate(doubleArray46);
        double double49 = secondMoment0.evaluate(doubleArray46);
        secondMoment0.clear();
        double double51 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment((double) ' ');
        secondMoment52.increment((double) (-1.0f));
        secondMoment52.clear();
        double double58 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment(1.0d);
        double[] doubleArray69 = new double[] { (-1L), 0, 10L };
        secondMoment63.incrementAll(doubleArray69, 0, 0);
        double[] doubleArray75 = new double[] { 10, (byte) 100 };
        double double76 = secondMoment63.evaluate(doubleArray75);
        double double77 = secondMoment60.evaluate(doubleArray75);
        double double79 = variance59.evaluate(doubleArray75, (double) 5L);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray75, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 74.0d + "'", double27 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4050.0d + "'", double48 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4050.0d + "'", double77 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 4050.0d + "'", double79 == 4050.0d);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        long long35 = variance34.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double double47 = variance34.evaluate(doubleArray42, (double) (short) -1);
        double double48 = secondMoment18.evaluate(doubleArray42);
        double double49 = secondMoment1.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double52 = variance51.getResult();
        variance51.increment((double) 6L);
        java.lang.Class<?> wildcardClass55 = variance51.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 37.0d + "'", double47 == 37.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 37.0d + "'", double52 == 37.0d);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (short) 10);
        secondMoment0.increment((double) 2L);
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment8.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = variance36.evaluate(doubleArray49);
        long long52 = variance36.getN();
        long long53 = variance36.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        secondMoment54.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        secondMoment60.increment((double) (short) 0);
        long long65 = secondMoment60.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        double[] doubleArray72 = new double[] { (-1L), 0, 10L };
        secondMoment66.incrementAll(doubleArray72, 0, 0);
        long long76 = secondMoment66.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        double[] doubleArray83 = new double[] { (-1L), 0, 10L };
        secondMoment77.incrementAll(doubleArray83, 0, 0);
        secondMoment66.incrementAll(doubleArray83, 0, (int) (short) 1);
        secondMoment60.incrementAll(doubleArray83, (int) (byte) 0, (int) (byte) 1);
        secondMoment54.incrementAll(doubleArray83);
        double double96 = variance36.evaluate(doubleArray83, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray83, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 482.66666666666663d + "'", double7 == 482.66666666666663d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        secondMoment1.clear();
        long long8 = secondMoment1.getN();
        secondMoment1.increment(5226.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long12 = variance11.getN();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        long long21 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment((double) ' ');
        secondMoment22.increment((double) (-1.0f));
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long39 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double51 = variance38.evaluate(doubleArray46, (double) (short) -1);
        double double52 = secondMoment22.evaluate(doubleArray46);
        double double53 = secondMoment5.evaluate(doubleArray46);
        secondMoment0.incrementAll(doubleArray46);
        secondMoment0.clear();
        secondMoment0.increment(36.916666666666664d);
        java.lang.Class<?> wildcardClass58 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 37.0d + "'", double51 == 37.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment3.getResult();
        secondMoment3.increment((double) (short) -1);
        double[] doubleArray21 = new double[] { (short) 1 };
        secondMoment3.incrementAll(doubleArray21);
        secondMoment0.incrementAll(doubleArray21);
        secondMoment0.increment((-1.0d));
        long long26 = secondMoment0.getN();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        double double43 = variance28.evaluate(doubleArray41);
        java.lang.Class<?> wildcardClass44 = doubleArray41.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance9.evaluate(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] {};
        secondMoment38.incrementAll(doubleArray55);
        double double57 = secondMoment35.evaluate(doubleArray55);
        variance9.incrementAll(doubleArray55);
        variance9.clear();
        double double60 = variance9.getResult();
        variance9.setBiasCorrected(true);
        double double63 = variance9.getResult();
        double[] doubleArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double68 = variance9.evaluate(doubleArray64, 544.5d, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment((double) ' ');
        double double9 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        boolean boolean11 = secondMoment0.equals((java.lang.Object) variance10);
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double22 = secondMoment0.evaluate(doubleArray20);
        secondMoment0.increment((double) 3L);
        secondMoment0.increment((double) (byte) -1);
        double double27 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.0d + "'", double27 == 8.0d);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        secondMoment8.clear();
        secondMoment8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double[] doubleArray38 = new double[] { 10, (byte) 100 };
        double double39 = secondMoment26.evaluate(doubleArray38);
        double double40 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        long long42 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        secondMoment26.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment46);
        long long62 = secondMoment46.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment((double) ' ');
        secondMoment63.increment((double) (-1.0f));
        secondMoment63.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        long long80 = variance79.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double double92 = variance79.evaluate(doubleArray87, (double) (short) -1);
        double double93 = secondMoment63.evaluate(doubleArray87);
        double double94 = secondMoment46.evaluate(doubleArray87);
        double double95 = secondMoment26.evaluate(doubleArray87);
        double double96 = secondMoment8.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment0.evaluate(doubleArray87, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4050.0d + "'", double39 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4050.0d + "'", double40 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2L + "'", long62 == 2L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 37.0d + "'", double92 == 37.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 74.0d + "'", double93 == 74.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 74.0d + "'", double94 == 74.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 74.0d + "'", double95 == 74.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 74.0d + "'", double96 == 74.0d);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        secondMoment0.clear();
        secondMoment0.increment(2312.0d);
        secondMoment0.increment((double) (byte) -1);
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray14, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        long long26 = secondMoment0.getN();
        secondMoment0.clear();
        double double28 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double[] doubleArray41 = new double[] { 10, (byte) 100 };
        double double42 = secondMoment29.evaluate(doubleArray41);
        long long43 = secondMoment29.getN();
        secondMoment29.clear();
        double double45 = secondMoment29.getResult();
        secondMoment29.increment((double) 1.0f);
        secondMoment29.increment((-1.0d));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        secondMoment51.increment((double) (short) 0);
        long long56 = secondMoment51.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        secondMoment64.increment((double) (short) 0);
        double double69 = secondMoment64.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double double80 = secondMoment64.evaluate(doubleArray76);
        double[] doubleArray81 = new double[] {};
        secondMoment64.incrementAll(doubleArray81);
        secondMoment58.incrementAll(doubleArray81);
        secondMoment51.incrementAll(doubleArray81);
        double double85 = secondMoment29.evaluate(doubleArray81);
        boolean boolean86 = secondMoment0.equals((java.lang.Object) doubleArray81);
        secondMoment0.increment(4919339.055555555d);
        java.lang.Class<?> wildcardClass89 = secondMoment0.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 4050.0d + "'", double42 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.5d + "'", double69 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2.0d + "'", double85 == 2.0d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) (short) 0);
        double double22 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double double33 = secondMoment17.evaluate(doubleArray29);
        double[] doubleArray34 = new double[] {};
        secondMoment17.incrementAll(doubleArray34);
        secondMoment11.incrementAll(doubleArray34);
        long long37 = secondMoment11.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double double49 = variance38.evaluate(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = secondMoment0.evaluate(doubleArray45, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 74.0d + "'", double33 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 37.0d + "'", double49 == 37.0d);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double10 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double[] doubleArray24 = new double[] { 10, (byte) 100 };
        double double25 = secondMoment12.evaluate(doubleArray24);
        double double26 = secondMoment12.getResult();
        secondMoment12.increment((double) (short) -1);
        double[] doubleArray30 = new double[] { (short) 1 };
        secondMoment12.incrementAll(doubleArray30);
        long long32 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        variance33.clear();
        boolean boolean35 = variance33.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        variance52.increment(0.0d);
        long long55 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment56);
        secondMoment56.increment((double) (short) -1);
        secondMoment56.clear();
        secondMoment56.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        secondMoment65.increment((double) (short) 0);
        boolean boolean70 = secondMoment56.equals((java.lang.Object) secondMoment65);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double[] doubleArray86 = new double[] { 10, (byte) 100 };
        double double87 = secondMoment74.evaluate(doubleArray86);
        double double88 = secondMoment71.evaluate(doubleArray86);
        secondMoment56.incrementAll(doubleArray86);
        double double90 = variance52.evaluate(doubleArray86);
        double double92 = variance33.evaluate(doubleArray86, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = secondMoment0.evaluate(doubleArray86, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4050.0d + "'", double25 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4050.0d + "'", double26 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4L + "'", long32 == 4L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4050.0d + "'", double87 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2025.0d + "'", double90 == 2025.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 2025.0d + "'", double92 == 2025.0d);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.clear();
        boolean boolean5 = variance2.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        double double17 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double[] doubleArray31 = new double[] { 10, (byte) 100 };
        double double32 = secondMoment19.evaluate(doubleArray31);
        double double33 = secondMoment19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        long long35 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        secondMoment36.increment((double) (-1.0f));
        secondMoment36.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        long long53 = variance52.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double double65 = variance52.evaluate(doubleArray60, (double) (short) -1);
        double double66 = secondMoment36.evaluate(doubleArray60);
        double double67 = secondMoment19.evaluate(doubleArray60);
        variance16.incrementAll(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = variance2.evaluate(doubleArray60, (double) 10L, (int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4050.0d + "'", double33 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 37.0d + "'", double65 == 37.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (short) 10);
        secondMoment0.increment((double) 2L);
        double double7 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        long long18 = secondMoment12.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        double double21 = secondMoment12.getResult();
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double[] doubleArray35 = new double[] { 10, (byte) 100 };
        double double36 = secondMoment23.evaluate(doubleArray35);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] {};
        secondMoment38.incrementAll(doubleArray55);
        double double59 = variance37.evaluate(doubleArray55, (int) (byte) 0, 0);
        double double60 = secondMoment23.evaluate(doubleArray55);
        secondMoment12.incrementAll(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = variance10.evaluate(doubleArray55, 3602.0d, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 482.66666666666663d + "'", double7 == 482.66666666666663d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 544.5d + "'", double21 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4050.0d + "'", double36 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(3602.0d);
        double double31 = secondMoment0.getResult();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9725402.75d + "'", double31 == 9725402.75d);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        double double65 = variance20.evaluate(doubleArray62);
        double double66 = secondMoment0.evaluate(doubleArray62);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        secondMoment69.increment((double) (short) 0);
        long long74 = secondMoment69.getN();
        double double75 = secondMoment69.getResult();
        long long76 = secondMoment69.getN();
        double double77 = secondMoment69.getResult();
        secondMoment69.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double[] doubleArray92 = new double[] { 10, (byte) 100 };
        double double93 = secondMoment80.evaluate(doubleArray92);
        secondMoment69.incrementAll(doubleArray92);
        double double95 = secondMoment0.evaluate(doubleArray92);
        org.apache.commons.math.stat.descriptive.moment.Variance variance96 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double97 = variance96.getResult();
        double double98 = variance96.getResult();
        boolean boolean99 = variance96.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2L + "'", long74 == 2L);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5d + "'", double75 == 0.5d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 2L + "'", long76 == 2L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 4050.0d + "'", double95 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 4050.0d + "'", double97 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 4050.0d + "'", double98 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        double double18 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        variance30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        secondMoment32.increment((double) (-1.0f));
        secondMoment32.clear();
        secondMoment32.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double[] doubleArray53 = new double[] { 10, (byte) 100 };
        double double54 = secondMoment41.evaluate(doubleArray53);
        long long55 = secondMoment41.getN();
        secondMoment41.clear();
        double double57 = secondMoment41.getResult();
        secondMoment41.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        double[] doubleArray66 = new double[] { (-1L), 0, 10L };
        secondMoment60.incrementAll(doubleArray66, 0, 0);
        double double70 = variance59.evaluate(doubleArray66);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        double[] doubleArray77 = new double[] { (-1L), 0, 10L };
        secondMoment71.incrementAll(doubleArray77, 0, 0);
        long long81 = secondMoment71.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment82.increment(1.0d);
        double[] doubleArray88 = new double[] { (-1L), 0, 10L };
        secondMoment82.incrementAll(doubleArray88, 0, 0);
        secondMoment71.incrementAll(doubleArray88, 0, (int) (short) 1);
        double double96 = variance59.evaluate(doubleArray88, (double) 100.0f);
        double double97 = secondMoment32.evaluate(doubleArray88);
        variance30.incrementAll(doubleArray88);
        secondMoment0.incrementAll(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 37.0d + "'", double70 == 37.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 37.0d + "'", double96 == 37.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 74.0d + "'", double97 == 74.0d);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        secondMoment1.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean9 = variance8.isBiasCorrected();
        double double10 = variance8.getResult();
        variance8.clear();
        long long12 = variance8.getN();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = variance8.evaluate(doubleArray13, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1801.0d + "'", double10 == 1801.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        long long21 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment((double) ' ');
        secondMoment22.increment((double) (-1.0f));
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        double[] doubleArray34 = new double[] { (-1L), 0, 10L };
        secondMoment28.incrementAll(doubleArray34, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        long long39 = variance38.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double51 = variance38.evaluate(doubleArray46, (double) (short) -1);
        double double52 = secondMoment22.evaluate(doubleArray46);
        double double53 = secondMoment5.evaluate(doubleArray46);
        secondMoment0.incrementAll(doubleArray46);
        secondMoment0.increment(36.916666666666664d);
        secondMoment0.increment(2.5105698E7d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 37.0d + "'", double51 == 37.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        secondMoment1.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean9 = variance8.isBiasCorrected();
        double double10 = variance8.getResult();
        variance8.clear();
        double double12 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        secondMoment13.increment(74.0d);
        double double20 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        long long27 = secondMoment22.getN();
        secondMoment22.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment29);
        secondMoment29.increment((double) (short) -1);
        secondMoment29.clear();
        secondMoment29.increment((double) 0L);
        boolean boolean38 = secondMoment22.equals((java.lang.Object) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        secondMoment40.increment((double) (short) -1);
        secondMoment40.clear();
        secondMoment40.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        double double67 = secondMoment40.evaluate(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double[] doubleArray80 = new double[] { 10, (byte) 100 };
        double double81 = secondMoment68.evaluate(doubleArray80);
        double double82 = secondMoment68.getResult();
        secondMoment68.increment((double) (short) -1);
        double[] doubleArray86 = new double[] { (short) 1 };
        secondMoment68.incrementAll(doubleArray86);
        double double88 = secondMoment40.evaluate(doubleArray86);
        double double89 = variance39.evaluate(doubleArray86);
        secondMoment13.incrementAll(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance8.evaluate(doubleArray86, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1801.0d + "'", double10 == 1801.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1801.0d + "'", double12 == 1801.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3602.0d + "'", double20 == 3602.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 74.0d + "'", double67 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 4050.0d + "'", double82 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double[] doubleArray19 = new double[] { 10, (byte) 100 };
        double double20 = secondMoment7.evaluate(doubleArray19);
        double double21 = secondMoment7.getResult();
        long long22 = secondMoment7.getN();
        long long23 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment7);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment7);
        secondMoment0.increment(1.2215704987955729E7d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long17 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double29 = variance16.evaluate(doubleArray24, (double) (short) -1);
        double double30 = secondMoment0.evaluate(doubleArray24);
        double double31 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) (short) -1);
        secondMoment32.clear();
        double double39 = secondMoment32.getResult();
        double double40 = secondMoment32.getResult();
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment42);
        secondMoment42.increment((double) '4');
        double double48 = secondMoment42.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        secondMoment55.increment((double) (short) 0);
        double double60 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = secondMoment55.evaluate(doubleArray67);
        double[] doubleArray72 = new double[] {};
        secondMoment55.incrementAll(doubleArray72);
        secondMoment49.incrementAll(doubleArray72);
        secondMoment49.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double[] doubleArray90 = new double[] { 10, (byte) 100 };
        double double91 = secondMoment78.evaluate(doubleArray90);
        double double92 = variance77.evaluate(doubleArray90);
        double double93 = secondMoment42.evaluate(doubleArray90);
        secondMoment32.incrementAll(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray90, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 37.0d + "'", double29 == 37.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 74.0d + "'", double31 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 200.0d + "'", double48 == 200.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5d + "'", double60 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        secondMoment1.incrementAll(doubleArray21, 0, (int) (short) 0);
        secondMoment1.clear();
        double double30 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean17 = variance16.isBiasCorrected();
        variance16.clear();
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double22 = variance16.evaluate(doubleArray19, (int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) (short) 0);
        double double22 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double double33 = secondMoment17.evaluate(doubleArray29);
        double[] doubleArray34 = new double[] {};
        secondMoment17.incrementAll(doubleArray34);
        secondMoment11.incrementAll(doubleArray34);
        secondMoment11.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double[] doubleArray52 = new double[] { 10, (byte) 100 };
        double double53 = secondMoment40.evaluate(doubleArray52);
        double double54 = variance39.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = variance9.evaluate(doubleArray52, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 74.0d + "'", double33 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        long long17 = variance16.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double29 = variance16.evaluate(doubleArray24, (double) (short) -1);
        double double30 = secondMoment0.evaluate(doubleArray24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double32 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double[] doubleArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double38 = variance33.evaluate(doubleArray34, 9.541195475E7d, (int) (byte) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 37.0d + "'", double29 == 37.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 74.0d + "'", double32 == 74.0d);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.increment((double) (short) 1);
        secondMoment1.increment(0.5d);
        double double98 = secondMoment1.getResult();
        double double99 = secondMoment1.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 6993.1875d + "'", double98 == 6993.1875d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 6993.1875d + "'", double99 == 6993.1875d);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance19.increment(10.0d);
        variance19.setBiasCorrected(false);
        variance19.increment(2413.8518518518517d);
        variance19.clear();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        boolean boolean14 = secondMoment0.equals((java.lang.Object) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        double double32 = secondMoment15.evaluate(doubleArray30);
        secondMoment0.incrementAll(doubleArray30);
        secondMoment0.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        long long43 = secondMoment37.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        double double46 = secondMoment37.getResult();
        secondMoment37.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        double double70 = variance48.evaluate(doubleArray66, (int) (byte) 0, 0);
        long long71 = variance48.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        variance48.incrementAll(doubleArray84);
        double double90 = secondMoment37.evaluate(doubleArray84);
        secondMoment0.incrementAll(doubleArray84);
        secondMoment0.increment(0.0d);
        secondMoment0.increment((double) 6L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 544.5d + "'", double46 == 544.5d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.clear();
        secondMoment2.increment(4402.666666666667d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double14 = secondMoment2.getResult();
        double double15 = secondMoment2.getResult();
        double double16 = secondMoment2.getResult();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.increment(1.0d);
        double[] doubleArray10 = new double[] { (-1L), 0, 10L };
        secondMoment4.incrementAll(doubleArray10, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment4);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        secondMoment15.increment((double) (-1.0f));
        secondMoment15.clear();
        boolean boolean21 = variance14.equals((java.lang.Object) secondMoment15);
        double double22 = variance14.getResult();
        variance14.increment(3602.0d);
        long long25 = variance14.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        long long36 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        variance37.increment(2.880385675555556E7d);
        double double40 = variance37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        secondMoment41.increment((double) (short) 0);
        double double46 = secondMoment41.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        secondMoment41.incrementAll(doubleArray64);
        secondMoment41.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        double[] doubleArray82 = new double[] { 10, (byte) 100 };
        double double83 = secondMoment70.evaluate(doubleArray82);
        double double84 = variance69.evaluate(doubleArray82);
        variance37.incrementAll(doubleArray82);
        variance14.incrementAll(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance1.evaluate(doubleArray82, 0.75d, (int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.5d + "'", double46 == 0.5d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        double double22 = secondMoment8.getResult();
        long long23 = secondMoment8.getN();
        long long24 = secondMoment8.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment8);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        variance28.clear();
        variance28.clear();
        variance28.clear();
        double double32 = variance28.getResult();
        variance28.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        variance44.increment((double) (short) 100);
        variance44.clear();
        variance44.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double[] doubleArray63 = new double[] { 10, (byte) 100 };
        double double64 = secondMoment51.evaluate(doubleArray63);
        double double65 = secondMoment51.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double84 = secondMoment68.evaluate(doubleArray80);
        double[] doubleArray85 = new double[] {};
        secondMoment68.incrementAll(doubleArray85);
        double double89 = variance67.evaluate(doubleArray85, (int) (byte) 0, 0);
        double double90 = variance66.evaluate(doubleArray85);
        variance44.incrementAll(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = variance28.evaluate(doubleArray85, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4050.0d + "'", double22 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        double double6 = secondMoment0.getResult();
        long long7 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 544.5d + "'", double6 == 544.5d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double23 = variance10.evaluate(doubleArray18, (double) (short) -1);
        double double24 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        double double29 = secondMoment26.getResult();
        secondMoment26.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long35 = variance34.getN();
        double double36 = variance34.getResult();
        variance34.increment((double) (short) 100);
        variance34.increment((double) 3L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double[] doubleArray54 = new double[] { 10, (byte) 100 };
        double double55 = secondMoment42.evaluate(doubleArray54);
        long long56 = secondMoment42.getN();
        secondMoment42.clear();
        double double58 = secondMoment42.getResult();
        secondMoment42.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = variance60.evaluate(doubleArray67);
        double double73 = variance34.evaluate(doubleArray67, (double) 100);
        double double74 = variance32.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = variance10.evaluate(doubleArray67, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37.0d + "'", double23 == 37.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4050.0d + "'", double55 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 37.0d + "'", double71 == 37.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 37.0d + "'", double73 == 37.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 37.0d + "'", double74 == 37.0d);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) '4');
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) (short) 0);
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double double29 = secondMoment13.evaluate(doubleArray25);
        double[] doubleArray30 = new double[] {};
        secondMoment13.incrementAll(doubleArray30);
        secondMoment7.incrementAll(doubleArray30);
        secondMoment7.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double[] doubleArray48 = new double[] { 10, (byte) 100 };
        double double49 = secondMoment36.evaluate(doubleArray48);
        double double50 = variance35.evaluate(doubleArray48);
        double double51 = secondMoment0.evaluate(doubleArray48);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance53.setBiasCorrected(true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 200.0d + "'", double6 == 200.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5d + "'", double12 == 0.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 74.0d + "'", double29 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        double double18 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment(4402.666666666667d);
        double double22 = secondMoment0.getResult();
        double double23 = secondMoment0.getResult();
        secondMoment0.increment((double) (-1L));
        double double26 = secondMoment0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 9696140.055555556d + "'", double26 == 9696140.055555556d);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        variance1.clear();
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double34 = secondMoment18.evaluate(doubleArray30);
        double[] doubleArray35 = new double[] {};
        secondMoment18.incrementAll(doubleArray35);
        secondMoment12.incrementAll(doubleArray35);
        secondMoment12.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double[] doubleArray53 = new double[] { 10, (byte) 100 };
        double double54 = secondMoment41.evaluate(doubleArray53);
        double double55 = variance40.evaluate(doubleArray53);
        double double56 = secondMoment7.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        long long67 = secondMoment57.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        secondMoment57.incrementAll(doubleArray74, 0, (int) (short) 1);
        double double81 = secondMoment7.evaluate(doubleArray74);
        double double84 = variance1.evaluate(doubleArray74, (int) (byte) 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass85 = doubleArray74.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4050.0d + "'", double55 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 74.0d + "'", double81 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment((double) ' ');
        double double9 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        boolean boolean11 = secondMoment0.equals((java.lang.Object) variance10);
        secondMoment0.increment((double) (byte) 10);
        double double14 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        secondMoment17.increment((double) (short) -1);
        long long23 = secondMoment17.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double double36 = variance24.evaluate(doubleArray31, (double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = secondMoment0.evaluate(doubleArray31, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 60.666666666666664d + "'", double14 == 60.666666666666664d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 24.666666666666668d + "'", double36 == 24.666666666666668d);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.clear();
        variance2.increment((double) (short) -1);
        variance2.increment(32.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        double double65 = variance20.evaluate(doubleArray62);
        double double66 = secondMoment0.evaluate(doubleArray62);
        secondMoment0.increment((double) (-1.0f));
        secondMoment0.clear();
        secondMoment0.clear();
        secondMoment0.clear();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        double double5 = variance1.getResult();
        double double6 = variance1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        long long17 = secondMoment7.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment(10.0d);
        secondMoment7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment22);
        secondMoment22.increment((double) (short) -1);
        secondMoment22.clear();
        secondMoment22.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        secondMoment31.increment((double) (short) 0);
        boolean boolean36 = secondMoment22.equals((java.lang.Object) secondMoment31);
        secondMoment22.clear();
        long long38 = secondMoment22.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        long long45 = secondMoment40.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        secondMoment47.increment((double) (short) -1);
        secondMoment47.clear();
        secondMoment47.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        boolean boolean61 = secondMoment47.equals((java.lang.Object) secondMoment56);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        double[] doubleArray77 = new double[] { 10, (byte) 100 };
        double double78 = secondMoment65.evaluate(doubleArray77);
        double double79 = secondMoment62.evaluate(doubleArray77);
        secondMoment47.incrementAll(doubleArray77);
        secondMoment40.incrementAll(doubleArray77, (int) (short) 0, 0);
        double double84 = secondMoment22.evaluate(doubleArray77);
        double double85 = secondMoment7.evaluate(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = variance1.evaluate(doubleArray77, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 4050.0d + "'", double78 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 4050.0d + "'", double79 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4050.0d + "'", double84 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double10 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        variance17.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.increment((double) (short) -1);
        secondMoment19.clear();
        secondMoment19.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double[] doubleArray42 = new double[] { 10, (byte) 100 };
        double double43 = secondMoment30.evaluate(doubleArray42);
        double double44 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        double double52 = secondMoment47.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        double[] doubleArray59 = new double[] { (-1L), 0, 10L };
        secondMoment53.incrementAll(doubleArray59, 0, 0);
        double double63 = secondMoment47.evaluate(doubleArray59);
        double[] doubleArray64 = new double[] {};
        secondMoment47.incrementAll(doubleArray64);
        double double68 = variance46.evaluate(doubleArray64, (int) (byte) 0, 0);
        double double69 = variance45.evaluate(doubleArray64);
        double double70 = variance28.evaluate(doubleArray64);
        long long71 = variance28.getN();
        variance28.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long76 = variance75.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        secondMoment77.increment((double) (short) 0);
        double double82 = secondMoment77.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment83 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment83.increment(1.0d);
        double[] doubleArray89 = new double[] { (-1L), 0, 10L };
        secondMoment83.incrementAll(doubleArray89, 0, 0);
        double double93 = secondMoment77.evaluate(doubleArray89);
        variance75.incrementAll(doubleArray89);
        double double95 = variance28.evaluate(doubleArray89);
        double double96 = variance17.evaluate(doubleArray89);
        double double97 = variance9.evaluate(doubleArray89);
        variance9.increment(458.6666666666667d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4050.0d + "'", double44 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.5d + "'", double52 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.5d + "'", double82 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 74.0d + "'", double93 == 74.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 37.0d + "'", double95 == 37.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 37.0d + "'", double96 == 37.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 37.0d + "'", double97 == 37.0d);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        boolean boolean20 = variance19.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        long long31 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        double double40 = secondMoment35.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double51 = secondMoment35.evaluate(doubleArray47);
        double[] doubleArray52 = new double[] {};
        secondMoment35.incrementAll(doubleArray52);
        double double54 = secondMoment32.evaluate(doubleArray52);
        double double55 = variance30.evaluate(doubleArray52);
        double double57 = variance19.evaluate(doubleArray52, (double) 1);
        variance19.clear();
        long long59 = variance19.getN();
        double double60 = variance19.getResult();
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double62 = variance19.evaluate(doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5d + "'", double40 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 74.0d + "'", double51 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double4 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        secondMoment5.increment((double) (short) -1);
        secondMoment5.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment5);
        variance12.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        secondMoment15.increment((double) (short) 0);
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        double[] doubleArray33 = new double[] { (-1L), 0, 10L };
        secondMoment27.incrementAll(doubleArray33, 0, 0);
        double double37 = secondMoment21.evaluate(doubleArray33);
        double[] doubleArray38 = new double[] {};
        secondMoment21.incrementAll(doubleArray38);
        secondMoment15.incrementAll(doubleArray38);
        secondMoment15.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long57 = variance56.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double69 = variance56.evaluate(doubleArray64, (double) (short) -1);
        double double72 = secondMoment15.evaluate(doubleArray64, (int) (byte) 1, (int) (byte) 1);
        double double73 = variance12.evaluate(doubleArray64);
        variance3.incrementAll(doubleArray64);
        long long75 = variance3.getN();
        variance3.increment(2025.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5d + "'", double20 == 0.5d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 74.0d + "'", double37 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 37.0d + "'", double69 == 37.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 37.0d + "'", double73 == 37.0d);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment8.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = variance36.evaluate(doubleArray49);
        long long52 = variance36.getN();
        double double53 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double[] doubleArray66 = new double[] { 10, (byte) 100 };
        double double67 = secondMoment54.evaluate(doubleArray66);
        double double68 = secondMoment54.getResult();
        secondMoment54.increment((double) (short) -1);
        double[] doubleArray72 = new double[] { (short) 1 };
        secondMoment54.incrementAll(doubleArray72);
        double double74 = variance36.evaluate(doubleArray72);
        double double77 = secondMoment1.evaluate(doubleArray72, (int) (short) 1, 0);
        secondMoment1.increment((double) 10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double81 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 60.666666666666664d + "'", double81 == 60.666666666666664d);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        long long5 = secondMoment0.getN();
        double double6 = secondMoment0.getResult();
        double double7 = secondMoment0.getResult();
        long long8 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        secondMoment9.clear();
        secondMoment9.increment((double) 0L);
        secondMoment9.clear();
        secondMoment9.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        secondMoment30.increment((double) (short) 0);
        boolean boolean35 = secondMoment21.equals((java.lang.Object) secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        double double47 = variance46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        long long54 = secondMoment49.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment49);
        long long56 = variance55.getN();
        variance55.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long60 = variance59.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        secondMoment61.increment((double) (short) 0);
        double double66 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double double77 = secondMoment61.evaluate(doubleArray73);
        variance59.incrementAll(doubleArray73);
        double double80 = variance55.evaluate(doubleArray73, (double) (short) -1);
        double double81 = variance46.evaluate(doubleArray73);
        double double82 = secondMoment30.evaluate(doubleArray73);
        double double83 = secondMoment9.evaluate(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray73, (int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.5d + "'", double7 == 0.5d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.5d + "'", double66 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 74.0d + "'", double77 == 74.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 24.666666666666668d + "'", double80 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 37.0d + "'", double81 == 37.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 74.0d + "'", double82 == 74.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 74.0d + "'", double83 == 74.0d);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        secondMoment0.increment((double) 1L);
        secondMoment0.increment((double) (byte) 100);
        double double22 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        secondMoment34.increment((double) (short) 0);
        double double39 = secondMoment34.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double double50 = secondMoment34.evaluate(doubleArray46);
        double[] doubleArray51 = new double[] {};
        secondMoment34.incrementAll(doubleArray51);
        secondMoment28.incrementAll(doubleArray51);
        secondMoment28.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        double[] doubleArray63 = new double[] { (-1L), 0, 10L };
        secondMoment57.incrementAll(doubleArray63, 0, 0);
        double[] doubleArray69 = new double[] { 10, (byte) 100 };
        double double70 = secondMoment57.evaluate(doubleArray69);
        double double71 = variance56.evaluate(doubleArray69);
        double double72 = secondMoment23.evaluate(doubleArray69);
        double double73 = secondMoment0.evaluate(doubleArray69);
        long long74 = secondMoment0.getN();
        java.lang.Class<?> wildcardClass75 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11282.0d + "'", double22 == 11282.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.5d + "'", double39 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 74.0d + "'", double50 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 4050.0d + "'", double70 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4050.0d + "'", double71 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 4050.0d + "'", double72 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4050.0d + "'", double73 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2L + "'", long74 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        java.lang.Class<?> wildcardClass12 = variance11.getClass();
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long7 = variance6.getN();
        double double8 = variance6.getResult();
        boolean boolean9 = variance6.isBiasCorrected();
        long long10 = variance6.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment((double) ' ');
        secondMoment22.increment((double) (-1.0f));
        secondMoment22.clear();
        boolean boolean28 = variance21.equals((java.lang.Object) secondMoment22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double[] doubleArray42 = new double[] { 10, (byte) 100 };
        double double43 = secondMoment30.evaluate(doubleArray42);
        double double44 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment30);
        long long46 = secondMoment30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        secondMoment47.increment((double) (short) -1);
        secondMoment47.clear();
        secondMoment47.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        secondMoment57.increment((double) (short) 0);
        double double62 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment(1.0d);
        double[] doubleArray69 = new double[] { (-1L), 0, 10L };
        secondMoment63.incrementAll(doubleArray69, 0, 0);
        double double73 = secondMoment57.evaluate(doubleArray69);
        double double74 = secondMoment47.evaluate(doubleArray69);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double[] doubleArray87 = new double[] { 10, (byte) 100 };
        double double88 = secondMoment75.evaluate(doubleArray87);
        double double89 = secondMoment75.getResult();
        secondMoment75.increment((double) (short) -1);
        double[] doubleArray93 = new double[] { (short) 1 };
        secondMoment75.incrementAll(doubleArray93);
        double double95 = secondMoment47.evaluate(doubleArray93);
        double double96 = secondMoment30.evaluate(doubleArray93);
        double double97 = secondMoment22.evaluate(doubleArray93);
        double double99 = variance6.evaluate(doubleArray93, 0.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4050.0d + "'", double44 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.5d + "'", double62 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 74.0d + "'", double73 == 74.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4050.0d + "'", double89 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double18 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double double36 = secondMoment20.evaluate(doubleArray32);
        long long37 = secondMoment20.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        double double39 = secondMoment20.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment20);
        variance40.increment((double) 10.0f);
        boolean boolean43 = variance40.isBiasCorrected();
        double double44 = variance40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double double62 = variance40.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = secondMoment0.evaluate(doubleArray57, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 74.0d + "'", double36 == 74.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 74.0d + "'", double39 == 74.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 24.666666666666668d + "'", double44 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 24.666666666666668d + "'", double62 == 24.666666666666668d);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.increment(4050.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        double[] doubleArray17 = new double[] { (-1L), 0, 10L };
        secondMoment11.incrementAll(doubleArray17, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long22 = variance21.getN();
        variance21.setBiasCorrected(false);
        boolean boolean25 = variance8.equals((java.lang.Object) variance21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        secondMoment32.increment((double) '4');
        long long37 = secondMoment32.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance41.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        double[] doubleArray51 = new double[] { (-1L), 0, 10L };
        secondMoment45.incrementAll(doubleArray51, 0, 0);
        double[] doubleArray57 = new double[] { 10, (byte) 100 };
        double double58 = secondMoment45.evaluate(doubleArray57);
        double double59 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance60 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment45);
        long long61 = secondMoment45.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment45);
        double double63 = secondMoment45.getResult();
        secondMoment45.clear();
        secondMoment45.increment(Double.NaN);
        secondMoment45.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long71 = variance70.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        variance70.incrementAll(doubleArray84);
        secondMoment45.incrementAll(doubleArray84);
        variance41.incrementAll(doubleArray84);
        double double94 = secondMoment32.evaluate(doubleArray84, 0, (int) (byte) 0);
        double double95 = secondMoment26.evaluate(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance8.evaluate(doubleArray84, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 4050.0d + "'", double58 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2L + "'", long61 == 2L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 74.0d + "'", double95 == 74.0d);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) '4');
        long long5 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double7 = variance6.getResult();
        variance6.clear();
        variance6.setBiasCorrected(true);
        variance6.increment(7200964.18888889d);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2L + "'", long5 == 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 200.0d + "'", double7 == 200.0d);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        long long11 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance13.clear();
        variance13.clear();
        double[] doubleArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = variance13.evaluate(doubleArray16, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) (byte) 10);
        secondMoment0.clear();
        double double29 = secondMoment0.getResult();
        secondMoment0.clear();
        double double31 = secondMoment0.getResult();
        double[] doubleArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = secondMoment0.evaluate(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        secondMoment1.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean9 = variance8.isBiasCorrected();
        double double10 = variance8.getResult();
        variance8.clear();
        double double12 = variance8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) (short) -1);
        long long20 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double23 = secondMoment14.getResult();
        double double24 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        secondMoment26.increment((double) (short) 0);
        double double31 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double[] doubleArray45 = new double[] { 10, (byte) 100 };
        double double46 = secondMoment33.evaluate(doubleArray45);
        double double47 = secondMoment33.getResult();
        long long48 = secondMoment33.getN();
        long long49 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance50 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment33);
        boolean boolean51 = secondMoment26.equals((java.lang.Object) secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        variance53.clear();
        variance53.clear();
        double double56 = variance53.getResult();
        variance53.clear();
        long long58 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        double[] doubleArray65 = new double[] { (-1L), 0, 10L };
        secondMoment59.incrementAll(doubleArray65, 0, 0);
        long long69 = secondMoment59.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        secondMoment59.incrementAll(doubleArray76, 0, (int) (short) 1);
        double double83 = variance53.evaluate(doubleArray76);
        secondMoment14.incrementAll(doubleArray76, 0, 0);
        double double90 = variance8.evaluate(doubleArray76, (double) 100L, 0, 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1801.0d + "'", double10 == 1801.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1801.0d + "'", double12 == 1801.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 544.5d + "'", double23 == 544.5d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 544.5d + "'", double24 == 544.5d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.5d + "'", double31 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4050.0d + "'", double46 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.5d + "'", double56 == 0.5d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2L + "'", long58 == 2L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 37.0d + "'", double83 == 37.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double[] doubleArray30 = new double[] { 10, (byte) 100 };
        double double31 = secondMoment18.evaluate(doubleArray30);
        double double32 = secondMoment0.evaluate(doubleArray30);
        long long33 = secondMoment0.getN();
        double double34 = secondMoment0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4050.0d + "'", double32 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        double double8 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.increment(2.880385675555556E7d);
        secondMoment1.increment(482.66666666666663d);
        double double14 = secondMoment1.getResult();
        secondMoment1.clear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 544.5d + "'", double8 == 544.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 6.22239225373408E14d + "'", double14 == 6.22239225373408E14d);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        double double9 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        secondMoment2.increment(2.880385675555556E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        secondMoment14.increment((double) '4');
        long long19 = secondMoment14.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double21 = variance20.getResult();
        variance20.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.increment((double) (short) -1);
        secondMoment23.clear();
        secondMoment23.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        long long33 = variance32.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        double double42 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        double[] doubleArray49 = new double[] { (-1L), 0, 10L };
        secondMoment43.incrementAll(doubleArray49, 0, 0);
        double double53 = secondMoment37.evaluate(doubleArray49);
        double[] doubleArray54 = new double[] {};
        secondMoment37.incrementAll(doubleArray54);
        double double56 = secondMoment34.evaluate(doubleArray54);
        double double57 = variance32.evaluate(doubleArray54);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        secondMoment61.increment((double) (short) 0);
        double double66 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double double77 = secondMoment61.evaluate(doubleArray73);
        double[] doubleArray78 = new double[] {};
        secondMoment61.incrementAll(doubleArray78);
        double double80 = secondMoment58.evaluate(doubleArray78);
        variance32.incrementAll(doubleArray78);
        double double83 = variance20.evaluate(doubleArray78, 7077.0d);
        double double84 = variance13.evaluate(doubleArray78);
        variance13.clear();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 544.5d + "'", double9 == 544.5d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 200.0d + "'", double21 == 200.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5d + "'", double42 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 74.0d + "'", double53 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.5d + "'", double66 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 74.0d + "'", double77 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        secondMoment15.increment((double) (short) 0);
        double double20 = secondMoment15.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double double31 = secondMoment15.evaluate(doubleArray27);
        double[] doubleArray32 = new double[] {};
        secondMoment15.incrementAll(doubleArray32);
        double double36 = variance14.evaluate(doubleArray32, (int) (byte) 0, 0);
        double double37 = secondMoment0.evaluate(doubleArray32);
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        java.lang.Class<?> wildcardClass39 = secondMoment0.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5d + "'", double20 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 74.0d + "'", double31 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        double double18 = secondMoment1.getResult();
        secondMoment1.increment(7142.8d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        long long32 = secondMoment27.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        long long43 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        secondMoment33.incrementAll(doubleArray50, 0, (int) (short) 1);
        secondMoment27.incrementAll(doubleArray50, (int) (byte) 0, (int) (byte) 1);
        secondMoment21.incrementAll(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = secondMoment1.evaluate(doubleArray50, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double23 = variance10.evaluate(doubleArray18, (double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment(1.0d);
        double[] doubleArray32 = new double[] { (-1L), 0, 10L };
        secondMoment26.incrementAll(doubleArray32, 0, 0);
        double[] doubleArray38 = new double[] { 10, (byte) 100 };
        double double39 = secondMoment26.evaluate(doubleArray38);
        double double40 = secondMoment26.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment26);
        long long42 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance43 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment26);
        double double44 = secondMoment26.getResult();
        secondMoment26.clear();
        secondMoment26.increment(Double.NaN);
        secondMoment26.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance51 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long52 = variance51.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment53.increment(1.0d);
        secondMoment53.increment((double) (short) 0);
        double double58 = secondMoment53.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        double[] doubleArray65 = new double[] { (-1L), 0, 10L };
        secondMoment59.incrementAll(doubleArray65, 0, 0);
        double double69 = secondMoment53.evaluate(doubleArray65);
        variance51.incrementAll(doubleArray65);
        secondMoment26.incrementAll(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance10.evaluate(doubleArray65, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37.0d + "'", double23 == 37.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 4050.0d + "'", double39 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4050.0d + "'", double40 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 4050.0d + "'", double44 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.5d + "'", double58 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 74.0d + "'", double69 == 74.0d);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (short) -1);
        long long17 = secondMoment11.getN();
        double double18 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        secondMoment11.increment(2.880385675555556E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment((double) ' ');
        secondMoment23.increment((double) '4');
        long long28 = secondMoment23.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        double double30 = variance29.getResult();
        variance29.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) (short) -1);
        secondMoment32.clear();
        secondMoment32.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        long long42 = variance41.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        double[] doubleArray63 = new double[] {};
        secondMoment46.incrementAll(doubleArray63);
        double double65 = secondMoment43.evaluate(doubleArray63);
        double double66 = variance41.evaluate(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        secondMoment70.increment((double) (short) 0);
        double double75 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment76 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment76.increment(1.0d);
        double[] doubleArray82 = new double[] { (-1L), 0, 10L };
        secondMoment76.incrementAll(doubleArray82, 0, 0);
        double double86 = secondMoment70.evaluate(doubleArray82);
        double[] doubleArray87 = new double[] {};
        secondMoment70.incrementAll(doubleArray87);
        double double89 = secondMoment67.evaluate(doubleArray87);
        variance41.incrementAll(doubleArray87);
        double double92 = variance29.evaluate(doubleArray87, 7077.0d);
        double double93 = variance22.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            variance8.incrementAll(doubleArray87, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 544.5d + "'", double18 == 544.5d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 200.0d + "'", double30 == 200.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5d + "'", double75 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        secondMoment7.increment((double) (short) -1);
        secondMoment7.clear();
        secondMoment7.increment((double) 0L);
        secondMoment7.clear();
        secondMoment7.increment((double) (short) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.increment((double) (short) -1);
        secondMoment19.clear();
        secondMoment19.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        boolean boolean33 = secondMoment19.equals((java.lang.Object) secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment34);
        double double45 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        secondMoment47.increment((double) (short) 0);
        long long52 = secondMoment47.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment47);
        long long54 = variance53.getN();
        variance53.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long58 = variance57.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        secondMoment59.increment((double) (short) 0);
        double double64 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        double double75 = secondMoment59.evaluate(doubleArray71);
        variance57.incrementAll(doubleArray71);
        double double78 = variance53.evaluate(doubleArray71, (double) (short) -1);
        double double79 = variance44.evaluate(doubleArray71);
        double double80 = secondMoment28.evaluate(doubleArray71);
        double double81 = secondMoment7.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance6.evaluate(doubleArray71, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.5d + "'", double64 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 74.0d + "'", double75 == 74.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 24.666666666666668d + "'", double78 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 37.0d + "'", double79 == 37.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 74.0d + "'", double81 == 74.0d);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long19 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        double double21 = secondMoment3.getResult();
        long long22 = secondMoment3.getN();
        secondMoment3.clear();
        secondMoment3.clear();
        double double25 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        secondMoment33.increment((double) (short) 0);
        double double38 = secondMoment33.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        double[] doubleArray45 = new double[] { (-1L), 0, 10L };
        secondMoment39.incrementAll(doubleArray45, 0, 0);
        double double49 = secondMoment33.evaluate(doubleArray45);
        double[] doubleArray50 = new double[] {};
        secondMoment33.incrementAll(doubleArray50);
        secondMoment27.incrementAll(doubleArray50);
        secondMoment27.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment27);
        secondMoment27.increment(24.666666666666668d);
        secondMoment27.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment60 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment60.increment(1.0d);
        secondMoment60.increment((double) (short) 0);
        double double65 = secondMoment60.getResult();
        secondMoment60.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment60);
        double double68 = secondMoment60.getResult();
        secondMoment60.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        secondMoment72.increment((double) (short) -1);
        secondMoment72.clear();
        secondMoment72.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance81 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment72);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment82.increment(1.0d);
        double[] doubleArray88 = new double[] { (-1L), 0, 10L };
        secondMoment82.incrementAll(doubleArray88, 0, 0);
        variance81.incrementAll(doubleArray88);
        variance71.incrementAll(doubleArray88);
        double double94 = secondMoment60.evaluate(doubleArray88);
        double double95 = secondMoment27.evaluate(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance26.evaluate(doubleArray88, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.5d + "'", double38 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 74.0d + "'", double49 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.5d + "'", double65 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 74.0d + "'", double94 == 74.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 74.0d + "'", double95 == 74.0d);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        double double8 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        double double19 = secondMoment3.evaluate(doubleArray15);
        double[] doubleArray20 = new double[] {};
        secondMoment3.incrementAll(doubleArray20);
        double double22 = secondMoment0.evaluate(doubleArray20);
        double double23 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment24);
        secondMoment24.increment((double) (short) -1);
        secondMoment24.clear();
        secondMoment24.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        secondMoment33.increment((double) (short) 0);
        boolean boolean38 = secondMoment24.equals((java.lang.Object) secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment39.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double[] doubleArray54 = new double[] { 10, (byte) 100 };
        double double55 = secondMoment42.evaluate(doubleArray54);
        double double56 = secondMoment39.evaluate(doubleArray54);
        secondMoment24.incrementAll(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = secondMoment0.evaluate(doubleArray54, (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5d + "'", double8 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 74.0d + "'", double19 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4050.0d + "'", double55 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.setBiasCorrected(false);
        boolean boolean8 = variance2.isBiasCorrected();
        boolean boolean9 = variance2.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = variance2.getN();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) '4');
        double double6 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 0);
        secondMoment0.clear();
        double double10 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        secondMoment12.increment((double) (byte) 0);
        secondMoment12.clear();
        secondMoment12.increment(272.25d);
        boolean boolean20 = secondMoment0.equals((java.lang.Object) 272.25d);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        secondMoment22.increment((double) (short) 0);
        double double27 = secondMoment22.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        secondMoment22.incrementAll(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = secondMoment0.evaluate(doubleArray45, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 200.0d + "'", double6 == 200.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.setBiasCorrected(false);
        variance8.increment(482.66666666666663d);
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment(1.0d);
        double[] doubleArray40 = new double[] { (-1L), 0, 10L };
        secondMoment34.incrementAll(doubleArray40, 0, 0);
        double double44 = secondMoment28.evaluate(doubleArray40);
        double[] doubleArray45 = new double[] {};
        secondMoment28.incrementAll(doubleArray45);
        double double47 = secondMoment25.evaluate(doubleArray45);
        double double48 = variance24.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double[] doubleArray63 = new double[] { 10, (byte) 100 };
        double double64 = secondMoment51.evaluate(doubleArray63);
        long long65 = secondMoment51.getN();
        secondMoment51.clear();
        double double67 = secondMoment51.getResult();
        secondMoment51.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.Variance variance70 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment51);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment71 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment71.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        double[] doubleArray91 = new double[] {};
        secondMoment74.incrementAll(doubleArray91);
        double double93 = secondMoment71.evaluate(doubleArray91);
        variance70.incrementAll(doubleArray91);
        double double95 = variance24.evaluate(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance8.evaluate(doubleArray91, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        secondMoment2.increment((double) '4');
        long long7 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        double double9 = variance8.getResult();
        variance8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (short) -1);
        secondMoment11.clear();
        secondMoment11.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long21 = variance20.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment22.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        secondMoment25.increment((double) (short) 0);
        double double30 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        double[] doubleArray37 = new double[] { (-1L), 0, 10L };
        secondMoment31.incrementAll(doubleArray37, 0, 0);
        double double41 = secondMoment25.evaluate(doubleArray37);
        double[] doubleArray42 = new double[] {};
        secondMoment25.incrementAll(doubleArray42);
        double double44 = secondMoment22.evaluate(doubleArray42);
        double double45 = variance20.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        double double68 = secondMoment46.evaluate(doubleArray66);
        variance20.incrementAll(doubleArray66);
        double double71 = variance8.evaluate(doubleArray66, 7077.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = variance0.evaluate(doubleArray66, 3.0d, (int) (short) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 200.0d + "'", double9 == 200.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5d + "'", double30 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 74.0d + "'", double41 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        double double18 = secondMoment0.getResult();
        secondMoment0.clear();
        secondMoment0.increment(4402.666666666667d);
        secondMoment0.clear();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        double[] doubleArray18 = new double[] {};
        secondMoment1.incrementAll(doubleArray18);
        double double22 = variance0.evaluate(doubleArray18, (int) (byte) 0, 0);
        long long23 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        secondMoment24.increment((double) (short) 0);
        double double29 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double double40 = secondMoment24.evaluate(doubleArray36);
        variance0.incrementAll(doubleArray36);
        long long42 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = secondMoment43.evaluate(doubleArray55);
        double[] doubleArray60 = new double[] {};
        secondMoment43.incrementAll(doubleArray60);
        double double62 = variance0.evaluate(doubleArray60);
        variance0.increment((double) 1.0f);
        long long65 = variance0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean68 = variance67.isBiasCorrected();
        variance67.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        double[] doubleArray76 = new double[] { (-1L), 0, 10L };
        secondMoment70.incrementAll(doubleArray76, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance80 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment70);
        long long81 = variance80.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment82 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment82.increment(1.0d);
        double[] doubleArray88 = new double[] { (-1L), 0, 10L };
        secondMoment82.incrementAll(doubleArray88, 0, 0);
        double double93 = variance80.evaluate(doubleArray88, (double) (short) -1);
        double double94 = variance67.evaluate(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            variance0.incrementAll(doubleArray88, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.5d + "'", double29 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 74.0d + "'", double40 == 74.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 4L + "'", long65 == 4L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 37.0d + "'", double93 == 37.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 24.666666666666668d + "'", double94 == 24.666666666666668d);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        secondMoment1.clear();
        double double17 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long19 = variance18.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.clear();
        secondMoment1.increment(544.5d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long8 = variance7.getN();
        variance7.clear();
        double double10 = variance7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        secondMoment11.increment((double) (short) -1);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        variance18.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance62 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment52);
        long long63 = variance62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double75 = variance62.evaluate(doubleArray70, (double) (short) -1);
        double double78 = secondMoment21.evaluate(doubleArray70, (int) (byte) 1, (int) (byte) 1);
        double double79 = variance18.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance7.evaluate(doubleArray70, 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.25d + "'", double10 == 0.25d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 37.0d + "'", double75 == 37.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 37.0d + "'", double79 == 37.0d);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray10 = new double[] { 0L, (byte) 1, 6140.666666666667d, 544.5d, (byte) 100 };
        double double11 = secondMoment1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        secondMoment12.clear();
        secondMoment12.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        boolean boolean22 = secondMoment1.equals((java.lang.Object) secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.increment((double) (short) -1);
        long long31 = secondMoment25.getN();
        double double32 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        secondMoment25.increment(2.880385675555556E7d);
        long long36 = secondMoment25.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        secondMoment37.increment((double) (short) -1);
        secondMoment37.clear();
        secondMoment37.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance46 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment47.increment(1.0d);
        double[] doubleArray53 = new double[] { (-1L), 0, 10L };
        secondMoment47.incrementAll(doubleArray53, 0, 0);
        variance46.incrementAll(doubleArray53);
        long long58 = variance46.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double[] doubleArray74 = new double[] { 10, (byte) 100 };
        double double75 = secondMoment62.evaluate(doubleArray74);
        double double76 = secondMoment59.evaluate(doubleArray74);
        variance46.incrementAll(doubleArray74);
        secondMoment25.incrementAll(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = variance23.evaluate(doubleArray74, (int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0, 6140.666666666667, 544.5, 100.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.880385675555556E7d + "'", double11 == 2.880385675555556E7d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 544.5d + "'", double32 == 544.5d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 4050.0d + "'", double76 == 4050.0d);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        long long11 = variance9.getN();
        boolean boolean12 = variance9.isBiasCorrected();
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        secondMoment14.increment((double) (short) -1);
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double22 = secondMoment14.getResult();
        boolean boolean23 = variance9.equals((java.lang.Object) secondMoment14);
        double double24 = variance9.getResult();
        java.lang.Class<?> wildcardClass25 = variance9.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment(1.0d);
        double[] doubleArray8 = new double[] { (-1L), 0, 10L };
        secondMoment2.incrementAll(doubleArray8, 0, 0);
        double[] doubleArray14 = new double[] { 10, (byte) 100 };
        double double15 = secondMoment2.evaluate(doubleArray14);
        double double16 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        long long18 = secondMoment2.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment2);
        variance19.increment(10.0d);
        variance19.increment((double) 4L);
        variance19.increment(6993.1875d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        secondMoment26.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        double[] doubleArray38 = new double[] { (-1L), 0, 10L };
        secondMoment32.incrementAll(doubleArray38, 0, 0);
        double[] doubleArray44 = new double[] { 10, (byte) 100 };
        double double45 = secondMoment32.evaluate(doubleArray44);
        double double46 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment32);
        long long48 = secondMoment32.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment((double) ' ');
        secondMoment49.increment((double) (-1.0f));
        secondMoment49.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment55);
        long long66 = variance65.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double double78 = variance65.evaluate(doubleArray73, (double) (short) -1);
        double double79 = secondMoment49.evaluate(doubleArray73);
        double double80 = secondMoment32.evaluate(doubleArray73);
        secondMoment26.incrementAll(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = variance19.evaluate(doubleArray73, (int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 4050.0d + "'", double45 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4050.0d + "'", double46 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 37.0d + "'", double78 == 37.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 74.0d + "'", double79 == 74.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 74.0d + "'", double80 == 74.0d);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        long long15 = secondMoment1.getN();
        double double16 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        boolean boolean18 = variance17.isBiasCorrected();
        variance17.clear();
        variance17.increment(5.49755813888E11d);
        double[] doubleArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = variance17.evaluate(doubleArray22, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        secondMoment1.increment((double) 10);
        secondMoment1.clear();
        long long11 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        double[] doubleArray19 = new double[] { (-1L), 0, 10L };
        secondMoment13.incrementAll(doubleArray19, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double46 = secondMoment24.evaluate(doubleArray44);
        double double47 = variance23.evaluate(doubleArray44);
        long long48 = variance23.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        secondMoment49.increment((double) (short) -1);
        secondMoment49.clear();
        secondMoment49.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        double[] doubleArray65 = new double[] { (-1L), 0, 10L };
        secondMoment59.incrementAll(doubleArray65, 0, 0);
        variance58.incrementAll(doubleArray65);
        long long70 = variance58.getN();
        variance58.clear();
        boolean boolean72 = variance58.isBiasCorrected();
        variance58.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double double86 = variance58.evaluate(doubleArray81, (double) '4');
        double double89 = variance23.evaluate(doubleArray81, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = variance12.evaluate(doubleArray81, 9714674.75d, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 24.666666666666668d + "'", double86 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.increment((double) 100L);
        variance2.increment((double) (-1L));
        variance2.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        double[] doubleArray12 = new double[] { (-1L), 0, 10L };
        secondMoment6.incrementAll(doubleArray12, 0, 0);
        double[] doubleArray18 = new double[] { 10, (byte) 100 };
        double double19 = secondMoment6.evaluate(doubleArray18);
        double double20 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        variance21.increment(0.0d);
        boolean boolean24 = variance21.isBiasCorrected();
        boolean boolean25 = variance21.isBiasCorrected();
        variance21.increment(7262.8d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment(1.0d);
        secondMoment28.increment((double) (short) 0);
        double double33 = secondMoment28.getResult();
        double double34 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        secondMoment36.increment((double) (short) 0);
        double double41 = secondMoment36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment42.increment(1.0d);
        double[] doubleArray48 = new double[] { (-1L), 0, 10L };
        secondMoment42.incrementAll(doubleArray48, 0, 0);
        double double52 = secondMoment36.evaluate(doubleArray48);
        double[] doubleArray53 = new double[] {};
        secondMoment36.incrementAll(doubleArray53);
        double double57 = variance35.evaluate(doubleArray53, (int) (byte) 0, 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        secondMoment59.increment((double) (short) 0);
        long long64 = secondMoment59.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment59);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        secondMoment66.increment((double) (short) 0);
        double double71 = secondMoment66.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        secondMoment66.incrementAll(doubleArray89);
        secondMoment59.incrementAll(doubleArray89);
        double double94 = variance35.evaluate(doubleArray89, (double) (byte) 0);
        double double95 = secondMoment28.evaluate(doubleArray89);
        variance21.incrementAll(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment0.evaluate(doubleArray89, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4050.0d + "'", double20 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 74.0d + "'", double52 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2L + "'", long64 == 2L);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.5d + "'", double71 == 0.5d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.5d + "'", double95 == 0.5d);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        secondMoment9.increment((double) (short) -1);
        secondMoment9.clear();
        secondMoment9.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        variance18.incrementAll(doubleArray25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.increment((double) (short) -1);
        secondMoment30.clear();
        secondMoment30.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        double double57 = secondMoment30.evaluate(doubleArray52);
        double double58 = variance18.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment((double) ' ');
        secondMoment59.increment((double) (-1.0f));
        secondMoment59.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance75 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment65);
        long long76 = variance75.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment77 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment77.increment(1.0d);
        double[] doubleArray83 = new double[] { (-1L), 0, 10L };
        secondMoment77.incrementAll(doubleArray83, 0, 0);
        double double88 = variance75.evaluate(doubleArray83, (double) (short) -1);
        double double89 = secondMoment59.evaluate(doubleArray83);
        double double90 = variance18.evaluate(doubleArray83);
        double double91 = variance8.evaluate(doubleArray83);
        variance8.increment(1.2215704987955729E7d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 74.0d + "'", double57 == 74.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 37.0d + "'", double58 == 37.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 37.0d + "'", double88 == 37.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 37.0d + "'", double90 == 37.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 24.666666666666668d + "'", double91 == 24.666666666666668d);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.increment((double) 1.0f);
        variance2.clear();
        variance2.increment((double) 4L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        double[] doubleArray15 = new double[] { (-1L), 0, 10L };
        secondMoment9.incrementAll(doubleArray15, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment9);
        variance19.increment((double) (short) 100);
        variance19.clear();
        variance19.increment(Double.NaN);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.increment((double) (short) -1);
        secondMoment25.clear();
        secondMoment25.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        double[] doubleArray41 = new double[] { (-1L), 0, 10L };
        secondMoment35.incrementAll(doubleArray41, 0, 0);
        variance34.incrementAll(doubleArray41);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        secondMoment46.increment((double) (short) -1);
        secondMoment46.clear();
        secondMoment46.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double double73 = secondMoment46.evaluate(doubleArray68);
        double double74 = variance34.evaluate(doubleArray68);
        double double75 = variance19.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            variance2.incrementAll(doubleArray68, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 74.0d + "'", double73 == 74.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 37.0d + "'", double74 == 37.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 37.0d + "'", double75 == 37.0d);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        boolean boolean6 = variance2.isBiasCorrected();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = variance2.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(3602.0d);
        double double31 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment33);
        secondMoment33.increment((double) (short) -1);
        long long39 = secondMoment33.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment33);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double double52 = variance40.evaluate(doubleArray47, (double) 1L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long55 = variance54.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        secondMoment56.increment((double) (short) 0);
        double double61 = secondMoment56.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        double double72 = secondMoment56.evaluate(doubleArray68);
        double double74 = variance54.evaluate(doubleArray68, (double) 4L);
        double double75 = variance40.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray68, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9725402.75d + "'", double31 == 9725402.75d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 24.666666666666668d + "'", double52 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5d + "'", double61 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 37.0d + "'", double74 == 37.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 24.666666666666668d + "'", double75 == 24.666666666666668d);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double[] doubleArray10 = new double[] { 0L, (byte) 1, 6140.666666666667d, 544.5d, (byte) 100 };
        double double11 = secondMoment1.evaluate(doubleArray10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        secondMoment12.increment((double) (short) -1);
        secondMoment12.clear();
        secondMoment12.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        boolean boolean22 = secondMoment1.equals((java.lang.Object) secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        secondMoment12.increment(8212.857142857143d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0, 6140.666666666667, 544.5, 100.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.880385675555556E7d + "'", double11 == 2.880385675555556E7d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        long long11 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment(10.0d);
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        secondMoment1.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        long long7 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double10 = variance9.getResult();
        double double11 = variance9.getResult();
        boolean boolean12 = variance9.isBiasCorrected();
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment((double) ' ');
        secondMoment14.increment((double) (-1.0f));
        secondMoment14.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        long long31 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        double[] doubleArray38 = new double[] { (-1L), 0, 10L };
        secondMoment32.incrementAll(doubleArray38, 0, 0);
        double double43 = variance30.evaluate(doubleArray38, (double) (short) -1);
        double double44 = secondMoment14.evaluate(doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        double double46 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment14);
        variance47.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance59 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        double double60 = variance59.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        secondMoment62.increment((double) (short) 0);
        long long67 = secondMoment62.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance68 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment62);
        long long69 = variance68.getN();
        variance68.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance72 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long73 = variance72.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        secondMoment74.increment((double) (short) 0);
        double double79 = secondMoment74.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment80 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment80.increment(1.0d);
        double[] doubleArray86 = new double[] { (-1L), 0, 10L };
        secondMoment80.incrementAll(doubleArray86, 0, 0);
        double double90 = secondMoment74.evaluate(doubleArray86);
        variance72.incrementAll(doubleArray86);
        double double93 = variance68.evaluate(doubleArray86, (double) (short) -1);
        double double94 = variance59.evaluate(doubleArray86);
        double double95 = variance47.evaluate(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance9.evaluate(doubleArray86, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 544.5d + "'", double10 == 544.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 544.5d + "'", double11 == 544.5d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 37.0d + "'", double43 == 37.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 74.0d + "'", double44 == 74.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 74.0d + "'", double46 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 2L + "'", long69 == 2L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 74.0d + "'", double90 == 74.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 24.666666666666668d + "'", double93 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 37.0d + "'", double94 == 37.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 37.0d + "'", double95 == 37.0d);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        secondMoment19.increment((double) (short) -1);
        long long25 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
        double double28 = secondMoment19.getResult();
        secondMoment19.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment(1.0d);
        double[] doubleArray36 = new double[] { (-1L), 0, 10L };
        secondMoment30.incrementAll(doubleArray36, 0, 0);
        double[] doubleArray42 = new double[] { 10, (byte) 100 };
        double double43 = secondMoment30.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment(1.0d);
        secondMoment45.increment((double) (short) 0);
        double double50 = secondMoment45.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment51.increment(1.0d);
        double[] doubleArray57 = new double[] { (-1L), 0, 10L };
        secondMoment51.incrementAll(doubleArray57, 0, 0);
        double double61 = secondMoment45.evaluate(doubleArray57);
        double[] doubleArray62 = new double[] {};
        secondMoment45.incrementAll(doubleArray62);
        double double66 = variance44.evaluate(doubleArray62, (int) (byte) 0, 0);
        double double67 = secondMoment30.evaluate(doubleArray62);
        secondMoment19.incrementAll(doubleArray62);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment((double) ' ');
        double double73 = secondMoment70.getResult();
        double double74 = secondMoment70.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double[] doubleArray87 = new double[] { 10, (byte) 100 };
        double double88 = secondMoment75.evaluate(doubleArray87);
        double double89 = secondMoment70.evaluate(doubleArray87);
        double double90 = secondMoment19.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = secondMoment0.evaluate(doubleArray87, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 544.5d + "'", double28 == 544.5d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4050.0d + "'", double43 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5d + "'", double50 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 74.0d + "'", double61 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4050.0d + "'", double88 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4050.0d + "'", double89 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 4050.0d + "'", double90 == 4050.0d);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        secondMoment10.increment((double) (short) 0);
        boolean boolean15 = secondMoment1.equals((java.lang.Object) secondMoment10);
        secondMoment1.clear();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        secondMoment19.increment((double) (short) 0);
        long long24 = secondMoment19.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        secondMoment26.increment((double) (short) -1);
        secondMoment26.clear();
        secondMoment26.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment35.increment(1.0d);
        secondMoment35.increment((double) (short) 0);
        boolean boolean40 = secondMoment26.equals((java.lang.Object) secondMoment35);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double[] doubleArray56 = new double[] { 10, (byte) 100 };
        double double57 = secondMoment44.evaluate(doubleArray56);
        double double58 = secondMoment41.evaluate(doubleArray56);
        secondMoment26.incrementAll(doubleArray56);
        secondMoment19.incrementAll(doubleArray56, (int) (short) 0, 0);
        double double63 = secondMoment1.evaluate(doubleArray56);
        org.apache.commons.math.stat.descriptive.moment.Variance variance64 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long65 = variance64.getN();
        variance64.increment(5994.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 4050.0d + "'", double57 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 4050.0d + "'", double58 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) (short) 0);
        double double22 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        secondMoment23.increment((double) (short) 0);
        double double28 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment29.increment(1.0d);
        double[] doubleArray35 = new double[] { (-1L), 0, 10L };
        secondMoment29.incrementAll(doubleArray35, 0, 0);
        double double39 = secondMoment23.evaluate(doubleArray35);
        double[] doubleArray40 = new double[] {};
        secondMoment23.incrementAll(doubleArray40);
        secondMoment17.incrementAll(doubleArray40);
        secondMoment17.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double[] doubleArray58 = new double[] { 10, (byte) 100 };
        double double59 = secondMoment46.evaluate(doubleArray58);
        double double60 = variance45.evaluate(doubleArray58);
        double double61 = secondMoment12.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        double[] doubleArray68 = new double[] { (-1L), 0, 10L };
        secondMoment62.incrementAll(doubleArray68, 0, 0);
        long long72 = secondMoment62.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        double[] doubleArray79 = new double[] { (-1L), 0, 10L };
        secondMoment73.incrementAll(doubleArray79, 0, 0);
        secondMoment62.incrementAll(doubleArray79, 0, (int) (short) 1);
        double double86 = secondMoment12.evaluate(doubleArray79);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment87 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment87.increment(1.0d);
        double[] doubleArray93 = new double[] { (-1L), 0, 10L };
        secondMoment87.incrementAll(doubleArray93, 0, 0);
        secondMoment12.incrementAll(doubleArray93);
        secondMoment1.incrementAll(doubleArray93);
        long long99 = secondMoment1.getN();
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5d + "'", double28 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 74.0d + "'", double39 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 4050.0d + "'", double59 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4050.0d + "'", double60 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 4050.0d + "'", double61 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 74.0d + "'", double86 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 4L + "'", long99 == 4L);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long1 = secondMoment0.getN();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        secondMoment3.increment((double) (short) 0);
        long long8 = secondMoment3.getN();
        double double9 = secondMoment3.getResult();
        long long10 = secondMoment3.getN();
        double double11 = secondMoment3.getResult();
        secondMoment3.increment(10.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double[] doubleArray26 = new double[] { 10, (byte) 100 };
        double double27 = secondMoment14.evaluate(doubleArray26);
        secondMoment3.incrementAll(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = secondMoment0.evaluate(doubleArray26, (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.5d + "'", double9 == 0.5d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 4050.0d + "'", double27 == 4050.0d);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        variance18.clear();
        long long20 = variance18.getN();
        long long21 = variance18.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment16);
        secondMoment16.increment((double) (short) -1);
        secondMoment16.clear();
        secondMoment16.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment16);
        boolean boolean26 = secondMoment1.equals((java.lang.Object) secondMoment16);
        secondMoment1.increment(2025.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        secondMoment1.clear();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.clear();
        secondMoment0.increment((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        secondMoment18.increment((double) (short) 0);
        double double23 = secondMoment18.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment24.increment(1.0d);
        double[] doubleArray30 = new double[] { (-1L), 0, 10L };
        secondMoment24.incrementAll(doubleArray30, 0, 0);
        double double34 = secondMoment18.evaluate(doubleArray30);
        double[] doubleArray35 = new double[] {};
        secondMoment18.incrementAll(doubleArray35);
        secondMoment12.incrementAll(doubleArray35);
        secondMoment12.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance40 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment41 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment41.increment(1.0d);
        double[] doubleArray47 = new double[] { (-1L), 0, 10L };
        secondMoment41.incrementAll(doubleArray47, 0, 0);
        double[] doubleArray53 = new double[] { 10, (byte) 100 };
        double double54 = secondMoment41.evaluate(doubleArray53);
        double double55 = variance40.evaluate(doubleArray53);
        double double56 = secondMoment7.evaluate(doubleArray53);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment(1.0d);
        secondMoment57.increment((double) (short) 0);
        double double62 = secondMoment57.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment(1.0d);
        secondMoment63.increment((double) (short) 0);
        double double68 = secondMoment63.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        double double79 = secondMoment63.evaluate(doubleArray75);
        double[] doubleArray80 = new double[] {};
        secondMoment63.incrementAll(doubleArray80);
        secondMoment57.incrementAll(doubleArray80);
        double double83 = secondMoment7.evaluate(doubleArray80);
        double double84 = secondMoment0.evaluate(doubleArray80);
        java.lang.Class<?> wildcardClass85 = doubleArray80.getClass();
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5d + "'", double23 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 74.0d + "'", double34 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4050.0d + "'", double55 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 4050.0d + "'", double56 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.5d + "'", double62 == 0.5d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5d + "'", double68 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 74.0d + "'", double79 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4050.0d + "'", double83 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long8 = variance7.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        double[] doubleArray22 = new double[] { 10, (byte) 100 };
        double double23 = secondMoment10.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment25);
        secondMoment25.increment((double) (short) -1);
        secondMoment25.clear();
        secondMoment25.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance34 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        boolean boolean35 = secondMoment10.equals((java.lang.Object) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        double double54 = secondMoment38.evaluate(doubleArray50);
        double[] doubleArray55 = new double[] {};
        secondMoment38.incrementAll(doubleArray55);
        double double59 = variance37.evaluate(doubleArray55, (int) (byte) 0, 0);
        long long60 = variance37.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        secondMoment61.increment((double) (short) 0);
        double double66 = secondMoment61.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        double double77 = secondMoment61.evaluate(doubleArray73);
        variance37.incrementAll(doubleArray73);
        double double80 = variance36.evaluate(doubleArray73, (double) '#');
        double double81 = variance7.evaluate(doubleArray73);
        double double82 = secondMoment0.evaluate(doubleArray73);
        long long83 = secondMoment0.getN();
        long long84 = secondMoment0.getN();
        secondMoment0.increment(7200964.18888889d);
        double double87 = secondMoment0.getResult();
        double double88 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 74.0d + "'", double54 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.5d + "'", double66 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 74.0d + "'", double77 == 74.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 24.666666666666668d + "'", double80 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 37.0d + "'", double81 == 37.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 74.0d + "'", double82 == 74.0d);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3L + "'", long83 == 3L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 3L + "'", long84 == 3L);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 3.889038153298707E13d + "'", double87 == 3.889038153298707E13d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3.889038153298707E13d + "'", double88 == 3.889038153298707E13d);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment((double) (short) -1);
        long long8 = secondMoment2.getN();
        double double9 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        double double15 = secondMoment12.getResult();
        double double16 = secondMoment12.getResult();
        boolean boolean17 = variance11.equals((java.lang.Object) secondMoment12);
        variance11.increment(4034.0d);
        java.lang.Class<?> wildcardClass20 = variance11.getClass();
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 544.5d + "'", double9 == 544.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) '4');
        double double6 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        secondMoment7.increment((double) (short) 0);
        double double12 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment13.increment(1.0d);
        secondMoment13.increment((double) (short) 0);
        double double18 = secondMoment13.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment19.increment(1.0d);
        double[] doubleArray25 = new double[] { (-1L), 0, 10L };
        secondMoment19.incrementAll(doubleArray25, 0, 0);
        double double29 = secondMoment13.evaluate(doubleArray25);
        double[] doubleArray30 = new double[] {};
        secondMoment13.incrementAll(doubleArray30);
        secondMoment7.incrementAll(doubleArray30);
        secondMoment7.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment(1.0d);
        double[] doubleArray42 = new double[] { (-1L), 0, 10L };
        secondMoment36.incrementAll(doubleArray42, 0, 0);
        double[] doubleArray48 = new double[] { 10, (byte) 100 };
        double double49 = secondMoment36.evaluate(doubleArray48);
        double double50 = variance35.evaluate(doubleArray48);
        double double51 = secondMoment0.evaluate(doubleArray48);
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long54 = variance53.getN();
        double double55 = variance53.getResult();
        variance53.increment(7200964.18888889d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double[] doubleArray73 = new double[] { 10, (byte) 100 };
        double double74 = secondMoment61.evaluate(doubleArray73);
        double double75 = secondMoment61.getResult();
        secondMoment61.increment((double) (short) -1);
        double[] doubleArray79 = new double[] { (short) 1 };
        secondMoment61.incrementAll(doubleArray79);
        secondMoment58.incrementAll(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = variance53.evaluate(doubleArray79, (double) 100, (int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 200.0d + "'", double6 == 200.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5d + "'", double12 == 0.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 74.0d + "'", double29 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 4050.0d + "'", double49 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 4050.0d + "'", double74 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 4050.0d + "'", double75 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0]");
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment15);
        boolean boolean25 = secondMoment0.equals((java.lang.Object) secondMoment15);
        long long26 = secondMoment15.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        double double31 = secondMoment28.getResult();
        double double32 = secondMoment28.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double[] doubleArray45 = new double[] { 10, (byte) 100 };
        double double46 = secondMoment33.evaluate(doubleArray45);
        double double47 = secondMoment28.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        secondMoment55.increment((double) (short) 0);
        double double60 = secondMoment55.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        double[] doubleArray67 = new double[] { (-1L), 0, 10L };
        secondMoment61.incrementAll(doubleArray67, 0, 0);
        double double71 = secondMoment55.evaluate(doubleArray67);
        double[] doubleArray72 = new double[] {};
        secondMoment55.incrementAll(doubleArray72);
        secondMoment49.incrementAll(doubleArray72);
        secondMoment49.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance77 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double[] doubleArray90 = new double[] { 10, (byte) 100 };
        double double91 = secondMoment78.evaluate(doubleArray90);
        double double92 = variance77.evaluate(doubleArray90);
        double double93 = variance48.evaluate(doubleArray90);
        double double94 = secondMoment28.evaluate(doubleArray90);
        boolean boolean95 = secondMoment15.equals((java.lang.Object) secondMoment28);
        secondMoment15.increment(11282.0d);
        long long98 = secondMoment15.getN();
        double double99 = secondMoment15.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4050.0d + "'", double46 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 4050.0d + "'", double47 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5d + "'", double60 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 4050.0d + "'", double91 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 4050.0d + "'", double92 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 4050.0d + "'", double94 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 2L + "'", long98 == 2L);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 6.3641762E7d + "'", double99 == 6.3641762E7d);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        long long11 = variance9.getN();
        java.lang.Class<?> wildcardClass12 = variance9.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        long long16 = secondMoment1.getN();
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        long long19 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        double double35 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        long long37 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        secondMoment38.increment((double) (-1.0f));
        secondMoment38.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        double[] doubleArray50 = new double[] { (-1L), 0, 10L };
        secondMoment44.incrementAll(doubleArray50, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance54 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long55 = variance54.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double67 = variance54.evaluate(doubleArray62, (double) (short) -1);
        double double68 = secondMoment38.evaluate(doubleArray62);
        double double69 = secondMoment21.evaluate(doubleArray62);
        secondMoment1.incrementAll(doubleArray62);
        long long71 = secondMoment1.getN();
        java.lang.Class<?> wildcardClass72 = secondMoment1.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 37.0d + "'", double67 == 37.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 74.0d + "'", double68 == 74.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 74.0d + "'", double69 == 74.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 5L + "'", long71 == 5L);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        long long6 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        secondMoment8.incrementAll(doubleArray31);
        secondMoment8.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double[] doubleArray49 = new double[] { 10, (byte) 100 };
        double double50 = secondMoment37.evaluate(doubleArray49);
        double double51 = variance36.evaluate(doubleArray49);
        long long52 = variance36.getN();
        double double53 = variance36.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment(1.0d);
        double[] doubleArray60 = new double[] { (-1L), 0, 10L };
        secondMoment54.incrementAll(doubleArray60, 0, 0);
        double[] doubleArray66 = new double[] { 10, (byte) 100 };
        double double67 = secondMoment54.evaluate(doubleArray66);
        double double68 = secondMoment54.getResult();
        secondMoment54.increment((double) (short) -1);
        double[] doubleArray72 = new double[] { (short) 1 };
        secondMoment54.incrementAll(doubleArray72);
        double double74 = variance36.evaluate(doubleArray72);
        double double77 = secondMoment1.evaluate(doubleArray72, (int) (short) 1, 0);
        secondMoment1.increment((double) 10);
        double double80 = secondMoment1.getResult();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 4050.0d + "'", double50 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4050.0d + "'", double68 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 60.666666666666664d + "'", double80 == 60.666666666666664d);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        secondMoment1.increment((double) (short) -1);
        secondMoment1.clear();
        secondMoment1.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment((double) ' ');
        secondMoment12.increment((double) (-1.0f));
        secondMoment12.clear();
        double double18 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        double[] doubleArray27 = new double[] { (-1L), 0, 10L };
        secondMoment21.incrementAll(doubleArray27, 0, 0);
        double[] doubleArray33 = new double[] { 10, (byte) 100 };
        double double34 = secondMoment21.evaluate(doubleArray33);
        double double35 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance36 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment21);
        long long37 = secondMoment21.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment21);
        variance38.increment(10.0d);
        java.lang.Class<?> wildcardClass41 = variance38.getClass();
        boolean boolean42 = secondMoment12.equals((java.lang.Object) variance38);
        org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long45 = variance44.getN();
        double double46 = variance44.getResult();
        variance44.increment((double) (short) 100);
        boolean boolean49 = variance44.isBiasCorrected();
        double double50 = variance44.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double[] doubleArray64 = new double[] { 10, (byte) 100 };
        double double65 = secondMoment52.evaluate(doubleArray64);
        double double66 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment52);
        secondMoment52.increment(24.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment70 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment70.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment73 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment73.increment(1.0d);
        secondMoment73.increment((double) (short) 0);
        double double78 = secondMoment73.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment79 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment79.increment(1.0d);
        double[] doubleArray85 = new double[] { (-1L), 0, 10L };
        secondMoment79.incrementAll(doubleArray85, 0, 0);
        double double89 = secondMoment73.evaluate(doubleArray85);
        double[] doubleArray90 = new double[] {};
        secondMoment73.incrementAll(doubleArray90);
        double double92 = secondMoment70.evaluate(doubleArray90);
        secondMoment52.incrementAll(doubleArray90);
        double double95 = variance44.evaluate(doubleArray90, 40.5d);
        double double96 = secondMoment12.evaluate(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = secondMoment1.evaluate(doubleArray90, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4050.0d + "'", double34 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 4050.0d + "'", double35 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5d + "'", double78 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 74.0d + "'", double89 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        variance9.increment(200.0d);
        long long13 = variance9.getN();
        variance9.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double[] doubleArray27 = new double[] { 10, (byte) 100 };
        double double28 = secondMoment15.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = variance9.evaluate(doubleArray27, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4050.0d + "'", double28 == 4050.0d);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long10 = variance9.getN();
        long long11 = variance9.getN();
        variance9.increment(272.25d);
        boolean boolean14 = variance9.isBiasCorrected();
        variance9.increment(0.6666666666666666d);
        java.lang.Class<?> wildcardClass17 = variance9.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        long long11 = variance10.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double23 = variance10.evaluate(doubleArray18, (double) (short) -1);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        double[] doubleArray37 = new double[] { 10, (byte) 100 };
        double double38 = secondMoment25.evaluate(doubleArray37);
        long long39 = secondMoment25.getN();
        secondMoment25.clear();
        double double41 = secondMoment25.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        secondMoment49.increment((double) (short) 0);
        double double54 = secondMoment49.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        double[] doubleArray61 = new double[] { (-1L), 0, 10L };
        secondMoment55.incrementAll(doubleArray61, 0, 0);
        double double65 = secondMoment49.evaluate(doubleArray61);
        double[] doubleArray66 = new double[] {};
        secondMoment49.incrementAll(doubleArray66);
        secondMoment43.incrementAll(doubleArray66);
        secondMoment43.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance71 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        double[] doubleArray78 = new double[] { (-1L), 0, 10L };
        secondMoment72.incrementAll(doubleArray78, 0, 0);
        double[] doubleArray84 = new double[] { 10, (byte) 100 };
        double double85 = secondMoment72.evaluate(doubleArray84);
        double double86 = variance71.evaluate(doubleArray84);
        double double87 = secondMoment25.evaluate(doubleArray84);
        boolean boolean88 = variance10.equals((java.lang.Object) secondMoment25);
        variance10.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37.0d + "'", double23 == 37.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4050.0d + "'", double38 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5d + "'", double54 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 74.0d + "'", double65 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4050.0d + "'", double85 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4050.0d + "'", double86 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 4050.0d + "'", double87 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        secondMoment1.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double double9 = secondMoment1.getResult();
        java.lang.Class<?> wildcardClass10 = secondMoment1.getClass();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3602.0d + "'", double9 == 3602.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment4.increment(1.0d);
        secondMoment4.increment((double) (short) 0);
        double double9 = secondMoment4.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        double double20 = secondMoment4.evaluate(doubleArray16);
        double[] doubleArray21 = new double[] {};
        secondMoment4.incrementAll(doubleArray21);
        double double23 = secondMoment1.evaluate(doubleArray21);
        secondMoment1.increment((double) 3L);
        secondMoment1.increment(24.666666666666668d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance28.setBiasCorrected(true);
        double[] doubleArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double35 = variance28.evaluate(doubleArray31, (double) '#', (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.5d + "'", double9 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 74.0d + "'", double20 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long19 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        java.lang.Class<?> wildcardClass23 = variance22.getClass();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        variance1.increment((double) (short) 100);
        variance1.increment((double) 3L);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment9.increment(1.0d);
        secondMoment9.increment((double) (short) 0);
        double double14 = secondMoment9.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment(1.0d);
        double[] doubleArray21 = new double[] { (-1L), 0, 10L };
        secondMoment15.incrementAll(doubleArray21, 0, 0);
        double double25 = secondMoment9.evaluate(doubleArray21);
        double[] doubleArray26 = new double[] {};
        secondMoment9.incrementAll(doubleArray26);
        variance1.incrementAll(doubleArray26);
        variance1.clear();
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        double double41 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        boolean boolean43 = secondMoment32.equals((java.lang.Object) variance42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance47 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        secondMoment44.increment((double) (short) -1);
        secondMoment44.clear();
        secondMoment44.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance53 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment44);
        long long54 = variance53.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment55.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        secondMoment58.increment((double) (short) 0);
        double double63 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment64 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment64.increment(1.0d);
        double[] doubleArray70 = new double[] { (-1L), 0, 10L };
        secondMoment64.incrementAll(doubleArray70, 0, 0);
        double double74 = secondMoment58.evaluate(doubleArray70);
        double[] doubleArray75 = new double[] {};
        secondMoment58.incrementAll(doubleArray75);
        double double77 = secondMoment55.evaluate(doubleArray75);
        double double78 = variance53.evaluate(doubleArray75);
        double double79 = secondMoment32.evaluate(doubleArray75);
        double double80 = variance1.evaluate(doubleArray75);
        variance1.clear();
        long long82 = variance1.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 74.0d + "'", double25 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5d + "'", double63 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 74.0d + "'", double74 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        secondMoment0.increment((double) (short) 0);
        double double5 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) (short) 0);
        double double11 = secondMoment6.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        double[] doubleArray18 = new double[] { (-1L), 0, 10L };
        secondMoment12.incrementAll(doubleArray18, 0, 0);
        double double22 = secondMoment6.evaluate(doubleArray18);
        double[] doubleArray23 = new double[] {};
        secondMoment6.incrementAll(doubleArray23);
        secondMoment0.incrementAll(doubleArray23);
        secondMoment0.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment(24.666666666666668d);
        long long31 = secondMoment0.getN();
        long long32 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5d + "'", double5 == 0.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5d + "'", double11 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 74.0d + "'", double22 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4L + "'", long31 == 4L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4L + "'", long32 == 4L);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double5 = variance4.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment(1.0d);
        secondMoment6.increment((double) 10L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        secondMoment11.increment((double) (short) 0);
        double double16 = secondMoment11.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment17.increment(1.0d);
        secondMoment17.increment((double) (short) 0);
        double double22 = secondMoment17.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double double33 = secondMoment17.evaluate(doubleArray29);
        double[] doubleArray34 = new double[] {};
        secondMoment17.incrementAll(doubleArray34);
        secondMoment11.incrementAll(doubleArray34);
        secondMoment11.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double[] doubleArray52 = new double[] { 10, (byte) 100 };
        double double53 = secondMoment40.evaluate(doubleArray52);
        double double54 = variance39.evaluate(doubleArray52);
        double double55 = secondMoment6.evaluate(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = variance4.evaluate(doubleArray52, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 74.0d + "'", double33 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 4050.0d + "'", double55 == 4050.0d);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        long long21 = variance9.getN();
        variance9.clear();
        boolean boolean23 = variance9.isBiasCorrected();
        variance9.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment26 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment26.increment((double) ' ');
        secondMoment26.increment((double) '4');
        long long31 = secondMoment26.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment26);
        double double33 = variance32.getResult();
        variance32.clear();
        variance32.clear();
        variance32.increment((double) (-1.0f));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment((double) ' ');
        double double41 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance42 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        variance42.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment45.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment45);
        secondMoment45.increment((double) '4');
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double[] doubleArray64 = new double[] { 10, (byte) 100 };
        double double65 = secondMoment52.evaluate(doubleArray64);
        double double66 = secondMoment52.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) (short) 0);
        double double73 = secondMoment68.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment74 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment74.increment(1.0d);
        double[] doubleArray80 = new double[] { (-1L), 0, 10L };
        secondMoment74.incrementAll(doubleArray80, 0, 0);
        double double84 = secondMoment68.evaluate(doubleArray80);
        double[] doubleArray85 = new double[] {};
        secondMoment68.incrementAll(doubleArray85);
        variance67.incrementAll(doubleArray85);
        double double88 = secondMoment45.evaluate(doubleArray85);
        double double89 = variance42.evaluate(doubleArray85);
        double double90 = variance32.evaluate(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            variance9.incrementAll(doubleArray85, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 200.0d + "'", double33 == 200.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5d + "'", double73 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 74.0d + "'", double84 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 200.0d + "'", double88 == 200.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long2 = variance1.getN();
        double double3 = variance1.getResult();
        double double4 = variance1.getResult();
        double double5 = variance1.getResult();
        double double6 = variance1.getResult();
        java.lang.Class<?> wildcardClass7 = variance1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance10.evaluate(doubleArray31);
        long long35 = variance10.getN();
        double double36 = variance10.getResult();
        boolean boolean37 = variance10.isBiasCorrected();
        variance10.increment(0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        secondMoment0.increment((double) (-1.0f));
        double double5 = secondMoment0.getResult();
        secondMoment0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment((double) ' ');
        double double10 = secondMoment7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        long long12 = variance11.getN();
        variance11.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment15.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        secondMoment15.increment((double) (short) -1);
        secondMoment15.clear();
        secondMoment15.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment15);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        double[] doubleArray31 = new double[] { (-1L), 0, 10L };
        secondMoment25.incrementAll(doubleArray31, 0, 0);
        variance24.incrementAll(doubleArray31);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment36 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment36.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance39 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        secondMoment36.increment((double) (short) -1);
        secondMoment36.clear();
        secondMoment36.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance45 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment36);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        secondMoment46.increment((double) (short) 0);
        double double51 = secondMoment46.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment52.increment(1.0d);
        double[] doubleArray58 = new double[] { (-1L), 0, 10L };
        secondMoment52.incrementAll(doubleArray58, 0, 0);
        double double62 = secondMoment46.evaluate(doubleArray58);
        double double63 = secondMoment36.evaluate(doubleArray58);
        double double64 = variance24.evaluate(doubleArray58);
        variance11.incrementAll(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = secondMoment0.evaluate(doubleArray58, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 544.5d + "'", double5 == 544.5d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.5d + "'", double51 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 74.0d + "'", double62 == 74.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 74.0d + "'", double63 == 74.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 37.0d + "'", double64 == 37.0d);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment10.increment(1.0d);
        double[] doubleArray16 = new double[] { (-1L), 0, 10L };
        secondMoment10.incrementAll(doubleArray16, 0, 0);
        variance9.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment((double) (short) -1);
        secondMoment21.clear();
        secondMoment21.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment31.increment(1.0d);
        secondMoment31.increment((double) (short) 0);
        double double36 = secondMoment31.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        double[] doubleArray43 = new double[] { (-1L), 0, 10L };
        secondMoment37.incrementAll(doubleArray43, 0, 0);
        double double47 = secondMoment31.evaluate(doubleArray43);
        double double48 = secondMoment21.evaluate(doubleArray43);
        double double49 = variance9.evaluate(doubleArray43);
        double[] doubleArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double51 = variance9.evaluate(doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.5d + "'", double36 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 74.0d + "'", double47 == 74.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 37.0d + "'", double49 == 37.0d);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance5.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        long long13 = secondMoment8.getN();
        double double14 = secondMoment8.getResult();
        double double15 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment16.increment(1.0d);
        double[] doubleArray22 = new double[] { (-1L), 0, 10L };
        secondMoment16.incrementAll(doubleArray22, 0, 0);
        double[] doubleArray28 = new double[] { 10, (byte) 100 };
        double double29 = secondMoment16.evaluate(doubleArray28);
        long long30 = secondMoment16.getN();
        double double31 = secondMoment16.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment32);
        secondMoment32.increment((double) (short) -1);
        secondMoment32.clear();
        double double39 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        secondMoment40.increment((double) (short) 0);
        double double45 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        double double56 = secondMoment40.evaluate(doubleArray52);
        secondMoment32.incrementAll(doubleArray52, 0, (int) (short) 0);
        double double60 = secondMoment16.evaluate(doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment61.increment(1.0d);
        secondMoment61.increment((double) (short) 0);
        long long66 = secondMoment61.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment67 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment67.increment(1.0d);
        double[] doubleArray73 = new double[] { (-1L), 0, 10L };
        secondMoment67.incrementAll(doubleArray73, 0, 0);
        long long77 = secondMoment67.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        secondMoment67.incrementAll(doubleArray84, 0, (int) (short) 1);
        secondMoment61.incrementAll(doubleArray84, (int) (byte) 0, (int) (byte) 1);
        secondMoment16.incrementAll(doubleArray84);
        double double95 = secondMoment8.evaluate(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = variance5.evaluate(doubleArray84, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 4050.0d + "'", double29 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2L + "'", long30 == 2L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 4050.0d + "'", double31 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.5d + "'", double45 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 74.0d + "'", double56 == 74.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 74.0d + "'", double60 == 74.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 74.0d + "'", double95 == 74.0d);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment3.increment(1.0d);
        double[] doubleArray9 = new double[] { (-1L), 0, 10L };
        secondMoment3.incrementAll(doubleArray9, 0, 0);
        double[] doubleArray15 = new double[] { 10, (byte) 100 };
        double double16 = secondMoment3.evaluate(doubleArray15);
        double double17 = secondMoment3.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        long long19 = secondMoment3.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment(1.0d);
        double[] doubleArray29 = new double[] { (-1L), 0, 10L };
        secondMoment23.incrementAll(doubleArray29, 0, 0);
        double[] doubleArray35 = new double[] { 10, (byte) 100 };
        double double36 = secondMoment23.evaluate(doubleArray35);
        double double37 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance38 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        long long39 = secondMoment23.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment((double) ' ');
        secondMoment40.increment((double) (-1.0f));
        secondMoment40.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment46.increment(1.0d);
        double[] doubleArray52 = new double[] { (-1L), 0, 10L };
        secondMoment46.incrementAll(doubleArray52, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance56 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment46);
        long long57 = variance56.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment(1.0d);
        double[] doubleArray64 = new double[] { (-1L), 0, 10L };
        secondMoment58.incrementAll(doubleArray64, 0, 0);
        double double69 = variance56.evaluate(doubleArray64, (double) (short) -1);
        double double70 = secondMoment40.evaluate(doubleArray64);
        double double71 = secondMoment23.evaluate(doubleArray64);
        double double72 = secondMoment3.evaluate(doubleArray64);
        double double74 = variance0.evaluate(doubleArray64, (double) ' ');
        variance0.setBiasCorrected(false);
        long long77 = variance0.getN();
        variance0.clear();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4050.0d + "'", double16 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4050.0d + "'", double36 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4050.0d + "'", double37 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 37.0d + "'", double69 == 37.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 74.0d + "'", double70 == 74.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 74.0d + "'", double71 == 74.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 74.0d + "'", double72 == 74.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 37.0d + "'", double74 == 37.0d);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        secondMoment1.increment((double) (short) 0);
        double double6 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment7.increment(1.0d);
        double[] doubleArray13 = new double[] { (-1L), 0, 10L };
        secondMoment7.incrementAll(doubleArray13, 0, 0);
        double double17 = secondMoment1.evaluate(doubleArray13);
        long long18 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment1);
        double double20 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance21.increment((double) 10.0f);
        double double24 = variance21.getResult();
        double double25 = variance21.getResult();
        boolean boolean26 = variance21.isBiasCorrected();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 74.0d + "'", double17 == 74.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 74.0d + "'", double20 == 74.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 24.666666666666668d + "'", double24 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 24.666666666666668d + "'", double25 == 24.666666666666668d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        double double4 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment21.increment(1.0d);
        secondMoment21.increment((double) (short) 0);
        double double26 = secondMoment21.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        secondMoment21.incrementAll(doubleArray44);
        secondMoment21.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance49 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double[] doubleArray62 = new double[] { 10, (byte) 100 };
        double double63 = secondMoment50.evaluate(doubleArray62);
        double double64 = variance49.evaluate(doubleArray62);
        double double65 = variance20.evaluate(doubleArray62);
        double double66 = secondMoment0.evaluate(doubleArray62);
        double double67 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        secondMoment68.increment((double) 10L);
        boolean boolean73 = secondMoment0.equals((java.lang.Object) secondMoment68);
        long long74 = secondMoment68.getN();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 4050.0d + "'", double63 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4050.0d + "'", double64 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 4050.0d + "'", double65 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4050.0d + "'", double66 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 4050.0d + "'", double67 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2L + "'", long74 == 2L);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) ' ');
        double double4 = secondMoment1.getResult();
        secondMoment1.increment((double) (short) 100);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment1);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = secondMoment1.evaluate(doubleArray8, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        double[] doubleArray12 = new double[] { 10, (byte) 100 };
        double double13 = secondMoment0.evaluate(doubleArray12);
        double double14 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) -1);
        double double17 = secondMoment0.getResult();
        double double18 = secondMoment0.getResult();
        secondMoment0.clear();
        double double20 = secondMoment0.getResult();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4050.0d + "'", double13 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 6140.666666666667d + "'", double17 == 6140.666666666667d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6140.666666666667d + "'", double18 == 6140.666666666667d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        double double17 = secondMoment1.getResult();
        secondMoment1.clear();
        double double19 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment20);
        secondMoment20.increment((double) (short) -1);
        secondMoment20.clear();
        double double27 = secondMoment20.getResult();
        double double28 = secondMoment20.getResult();
        secondMoment20.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment30.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment30);
        secondMoment30.increment((double) '4');
        double double36 = secondMoment30.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment37.increment(1.0d);
        secondMoment37.increment((double) (short) 0);
        double double42 = secondMoment37.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment43.increment(1.0d);
        secondMoment43.increment((double) (short) 0);
        double double48 = secondMoment43.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment(1.0d);
        double[] doubleArray55 = new double[] { (-1L), 0, 10L };
        secondMoment49.incrementAll(doubleArray55, 0, 0);
        double double59 = secondMoment43.evaluate(doubleArray55);
        double[] doubleArray60 = new double[] {};
        secondMoment43.incrementAll(doubleArray60);
        secondMoment37.incrementAll(doubleArray60);
        secondMoment37.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance65 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment37);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment66 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment66.increment(1.0d);
        double[] doubleArray72 = new double[] { (-1L), 0, 10L };
        secondMoment66.incrementAll(doubleArray72, 0, 0);
        double[] doubleArray78 = new double[] { 10, (byte) 100 };
        double double79 = secondMoment66.evaluate(doubleArray78);
        double double80 = variance65.evaluate(doubleArray78);
        double double81 = secondMoment30.evaluate(doubleArray78);
        secondMoment20.incrementAll(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = secondMoment1.evaluate(doubleArray78, (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 4050.0d + "'", double17 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 200.0d + "'", double36 == 200.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5d + "'", double42 == 0.5d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5d + "'", double48 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 74.0d + "'", double59 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 4050.0d + "'", double79 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 4050.0d + "'", double80 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 4050.0d + "'", double81 == 4050.0d);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        secondMoment0.increment((double) 'a');
        secondMoment0.increment(0.25d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment12.increment(1.0d);
        secondMoment12.increment((double) (short) 0);
        double double17 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment(1.0d);
        double[] doubleArray24 = new double[] { (-1L), 0, 10L };
        secondMoment18.incrementAll(doubleArray24, 0, 0);
        double double28 = secondMoment12.evaluate(doubleArray24);
        double[] doubleArray29 = new double[] {};
        secondMoment12.incrementAll(doubleArray29);
        double double33 = variance11.evaluate(doubleArray29, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = secondMoment0.evaluate(doubleArray29, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5d + "'", double17 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 74.0d + "'", double28 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment18.increment((double) ' ');
        secondMoment18.increment((double) (-1.0f));
        secondMoment18.clear();
        double double24 = secondMoment18.getResult();
        boolean boolean25 = secondMoment1.equals((java.lang.Object) double24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment27.increment(1.0d);
        secondMoment27.increment((double) (short) 0);
        double double32 = secondMoment27.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment33.increment(1.0d);
        double[] doubleArray39 = new double[] { (-1L), 0, 10L };
        secondMoment33.incrementAll(doubleArray39, 0, 0);
        double double43 = secondMoment27.evaluate(doubleArray39);
        double[] doubleArray44 = new double[] {};
        secondMoment27.incrementAll(doubleArray44);
        double double48 = variance26.evaluate(doubleArray44, (int) (byte) 0, 0);
        long long49 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        secondMoment50.increment((double) (short) 0);
        double double55 = secondMoment50.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment56.increment(1.0d);
        double[] doubleArray62 = new double[] { (-1L), 0, 10L };
        secondMoment56.incrementAll(doubleArray62, 0, 0);
        double double66 = secondMoment50.evaluate(doubleArray62);
        variance26.incrementAll(doubleArray62);
        long long68 = variance26.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment72 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment72.increment(1.0d);
        secondMoment72.increment((double) (short) 0);
        double double77 = secondMoment72.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment78 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment78.increment(1.0d);
        double[] doubleArray84 = new double[] { (-1L), 0, 10L };
        secondMoment78.incrementAll(doubleArray84, 0, 0);
        double double88 = secondMoment72.evaluate(doubleArray84);
        double[] doubleArray89 = new double[] {};
        secondMoment72.incrementAll(doubleArray89);
        double double91 = secondMoment69.evaluate(doubleArray89);
        variance26.incrementAll(doubleArray89);
        double double93 = secondMoment1.evaluate(doubleArray89);
        secondMoment1.clear();
        double[] doubleArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = secondMoment1.evaluate(doubleArray95, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 74.0d + "'", double43 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5d + "'", double55 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 74.0d + "'", double66 == 74.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.5d + "'", double77 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4050.0d + "'", double93 == 4050.0d);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment5.increment(1.0d);
        double[] doubleArray11 = new double[] { (-1L), 0, 10L };
        secondMoment5.incrementAll(doubleArray11, 0, 0);
        double[] doubleArray17 = new double[] { 10, (byte) 100 };
        double double18 = secondMoment5.evaluate(doubleArray17);
        double double19 = secondMoment5.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment5);
        long long21 = secondMoment5.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment5);
        double double23 = secondMoment5.getResult();
        secondMoment5.clear();
        secondMoment5.increment(Double.NaN);
        secondMoment5.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance30 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        long long31 = variance30.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment32.increment(1.0d);
        secondMoment32.increment((double) (short) 0);
        double double37 = secondMoment32.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double double48 = secondMoment32.evaluate(doubleArray44);
        variance30.incrementAll(doubleArray44);
        secondMoment5.incrementAll(doubleArray44);
        variance1.incrementAll(doubleArray44);
        long long52 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment58 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment58.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance61 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment58);
        secondMoment58.increment((double) (short) -1);
        long long64 = secondMoment58.getN();
        double double65 = secondMoment58.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment58);
        org.apache.commons.math.stat.descriptive.moment.Variance variance67 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment58);
        long long68 = secondMoment58.getN();
        secondMoment58.increment(482.66666666666663d);
        secondMoment58.increment(5226.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment58);
        boolean boolean74 = variance1.equals((java.lang.Object) variance73);
        java.lang.Class<?> wildcardClass75 = variance1.getClass();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 4050.0d + "'", double18 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4050.0d + "'", double19 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 4050.0d + "'", double23 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5d + "'", double37 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 74.0d + "'", double48 == 74.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2L + "'", long64 == 2L);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 544.5d + "'", double65 == 544.5d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2L + "'", long68 == 2L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        variance8.setBiasCorrected(false);
        variance8.increment(482.66666666666663d);
        variance8.clear();
        double double14 = variance8.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long17 = secondMoment1.getN();
        secondMoment1.increment(80.75d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        secondMoment20.increment((double) (short) 0);
        double double25 = secondMoment20.getResult();
        secondMoment20.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) (short) -1);
        secondMoment28.clear();
        secondMoment28.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        variance37.incrementAll(doubleArray44);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment49 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment49.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance52 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        secondMoment49.increment((double) (short) -1);
        secondMoment49.clear();
        secondMoment49.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment59 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment59.increment(1.0d);
        secondMoment59.increment((double) (short) 0);
        double double64 = secondMoment59.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment65 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment65.increment(1.0d);
        double[] doubleArray71 = new double[] { (-1L), 0, 10L };
        secondMoment65.incrementAll(doubleArray71, 0, 0);
        double double75 = secondMoment59.evaluate(doubleArray71);
        double double76 = secondMoment49.evaluate(doubleArray71);
        double double77 = variance37.evaluate(doubleArray71);
        double double78 = secondMoment20.evaluate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = secondMoment1.evaluate(doubleArray71, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.5d + "'", double64 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 74.0d + "'", double75 == 74.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 74.0d + "'", double76 == 74.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 37.0d + "'", double77 == 37.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 74.0d + "'", double78 == 74.0d);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        secondMoment0.increment((double) (short) -1);
        secondMoment0.clear();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        secondMoment8.increment((double) (short) 0);
        double double13 = secondMoment8.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        double[] doubleArray20 = new double[] { (-1L), 0, 10L };
        secondMoment14.incrementAll(doubleArray20, 0, 0);
        double double24 = secondMoment8.evaluate(doubleArray20);
        secondMoment0.incrementAll(doubleArray20, 0, (int) (short) 0);
        long long28 = secondMoment0.getN();
        secondMoment0.increment((double) 0L);
        secondMoment0.increment((double) 1L);
        double double33 = secondMoment0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 74.0d + "'", double24 == 74.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5d + "'", double33 == 0.5d);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment((double) ' ');
        secondMoment11.increment((double) (-1.0f));
        secondMoment11.clear();
        boolean boolean17 = variance10.equals((java.lang.Object) secondMoment11);
        double double18 = variance10.getResult();
        variance10.increment(3602.0d);
        double double21 = variance10.getResult();
        variance10.increment((double) 5L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment25.increment(1.0d);
        secondMoment25.increment((double) (short) 0);
        secondMoment25.increment(74.0d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment25);
        boolean boolean33 = variance32.isBiasCorrected();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment34.increment((double) ' ');
        secondMoment34.increment((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment40.increment(1.0d);
        double[] doubleArray46 = new double[] { (-1L), 0, 10L };
        secondMoment40.incrementAll(doubleArray46, 0, 0);
        double[] doubleArray52 = new double[] { 10, (byte) 100 };
        double double53 = secondMoment40.evaluate(doubleArray52);
        double double54 = secondMoment40.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance55 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment40);
        long long56 = secondMoment40.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment57 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment57.increment((double) ' ');
        secondMoment57.increment((double) (-1.0f));
        secondMoment57.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment63 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment63.increment(1.0d);
        double[] doubleArray69 = new double[] { (-1L), 0, 10L };
        secondMoment63.incrementAll(doubleArray69, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance73 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment63);
        long long74 = variance73.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment75 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment75.increment(1.0d);
        double[] doubleArray81 = new double[] { (-1L), 0, 10L };
        secondMoment75.incrementAll(doubleArray81, 0, 0);
        double double86 = variance73.evaluate(doubleArray81, (double) (short) -1);
        double double87 = secondMoment57.evaluate(doubleArray81);
        double double88 = secondMoment40.evaluate(doubleArray81);
        secondMoment34.incrementAll(doubleArray81);
        double double92 = variance32.evaluate(doubleArray81, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = variance10.evaluate(doubleArray81, (int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 4050.0d + "'", double54 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 37.0d + "'", double86 == 37.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 74.0d + "'", double87 == 74.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 74.0d + "'", double88 == 74.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment(1.0d);
        double[] doubleArray6 = new double[] { (-1L), 0, 10L };
        secondMoment0.incrementAll(doubleArray6, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment11.increment(1.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment14.increment(1.0d);
        secondMoment14.increment((double) (short) 0);
        double double19 = secondMoment14.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment20.increment(1.0d);
        double[] doubleArray26 = new double[] { (-1L), 0, 10L };
        secondMoment20.incrementAll(doubleArray26, 0, 0);
        double double30 = secondMoment14.evaluate(doubleArray26);
        double[] doubleArray31 = new double[] {};
        secondMoment14.incrementAll(doubleArray31);
        double double33 = secondMoment11.evaluate(doubleArray31);
        double double34 = variance10.evaluate(doubleArray31);
        long long35 = variance10.getN();
        variance10.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double[] doubleArray50 = new double[] { 10, (byte) 100 };
        double double51 = secondMoment38.evaluate(doubleArray50);
        double double52 = secondMoment38.getResult();
        secondMoment38.increment((double) (short) -1);
        double[] doubleArray56 = new double[] { (short) 1 };
        secondMoment38.incrementAll(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            variance10.incrementAll(doubleArray56, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5d + "'", double19 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 74.0d + "'", double30 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4050.0d + "'", double52 == 4050.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance2.clear();
        variance2.setBiasCorrected(true);
        variance2.increment((double) 100L);
        variance2.increment((double) (-1L));
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = variance2.evaluate(doubleArray10, 6.22239225373408E14d, (int) (short) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment(1.0d);
        double[] doubleArray7 = new double[] { (-1L), 0, 10L };
        secondMoment1.incrementAll(doubleArray7, 0, 0);
        double[] doubleArray13 = new double[] { 10, (byte) 100 };
        double double14 = secondMoment1.evaluate(doubleArray13);
        double double15 = secondMoment1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        variance16.increment(0.0d);
        long long19 = variance16.getN();
        variance16.increment((double) (byte) -1);
        variance16.clear();
        boolean boolean23 = variance16.isBiasCorrected();
        double double24 = variance16.getResult();
        variance16.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment28 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment28.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment28);
        secondMoment28.increment((double) '4');
        secondMoment28.increment((double) 100);
        secondMoment28.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance37 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment28);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        double[] doubleArray44 = new double[] { (-1L), 0, 10L };
        secondMoment38.incrementAll(doubleArray44, 0, 0);
        double[] doubleArray50 = new double[] { 10, (byte) 100 };
        double double51 = secondMoment38.evaluate(doubleArray50);
        long long52 = secondMoment38.getN();
        double double53 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment54 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment54.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance57 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment54);
        secondMoment54.increment((double) (short) -1);
        secondMoment54.clear();
        double double61 = secondMoment54.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment62 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment62.increment(1.0d);
        secondMoment62.increment((double) (short) 0);
        double double67 = secondMoment62.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment68 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment68.increment(1.0d);
        double[] doubleArray74 = new double[] { (-1L), 0, 10L };
        secondMoment68.incrementAll(doubleArray74, 0, 0);
        double double78 = secondMoment62.evaluate(doubleArray74);
        secondMoment54.incrementAll(doubleArray74, 0, (int) (short) 0);
        double double82 = secondMoment38.evaluate(doubleArray74);
        secondMoment28.incrementAll(doubleArray74);
        double double84 = variance16.evaluate(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4050.0d + "'", double14 == 4050.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4050.0d + "'", double15 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2025.0d + "'", double24 == 2025.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 4050.0d + "'", double51 == 4050.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 4050.0d + "'", double53 == 4050.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.5d + "'", double67 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 74.0d + "'", double78 == 74.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 74.0d + "'", double82 == 74.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 37.0d + "'", double84 == 37.0d);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) ' ');
        double double3 = secondMoment0.getResult();
        secondMoment0.increment((double) (short) 100);
        long long6 = secondMoment0.getN();
        double double7 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment8.increment(1.0d);
        double[] doubleArray14 = new double[] { (-1L), 0, 10L };
        secondMoment8.incrementAll(doubleArray14, 0, 0);
        double[] doubleArray20 = new double[] { 10, (byte) 100 };
        double double21 = secondMoment8.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment23.increment((double) ' ');
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.increment((double) (short) -1);
        secondMoment23.clear();
        secondMoment23.increment((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance32 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment23);
        boolean boolean33 = secondMoment8.equals((java.lang.Object) secondMoment23);
        double double34 = secondMoment23.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment23);
        secondMoment23.clear();
        secondMoment23.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment38.increment(1.0d);
        secondMoment38.increment((double) (short) 0);
        double double43 = secondMoment38.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment44.increment(1.0d);
        secondMoment44.increment((double) (short) 0);
        double double49 = secondMoment44.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment50.increment(1.0d);
        double[] doubleArray56 = new double[] { (-1L), 0, 10L };
        secondMoment50.incrementAll(doubleArray56, 0, 0);
        double double60 = secondMoment44.evaluate(doubleArray56);
        double[] doubleArray61 = new double[] {};
        secondMoment44.incrementAll(doubleArray61);
        secondMoment38.incrementAll(doubleArray61);
        secondMoment38.increment((double) 2L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance66 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment38);
        secondMoment38.increment(0.5d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment69 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment69.increment(1.0d);
        double[] doubleArray75 = new double[] { (-1L), 0, 10L };
        secondMoment69.incrementAll(doubleArray75, 0, 0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance79 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment69);
        long long80 = variance79.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment81 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment81.increment(1.0d);
        double[] doubleArray87 = new double[] { (-1L), 0, 10L };
        secondMoment81.incrementAll(doubleArray87, 0, 0);
        double double92 = variance79.evaluate(doubleArray87, (double) (short) -1);
        double double95 = secondMoment38.evaluate(doubleArray87, (int) (byte) 1, (int) (byte) 1);
        double double96 = secondMoment23.evaluate(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray87, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2312.0d + "'", double7 == 2312.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4050.0d + "'", double21 == 4050.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5d + "'", double43 == 0.5d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5d + "'", double49 == 0.5d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 74.0d + "'", double60 == 74.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 37.0d + "'", double92 == 37.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 74.0d + "'", double96 == 74.0d);
    }
}


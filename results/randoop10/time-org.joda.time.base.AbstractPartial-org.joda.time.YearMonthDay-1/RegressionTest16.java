import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.DateTime.Property property24 = dateTime23.weekOfWeekyear();
        org.joda.time.DateTime.Property property25 = dateTime23.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.withSecondOfMinute(21);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withSecondOfMinute(26);
        org.joda.time.LocalTime localTime17 = timeOfDay14.toLocalTime();
        java.lang.String str18 = timeOfDay14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = timeOfDay14.getFieldType(1971);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1971");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T14:40:21.547" + "'", str18, "T14:40:21.547");
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        int int11 = localDate7.getWeekyear();
        org.joda.time.LocalDate.Property property12 = localDate7.year();
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDate13.getValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 13");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.DateTime.Property property12 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        boolean boolean22 = dateMidnight19.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property23 = dateMidnight19.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight19.minusWeeks(17);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        int int27 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime13.withMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        boolean boolean31 = dateTimeZone30.isFixed();
        java.lang.String str32 = dateTimeZone30.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(55, 117660000, 2038, (-5599659), 47, 34709682, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -5599659 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+29:00" + "'", str32, "+29:00");
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        java.lang.String str12 = property8.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate.Property property21 = localDate20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        boolean boolean29 = dateMidnight26.isBefore((long) ' ');
        org.joda.time.LocalDate localDate30 = dateMidnight26.toLocalDate();
        org.joda.time.Chronology chronology31 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property45 = localDate44.era();
        int int46 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.LocalDate localDate48 = localDate44.minusWeeks(20);
        org.joda.time.LocalDate localDate50 = localDate44.plusMonths((int) (byte) -1);
        int int51 = localDate50.getDayOfMonth();
        boolean boolean52 = localDate20.equals((java.lang.Object) localDate50);
        int int53 = localDate20.getMonthOfYear();
        java.lang.String str55 = localDate20.toString("2");
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.YearMonthDay yearMonthDay60 = dateMidnight58.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plus((-1L));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfMinute();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        boolean boolean71 = yearMonthDay62.isEqual((org.joda.time.ReadablePartial) localDate70);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getNameKey((long) (-1));
        long long77 = dateTimeZone73.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight78 = localDate70.toDateMidnight(dateTimeZone73);
        long long80 = dateTimeZone73.convertUTCToLocal((long) '4');
        org.joda.time.Interval interval81 = localDate20.toInterval(dateTimeZone73);
        int int82 = property8.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone84);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.plus((-1L));
        org.joda.time.Chronology chronology88 = dateMidnight87.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.secondOfMinute();
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate(chronology88);
        org.joda.time.LocalDate localDate92 = localDate90.withYearOfEra((int) (byte) 10);
        int int93 = localDate90.getYearOfCentury();
        org.joda.time.LocalDate localDate95 = localDate90.plusYears(54);
        org.joda.time.LocalDate localDate96 = localDate20.withFields((org.joda.time.ReadablePartial) localDate95);
        org.joda.time.LocalDate.Property property97 = localDate20.centuryOfEra();
        org.joda.time.LocalDate localDate98 = property97.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 24 + "'", int46 == 24);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2" + "'", str55, "2");
        org.junit.Assert.assertNotNull(date59);
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertNull(str75);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 104400005L + "'", long77 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight78);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 104400052L + "'", long80 == 104400052L);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 22 + "'", int93 == 22);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(localDate98);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate42 = localDate36.withWeekyear(19);
        org.joda.time.LocalTime localTime43 = null;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime48 = localDate36.toDateTime(localTime43, dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.getName(1000L);
        org.joda.time.DateTime dateTime51 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.Interval interval52 = localDate19.toInterval(dateTimeZone45);
        org.joda.time.DateTime dateTime53 = localDate19.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.LocalDate localDate75 = localDate73.withWeekyear(32769);
        int int77 = localDate75.getValue(0);
        int int78 = localDate75.size();
        org.joda.time.LocalDate localDate80 = localDate75.plusYears(327);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+29:00" + "'", str52, "+29:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 32769 + "'", int77 == 32769);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(localDate80);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.centuries();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withChronologyRetainFields(chronology13);
        org.joda.time.LocalDate localDate16 = yearMonthDay15.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.days();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay21.withChronologyRetainFields(chronology27);
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay31.withYear(34624683);
        int int35 = yearMonthDay15.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay31.withFieldAdded(durationFieldType37, (int) (byte) 100);
        org.joda.time.LocalDate localDate40 = yearMonthDay31.toLocalDate();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.withSecondOfMinute(10);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 50, 52, 769]");
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getName((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = new org.joda.time.Interval(1455183562367L, 0L, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+29:00" + "'", str4, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+29:00" + "'", str6, "+29:00");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder5.setTimeOfDay(8, 32770, 2);
        java.util.Calendar.Builder builder17 = builder5.setTimeOfDay((-1), 365, 7, 996);
        java.util.Calendar.Builder builder21 = builder5.setWeekDate(0, 4, 50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder24 = builder21.setWeekDefinition(34825, 33626254);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.set((int) (byte) 0, 2, 2022, 69, 52, 0);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = calendar0.getActualMaximum(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 32772");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61987342079205,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=257,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=52,SECOND=0,MILLISECOND=795,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(localDate54);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        calendar0.set(0, 99, 59);
        int int19 = calendar0.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = calendar0.isSet(34627);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=99,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=59,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        java.lang.String str17 = localDate15.toString();
        int int18 = localDate15.getYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2100-01-01" + "'", str17, "2100-01-01");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2100 + "'", int18 == 2100);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.set((int) '#', (-5599659), 34722164, 34555, 578, 117660000);
        calendar0.set(999, 36, (-30801), 39, (-20055), 117660000);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = calendar0.getGreatestMinimum(996);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 996");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=999,MONTH=36,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=-30801,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=39,MINUTE=-20055,SECOND=117660000,MILLISECOND=951,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        boolean boolean11 = dateTimeField9.isSupported();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.DateTime dateTime26 = dateTime7.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTime.Property property27 = dateTime7.minuteOfDay();
        int int28 = property27.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = property27.setCopy("T09:39:14.712");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:39:14.712\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+29:00" + "'", str22, "+29:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1439 + "'", int28 == 1439);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withYear(11);
        boolean boolean12 = dateMidnight2.isBefore((long) 28);
        org.joda.time.Interval interval13 = dateMidnight2.toInterval();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withCenturyOfEra(13);
        org.joda.time.Chronology chronology16 = dateMidnight2.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        java.util.Locale locale19 = null;
        int int20 = dateTimeField18.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.minus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime10.withField(dateTimeFieldType17, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.monthOfYear();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.minus(readableDuration30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = localDate40.toInterval(dateTimeZone41);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) dateTime31, chronology43);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay24.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType17.getField(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        int int48 = dateTime8.get(dateTimeField46);
        long long51 = dateTimeField46.add((long) (byte) 1, (long) 59);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((-1672531199986L));
        int int54 = dateTimeField46.getMinimumValue((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate56.toDateTime(localTime57, dateTimeZone58);
        org.joda.time.LocalDate localDate61 = localDate56.withYearOfEra(12);
        int[] intArray62 = localDate56.getValues();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) localDate56);
        org.joda.time.LocalDate localDate65 = localDate56.withYearOfCentury(0);
        org.joda.time.LocalDate.Property property66 = localDate56.era();
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDate56, locale67);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 213 + "'", int48 == 213);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 5097600001L + "'", long51 == 5097600001L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2" + "'", str68, "2");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        org.joda.time.ReadableInstant readableInstant9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTimeFormatter8.print(readableInstant9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMinimumValue();
        int int12 = yearMonthDay10.getValue(0);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay10.minusMonths(1200000);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay10.plusDays(10022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay10.withDayOfMonth(213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 213 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay12 = property7.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        int int18 = dateTime17.getSecondOfMinute();
        int int19 = dateTime17.getMonthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime17.withYear(37);
        boolean boolean24 = property7.equals((java.lang.Object) dateTime23);
        int int25 = property7.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T14:41:53.110" + "'", str6, "T14:41:53.110");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property60 = dateTime57.property(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = property60.withMaximumValue();
        boolean boolean62 = property53.equals((java.lang.Object) property60);
        org.joda.time.DateTime dateTime64 = property53.addWrapFieldToCopy(69);
        org.joda.time.DateTime dateTime65 = property53.roundCeilingCopy();
        java.lang.String str66 = property53.getAsShortText();
        org.joda.time.DateTime dateTime67 = property53.withMinimumValue();
        int int68 = property53.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+29:00" + "'", str46, "+29:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 999 + "'", int68 == 999);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        int int13 = calendar12.getFirstDayOfWeek();
        int int14 = calendar12.getWeekYear();
        calendar12.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromCalendarFields(calendar12);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusSeconds((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDate11.compareTo((org.joda.time.ReadablePartial) timeOfDay17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572513169,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=53,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval6.toPeriod(periodType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean23 = interval19.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = interval27.withStart((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = interval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Interval interval42 = interval19.withPeriodAfterStart(readablePeriod41);
        org.joda.time.Interval interval43 = interval19.toInterval();
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        boolean boolean45 = interval6.isAfter((org.joda.time.ReadableInterval) interval43);
        org.joda.time.MutableInterval mutableInterval46 = interval43.toMutableInterval();
        org.joda.time.Chronology chronology47 = interval43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.monthOfYear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime49.minus(readableDuration53);
        org.joda.time.DateTime.Property property55 = dateTime49.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime58 = dateTime49.withField(dateTimeFieldType56, (int) ' ');
        org.joda.time.DateTime dateTime60 = dateTime58.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property61 = dateTime60.era();
        org.joda.time.DateTime dateTime62 = property61.roundFloorCopy();
        boolean boolean63 = interval43.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.withChronology(chronology16);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 11, chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.year();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology26);
        boolean boolean33 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime32.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minus((long) (-1));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DurationField durationField42 = chronology40.seconds();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology40);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime45 = dateTime32.toDateTime(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        java.lang.String str12 = property8.getAsText();
        org.joda.time.YearMonthDay yearMonthDay13 = property8.withMaximumValue();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = property8.setCopy("2", locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = property8.setCopy("T09:39:50.367");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:39:50.367\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(70L);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property3 = localDate1.dayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.Interval interval14 = localDate7.toInterval();
        org.joda.time.LocalDate.Property property15 = localDate7.centuryOfEra();
        int int16 = property15.get();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("T09:37:05.210");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        int int25 = dateTimeField23.getLeapAmount((long) 6);
        int int27 = dateTimeField23.get((long) 575);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 70 + "'", int27 == 70);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minus(readablePeriod6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 9, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minus((long) (-1));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfSecond();
        org.joda.time.DateTime dateTime27 = property25.addWrapFieldToCopy(34736);
        int int28 = property25.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+29:00" + "'", str10, "+29:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay12.withPeriodAdded(readablePeriod13, 11);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.centuries();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay15.withChronologyRetainFields(chronology21);
        int[] intArray25 = chronology5.get((org.joda.time.ReadablePartial) yearMonthDay23, (long) (-391));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        boolean boolean33 = dateMidnight30.isBefore((long) ' ');
        org.joda.time.LocalDate localDate34 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology35 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property49 = localDate48.era();
        int int50 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate48);
        int int51 = localDate48.getDayOfYear();
        int int52 = yearMonthDay23.compareTo((org.joda.time.ReadablePartial) localDate48);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 24 + "'", int50 == 24);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 43 + "'", int51 == 43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        int[] intArray6 = yearMonthDay5.getValues();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.withPeriodAdded(readablePeriod7, 22);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean22 = interval18.isBefore((org.joda.time.ReadableInterval) interval21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval18.toPeriod(periodType23);
        int int26 = period24.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        int int40 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTime.Property property41 = dateTime39.dayOfYear();
        boolean boolean42 = dateMidnight30.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime44 = dateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = localDate52.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField54.getType();
        java.lang.String str56 = dateTimeFieldType55.toString();
        int int57 = dateTime44.get(dateTimeFieldType55);
        boolean boolean58 = yearMonthDay9.isSupported(dateTimeFieldType55);
        int int59 = yearMonthDay9.size();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        java.util.Date date63 = dateMidnight62.toDate();
        org.joda.time.YearMonthDay yearMonthDay64 = dateMidnight62.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plus((-1L));
        org.joda.time.Chronology chronology70 = dateMidnight69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfMinute();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.days();
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay64.withChronologyRetainFields(chronology70);
        org.joda.time.Chronology chronology75 = yearMonthDay74.getChronology();
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone79 = dateMidnight76.getZone();
        org.joda.time.DateMidnight dateMidnight80 = yearMonthDay74.toDateMidnight(dateTimeZone79);
        java.util.Set<java.lang.String> strSet81 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean82 = dateTimeZone79.equals((java.lang.Object) strSet81);
        long long84 = dateTimeZone79.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight87.plus((-1L));
        org.joda.time.Chronology chronology90 = dateMidnight89.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.secondOfMinute();
        org.joda.time.DurationField durationField92 = chronology90.millis();
        boolean boolean93 = dateTimeZone79.equals((java.lang.Object) chronology90);
        long long95 = dateTimeZone79.nextTransition((long) 25260000);
        org.joda.time.DateTime dateTime96 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight97 = new org.joda.time.DateMidnight((-311126400000L), dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight99 = dateMidnight97.plusYears(52);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53 + "'", int40 == 53);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "monthOfYear" + "'", str56, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 14400001L + "'", long84 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 25260000L + "'", long95 == 25260000L);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateMidnight99);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        int int29 = dateTime26.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.DateTime dateTime56 = dateTime37.withFields((org.joda.time.ReadablePartial) localDate55);
        boolean boolean57 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime37);
        long long58 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property59 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime61 = dateTime26.plusMillis(292278993);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.parse("19");
        org.joda.time.LocalDate localDate65 = localDate63.withDayOfMonth(21);
        org.joda.time.Chronology chronology66 = localDate63.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfSecond();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime61, chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.era();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+29:00" + "'", str52, "+29:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(0);
        org.joda.time.DateMidnight dateMidnight7 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate8 = dateTime6.toLocalDate();
        org.joda.time.DateTime.Property property9 = dateTime6.era();
        boolean boolean10 = property9.isLeap();
        org.joda.time.DateTime dateTime11 = property9.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = property9.setCopy(19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology7.getDateTimeMillis(34522, 925, 50, 34773284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 925 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        int int10 = property8.get();
        org.joda.time.DateMidnight dateMidnight12 = property8.addToCopy((long) 48);
        org.joda.time.DateMidnight dateMidnight13 = property8.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight14 = property8.getDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        boolean boolean16 = dateMidnight14.isAfterNow();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(212);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter2.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimeParser15);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 33);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(484);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.withHourOfDay((-7));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 41);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.plus(readableDuration5);
        int int7 = dateTime4.getWeekyear();
        int int8 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime4.minusHours(33435);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property12 = dateTime10.secondOfMinute();
        java.lang.String str14 = dateTime10.toString("38");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117660000 + "'", int11 == 117660000);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "38" + "'", str14, "38");
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder14 = builder12.setLenient(true);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setDate(1999, 34890, 3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(8);
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(39);
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(2810341);
        org.joda.time.LocalDate localDate15 = localDate11.plusWeeks(577);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate11.withYearOfCentury(286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 286 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter40.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime43 = dateTimeFormatter40.parseMutableDateTime("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 104400005L + "'", long34 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+29:00" + "'", str37, "+29:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        int int7 = dateMidnight6.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withCenturyOfEra(2100);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(50);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter5.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 5601);
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property21 = localDate20.weekyear();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate24 = property21.addWrapFieldToCopy((int) (short) 0);
        boolean boolean25 = property8.equals((java.lang.Object) property21);
        java.lang.String str26 = property21.getAsText();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10" + "'", str26, "10");
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("September");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'September' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight.Property property22 = dateMidnight20.dayOfWeek();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean27 = interval23.isBefore((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTime dateTime28 = interval23.getEnd();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean39 = interval31.isAfter((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-1L), dateTimeZone41);
        org.joda.time.Interval interval43 = interval31.withStart((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = interval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration45 = interval23.toDuration();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight16.withDurationAdded((org.joda.time.ReadableDuration) duration45, 24);
        org.joda.time.Interval interval48 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.hours();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.clockhourOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 29, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.DateTime dateTime72 = interval67.getEnd();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone78);
        java.util.Date date80 = dateMidnight79.toDate();
        org.joda.time.DateMidnight.Property property81 = dateMidnight79.dayOfWeek();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableDuration76, (org.joda.time.ReadableInstant) dateMidnight79);
        boolean boolean83 = interval75.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-1L), dateTimeZone85);
        org.joda.time.Interval interval87 = interval75.withStart((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = interval67.overlaps((org.joda.time.ReadableInterval) interval75);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.Interval interval90 = interval75.withPeriodAfterStart(readablePeriod89);
        boolean boolean91 = interval59.isAfter((org.joda.time.ReadableInterval) interval90);
        boolean boolean92 = interval9.contains((org.joda.time.ReadableInterval) interval90);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date65);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(interval87);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) 786, locale3);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.097" + "'", str4, "+00:00:00.097");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.property(dateTimeFieldType10);
        long long12 = property11.remainder();
        boolean boolean13 = property11.isLeap();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight57 = property55.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minus((long) (-1));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfHalfday();
        org.joda.time.Chronology chronology63 = chronology61.withUTC();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.era();
        org.joda.time.DurationField durationField66 = chronology63.millis();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight57.withChronology(chronology63);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54 + "'", int12 == 54);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology30);
        int int37 = localDate36.size();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime39.monthOfYear();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime39.minus(readableDuration43);
        org.joda.time.DateTime.Property property45 = dateTime39.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime48 = dateTime39.withField(dateTimeFieldType46, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.YearMonthDay yearMonthDay53 = dateMidnight51.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property58 = dateTime55.monthOfYear();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.minus(readableDuration59);
        org.joda.time.DateMidnight dateMidnight61 = dateTime60.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Interval interval71 = localDate69.toInterval(dateTimeZone70);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((java.lang.Object) dateTime60, chronology72);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay53.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType46.getField(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField75.getType();
        boolean boolean77 = localDate36.isSupported(dateTimeFieldType76);
        org.joda.time.LocalDate localDate79 = localDate36.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate81 = localDate79.plusYears(26);
        org.joda.time.LocalDate localDate83 = localDate79.withCenturyOfEra(5);
        int int84 = localDate83.getYearOfEra();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 104400005L + "'", long21 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 522 + "'", int84 == 522);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter6.withZoneUTC();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withLocale(locale15);
        int int17 = dateTimeFormatter16.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = dateTimeFormatter16.parseLocalTime("DateTimeField[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2000 + "'", int17 == 2000);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder15 = builder13.setCalendarType("11 Feb 2022 09:36:13 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 11 Feb 2022 09:36:13 GMT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        boolean boolean17 = dateMidnight14.isBefore((long) ' ');
        org.joda.time.LocalDate localDate18 = dateMidnight14.toLocalDate();
        int int19 = property9.getDifference((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight14.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay4.getFieldTypes();
        org.joda.time.DateTime dateTime8 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay4.plusSeconds(779);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.lang.String str16 = yearMonthDay6.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.plusDays((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonthDay6.getFieldTypes();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay6.year();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((int) (byte) -1);
        java.io.Writer writer11 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 11, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.year();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTime dateTime28 = dateTime24.withField(dateTimeFieldType25, 7);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.plus(readableDuration31);
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.minusYears((int) '#');
        boolean boolean37 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime39 = dateTime28.plusHours(252);
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer11, (org.joda.time.ReadableInstant) dateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight2.minusWeeks(292278994);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        int int29 = dateTime28.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime28.withMinuteOfHour(8);
        boolean boolean34 = dateMidnight21.equals((java.lang.Object) 8);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property41 = dateTime38.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime43 = property41.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.dayOfWeek();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableDuration50, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean60 = interval56.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTime dateTime61 = interval56.getEnd();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone67);
        java.util.Date date69 = dateMidnight68.toDate();
        org.joda.time.DateMidnight.Property property70 = dateMidnight68.dayOfWeek();
        org.joda.time.Interval interval71 = new org.joda.time.Interval(readableDuration65, (org.joda.time.ReadableInstant) dateMidnight68);
        boolean boolean72 = interval64.isAfter((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        org.joda.time.Interval interval76 = interval64.withStart((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = interval56.overlaps((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Duration duration78 = interval56.toDuration();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight49.withDurationAdded((org.joda.time.ReadableDuration) duration78, 24);
        org.joda.time.DateTime dateTime82 = dateTime43.withDurationAdded((org.joda.time.ReadableDuration) duration78, 24);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight21.withDurationAdded((org.joda.time.ReadableDuration) duration78, 131);
        org.joda.time.DateTimeZone dateTimeZone85 = dateMidnight21.getZone();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight2.withZoneRetainFields(dateTimeZone85);
        org.joda.time.Interval interval87 = dateMidnight86.toInterval();
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight86.minusMonths(34736);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight89.withYear(34833);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54 + "'", int12 == 54);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(date69);
// flaky:         org.junit.Assert.assertEquals(date69.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval76);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        long long7 = date3.getTime();
        java.lang.String str8 = date3.toLocaleString();
        date3.setHours(34654870);
        date3.setMonth(1022);
        date3.setSeconds(584);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Aug 27 22:09:44 UTC 6007");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-18000000L) + "'", long7 == (-18000000L));
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dec 31, 1969 7:00:00 PM" + "'", str8, "Dec 31, 1969 7:00:00 PM");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusDays((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight2.toYearMonthDay();
        int int8 = yearMonthDay7.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        int int25 = dateTimeField23.get(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        int int36 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate.Property property37 = localDate35.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay6.withChronologyRetainFields(chronology12);
        org.joda.time.Chronology chronology17 = yearMonthDay16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(51, 38488446, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-60557414397977L));
        int int2 = dateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        boolean boolean16 = yearMonthDay7.isEqual((org.joda.time.ReadablePartial) localDate15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (-1));
        long long22 = dateTimeZone18.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight23 = localDate15.toDateMidnight(dateTimeZone18);
        org.joda.time.LocalDate localDate25 = localDate15.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DurationField durationField35 = chronology31.minutes();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((java.lang.Object) localDate15, chronology31);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now(chronology31);
        org.joda.time.DateTimeField dateTimeField38 = chronology31.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) 4, chronology31);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay39.year();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 104400005L + "'", long22 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.DateMidnight.Property property9 = dateMidnight7.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7);
        boolean boolean11 = interval3.isAfter((org.joda.time.ReadableInterval) interval10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval10.withPeriodAfterStart(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Interval interval15 = interval13.withPeriodAfterStart(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.centuries();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(70L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(chronology30);
        org.joda.time.Interval interval34 = interval15.withChronology(chronology30);
        org.joda.time.DurationField durationField35 = chronology30.years();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(1644789600029L, chronology30);
        org.joda.time.DateTimeField dateTimeField37 = chronology30.weekyear();
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DurationField durationField8 = chronology6.months();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(1644572195872L, chronology6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = localDate17.getField(1);
        org.joda.time.LocalDate localDate21 = localDate17.withDayOfYear(2);
        org.joda.time.LocalDate localDate23 = localDate17.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property24 = localDate17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime54 = localDate36.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate56 = localDate36.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getRangeDurationType();
        boolean boolean59 = localDate56.isSupported(durationFieldType58);
        boolean boolean60 = localDate17.isSupported(durationFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay62 = timeOfDay9.withFieldAdded(durationFieldType58, 329);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+29:00" + "'", str51, "+29:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.withHourOfDay(1);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusHours(48);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.withPeriodAdded(readablePeriod23, 11);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        int int28 = localDate17.get(dateTimeFieldType27);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType27.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay32 = timeOfDay16.withField(dateTimeFieldType27, (-5599659));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        int int20 = dateTimeField19.getMinimumValue();
        int int21 = dateMidnight9.get(dateTimeField19);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight9.withMillis((-86400000L));
        org.joda.time.LocalDate localDate24 = dateMidnight9.toLocalDate();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.plusYears(20);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight9.minusMonths(34805967);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury(14);
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone17.getName((long) 0, locale23);
        java.lang.String str25 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime12, dateTimeZone17);
        java.lang.String str28 = dateTimeZone17.getName((-86400000L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        boolean boolean38 = dateTimeZone17.isLocalDateTimeGap(localDateTime37);
        long long40 = dateTimeZone17.convertUTCToLocal(2100365L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertNull(str19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 104400005L + "'", long21 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+29:00" + "'", str24, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+29:00" + "'", str25, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+29:00" + "'", str28, "+29:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 54 + "'", int34 == 54);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 106500365L + "'", long40 == 106500365L);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        long long34 = chronology23.add(10035038L, 1640995199609L, 46);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField36 = chronology23.minutes();
        org.joda.time.Chronology chronology37 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfSecond();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 75485789217052L + "'", long34 == 75485789217052L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        java.util.Date date5 = new java.util.Date(27, 34616473, 2, 122, 293);
        long long6 = date5.getTime();
        date5.setHours(135);
        int int9 = date5.getDate();
        org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 12 15:53:00 UTC 2886633");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 91031175067980000L + "'", long6 == 91031175067980000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = localDate11.getDayOfWeek();
        int int17 = localDate11.getEra();
        org.joda.time.Chronology chronology18 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = localDate11.getField(2);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight21.getZone();
        int int25 = dateMidnight21.getMinuteOfDay();
        boolean boolean26 = localDate11.equals((java.lang.Object) dateMidnight21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate11.withDayOfMonth((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean25 = interval21.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval21.toPeriod(periodType26);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay14.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType29 = period27.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus(readablePeriod33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.plus(readableDuration43);
        int int45 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minus((long) (-1));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minus(readablePeriod51);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay54.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval67.toPeriod(periodType72);
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay60.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.DateTime dateTime76 = dateTime38.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getRangeDurationType();
        int int79 = period73.get(durationFieldType78);
        int int80 = period27.get(durationFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(date65);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withWeekOfWeekyear(21);
        int int9 = dateMidnight6.getYear();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight6.toGregorianCalendar();
        gregorianCalendar10.set(33330872, 1969, 34615813);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 370 + "'", int9 == 370);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(5);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minus((long) (-1));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minus(readablePeriod28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime20, dateTimeZone31);
        java.util.TimeZone timeZone35 = dateTimeZone31.toTimeZone();
        java.util.Calendar.Builder builder36 = builder12.setTimeZone(timeZone35);
        java.util.Calendar.Builder builder40 = builder36.setDate(0, 0, 584);
        java.util.Calendar.Builder builder45 = builder36.setTimeOfDay(34895, 34891714, 34697, 34875);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+29:00" + "'", str32, "+29:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.monthOfYear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.minus(readableDuration11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate21.toInterval(dateTimeZone22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateTime12, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay5.withChronologyRetainFields(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.seconds();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 131, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        boolean boolean45 = yearMonthDay36.isEqual((org.joda.time.ReadablePartial) localDate44);
        java.lang.String str46 = yearMonthDay36.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = localDate54.toInterval(dateTimeZone55);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.Period period58 = interval56.toPeriod();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.weekyears();
        int int60 = period58.get(durationFieldType59);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay36.withPeriodAdded((org.joda.time.ReadablePeriod) period58, (int) (short) 10);
        long long65 = chronology24.add((org.joda.time.ReadablePeriod) period58, 0L, 131);
        org.joda.time.DateMidnight dateMidnight66 = org.joda.time.DateMidnight.now(chronology24);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 11318400000L + "'", long65 == 11318400000L);
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        long long9 = interval7.getEndMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.DateMidnight.Property property15 = dateMidnight13.dayOfWeek();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean20 = interval16.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = interval16.toPeriod(periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.dayOfWeek();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean33 = interval29.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval29.getEnd();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean45 = interval37.isAfter((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = interval37.withStart((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = interval29.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Interval interval52 = interval29.withPeriodAfterStart(readablePeriod51);
        org.joda.time.Interval interval53 = interval29.toInterval();
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        boolean boolean55 = interval16.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval16.withDurationAfterStart(readableDuration56);
        org.joda.time.Interval interval59 = interval16.withEndMillis((long) (short) 100);
        org.joda.time.Interval interval60 = interval7.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.YearMonthDay yearMonthDay65 = dateMidnight63.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.plus((-1L));
        org.joda.time.Chronology chronology71 = dateMidnight70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.secondOfMinute();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(chronology71);
        org.joda.time.DurationField durationField74 = chronology71.days();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay65.withChronologyRetainFields(chronology71);
        org.joda.time.DurationField durationField76 = chronology71.months();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.DateTimeField dateTimeField78 = chronology71.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((java.lang.Object) interval60, chronology71);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.withYear(34910);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-13323600000L) + "'", long9 == (-13323600000L));
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(date64);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateMidnight81);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.Chronology chronology5 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight8.toYearMonthDay();
        int[] intArray11 = yearMonthDay10.getValues();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.withPeriodAdded(readablePeriod12, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusMonths(13);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears(5);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval40.toPeriod(periodType45);
        org.joda.time.DateTime dateTime47 = dateTime31.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.LocalDate localDate49 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 6);
        org.joda.time.PeriodType periodType50 = period46.getPeriodType();
        org.joda.time.Period period51 = interval17.toPeriod(periodType50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears(5);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        java.util.Date date72 = dateMidnight71.toDate();
        org.joda.time.DateMidnight.Property property73 = dateMidnight71.dayOfWeek();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean78 = interval74.isBefore((org.joda.time.ReadableInterval) interval77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        org.joda.time.DateTime dateTime81 = dateTime65.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDate localDate83 = localDate61.withPeriodAdded((org.joda.time.ReadablePeriod) period80, 6);
        org.joda.time.PeriodType periodType84 = period80.getPeriodType();
        org.joda.time.Period period85 = interval17.toPeriod(periodType84);
        org.joda.time.LocalDate localDate86 = localDate1.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.LocalDate.Property property87 = localDate86.yearOfEra();
        org.joda.time.LocalDate localDate88 = property87.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight89 = localDate88.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateMidnight89);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getFirstDayOfWeek();
        int int13 = calendar11.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        boolean boolean22 = date17.before(date21);
        int int23 = date17.getMonth();
        calendar11.setTime(date17);
        calendar11.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant27 = calendar11.toInstant();
        boolean boolean28 = interval9.equals((java.lang.Object) calendar11);
        calendar11.setFirstDayOfWeek(51);
        int int31 = calendar11.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar11.roll((-626), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=51,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay14.toDateMidnight(dateTimeZone19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean22 = dateTimeZone19.equals((java.lang.Object) strSet21);
        long long24 = dateTimeZone19.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        boolean boolean33 = dateTimeZone19.equals((java.lang.Object) chronology30);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        boolean boolean42 = dateMidnight39.isBefore((long) ' ');
        org.joda.time.LocalDate localDate43 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology44 = dateMidnight39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate57 = localDate53.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property58 = localDate57.era();
        int int59 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.LocalDate localDate61 = localDate57.minusWeeks(20);
        org.joda.time.LocalDate localDate63 = localDate57.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate65 = localDate57.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int67 = localDate65.get(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.plus((-1L));
        org.joda.time.Chronology chronology73 = dateMidnight72.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.secondOfMinute();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(chronology73);
        org.joda.time.DateTimeField dateTimeField77 = localDate75.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField77.getType();
        java.lang.String str79 = dateTimeFieldType78.toString();
        org.joda.time.Chronology chronology80 = null;
        boolean boolean81 = dateTimeFieldType78.isSupported(chronology80);
        org.joda.time.LocalDate localDate83 = localDate65.withField(dateTimeFieldType78, 7);
        boolean boolean84 = localDate34.isSupported(dateTimeFieldType78);
        int int85 = localDate34.getDayOfWeek();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 14400001L + "'", long24 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 24 + "'", int59 == 24);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "monthOfYear" + "'", str79, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime10 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) dateMidnight9);
        int[] intArray11 = timeOfDay4.getValues();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay4.plusHours(579);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withMillisOfSecond(522);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, 11);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumShortTextLength(locale25);
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumShortTextLength(locale27);
        int int29 = property24.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay32 = timeOfDay13.withField(dateTimeFieldType30, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[14, 41, 55, 136]");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = localDate11.getField(0);
        int int29 = dateTimeField26.getDifference(1051944545895660000L, 1644572164409L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 33334743 + "'", int29 == 33334743);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear(53);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = localDate21.getField(1);
        org.joda.time.LocalDate localDate25 = localDate21.withDayOfYear(2);
        org.joda.time.LocalDate localDate27 = localDate21.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.joda.time.LocalDate localDate30 = property28.addWrapFieldToCopy(16);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate50 = localDate46.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime54 = localDate50.toDateTimeAtCurrentTime(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.DateTime dateTime56 = yearMonthDay35.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = localDate30.toDateTimeAtStartOfDay(dateTimeZone52);
        int int59 = dateTimeZone52.getOffsetFromLocal(1644572152803L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter13.withZone(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+29:00" + "'", str53, "+29:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 104400000 + "'", int59 == 104400000);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(22, 11, 7, 7, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime22 = dateTime16.minusDays((int) (byte) 10);
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration14, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = dateTime22.isEqualNow();
        org.joda.time.DateTime dateTime26 = dateTime22.withWeekOfWeekyear(11);
        boolean boolean27 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = localDate35.toInterval(dateTimeZone36);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.Period period39 = interval37.toPeriod();
        org.joda.time.DateTime dateTime41 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period39, (int) (byte) 100);
        org.joda.time.LocalDate localDate43 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 212);
        org.joda.time.LocalDate localDate45 = localDate1.withYearOfEra((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfMinute();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate60 = localDate56.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime61 = localDate60.toDateTimeAtCurrentTime();
        int int62 = localDate60.getWeekyear();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        long long67 = dateTimeZone64.convertLocalToUTC((long) 5, true);
        org.joda.time.DateMidnight dateMidnight68 = org.joda.time.DateMidnight.now(dateTimeZone64);
        java.lang.String str69 = dateTimeZone64.toString();
        org.joda.time.Interval interval70 = localDate60.toInterval(dateTimeZone64);
        long long72 = dateTimeZone64.previousTransition((long) 3993);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime47.toMutableDateTime(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-104399995L) + "'", long67 == (-104399995L));
        org.junit.Assert.assertNotNull(dateMidnight68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+29:00" + "'", str69, "+29:00");
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3993L + "'", long72 == 3993L);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) localDate1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        long long27 = dateTimeZone22.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long32 = dateTimeZone22.adjustOffset(36L, false);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfYear();
        org.joda.time.DurationField durationField45 = chronology41.minutes();
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(chronology41);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((-1L), chronology41);
        org.joda.time.DateMidnight dateMidnight48 = localDate47.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTimeISO();
        int int54 = dateTime53.getSecondOfMinute();
        org.joda.time.DateTime.Property property55 = dateTime53.dayOfYear();
        org.joda.time.DateTime dateTime56 = property55.withMinimumValue();
        org.joda.time.DurationField durationField57 = property55.getDurationField();
        java.lang.Object obj58 = null;
        boolean boolean59 = property55.equals(obj58);
        org.joda.time.DateTime dateTime61 = property55.addToCopy((long) 49);
        org.joda.time.DateTime dateTime62 = property55.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property55.getFieldType();
        org.joda.time.LocalDate.Property property64 = localDate47.property(dateTimeFieldType63);
        boolean boolean65 = dateMidnight34.isSupported(dateTimeFieldType63);
        boolean boolean67 = dateMidnight34.isAfter((-1732788000000L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+29:00" + "'", str23, "+29:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1659458699000L) + "'", long27 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 36L + "'", long32 == 36L);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 55 + "'", int54 == 55);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        int int3 = dateMidnight2.getYear();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight2.getZone();
        java.lang.String str6 = dateTimeZone5.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+29:00" + "'", str6, "+29:00");
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime4.toMutableDateTime(chronology14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 55 + "'", int5 == 55);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (-1));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minus(readablePeriod12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay15.withSecondOfMinute(21);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withSecondOfMinute(26);
        org.joda.time.LocalTime localTime24 = timeOfDay21.toLocalTime();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minus((long) (-1));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        int int29 = dateMidnight27.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.DateTime.Property property43 = dateTime41.dayOfYear();
        boolean boolean44 = dateMidnight32.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        java.util.Date date48 = dateMidnight47.toDate();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.dayOfWeek();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean61 = interval57.isBefore((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTime dateTime62 = interval57.getEnd();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        java.util.Date date70 = dateMidnight69.toDate();
        org.joda.time.DateMidnight.Property property71 = dateMidnight69.dayOfWeek();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableDuration66, (org.joda.time.ReadableInstant) dateMidnight69);
        boolean boolean73 = interval65.isAfter((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        org.joda.time.Interval interval77 = interval65.withStart((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = interval57.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration79 = interval57.toDuration();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight50.withDurationAdded((org.joda.time.ReadableDuration) duration79, 24);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight32.withDurationAdded((org.joda.time.ReadableDuration) duration79, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property85 = dateMidnight83.property(dateTimeFieldType84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean87 = dateMidnight83.isSupported(dateTimeFieldType86);
        boolean boolean88 = dateMidnight27.isSupported(dateTimeFieldType86);
        boolean boolean89 = timeOfDay21.isSupported(dateTimeFieldType86);
        org.joda.time.TimeOfDay timeOfDay91 = timeOfDay21.plusSeconds(809);
        org.joda.time.TimeOfDay.Property property92 = timeOfDay91.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay93 = property92.withMinimumValue();
        boolean boolean94 = date3.equals((java.lang.Object) timeOfDay93);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 55 + "'", int42 == 55);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(date70);
// flaky:         org.junit.Assert.assertEquals(date70.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval77);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(22);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis(14400001L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate28 = localDate22.withWeekyear(19);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        org.joda.time.LocalDate localDate30 = property29.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate47 = localDate43.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = localDate47.withWeekyear(19);
        org.joda.time.LocalTime localTime54 = null;
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime59 = localDate47.toDateTime(localTime54, dateTimeZone56);
        java.lang.String str61 = dateTimeZone56.getName(1000L);
        org.joda.time.DateTime dateTime62 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.Interval interval63 = localDate30.toInterval(dateTimeZone56);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) ' ', chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTime dateTime67 = dateTime9.withChronology(chronology64);
        org.joda.time.DateTimeZone dateTimeZone68 = chronology64.getZone();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+29:00" + "'", str25, "+29:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+29:00" + "'", str61, "+29:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minus(readablePeriod11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = timeOfDay12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTime3, dateTimeZone14);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration29 = interval27.toDuration();
        org.joda.time.DateTime dateTime31 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration29, 20);
        long long32 = dateTime3.getMillis();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = interval35.withPeriodBeforeEnd(readablePeriod48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minus((long) (-1));
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight52.toMutableDateTime();
        boolean boolean55 = interval49.isBefore((org.joda.time.ReadableInstant) mutableDateTime54);
        boolean boolean56 = dateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime3.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+29:00" + "'", str15, "+29:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60522646684572L) + "'", long32 == (-60522646684572L));
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        int int12 = property8.get();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 14, (long) 32770);
        long long3 = interval2.getStartMillis();
        boolean boolean5 = interval2.isBefore(4L);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str8 = dateTimeZone7.toString();
        java.lang.String str10 = dateTimeZone7.getName((long) '#');
        long long12 = dateTimeZone7.nextTransition((long) 'a');
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime.Property property20 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.withMinimumValue();
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        boolean boolean30 = dateMidnight27.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property31 = dateMidnight27.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight27.minusWeeks(17);
        int int34 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime37.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minus((long) (-1));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minus(readablePeriod47);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusMinutes(1970);
        org.joda.time.Chronology chronology53 = timeOfDay50.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minus((long) (-1));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.minus(readablePeriod59);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay62.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay66.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        java.util.Date date73 = dateMidnight72.toDate();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.dayOfWeek();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean79 = interval75.isBefore((org.joda.time.ReadableInterval) interval78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval75.toPeriod(periodType80);
        org.joda.time.TimeOfDay timeOfDay82 = timeOfDay68.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.PeriodType periodType83 = period81.getPeriodType();
        int[] intArray86 = chronology53.get((org.joda.time.ReadablePeriod) period81, (long) (-1), (long) 24);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight33.withPeriodAdded((org.joda.time.ReadablePeriod) period81, (int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay90 = timeOfDay13.plus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Interval interval91 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period81);
        boolean boolean93 = interval91.isAfter(97L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 14L + "'", long3 == 14L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+29:00" + "'", str8, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+29:00" + "'", str10, "+29:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 97L + "'", long12 == 97L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 55 + "'", int19 == 55);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property74);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(timeOfDay90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        int int4 = dateMidnight2.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone11);
        long long14 = dateTimeZone11.previousTransition((long) 252);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withZoneRetainFields(dateTimeZone11);
        java.util.Date date16 = dateMidnight15.toDate();
        date16.setTime(1644572156341L);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 252L + "'", long14 == 252L);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:35:56 UTC 2022");
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("java.util.GregorianCalendar[time=1644572118038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=18,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        java.util.Calendar calendar14 = builder0.build();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder23 = builder20.set(4, 0);
        java.util.Calendar.Builder builder25 = builder20.setCalendarType("gregory");
        java.util.Calendar.Builder builder27 = builder25.setLenient(true);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        int int29 = calendar28.getFirstDayOfWeek();
        int int30 = calendar28.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        boolean boolean39 = date34.before(date38);
        int int40 = date34.getMonth();
        calendar28.setTime(date34);
        java.util.TimeZone timeZone42 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.util.Calendar.Builder builder44 = builder25.setTimeZone(timeZone42);
        calendar14.setTimeZone(timeZone42);
        calendar14.set(42, 175, (int) '4', 12, 40, 11);
        calendar14.set(16, 34714896, 34891714, 34897, 1439);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=16,MONTH=34714896,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=34891714,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=34897,MINUTE=1439,SECOND=11,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        boolean boolean17 = dateMidnight14.isBefore((long) ' ');
        org.joda.time.LocalDate localDate18 = dateMidnight14.toLocalDate();
        int int19 = property9.getDifference((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight20 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField21 = property9.getField();
        org.joda.time.DateMidnight dateMidnight22 = property9.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withDayOfWeek(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight21.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears(5);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean55 = interval51.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval51.toPeriod(periodType56);
        org.joda.time.DateTime dateTime58 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate60 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 6);
        org.joda.time.PeriodType periodType61 = period57.getPeriodType();
        org.joda.time.DateTime dateTime63 = dateTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period57, (int) '#');
        org.joda.time.DateTime dateTime65 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 35);
        java.lang.String str66 = period57.toString();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime72 = dateTime69.withFieldAdded(durationFieldType70, 16);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period57, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone79);
        java.util.Date date81 = dateMidnight80.toDate();
        org.joda.time.DateMidnight.Property property82 = dateMidnight80.dayOfWeek();
        org.joda.time.Interval interval83 = new org.joda.time.Interval(readableDuration77, (org.joda.time.ReadableInstant) dateMidnight80);
        boolean boolean84 = interval76.isAfter((org.joda.time.ReadableInterval) interval83);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.withYearOfEra((int) '4');
        boolean boolean89 = interval83.contains((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime.Property property90 = dateTime86.dayOfYear();
        org.joda.time.DateTime dateTime92 = dateTime86.plusDays(24);
        boolean boolean93 = interval73.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Interval interval96 = new org.joda.time.Interval((long) (short) -1, 366L);
        org.joda.time.DateTime dateTime97 = interval96.getEnd();
        org.joda.time.Interval interval98 = interval73.withEnd((org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 55 + "'", int12 == 55);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0S" + "'", str66, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(date81);
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property82);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = yearMonthDay10.getFieldType(34585);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34585");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(6);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfSecond((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime10.weekyear();
        int int13 = dateTime10.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 58 + "'", int13 == 58);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate31.dayOfYear();
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.monthOfYear();
        org.joda.time.DateTime dateTime42 = property41.withMaximumValue();
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes(21);
        org.joda.time.DateTime dateTime45 = dateTime44.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime45.withYear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean49 = dateTime45.equals((java.lang.Object) dateTimeFieldType48);
        boolean boolean50 = localDate31.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        int int21 = date13.getMinutes();
        java.lang.String str22 = date13.toLocaleString();
        date13.setMinutes(17);
        boolean boolean25 = date3.before(date13);
        int int26 = date13.getSeconds();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 31 19:00:00 UTC 1904");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:17:00 UTC 1969");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dec 31, 1969 7:00:00 PM" + "'", str22, "Dec 31, 1969 7:00:00 PM");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        int int18 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar0.getMinimum((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=42,MONTH=-292275054,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=40,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology5.days();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.centuryOfEra();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField14.set(1644572374271L, "Jan 8, 1935 7:59:00 PM", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan 8, 1935 7:59:00 PM\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.LocalDate localDate13 = property10.withMinimumValue();
        org.joda.time.LocalDate localDate14 = property10.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property10.setCopy("T09:36:52.992");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:36:52.992\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3369600000L + "'", long12 == 3369600000L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate31.dayOfYear();
        org.joda.time.LocalDate.Property property36 = localDate31.year();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.LocalDate localDate39 = property36.setCopy(34615813);
        org.joda.time.DateMidnight dateMidnight40 = localDate39.toDateMidnight();
        org.joda.time.LocalDate localDate42 = localDate39.withCenturyOfEra(42);
        org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod6, chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.Interval interval45 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 36, dateTimeZone42);
        boolean boolean47 = dateMidnight25.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime46.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.withYear(522);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+29:00" + "'", str43, "+29:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField6.getLeapDurationField();
        long long12 = dateTimeField6.add((long) '#', (long) 10);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField6.getAsShortText(49, locale14);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10035L + "'", long12 == 10035L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "49" + "'", str15, "49");
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField28 = property25.getField();
        int int30 = dateTimeField28.get(3600000L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21600 + "'", int30 == 21600);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        boolean boolean12 = localDate7.equals((java.lang.Object) "19");
        int[] intArray13 = localDate7.getValues();
        org.joda.time.LocalDate localDate15 = localDate7.plusYears(44);
        org.joda.time.LocalDate localDate17 = localDate7.withWeekOfWeekyear(21);
        org.joda.time.LocalDate localDate19 = localDate17.withWeekyear(999);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 12]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.minusDays(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        boolean boolean24 = yearMonthDay15.isEqual((org.joda.time.ReadablePartial) localDate23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (-1));
        long long30 = dateTimeZone26.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight31 = localDate23.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateMidnight8.toDateTime(dateTimeZone26);
        org.joda.time.DateMidnight.Property property33 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight8.minusYears(34555);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 104400005L + "'", long30 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withSecondOfMinute(31);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay14 = property12.addWrapFieldToCopy(51);
        org.joda.time.TimeOfDay timeOfDay15 = property12.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = timeOfDay15.getFieldType(800);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 800");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfMonth();
        int int16 = property15.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        java.lang.String str17 = localDate15.toString();
        org.joda.time.Interval interval18 = localDate15.toInterval();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfYear();
        org.joda.time.DurationField durationField20 = property19.getLeapDurationField();
        org.joda.time.LocalDate localDate22 = property19.addToCopy(22);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2100-01-01" + "'", str17, "2100-01-01");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        boolean boolean18 = dateTime14.isEqual((long) 2099);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.LocalDate localDate17 = property14.addToCopy(32);
        org.joda.time.LocalDate localDate18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate19 = property14.roundCeilingCopy();
        java.lang.String str20 = property14.getAsText();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "20" + "'", str15, "20");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "20" + "'", str20, "20");
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withSecondOfMinute(31);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay8.plusHours(34522);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay8.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay8.withMillisOfSecond(522);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate14 = localDate10.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.Interval interval19 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 36, dateTimeZone16);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime23.withSecondOfMinute(762);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 762 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+29:00" + "'", str17, "+29:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant16 = calendar0.toInstant();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int19 = calendar17.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        boolean boolean28 = date23.before(date27);
        int int29 = date23.getMonth();
        calendar17.setTime(date23);
        java.util.TimeZone timeZone31 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        calendar0.setTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 10);
        int int44 = localDate41.getYearOfCentury();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate57 = localDate53.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str72 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtCurrentTime(dateTimeZone71);
        boolean boolean74 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime75 = localDate57.toDateTimeAtCurrentTime(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = localDate41.toDateTime(localTime45, dateTimeZone71);
        java.util.TimeZone timeZone77 = dateTimeZone71.toTimeZone();
        calendar0.setTimeZone(timeZone77);
        calendar0.add(100, (int) (byte) 0);
        calendar0.setMinimalDaysInFirstWeek(76);
        boolean boolean84 = calendar0.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=76,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+29:00" + "'", str72, "+29:00");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minus(readablePeriod6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 9, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minus((long) (-1));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = interval24.isAfterNow();
        org.joda.time.MutableInterval mutableInterval26 = interval24.toMutableInterval();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+29:00" + "'", str10, "+29:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableInterval26);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        long long46 = calendar0.getTimeInMillis();
        org.joda.time.YearMonthDay yearMonthDay47 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(370);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 370");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572516404,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=56,MILLISECOND=404,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572516404L + "'", long46 == 1644572516404L);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.Interval interval11 = yearMonthDay10.toInterval();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears(5);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean38 = interval34.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval34.toPeriod(periodType39);
        org.joda.time.DateTime dateTime41 = dateTime25.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDate localDate43 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 6);
        org.joda.time.PeriodType periodType44 = period40.getPeriodType();
        org.joda.time.Period period45 = interval11.toPeriod(periodType44);
        org.joda.time.Interval interval47 = interval11.withStartMillis(14400001L);
        org.joda.time.Duration duration48 = interval47.toDuration();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfMinute();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.DurationField durationField58 = chronology55.days();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 11, chronology55);
        org.joda.time.DateTimeField dateTimeField60 = chronology55.year();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getDurationType();
        org.joda.time.DateTime dateTime65 = dateTime61.withField(dateTimeFieldType62, 7);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.plus(readableDuration68);
        int int70 = dateTime67.getWeekyear();
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime67.minusYears((int) '#');
        boolean boolean74 = dateTime65.isEqual((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean75 = interval47.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        long long21 = dateTimeField19.roundHalfEven(1670750280000L);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1670716800000L + "'", long21 == 1670716800000L);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight7 = property4.setCopy(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(5);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.dayOfWeek();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean39 = interval35.isBefore((org.joda.time.ReadableInterval) interval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval35.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = dateTime26.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.LocalDate localDate44 = localDate22.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 6);
        org.joda.time.DateTime dateTime45 = dateTime10.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight48.plusWeeks((int) ' ');
        boolean boolean53 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.monthOfYear();
        boolean boolean61 = dateTime10.equals((java.lang.Object) chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.era();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = chronology59.get(readablePeriod63, 2281285395L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        int int47 = calendar0.getMinimalDaysInFirstWeek();
        int int49 = calendar0.getActualMaximum(1);
        int int50 = calendar0.getWeeksInWeekYear();
        calendar0.set(34736, 34832, 34702, (int) (byte) 1, (-51), 34897);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34736,MONTH=34832,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=34702,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1,MINUTE=-51,SECOND=34897,MILLISECOND=605,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278994 + "'", int49 == 292278994);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1644572214029L);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.plusMonths((int) (short) 100);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = yearMonthDay4.toString("Property[monthOfYear]", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = property13.setCopy("22");
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy("0");
        boolean boolean12 = dateMidnight11.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = localDate20.getField(1);
        org.joda.time.LocalDate localDate24 = localDate20.withDayOfYear(2);
        org.joda.time.LocalDate localDate26 = localDate20.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate39 = localDate35.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate47.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str54 = dateTimeZone53.toString();
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtCurrentTime(dateTimeZone53);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.DateTime dateTime57 = localDate39.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.LocalDate localDate59 = localDate39.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        boolean boolean62 = localDate59.isSupported(durationFieldType61);
        boolean boolean63 = localDate20.isSupported(durationFieldType61);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight11.withFieldAdded(durationFieldType61, 15);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight11.withYearOfEra(55);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+29:00" + "'", str54, "+29:00");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.withSecondOfMinute(21);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withSecondOfMinute(26);
        org.joda.time.LocalTime localTime17 = timeOfDay14.toLocalTime();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) (-1));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        int int22 = dateMidnight20.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfYear();
        boolean boolean37 = dateMidnight25.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        java.util.Date date48 = dateMidnight47.toDate();
        org.joda.time.DateMidnight.Property property49 = dateMidnight47.dayOfWeek();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableDuration44, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean54 = interval50.isBefore((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTime dateTime55 = interval50.getEnd();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        java.util.Date date63 = dateMidnight62.toDate();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.dayOfWeek();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableDuration59, (org.joda.time.ReadableInstant) dateMidnight62);
        boolean boolean66 = interval58.isAfter((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        org.joda.time.Interval interval70 = interval58.withStart((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = interval50.overlaps((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration72 = interval50.toDuration();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight43.withDurationAdded((org.joda.time.ReadableDuration) duration72, 24);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight25.withDurationAdded((org.joda.time.ReadableDuration) duration72, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property78 = dateMidnight76.property(dateTimeFieldType77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean80 = dateMidnight76.isSupported(dateTimeFieldType79);
        boolean boolean81 = dateMidnight20.isSupported(dateTimeFieldType79);
        boolean boolean82 = timeOfDay14.isSupported(dateTimeFieldType79);
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay14.plusSeconds(809);
        org.joda.time.TimeOfDay.Property property85 = timeOfDay84.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay86 = property85.withMinimumValue();
        java.lang.String str87 = property85.getName();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56 + "'", int35 == 56);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "millisOfSecond" + "'", str87, "millisOfSecond");
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        gregorianCalendar10.setLenient(false);
        gregorianCalendar10.setMinimalDaysInFirstWeek(252);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        gregorianCalendar10.set((-82), 32769, 99, 43, 226, 40);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(24);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra((int) (short) 10);
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfDay();
        int int17 = dateTime15.getMillisOfSecond();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minusYears(1970);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        boolean boolean20 = interval12.isAfter((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = interval19.withPeriodAfterStart(readablePeriod21);
        boolean boolean23 = dateMidnight4.equals((java.lang.Object) readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight26.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar34 = dateMidnight32.toGregorianCalendar();
        boolean boolean35 = dateMidnight4.equals((java.lang.Object) dateMidnight32);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight32.getZone();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.dayOfWeek();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.minusDays(1);
        int int46 = dateMidnight32.compareTo((org.joda.time.ReadableInstant) dateMidnight40);
        int int47 = dateMidnight40.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        int int24 = dateTime8.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minus(readablePeriod26);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDurationAdded((long) 29, (int) (short) -1);
        int int31 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTime.Property property32 = dateTime8.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime8.toMutableDateTime();
        boolean boolean34 = dateTime8.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property10.setCopy(2);
        org.joda.time.DateTime dateTime18 = property10.addWrapFieldToCopy(0);
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        java.util.Date date21 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        boolean boolean30 = date25.before(date29);
        int int31 = date29.getHours();
        int int32 = date29.getMonth();
        boolean boolean33 = date21.after(date29);
        date21.setYear((int) 'a');
        java.util.Date date41 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        boolean boolean50 = date45.before(date49);
        int int51 = date45.getDay();
        int int52 = date45.getHours();
        date45.setSeconds((int) '4');
        java.lang.String str55 = date45.toLocaleString();
        int int56 = date45.getYear();
        boolean boolean57 = date41.before(date45);
        boolean boolean58 = date21.after(date45);
        int int59 = date45.getSeconds();
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.fromDateFields(date45);
        calendar20.setTime(date45);
        date45.setMinutes(79);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        java.util.Date date67 = dateMidnight66.toDate();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone69);
        java.util.Date date71 = dateMidnight70.toDate();
        boolean boolean72 = date67.before(date71);
        int int73 = date67.getDay();
        int int74 = date67.getHours();
        int int75 = date67.getMinutes();
        java.lang.String str76 = date67.toLocaleString();
        date67.setMinutes(17);
        date67.setMonth(2810341);
        boolean boolean81 = date45.before(date67);
        java.util.Date date83 = new java.util.Date((long) '4');
        date83.setYear(33);
        java.util.Date date86 = new java.util.Date();
        java.time.Instant instant87 = date86.toInstant();
        int int88 = date86.getDate();
        boolean boolean89 = date83.after(date86);
        date83.setMinutes(365);
        int int92 = date45.compareTo(date83);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-17948000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=52,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 11 09:41:56 UTC 1997");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 20:19:52 UTC 1969");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dec 31, 1969 7:00:52 PM" + "'", str55, "Dec 31, 1969 7:00:52 PM");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 69 + "'", int56 == 69);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Fri Mar 02 19:17:00 UTC 236164");
        org.junit.Assert.assertNotNull(date71);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 19 + "'", int74 == 19);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Dec 31, 1969 7:00:00 PM" + "'", str76, "Dec 31, 1969 7:00:00 PM");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Jan 01 06:05:00 UTC 1933");
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Fri Feb 11 09:41:56 UTC 2022");
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 11 + "'", int88 == 11);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        int int6 = dateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsText((int) (short) 1, locale17);
        int int21 = dateTimeField15.getDifference(281723794000L, 1644537600029L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField15.getAsText((long) (byte) -1, locale23);
        int int25 = dateTime5.get(dateTimeField15);
        org.joda.time.DateTime dateTime26 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime5.hourOfDay();
        int int28 = property27.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-378559) + "'", int21 == (-378559));
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "4" + "'", str24, "4");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight2 = property1.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate.Property property15 = localDate7.dayOfWeek();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = property15.setCopy("1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.minus(readableDuration21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate31.toInterval(dateTimeZone32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay15.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType8.getField(chronology34);
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(chronology34);
        int int39 = dateMidnight38.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withDurationAdded((long) 30, 2810341);
        int int43 = dateMidnight42.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateMidnight38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property6.setCopy(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withSecondOfMinute(557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 557 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 57 + "'", int5 == 57);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 5, chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(18746052L, chronology7);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withYearOfCentury(24);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.plus(readablePeriod14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight11.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.YearMonthDay yearMonthDay33 = dateMidnight31.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        boolean boolean44 = yearMonthDay35.isEqual((org.joda.time.ReadablePartial) localDate43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        long long50 = dateTimeZone46.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight51 = localDate43.toDateMidnight(dateTimeZone46);
        org.joda.time.LocalDate localDate53 = localDate43.plusDays(53);
        org.joda.time.LocalDate.Property property54 = localDate43.weekyear();
        int int55 = localDate43.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.plus(readableDuration58);
        org.joda.time.DateTime dateTime61 = dateTime57.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTimeISO();
        org.joda.time.DateTime.Property property63 = dateTime57.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean65 = dateTime57.isSupported(dateTimeFieldType64);
        int int66 = localDate43.get(dateTimeFieldType64);
        int int67 = localDate28.get(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType68 = null;
        boolean boolean69 = localDate28.isSupported(durationFieldType68);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 104400005L + "'", long50 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 43 + "'", int55 == 43);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20 + "'", int66 == 20);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.withChronology(chronology16);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 11, chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.year();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology26);
        boolean boolean33 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval40.getEnd();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean56 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = interval48.withStart((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = interval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration62 = interval40.toDuration();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration62, 34);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plus((-1L));
        org.joda.time.Chronology chronology70 = dateMidnight69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfMinute();
        org.joda.time.DurationField durationField72 = chronology70.millis();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        long long75 = dateTimeField73.roundHalfEven((long) (byte) 1);
        java.util.Locale locale77 = null;
        java.lang.String str78 = dateTimeField73.getAsText((long) 57, locale77);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeField73.getAsShortText(0L, locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField73.getType();
        boolean boolean83 = dateMidnight10.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(interval60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-104400000L) + "'", long75 == (-104400000L));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "January" + "'", str78, "January");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Jan" + "'", str81, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay15.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        long long34 = dateTimeField32.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField35 = dateTimeField32.getLeapDurationField();
        long long38 = dateTimeField32.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 10);
        int int49 = localDate46.getYearOfCentury();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate62 = localDate58.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plus((-1L));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfMinute();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.LocalDate localDate72 = localDate70.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate74 = localDate70.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        java.lang.String str77 = dateTimeZone76.toString();
        org.joda.time.DateTime dateTime78 = localDate74.toDateTimeAtCurrentTime(dateTimeZone76);
        boolean boolean79 = dateTimeZone76.isFixed();
        org.joda.time.DateTime dateTime80 = localDate62.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.DateTime dateTime81 = localDate46.toDateTime(localTime50, dateTimeZone76);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = localDate83.toDateTime(localTime84, dateTimeZone85);
        org.joda.time.LocalDate localDate88 = localDate83.withYearOfEra(12);
        int[] intArray89 = localDate83.getValues();
        int int90 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDate46, intArray89);
        chronology5.validate((org.joda.time.ReadablePartial) yearMonthDay25, intArray89);
        org.joda.time.DateTimeField dateTimeField92 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology5.dayOfYear();
        java.util.Locale locale95 = null;
        java.lang.String str96 = dateTimeField93.getAsShortText(2023, locale95);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1000L + "'", long34 == 1000L);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10035L + "'", long38 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+29:00" + "'", str77, "+29:00");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(intArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 2]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2023" + "'", str96, "2023");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime32 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter5.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate45 = localDate41.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.LocalDate localDate51 = localDate45.withWeekyear(19);
        org.joda.time.LocalTime localTime52 = null;
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str56 = dateTimeZone54.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime57 = localDate45.toDateTime(localTime52, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight58 = org.joda.time.DateMidnight.now(dateTimeZone54);
        java.lang.String str60 = dateTimeZone54.getNameKey((long) 26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter33.withZone(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter33.withOffsetParsed();
        java.lang.Appendable appendable63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.plusYears(0);
        boolean boolean73 = dateMidnight70.isAfterNow();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight70.withYearOfEra(18);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusYears(46);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter62.printTo(appendable63, (org.joda.time.ReadableInstant) dateMidnight75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+29:00" + "'", str29, "+29:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+29:00" + "'", str48, "+29:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        java.util.Date date3 = new java.util.Date(10, 19, 49);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        java.lang.String str5 = date3.toGMTString();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Sep 18 00:00:00 UTC 1911");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "18 Sep 1911 00:00:00 GMT" + "'", str5, "18 Sep 1911 00:00:00 GMT");
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval2.withPeriodBeforeEnd(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        int[] intArray22 = yearMonthDay21.getValues();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.withPeriodAdded(readablePeriod23, 22);
        java.lang.String str26 = yearMonthDay21.toString();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay21.minusDays(33);
        org.joda.time.Interval interval29 = yearMonthDay28.toInterval();
        boolean boolean31 = interval29.isAfter(1644572146319L);
        boolean boolean33 = interval29.contains((long) (short) 100);
        boolean boolean34 = interval29.isBeforeNow();
        org.joda.time.Duration duration35 = interval29.toDuration();
        org.joda.time.Interval interval36 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        boolean boolean38 = interval36.isAfter((-25252570999999000L));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-02" + "'", str26, "1970-01-02");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology17 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(1644572146480L);
        long long21 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay19, (long) 19);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology17.getZone();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 57 + "'", int12 == 57);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 16546480L + "'", long21 == 16546480L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        int int18 = localDate11.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        boolean boolean47 = dateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime48 = localDate30.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate50 = localDate30.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate50.minusYears((int) (byte) 1);
        int int53 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property54 = localDate50.dayOfYear();
        org.joda.time.LocalDate.Property property55 = localDate50.year();
        org.joda.time.Chronology chronology56 = localDate50.getChronology();
        boolean boolean57 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate50);
        int int58 = localDate50.getYearOfEra();
        int int59 = localDate50.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+29:00" + "'", str45, "+29:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1022 + "'", int58 == 1022);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((java.lang.Object) "T09:41:49.994");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T09:41:49.994\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.setCopy((int) (byte) 1);
        java.util.Locale locale14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = property8.setCopy("Jul", locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, 11);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.monthOfYear();
        java.lang.String str25 = property24.toString();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        boolean boolean27 = property8.equals((java.lang.Object) property24);
        org.joda.time.DateTimeField dateTimeField28 = property8.getField();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[monthOfYear]" + "'", str25, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        int int40 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTime dateTime42 = dateTime39.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime39.withYear(6);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        boolean boolean52 = dateMidnight49.isBefore((long) ' ');
        org.joda.time.LocalDate localDate53 = dateMidnight49.toLocalDate();
        org.joda.time.Chronology chronology54 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((-1L));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfMinute();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.LocalDate localDate65 = localDate63.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate67 = localDate63.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property68 = localDate67.era();
        int int69 = dateTimeField55.getMaximumValue((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.LocalDate localDate71 = localDate67.minusWeeks(20);
        org.joda.time.LocalDate localDate73 = localDate67.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate75 = localDate67.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int77 = localDate75.get(dateTimeFieldType76);
        boolean boolean78 = dateTime44.isSupported(dateTimeFieldType76);
        int int79 = dateTime34.get(dateTimeFieldType76);
        org.joda.time.DateTime.Property property80 = dateTime34.year();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 57 + "'", int40 == 57);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 24 + "'", int69 == 24);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1022 + "'", int79 == 1022);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay4.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minus((long) (-1));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.withChronologyRetainFields(chronology31);
        int int35 = yearMonthDay34.getDayOfMonth();
        org.joda.time.Interval interval36 = yearMonthDay34.toInterval();
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay34.monthOfYear();
        int int38 = property37.get();
        org.joda.time.DurationField durationField39 = property37.getRangeDurationField();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.lang.String str20 = localDate17.toString("24");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        int int31 = localDate28.getYearOfCentury();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate56 = localDate52.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.DateTime dateTime62 = localDate44.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = localDate28.toDateTime(localTime32, dateTimeZone58);
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight65 = localDate17.toDateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.DateMidnight dateMidnight68 = property66.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight70 = property66.addToCopy((long) 54);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str72 = dateTimeFieldType71.getName();
        int int73 = dateMidnight70.get(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "24" + "'", str20, "24");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+29:00" + "'", str59, "+29:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "millisOfDay" + "'", str72, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        long long11 = dateTimeField6.remainder((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        int int22 = localDate19.getEra();
        int int23 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate35 = localDate31.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate47 = localDate43.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        boolean boolean52 = dateTimeZone49.isFixed();
        org.joda.time.DateTime dateTime53 = localDate35.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate55 = localDate35.minusYears((int) '#');
        org.joda.time.LocalDate localDate57 = localDate35.minusDays(22);
        org.joda.time.LocalDate localDate59 = localDate35.withYearOfEra(32770);
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths(0);
        org.joda.time.Interval interval62 = localDate59.toInterval();
        int int63 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate59);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 999L + "'", long11 == 999L);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property7.addToCopy((int) (short) 0);
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsText(locale12);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "600" + "'", str13, "600");
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfYear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate50 = localDate44.withWeekyear(19);
        org.joda.time.LocalTime localTime51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime56 = localDate44.toDateTime(localTime51, dateTimeZone53);
        java.lang.String str58 = dateTimeZone53.getName(1000L);
        org.joda.time.DateTime dateTime59 = yearMonthDay32.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.Interval interval60 = localDate27.toInterval(dateTimeZone53);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight7.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.weekOfWeekyear();
        org.joda.time.DurationField durationField64 = chronology61.years();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+29:00" + "'", str22, "+29:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+29:00" + "'", str47, "+29:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+29:00" + "'", str58, "+29:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay12 = property7.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property7.getFieldType();
        org.joda.time.TimeOfDay timeOfDay15 = property7.addNoWrapToCopy(0);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T14:41:57.648" + "'", str6, "T14:41:57.648");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.lang.String str20 = localDate17.toString("24");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        int int31 = localDate28.getYearOfCentury();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate56 = localDate52.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.DateTime dateTime62 = localDate44.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = localDate28.toDateTime(localTime32, dateTimeZone58);
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight65 = localDate17.toDateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.DateMidnight dateMidnight68 = property66.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.hours();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.clockhourOfDay();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) 29, (long) 2022, chronology76);
        org.joda.time.DurationField durationField80 = chronology76.millis();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateMidnight68, chronology76);
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone84);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.plus((-1L));
        org.joda.time.Chronology chronology88 = dateMidnight87.getChronology();
        boolean boolean90 = dateMidnight87.isBefore((long) ' ');
        org.joda.time.LocalDate localDate91 = dateMidnight87.toLocalDate();
        org.joda.time.Chronology chronology92 = dateMidnight87.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.centuryOfEra();
        org.joda.time.DateTime dateTime94 = dateTime81.toDateTime(chronology92);
        boolean boolean95 = dateTime81.isBeforeNow();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "24" + "'", str20, "24");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+29:00" + "'", str59, "+29:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(20);
        org.joda.time.LocalDate localDate28 = localDate22.plusMonths((int) (byte) -1);
        int int29 = localDate28.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight();
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight35.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.days();
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay37.withChronologyRetainFields(chronology43);
        org.joda.time.Chronology chronology48 = yearMonthDay47.getChronology();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight49.getZone();
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay47.toDateMidnight(dateTimeZone52);
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean55 = dateTimeZone52.equals((java.lang.Object) strSet54);
        long long57 = dateTimeZone52.nextTransition(14400001L);
        org.joda.time.DateTime dateTime58 = dateTime31.toDateTime(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 14400001L + "'", long57 == 14400001L);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(24);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.monthOfYear();
        boolean boolean19 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.monthOfYear();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        date3.setYear((int) (byte) 100);
        date3.setMonth(292278994);
        java.lang.String str14 = date3.toGMTString();
        java.time.Instant instant15 = date3.toInstant();
        java.util.Date date16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = date3.before(date16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 01 19:00:00 UTC 24358582");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1 Dec 24358582 19:00:00 GMT" + "'", str14, "1 Dec 24358582 19:00:00 GMT");
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.property(dateTimeFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        java.lang.String str6 = durationFieldType5.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "months" + "'", str6, "months");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfHour();
        int int18 = dateTimeField16.getMaximumValue(0L);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.halfdayOfDay();
        org.joda.time.Chronology chronology23 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.clockhourOfDay();
        int int25 = dateTimeField24.getMinimumValue();
        boolean boolean26 = dateTimeField24.isSupported();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.YearMonthDay yearMonthDay31 = dateMidnight29.toYearMonthDay();
        int[] intArray32 = yearMonthDay31.getValues();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.withPeriodAdded(readablePeriod33, 22);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean48 = interval44.isBefore((org.joda.time.ReadableInterval) interval47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval44.toPeriod(periodType49);
        int int52 = period50.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime64.toDateTimeISO();
        int int66 = dateTime65.getSecondOfMinute();
        org.joda.time.DateTime.Property property67 = dateTime65.dayOfYear();
        boolean boolean68 = dateMidnight56.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime70 = dateTime65.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.secondOfMinute();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        org.joda.time.DateTimeField dateTimeField80 = localDate78.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = dateTimeField80.getType();
        java.lang.String str82 = dateTimeFieldType81.toString();
        int int83 = dateTime70.get(dateTimeFieldType81);
        boolean boolean84 = yearMonthDay35.isSupported(dateTimeFieldType81);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean86 = yearMonthDay35.isSupported(dateTimeFieldType85);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay35.minusDays(1999);
        java.util.Locale locale89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay88, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 57 + "'", int66 == 57);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "monthOfYear" + "'", str82, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(yearMonthDay88);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = dateMidnight4.withFieldAdded(durationFieldType9, 2066);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay22 = property20.setCopy(27);
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumShortTextLength(locale23);
        int int25 = property20.getMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T14:41:57.944" + "'", str6, "T14:41:57.944");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 41 + "'", int9 == 41);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = localDate15.toInterval(dateTimeZone16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        int int21 = period19.get(durationFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 0);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.plusDays((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime27.monthOfYear();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime27.yearOfEra();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = dateTime27.toCalendar(locale34);
        org.joda.time.TimeOfDay timeOfDay36 = dateTime27.toTimeOfDay();
        org.joda.time.DateTime.Property property37 = dateTime27.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = yearMonthDay4.get(dateTimeFieldType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644572517979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=57,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears(5);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean43 = interval39.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval39.toPeriod(periodType44);
        org.joda.time.DateTime dateTime46 = dateTime30.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalDate localDate48 = localDate26.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 6);
        org.joda.time.PeriodType periodType49 = period45.getPeriodType();
        org.joda.time.DateTime dateTime51 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period45, (int) '#');
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight6.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = property53.getField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withPeriodAdded(readablePeriod15, 0);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) (-1));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minus(readablePeriod23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minusMinutes(1970);
        org.joda.time.Chronology chronology29 = timeOfDay26.getChronology();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minus((long) (-1));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minus(readablePeriod35);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay38.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean55 = interval51.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval51.toPeriod(periodType56);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay44.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay26.minus((org.joda.time.ReadablePeriod) period57);
        java.lang.String str60 = period57.toString();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean62 = period57.isSupported(durationFieldType61);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay17.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        org.joda.time.TimeOfDay.Property property65 = timeOfDay63.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay63.plusMillis(3993);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay67.minusMillis(79);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 50, 58, 49]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0S" + "'", str60, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(timeOfDay69);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(22);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis(14400001L);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        java.lang.String str12 = dateTime9.toString();
        org.joda.time.DateTime dateTime14 = dateTime9.withMillisOfSecond(44);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minus(readablePeriod20);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay23.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval36.toPeriod(periodType41);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay29.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.PeriodType periodType44 = period42.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus(readablePeriod48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period42, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateTime dateTime52 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 30);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime14.withDurationAdded(readableDuration53, 64);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-02T09:00:00.001+29:00" + "'", str12, "1970-01-02T09:00:00.001+29:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.monthOfYear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime2.minus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime2.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime2.withField(dateTimeFieldType9, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.YearMonthDay yearMonthDay16 = dateMidnight14.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.monthOfYear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.minus(readableDuration22);
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = localDate32.toInterval(dateTimeZone33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, chronology35);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay16.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType9.getField(chronology35);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(4);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra(29);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        long long11 = dateTimeField6.remainder((long) (short) -1);
        boolean boolean12 = dateTimeField6.isLenient();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField6.set((long) 2022, "", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 999L + "'", long11 == 999L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.getTimeOfDay();
        int int14 = property12.getMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.property(dateTimeFieldType17);
        int int19 = dateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime21 = dateTime7.withField(dateTimeFieldType17, 24);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getSecondOfMinute();
        int int28 = dateTime26.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getDurationType();
        org.joda.time.DateTime dateTime37 = dateTime7.withFieldAdded(durationFieldType35, 557);
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight41.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay43.withPeriodAdded(readablePeriod44, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.withFieldAdded(durationFieldType48, 3);
        org.joda.time.DateTime dateTime52 = dateTime37.withFieldAdded(durationFieldType48, 33626254);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 58 + "'", int27 == 58);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(25);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy(37);
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        int int28 = dateTimeField25.getDifference((-1028629186000L), 41L);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-32) + "'", int28 == (-32));
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime8.toMutableDateTime(dateTimeZone28);
        org.joda.time.Instant instant30 = mutableDateTime29.toInstant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter6.withZoneUTC();
        boolean boolean15 = dateTimeFormatter14.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(358, 212, (-19035), 56, (int) 'a', 34891714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        boolean boolean33 = yearMonthDay24.isEqual((org.joda.time.ReadablePartial) localDate32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) (-1));
        long long39 = dateTimeZone35.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight40 = localDate32.toDateMidnight(dateTimeZone35);
        long long44 = dateTimeZone35.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str46 = dateTimeZone35.getNameKey((long) 33);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 34);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone35);
        int int51 = dateTimeZone35.getStandardOffset((long) 560);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 104400005L + "'", long39 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight40);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-104399948L) + "'", long44 == (-104399948L));
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 104400000 + "'", int51 == 104400000);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.withHourOfDay(1);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.minusSeconds(16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusSeconds(0);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusMillis(32);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay10.plusSeconds((-292275054));
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readableDuration19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readableDuration23);
        int int25 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus((long) (-1));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minus(readablePeriod31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay34.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay40.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime56 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 19);
        java.lang.String str57 = period53.toString();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.plus((-1L));
        org.joda.time.Chronology chronology64 = dateMidnight63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.secondOfMinute();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DurationField durationField67 = durationFieldType58.getField(chronology64);
        int int68 = period53.get(durationFieldType58);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 858);
        org.joda.time.DateTime dateTime71 = timeOfDay70.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 50, 58, 410]");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0S" + "'", str57, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate11.toDateTime(localTime18);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        java.lang.String str57 = property55.getName();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 58 + "'", int12 == 58);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "monthOfYear" + "'", str57, "monthOfYear");
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime9 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = property7.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay15.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        long long34 = dateTimeField32.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField35 = dateTimeField32.getLeapDurationField();
        long long38 = dateTimeField32.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 10);
        int int49 = localDate46.getYearOfCentury();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate62 = localDate58.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plus((-1L));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfMinute();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.LocalDate localDate72 = localDate70.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate74 = localDate70.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        java.lang.String str77 = dateTimeZone76.toString();
        org.joda.time.DateTime dateTime78 = localDate74.toDateTimeAtCurrentTime(dateTimeZone76);
        boolean boolean79 = dateTimeZone76.isFixed();
        org.joda.time.DateTime dateTime80 = localDate62.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.DateTime dateTime81 = localDate46.toDateTime(localTime50, dateTimeZone76);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = localDate83.toDateTime(localTime84, dateTimeZone85);
        org.joda.time.LocalDate localDate88 = localDate83.withYearOfEra(12);
        int[] intArray89 = localDate83.getValues();
        int int90 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDate46, intArray89);
        chronology5.validate((org.joda.time.ReadablePartial) yearMonthDay25, intArray89);
        org.joda.time.DateTimeZone dateTimeZone92 = chronology5.getZone();
        java.lang.String str93 = dateTimeZone92.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1000L + "'", long34 == 1000L);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10035L + "'", long38 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+29:00" + "'", str77, "+29:00");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(intArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 2]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+29:00" + "'", str93, "+29:00");
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.Chronology chronology11 = timeOfDay8.getChronology();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay26.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay8.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minus((long) (-1));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minus(readablePeriod47);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusMinutes(1970);
        org.joda.time.Chronology chronology53 = timeOfDay50.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minus((long) (-1));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.minus(readablePeriod59);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay62.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay66.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        java.util.Date date73 = dateMidnight72.toDate();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.dayOfWeek();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean79 = interval75.isBefore((org.joda.time.ReadableInterval) interval78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval75.toPeriod(periodType80);
        org.joda.time.TimeOfDay timeOfDay82 = timeOfDay68.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay50.minus((org.joda.time.ReadablePeriod) period81);
        java.lang.String str84 = period81.toString();
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean86 = period81.isSupported(durationFieldType85);
        java.lang.String str87 = durationFieldType85.getName();
        int int88 = period39.get(durationFieldType85);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property74);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PT0S" + "'", str84, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "weekyears" + "'", str87, "weekyears");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = timeOfDay14.get(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar0.getMaximum(23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 23");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572518747,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=58,MILLISECOND=747,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(20);
        org.joda.time.LocalDate localDate28 = localDate22.plusMonths((int) (byte) -1);
        int int29 = localDate28.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight();
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        boolean boolean33 = gregorianCalendar32.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate20 = property18.addWrapFieldToCopy((-19034));
        org.joda.time.LocalDate localDate21 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate22 = property18.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate34 = localDate30.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate40 = localDate34.withWeekyear(19);
        org.joda.time.LocalTime localTime41 = null;
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime46 = localDate34.toDateTime(localTime41, dateTimeZone43);
        java.lang.String str48 = dateTimeZone43.getName(1000L);
        java.lang.String str50 = dateTimeZone43.getShortName((long) 292278994);
        org.joda.time.DateTime dateTime51 = localDate22.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = localDate22.indexOf(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+29:00" + "'", str37, "+29:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+29:00" + "'", str48, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval6.toPeriod(periodType11);
        org.joda.time.Period period13 = interval6.toPeriod();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        int int6 = property4.getMinimumValue();
        java.lang.String str7 = property4.toString();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight10 = property4.addToCopy(44);
        org.joda.time.DateMidnight dateMidnight11 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Friday" + "'", str5, "Friday");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfWeek]" + "'", str7, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate12 = property10.addToCopy((-1));
        org.joda.time.LocalDate localDate13 = property10.roundCeilingCopy();
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateMidnight dateMidnight15 = localDate13.toDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        int int7 = dateMidnight6.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minus(readablePeriod19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMinutes(1970);
        org.joda.time.Chronology chronology25 = timeOfDay22.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus((long) (-1));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minus(readablePeriod31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay34.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay40.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.PeriodType periodType55 = period53.getPeriodType();
        int[] intArray58 = chronology25.get((org.joda.time.ReadablePeriod) period53, (long) (-1), (long) 24);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight6.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight6.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        org.joda.time.DurationField durationField12 = property8.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property8.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay16 = property8.addToCopy(0);
        java.lang.Object obj17 = null;
        boolean boolean18 = property8.equals(obj17);
        java.util.Locale locale19 = null;
        int int20 = property8.getMaximumTextLength(locale19);
        org.joda.time.YearMonthDay yearMonthDay22 = property8.addToCopy(762);
        int int23 = property8.getMaximumValue();
        int int24 = property8.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime9 = property7.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField10.set(1670750111092L, (-1959));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1959 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readableDuration18);
        int int20 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minus((long) (-1));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.minus(readablePeriod26);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay29.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean46 = interval42.isBefore((org.joda.time.ReadableInterval) interval45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval42.toPeriod(periodType47);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay35.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime51 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 19);
        java.lang.String str52 = period48.toString();
        org.joda.time.Period period53 = period48.toPeriod();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight10.minus((org.joda.time.ReadablePeriod) period48);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0S" + "'", str52, "PT0S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateMidnight54);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay4.getFieldTypes();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = yearMonthDay4.toString("T09:36:08.292", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 16);
        org.joda.time.DateTime dateTime36 = dateTime34.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime34.getZone();
        long long39 = dateTimeZone37.previousTransition((long) 36);
        org.joda.time.DateTime dateTime40 = dateTime27.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra(34713);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime40.withSecondOfMinute(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 36L + "'", long39 == 36L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.setFirstDayOfWeek((int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfDay();
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField56.getAsText((int) (short) 1, locale58);
        boolean boolean60 = calendar0.after((java.lang.Object) (short) 1);
        long long61 = calendar0.getTimeInMillis();
        int int62 = calendar0.getMinimalDaysInFirstWeek();
        boolean boolean63 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572519167,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=59,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1644572519167L + "'", long61 == 1644572519167L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj1, chronology7);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 786, chronology7);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusHours(789);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.plusWeeks((int) ' ');
        boolean boolean9 = dateMidnight7.equals((java.lang.Object) 100.0f);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.LocalDate localDate12 = localDate0.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate25 = localDate21.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.joda.time.DateTime dateTime43 = localDate25.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 10, dateTimeZone39);
        org.joda.time.DateTime dateTime45 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        int int46 = localDate0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+29:00" + "'", str40, "+29:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.setFirstDayOfWeek((int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfDay();
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField56.getAsText((int) (short) 1, locale58);
        boolean boolean60 = calendar0.after((java.lang.Object) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = calendar0.getMaximum(22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572519380,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=59,MILLISECOND=380,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime7 = dateTime1.minusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(36000000);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTime7.toString("32", locale11);
        org.joda.time.DateTime dateTime14 = dateTime7.withYear(15);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        int int16 = localDate15.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32" + "'", str12, "32");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (int) (short) 10);
        boolean boolean5 = dateTimeZone3.isStandardOffset(252L);
        long long7 = dateTimeZone3.nextTransition((long) 26);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone3);
        long long12 = dateTimeZone3.convertLocalToUTC(19059L, false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 26L + "'", long7 == 26L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-187780941L) + "'", long12 == (-187780941L));
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 52);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        java.lang.String str10 = property8.getAsShortText();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = localDate19.toInterval(dateTimeZone20);
        int int22 = localDate19.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        int[] intArray28 = yearMonthDay27.getValues();
        boolean boolean29 = localDate19.isAfter((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.LocalDate.Property property30 = localDate19.weekOfWeekyear();
        org.joda.time.LocalDate.Property property31 = localDate19.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        java.util.Date date35 = dateMidnight34.toDate();
        org.joda.time.YearMonthDay yearMonthDay36 = dateMidnight34.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay36.withPeriodAdded(readablePeriod37, 11);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay36.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay41 = property40.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay42 = property40.withMaximumValue();
        int[] intArray43 = yearMonthDay42.getValues();
        int[] intArray44 = yearMonthDay42.getValues();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.minusMonths(28);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.monthOfYear();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime50.minus(readableDuration54);
        org.joda.time.DateTime.Property property56 = dateTime50.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime59 = dateTime50.withField(dateTimeFieldType57, (int) ' ');
        org.joda.time.DateTime dateTime61 = dateTime59.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfCentury(14);
        org.joda.time.DateTime.Property property64 = dateTime61.yearOfCentury();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str68 = dateTimeZone66.getNameKey((long) (-1));
        long long70 = dateTimeZone66.convertUTCToLocal((long) 5);
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone66.getName((long) 0, locale72);
        java.lang.String str74 = dateTimeZone66.toString();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((java.lang.Object) dateTime61, dateTimeZone66);
        java.lang.String str77 = dateTimeZone66.getName((-86400000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.DateTime dateTime79 = yearMonthDay48.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime80 = localDate19.toDateTimeAtStartOfDay(dateTimeZone66);
        int int81 = property8.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan" + "'", str10, "Jan");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 2]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 12, 2]");
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 12, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertNull(str68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 104400005L + "'", long70 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+29:00" + "'", str73, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+29:00" + "'", str74, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+29:00" + "'", str77, "+29:00");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate.Property property30 = localDate11.dayOfWeek();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        int int42 = localDate39.getYearOfCentury();
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate55 = localDate51.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((-1L));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfMinute();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.LocalDate localDate65 = localDate63.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate67 = localDate63.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.DateTime dateTime71 = localDate67.toDateTimeAtCurrentTime(dateTimeZone69);
        boolean boolean72 = dateTimeZone69.isFixed();
        org.joda.time.DateTime dateTime73 = localDate55.toDateTimeAtCurrentTime(dateTimeZone69);
        org.joda.time.DateTime dateTime74 = localDate39.toDateTime(localTime43, dateTimeZone69);
        java.util.TimeZone timeZone75 = dateTimeZone69.toTimeZone();
        calendar31.setTimeZone(timeZone75);
        int int77 = calendar31.getMinimalDaysInFirstWeek();
        java.time.Instant instant78 = calendar31.toInstant();
        java.util.Date date79 = java.util.Date.from(instant78);
        org.joda.time.YearMonthDay yearMonthDay80 = org.joda.time.YearMonthDay.fromDateFields(date79);
        org.joda.time.LocalDate localDate81 = localDate11.withFields((org.joda.time.ReadablePartial) yearMonthDay80);
        org.joda.time.LocalDate localDate83 = localDate11.withYearOfCentury(37);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572519536,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=59,MILLISECOND=536,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+29:00" + "'", str70, "+29:00");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(date79);
// flaky:         org.junit.Assert.assertEquals(date79.toString(), "Fri Feb 11 09:41:59 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        long long8 = chronology4.add((long) 16, (long) (byte) 10, (int) '#');
        org.joda.time.DurationField durationField9 = chronology4.weeks();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1969, chronology4);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 366L + "'", long8 == 366L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays(0);
        org.joda.time.DateTime dateTime17 = dateTime12.plusMillis(100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.minusMonths((int) (short) 1);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        int int28 = calendar27.getFirstDayOfWeek();
        int int29 = calendar27.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        boolean boolean38 = date33.before(date37);
        int int39 = date33.getMonth();
        calendar27.setTime(date33);
        java.util.TimeZone timeZone41 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime12.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.LocalTime localTime10 = dateTime8.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property32.getAsText(locale33);
        int int35 = property32.getLeapAmount();
        org.joda.time.DateTime dateTime36 = property32.withMinimumValue();
        org.joda.time.DurationField durationField37 = property32.getRangeDurationField();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+29:00" + "'", str19, "+29:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+29:00" + "'", str30, "+29:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "January" + "'", str34, "January");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-1L), dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readableDuration12);
        int int14 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        boolean boolean23 = date18.before(date22);
        int int24 = date18.getDay();
        int int25 = date18.getHours();
        date18.setSeconds((int) '4');
        boolean boolean28 = dateTime13.equals((java.lang.Object) date18);
        org.joda.time.DateTime dateTime30 = dateTime13.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime13.toMutableDateTime(dateTimeZone33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(252, 34805967, 34727424, 34799, 34833, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34799 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getFirstDayOfWeek();
        int int13 = calendar11.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        boolean boolean22 = date17.before(date21);
        int int23 = date17.getMonth();
        calendar11.setTime(date17);
        calendar11.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant27 = calendar11.toInstant();
        boolean boolean28 = interval9.equals((java.lang.Object) calendar11);
        calendar11.setFirstDayOfWeek(51);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = calendar11.getMinimum(33710030);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33710030");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=51,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusDays((-1));
        org.joda.time.DateTime dateTime29 = dateTime8.withMinuteOfHour(16);
        org.joda.time.DateTime dateTime31 = dateTime8.withYearOfEra((int) 'a');
        int int32 = dateTime8.getHourOfDay();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTime8.toString("2022", locale34);
        java.util.Locale locale36 = null;
        java.util.Calendar calendar37 = dateTime8.toCalendar(locale36);
        calendar37.set(10022, 34522, 44);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        boolean boolean49 = dateMidnight46.isBefore((long) ' ');
        org.joda.time.LocalDate localDate50 = dateMidnight46.toLocalDate();
        org.joda.time.Chronology chronology51 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfDay();
        long long54 = dateTimeField52.roundHalfCeiling((long) 996);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField52.getAsShortText(47, locale56);
        boolean boolean58 = calendar37.before((java.lang.Object) dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 14 + "'", int32 == 14);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10022,MONTH=34522,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=44,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=59,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "47" + "'", str57, "47");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField21 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = property24.getTimeOfDay();
        int[] intArray26 = timeOfDay25.getValues();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight4.withFields((org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minus((long) (-1));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minus(readablePeriod33);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(1970);
        org.joda.time.Chronology chronology39 = timeOfDay36.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minus((long) (-1));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minus(readablePeriod45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay48.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean65 = interval61.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval61.toPeriod(periodType66);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay54.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay36.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay25.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay70.minusHours(39);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[14, 41, 59, 812]");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date59);
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(timeOfDay72);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        java.util.Calendar calendar14 = builder0.build();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar14);
        // The following exception was thrown during execution in test generation
        try {
            calendar14.roll(800, 33435);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-60972226286000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=28,SECOND=34,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.centuries();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int17 = yearMonthDay7.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.days();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay22.withChronologyRetainFields(chronology28);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay22.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight37.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime44 = dateTime42.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(5);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval67.toPeriod(periodType72);
        org.joda.time.DateTime dateTime74 = dateTime58.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDate localDate76 = localDate54.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 6);
        org.joda.time.PeriodType periodType77 = period73.getPeriodType();
        org.joda.time.DateTime dateTime79 = dateTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period73, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay22.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.MutablePeriod mutablePeriod81 = period73.toMutablePeriod();
        org.joda.time.PeriodType periodType82 = period73.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 34);
        int[] intArray85 = yearMonthDay7.getValues();
        int int86 = yearMonthDay7.getDayOfMonth();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date65);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 2]");
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.withSecondOfMinute(21);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withSecondOfMinute(26);
        org.joda.time.LocalTime localTime17 = timeOfDay14.toLocalTime();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) (-1));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        int int22 = dateMidnight20.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfYear();
        boolean boolean37 = dateMidnight25.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        java.util.Date date48 = dateMidnight47.toDate();
        org.joda.time.DateMidnight.Property property49 = dateMidnight47.dayOfWeek();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableDuration44, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean54 = interval50.isBefore((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTime dateTime55 = interval50.getEnd();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        java.util.Date date63 = dateMidnight62.toDate();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.dayOfWeek();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableDuration59, (org.joda.time.ReadableInstant) dateMidnight62);
        boolean boolean66 = interval58.isAfter((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        org.joda.time.Interval interval70 = interval58.withStart((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = interval50.overlaps((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration72 = interval50.toDuration();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight43.withDurationAdded((org.joda.time.ReadableDuration) duration72, 24);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight25.withDurationAdded((org.joda.time.ReadableDuration) duration72, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property78 = dateMidnight76.property(dateTimeFieldType77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean80 = dateMidnight76.isSupported(dateTimeFieldType79);
        boolean boolean81 = dateMidnight20.isSupported(dateTimeFieldType79);
        boolean boolean82 = timeOfDay14.isSupported(dateTimeFieldType79);
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay14.plusSeconds(809);
        org.joda.time.TimeOfDay.Property property85 = timeOfDay14.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withDayOfMonth(25260000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25260000 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime16.dayOfWeek();
        org.joda.time.DateTime.Property property25 = dateTime16.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.getDateTime();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 10);
        int int38 = localDate35.getYearOfCentury();
        org.joda.time.LocalTime localTime39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate47.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate63 = localDate59.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.lang.String str66 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isFixed();
        org.joda.time.DateTime dateTime69 = localDate51.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = localDate35.toDateTime(localTime39, dateTimeZone65);
        java.util.TimeZone timeZone71 = dateTimeZone65.toTimeZone();
        calendar27.setTimeZone(timeZone71);
        int int73 = calendar27.getMinimalDaysInFirstWeek();
        int int74 = calendar27.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.fromCalendarFields(calendar27);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((-1L), dateTimeZone77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime81 = dateTime78.withFieldAdded(durationFieldType79, 16);
        org.joda.time.DateTime dateTime82 = localDate75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        int int83 = property25.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572520044,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=0,MILLISECOND=44,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+29:00" + "'", str66, "+29:00");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        long long18 = dateTimeZone13.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property25.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = localDate35.toInterval(dateTimeZone36);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.Period period39 = interval37.toPeriod();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weekyears();
        int int41 = period39.get(durationFieldType40);
        org.joda.time.DateTime dateTime42 = dateTime27.minus((org.joda.time.ReadablePeriod) period39);
        int int43 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime42.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.days();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 11, chronology52);
        org.joda.time.DateTime dateTime57 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.plus(readableDuration68);
        org.joda.time.DateTime dateTime71 = dateTime67.withMinuteOfHour(10);
        boolean boolean72 = dateMidnight64.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean74 = dateMidnight64.isSupported(dateTimeFieldType73);
        boolean boolean75 = dateTime56.isSupported(dateTimeFieldType73);
        int int76 = dateTime42.get(dateTimeFieldType73);
        org.joda.time.DateTime dateTime77 = dateTime42.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1659458699000L) + "'", long18 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 104400000 + "'", int43 == 104400000);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay16 = property12.addToCopy(617);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.secondOfMinute();
        java.lang.String str18 = property17.getAsText();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime39 = localDate21.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.Interval interval41 = yearMonthDay4.toInterval(dateTimeZone35);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone35);
        boolean boolean44 = dateTimeZone35.isStandardOffset(2311590L);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-02" + "'", str9, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+29:00" + "'", str36, "+29:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+29:00" + "'", str40, "+29:00");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(70L, chronology8);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.era();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(54);
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.Chronology chronology9 = dateTimeFormatter7.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTimeFormatter7.print((-25252570999999000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNull(chronology9);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.monthOfYear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.minus(readableDuration17);
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = localDate27.toInterval(dateTimeZone28);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, chronology30);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay11.withChronologyRetainFields(chronology30);
        org.joda.time.DurationField durationField33 = durationFieldType6.getField(chronology30);
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        java.lang.String str35 = chronology30.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(369, 34799, 34522, 118800000, 1999, 560, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 118800000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[+29:00]" + "'", str35, "ISOChronology[+29:00]");
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withDefaultYear(1984);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.days();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 11, chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.year();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(32772, 7, 19, chronology25);
        org.joda.time.DurationField durationField33 = chronology25.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter13.withChronology(chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter34.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = dateTimeFormatter35.parseLocalDateTime("T09:41:17.239");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration28 = interval6.toDuration();
        long long29 = interval6.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        boolean boolean37 = dateMidnight34.isBefore((long) ' ');
        org.joda.time.LocalDate localDate38 = dateMidnight34.toLocalDate();
        org.joda.time.Chronology chronology39 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.Interval interval41 = interval6.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minus((long) (-1));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        int int48 = localDate47.getEra();
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra(70);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        int[] intArray56 = yearMonthDay55.getValues();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.withPeriodAdded(readablePeriod57, 22);
        java.lang.String str60 = yearMonthDay55.toString();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay55.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay55.minusMonths(15);
        boolean boolean65 = localDate50.isEqual((org.joda.time.ReadablePartial) yearMonthDay64);
        int int66 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDate50);
        java.util.Locale locale67 = null;
        int int68 = dateTimeField42.getMaximumTextLength(locale67);
        boolean boolean69 = dateTimeField42.isSupported();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-02" + "'", str60, "1970-01-02");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.plusDays(23);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = localDate21.withWeekyear(19);
        org.joda.time.LocalTime localTime28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime33 = localDate21.toDateTime(localTime28, dateTimeZone30);
        java.lang.String str35 = dateTimeZone30.getName(1000L);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(dateTimeZone30);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone30.getName(4L, locale38);
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay4.toDateMidnight(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withYearOfCentury(34891714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34891714 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+29:00" + "'", str24, "+29:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+29:00" + "'", str35, "+29:00");
        org.junit.Assert.assertNotNull(localDate36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 0, 32, 32769, 2100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay12 = property7.addNoWrapToCopy(0);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minus((long) (-1));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusMinutes(1970);
        int[] intArray24 = timeOfDay23.getValues();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusMinutes(59);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay23.withFieldAdded(durationFieldType27, 575);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay12.withFieldAdded(durationFieldType27, (int) (byte) -1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T14:42:00.425" + "'", str6, "T14:42:00.425");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[5, 51, 0, 425]");
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2233-12-30");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateMidnight.Property property54 = dateMidnight2.dayOfWeek();
        boolean boolean55 = dateMidnight2.isAfterNow();
        int int56 = dateMidnight2.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.hourOfDay();
        java.lang.String str9 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.centuryOfEra();
        long long13 = dateTimeField10.set((long) (-1959), 575);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[+29:00]" + "'", str9, "ISOChronology[+29:00]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1754566531198041L + "'", long13 == 1754566531198041L);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateMidnight9.isSupported(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) 5, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(34693, 329, 37, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 329 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        boolean boolean21 = dateMidnight18.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property22 = dateMidnight18.centuryOfEra();
        java.lang.String str23 = property22.getAsShortText();
        org.joda.time.DateMidnight dateMidnight25 = property22.addToCopy((long) 6);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate27.toDateTime(localTime28, dateTimeZone29);
        int int31 = localDate27.getWeekyear();
        org.joda.time.LocalDate.Property property32 = localDate27.dayOfYear();
        org.joda.time.LocalDate localDate33 = property32.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight25.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate38 = localDate33.minusYears(484);
        int[] intArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDate33, 34713, intArray40, 34875);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 41 + "'", int9 == 41);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "19" + "'", str23, "19");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minus((long) (-1));
        org.joda.time.Chronology chronology77 = dateMidnight76.getChronology();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.TimeOfDay timeOfDay80 = timeOfDay78.minus(readablePeriod79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = timeOfDay78.getFieldTypes();
        org.joda.time.DateTime dateTime82 = timeOfDay78.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay78.plusSeconds(779);
        int int85 = timeOfDay84.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = localDate73.isAfter((org.joda.time.ReadablePartial) timeOfDay84);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+29:00" + "'", str52, "+29:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeOfDay84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 619 + "'", int85 == 619);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.centuryOfEra();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.parse("19");
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfMonth(21);
        long long16 = chronology5.set((org.joda.time.ReadablePartial) localDate12, 100L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(32772);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        int[] intArray27 = yearMonthDay26.getValues();
        org.joda.time.LocalDate localDate28 = yearMonthDay26.toLocalDate();
        org.joda.time.DateTime dateTime29 = dateTime19.withFields((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Interval interval59 = interval36.withPeriodAfterStart(readablePeriod58);
        org.joda.time.Interval interval60 = interval36.toInterval();
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime64 = dateTime61.withField(dateTimeFieldType62, 4);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        java.util.Date date68 = dateMidnight67.toDate();
        org.joda.time.YearMonthDay yearMonthDay69 = dateMidnight67.toYearMonthDay();
        int[] intArray70 = yearMonthDay69.getValues();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay69.withPeriodAdded(readablePeriod71, 22);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        java.lang.String str77 = dateTimeZone75.getNameKey((long) (-1));
        long long79 = dateTimeZone75.convertUTCToLocal((long) 5);
        java.util.Locale locale81 = null;
        java.lang.String str82 = dateTimeZone75.getName((long) 0, locale81);
        org.joda.time.Interval interval83 = yearMonthDay69.toInterval(dateTimeZone75);
        org.joda.time.DateTime dateTime84 = interval83.getStart();
        org.joda.time.Chronology chronology85 = interval83.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.halfdays();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.halfdayOfDay();
        boolean boolean88 = dateTimeFieldType62.isSupported(chronology85);
        org.joda.time.DateTime dateTime90 = dateTime29.withField(dateTimeFieldType62, 12);
        boolean boolean91 = localDate12.isSupported(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61567689599900L) + "'", long16 == (-61567689599900L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(date68);
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertNull(str77);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 104400005L + "'", long79 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+29:00" + "'", str82, "+29:00");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime10 = dateTime8.withYear(2);
        org.joda.time.DateTime.Property property11 = dateTime8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        org.joda.time.LocalDate localDate23 = localDate19.withDayOfYear(2);
        org.joda.time.LocalDate localDate25 = localDate19.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property26 = localDate19.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        boolean boolean28 = localDate19.isSupported(durationFieldType27);
        org.joda.time.DateTime dateTime30 = dateTime8.withFieldAdded(durationFieldType27, (int) ' ');
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime8.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        int int3 = dateMidnight2.getYear();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusMonths(762);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays(33626254);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plusYears(34702);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay4.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(5);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        org.joda.time.DateTime dateTime56 = dateTime40.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.LocalDate localDate58 = localDate36.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.PeriodType periodType59 = period55.getPeriodType();
        org.joda.time.DateTime dateTime61 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period55, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period55);
        java.lang.String str63 = period55.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType65 = period55.getFieldType((-1959));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0S" + "'", str63, "PT0S");
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        long long11 = dateTimeField6.remainder((long) (short) -1);
        int int14 = dateTimeField6.getDifference(947L, 97L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.toString();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName(0L, locale35);
        long long39 = dateTimeZone30.convertLocalToUTC((long) 45, false);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 51, 1644624000000L, dateTimeZone30);
        int int42 = dateTimeZone30.getOffset((long) 6);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        boolean boolean52 = dateMidnight49.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property53 = dateMidnight49.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight54 = property53.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.YearMonthDay yearMonthDay59 = dateMidnight57.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        boolean boolean70 = yearMonthDay61.isEqual((org.joda.time.ReadablePartial) localDate69);
        int int71 = property53.compareTo((org.joda.time.ReadablePartial) yearMonthDay61);
        int[] intArray72 = yearMonthDay61.getValues();
        int int73 = yearMonthDay61.getDayOfMonth();
        int[] intArray74 = yearMonthDay61.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) localDate43, 809, intArray74, 122);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 809");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 999L + "'", long11 == 999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+29:00" + "'", str31, "+29:00");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+29:00" + "'", str33, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+29:00" + "'", str36, "+29:00");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-104399955L) + "'", long39 == (-104399955L));
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 104400000 + "'", int42 == 104400000);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1]");
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1970, 1, 1]");
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        int[] intArray12 = localDate11.getValues();
        org.joda.time.LocalDate localDate14 = localDate11.plusMonths(293);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate11.getValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 1, 2]");
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval6.toPeriod(periodType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean23 = interval19.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = interval27.withStart((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = interval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Interval interval42 = interval19.withPeriodAfterStart(readablePeriod41);
        org.joda.time.Interval interval43 = interval19.toInterval();
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        boolean boolean45 = interval6.isAfter((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Interval interval47 = interval6.withDurationAfterStart(readableDuration46);
        org.joda.time.Interval interval49 = interval6.withEndMillis(56L);
        org.joda.time.Interval interval50 = interval6.toInterval();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "millisOfDay" + "'", str1, "millisOfDay");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        int int29 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime32.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property34 = dateTime32.centuryOfEra();
        boolean boolean35 = period18.equals((java.lang.Object) property34);
        org.joda.time.DateTime dateTime36 = property34.getDateTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T14:42:00.905" + "'", str6, "T14:42:00.905");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate50 = localDate44.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property51 = localDate44.centuryOfEra();
        org.joda.time.LocalDate localDate52 = property51.roundCeilingCopy();
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime34.toMutableDateTime(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = chronology53.getDateTimeMillis(21, 34674, (-82), 387, 40, 1903, 34910);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 387 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.DateTime dateTime10 = timeOfDay6.toDateTimeToday(dateTimeZone8);
        int int11 = dateTime10.getYearOfCentury();
        org.joda.time.DateTime.Property property12 = dateTime10.weekyear();
        org.joda.time.DateTime.Property property13 = dateTime10.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+29:00" + "'", str9, "+29:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.Interval interval9 = property4.toInterval();
        org.joda.time.DateMidnight dateMidnight10 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        org.joda.time.DateMidnight.Property property12 = dateMidnight10.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        java.util.Locale locale19 = dateTimeFormatter18.getLocale();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateMidnight10.toString(dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNull(chronology20);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        boolean boolean7 = interval6.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval9 = interval6.withEndMillis((-60522647076000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone2);
        int int4 = yearMonthDay1.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withMonthOfYear(34612781);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34612781 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withPeriodAdded(readablePeriod16, 11);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.centuries();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withChronologyRetainFields(chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        boolean boolean43 = yearMonthDay34.isEqual((org.joda.time.ReadablePartial) localDate42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (-1));
        long long49 = dateTimeZone45.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight50 = localDate42.toDateMidnight(dateTimeZone45);
        long long54 = dateTimeZone45.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str56 = dateTimeZone45.getNameKey((long) 33);
        boolean boolean58 = dateTimeZone45.isStandardOffset((long) 34);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) dateTime27, dateTimeZone45);
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.YearMonthDay yearMonthDay65 = dateMidnight63.toYearMonthDay();
        int[] intArray66 = yearMonthDay65.getValues();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay65.withPeriodAdded(readablePeriod67, 22);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone74);
        java.util.Date date76 = dateMidnight75.toDate();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfWeek();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableDuration72, (org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean82 = interval78.isBefore((org.joda.time.ReadableInterval) interval81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval78.toPeriod(periodType83);
        int int86 = period84.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay69.plus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.LocalDate localDate89 = localDate59.withPeriodAdded((org.joda.time.ReadablePeriod) period84, 13);
        org.joda.time.LocalDate localDate90 = localDate7.plus((org.joda.time.ReadablePeriod) period84);
        java.util.Date date91 = localDate7.toDate();
        java.util.Date date92 = localDate7.toDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 104400005L + "'", long49 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight50);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-104399948L) + "'", long54 == (-104399948L));
// flaky:         org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(date64);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(intArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(date76);
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property77);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(date91);
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Sat Feb 12 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(date92);
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Sat Feb 12 00:00:00 UTC 2022");
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.monthOfYear();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) 5, chronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = chronology47.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter40.withChronology(chronology47);
        java.lang.String str52 = chronology47.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 104400005L + "'", long34 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+29:00" + "'", str37, "+29:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+29:00]" + "'", str52, "ISOChronology[+29:00]");
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        java.util.Date date61 = dateMidnight60.toDate();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.dayOfWeek();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration57, (org.joda.time.ReadableInstant) dateMidnight60);
        boolean boolean64 = interval56.isAfter((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration65 = interval63.toDuration();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight53.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = dateMidnight67.getZone();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.withCenturyOfEra(15);
        org.joda.time.Interval interval71 = dateMidnight70.toInterval();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.withMillis(865501L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(5);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay10.plusMillis(32770);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.centuries();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(70L, chronology25);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology25);
        int int29 = timeOfDay28.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.minusMillis(27);
        int int32 = timeOfDay31.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((-1L), dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readableDuration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readableDuration40);
        int int42 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minus((long) (-1));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.minus(readablePeriod48);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay51.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay51.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        java.util.Date date62 = dateMidnight61.toDate();
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.dayOfWeek();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableDuration58, (org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean68 = interval64.isBefore((org.joda.time.ReadableInterval) interval67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = interval64.toPeriod(periodType69);
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay57.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTime dateTime73 = dateTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period70, 19);
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay31.withPeriodAdded((org.joda.time.ReadablePeriod) period70, 779);
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay10.minus((org.joda.time.ReadablePeriod) period70);
        int int77 = period70.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(34896167, 44, 34832, 484);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34896167 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.dayOfWeek();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23);
        boolean boolean27 = interval19.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval26.withPeriodAfterStart(readablePeriod28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration58 = interval36.toDuration();
        org.joda.time.Interval interval59 = interval29.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime60 = dateTime16.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property62 = dateTime16.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = dateTime16.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration28 = interval6.toDuration();
        org.joda.time.Interval interval30 = interval6.withEndMillis(1092273868569599873L);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.clockhourOfDay();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) 29, (long) 2022, chronology39);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.YearMonthDay yearMonthDay50 = dateMidnight48.toYearMonthDay();
        int[] intArray51 = yearMonthDay50.getValues();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay50.withPeriodAdded(readablePeriod52, 22);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        java.util.Date date61 = dateMidnight60.toDate();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.dayOfWeek();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration57, (org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean67 = interval63.isBefore((org.joda.time.ReadableInterval) interval66);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = interval63.toPeriod(periodType68);
        int int71 = period69.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay54.plus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadablePeriod) period69);
        org.joda.time.Interval interval74 = interval42.withPeriodAfterStart((org.joda.time.ReadablePeriod) period69);
        org.joda.time.PeriodType periodType75 = period69.getPeriodType();
        org.joda.time.Period period76 = mutableInterval31.toPeriod(periodType75);
        int int78 = period76.getValue(0);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property62);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 34612781 + "'", int78 == 34612781);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addToCopy(12);
        java.lang.String str11 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusDays(18);
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int) '4');
        int int18 = dateTime17.getWeekyear();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1968 + "'", int18 == 1968);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfSecond();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 27);
        java.util.Date date2 = localDate1.toDate();
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Fri Jan 02 00:00:00 UTC 1970");
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withFieldAdded(durationFieldType9, 3);
        java.lang.String str12 = yearMonthDay7.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        java.lang.String str22 = property21.toString();
        org.joda.time.YearMonthDay yearMonthDay23 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtMidnight();
        boolean boolean25 = yearMonthDay7.isEqual((org.joda.time.ReadablePartial) yearMonthDay23);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.withYear(38488446);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-02" + "'", str12, "1970-01-02");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[monthOfYear]" + "'", str22, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(yearMonthDay27);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withSecondOfMinute(31);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusSeconds(1439);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withMillisOfSecond(3);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay11.withSecondOfMinute(42);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTime22.getSecondOfMinute();
        int int24 = dateTime22.getMonthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plus((-1659458699000L));
        org.joda.time.DateTime dateTime29 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = timeOfDay17.toString("T09:35:56.811");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 41 + "'", int9 == 41);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = dateTimeFormatter2.parseLocalTime("11 Feb 2022 09:38:07 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(dateTimeParser11);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        org.joda.time.DateMidnight dateMidnight58 = property55.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Jan" + "'", str57, "Jan");
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property32.getAsText(locale33);
        int int35 = property32.getLeapAmount();
        org.joda.time.DateTime dateTime36 = property32.withMinimumValue();
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfCentury();
        int int38 = property37.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+29:00" + "'", str19, "+29:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+29:00" + "'", str30, "+29:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "January" + "'", str34, "January");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property18.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = property18.setCopy("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minuteOfHour\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.lang.Object obj9 = null;
        boolean boolean10 = property6.equals(obj9);
        org.joda.time.DateTime dateTime12 = property6.addToCopy((long) 49);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime15 = property6.addWrapFieldToCopy(53);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime15.withDayOfMonth(345);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 345 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.getDateTime();
        java.lang.String str6 = property4.toString();
        org.joda.time.DateTime dateTime7 = property4.withMinimumValue();
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(27);
        org.joda.time.DateTime dateTime7 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(10);
        org.joda.time.DateMidnight dateMidnight10 = dateTime7.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval12.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime21 = dateTime3.plusYears(46);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        int int23 = dateTime21.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14 + "'", int23 == 14);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.LocalDate localDate17 = property14.addToCopy(32);
        org.joda.time.LocalDate localDate18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate19 = property14.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property14.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "20" + "'", str15, "20");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField6.set(1670750111092L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.plusDays(1200000);
        int int18 = yearMonthDay17.getYear();
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5255 + "'", int18 == 5255);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.seconds();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology5);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate18.withWeekyear(19);
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTime dateTime26 = localDate18.toDateTime(localTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        int int37 = localDate34.getYearOfCentury();
        boolean boolean38 = localDate18.isBefore((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minus((long) (-1));
        org.joda.time.DateTime dateTime42 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateTime dateTime43 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        boolean boolean51 = dateMidnight48.isBefore((long) ' ');
        org.joda.time.LocalDate localDate52 = dateMidnight48.toLocalDate();
        org.joda.time.Chronology chronology53 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.centuryOfEra();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime42.toDateTime(chronology53);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths((-1));
        org.joda.time.DateTime dateTime60 = dateTime56.minusDays(131);
        org.joda.time.DateTime dateTime62 = dateTime60.withYearOfCentury(36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+29:00" + "'", str21, "+29:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.set((int) (byte) -1, 59, (-1), 52, 21, 22);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        java.util.Date date10 = calendar1.getTime();
        calendar1.setMinimalDaysInFirstWeek(3);
        java.util.TimeZone timeZone13 = calendar1.getTimeZone();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        long long22 = dateTimeField19.add((long) (-391), (long) 52);
        java.lang.String str23 = dateTimeField19.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField19.getType();
        boolean boolean25 = calendar1.after((java.lang.Object) dateTimeFieldType24);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar1.getLeastMaximum(7200000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7200000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62043824318000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=3,ERA=1,YEAR=3,MONTH=11,WEEK_OF_YEAR=48,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=21,SECOND=22,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Dec 01 04:21:22 UTC 3");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1640995199609L + "'", long22 == 1640995199609L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str23, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod6, chronology24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        java.util.Locale locale27 = null;
        java.util.Calendar calendar28 = dateMidnight25.toCalendar(locale27);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy("0");
        org.joda.time.DateMidnight dateMidnight12 = property8.getDateMidnight();
        int int13 = property8.getMaximumValue();
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.joda.time.DateMidnight dateMidnight15 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.Period period11 = interval9.toPeriod();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean22 = interval18.isBefore((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTime dateTime23 = interval18.getEnd();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        boolean boolean34 = interval26.isAfter((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.Interval interval38 = interval26.withStart((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = interval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval26.withPeriodAfterStart(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.monthOfYear();
        org.joda.time.Interval interval49 = interval41.withChronology(chronology47);
        boolean boolean50 = interval9.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTime dateTime51 = interval41.getEnd();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        boolean boolean59 = dateMidnight56.isBefore((long) ' ');
        org.joda.time.LocalDate localDate60 = dateMidnight56.toLocalDate();
        org.joda.time.Chronology chronology61 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.Interval interval64 = dateMidnight63.toInterval();
        org.joda.time.Interval interval65 = interval41.overlap((org.joda.time.ReadableInterval) interval64);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNull(interval65);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy((long) 6);
        org.joda.time.DateMidnight dateMidnight13 = property8.addToCopy((long) 44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withDayOfYear(34903);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34903 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("DateTimeField[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[minuteOfHour]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property4.getAsText(locale6);
        org.joda.time.DateMidnight dateMidnight9 = property4.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Friday" + "'", str7, "Friday");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        int int5 = dateTime4.getHourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfDay(34727424);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        java.util.Date date1 = new java.util.Date((long) 3);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra((int) (byte) 10);
        int int13 = localDate10.getYearOfCentury();
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTime(localTime14, dateTimeZone40);
        java.util.TimeZone timeZone46 = dateTimeZone40.toTimeZone();
        calendar2.setTimeZone(timeZone46);
        calendar2.clear();
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getHours();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        boolean boolean58 = dateMidnight55.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property59 = dateMidnight55.centuryOfEra();
        boolean boolean60 = property59.isLeap();
        org.joda.time.DateMidnight dateMidnight62 = property59.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.YearMonthDay yearMonthDay67 = dateMidnight65.toYearMonthDay();
        int[] intArray68 = yearMonthDay67.getValues();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay67.withPeriodAdded(readablePeriod69, 22);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getNameKey((long) (-1));
        long long77 = dateTimeZone73.convertUTCToLocal((long) 5);
        java.util.Locale locale79 = null;
        java.lang.String str80 = dateTimeZone73.getName((long) 0, locale79);
        org.joda.time.Interval interval81 = yearMonthDay67.toInterval(dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime82 = dateMidnight62.toMutableDateTime(dateTimeZone73);
        java.util.Date date83 = dateMidnight62.toDate();
        boolean boolean84 = date49.after(date83);
        calendar2.setTime(date83);
        boolean boolean86 = date1.before(date83);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone88);
        java.util.Date date90 = dateMidnight89.toDate();
        org.joda.time.DateTimeZone dateTimeZone92 = null;
        org.joda.time.DateMidnight dateMidnight93 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone92);
        java.util.Date date94 = dateMidnight93.toDate();
        boolean boolean95 = date90.before(date94);
        int int96 = date90.getMonth();
        date90.setMonth(0);
        boolean boolean99 = date1.after(date90);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-59958248400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=70,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+29:00" + "'", str41, "+29:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Fri Feb 11 09:42:02 UTC 2022");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(intArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertNull(str75);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 104400005L + "'", long77 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+29:00" + "'", str80, "+29:00");
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(date83);
// flaky:         org.junit.Assert.assertEquals(date83.toString(), "Mon Jan 01 19:00:00 UTC 70");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(date90);
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Fri Jan 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date94);
// flaky:         org.junit.Assert.assertEquals(date94.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 11 + "'", int96 == 11);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        long long34 = chronology23.add(10035038L, 1640995199609L, 46);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology23);
        long long39 = chronology23.add(0L, (long) 25260000, 2100);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 75485789217052L + "'", long34 == 75485789217052L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 53046000000L + "'", long39 == 53046000000L);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (-1));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minus(readablePeriod12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        int int19 = dateTimeZone15.getOffset(5L);
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight2.toMutableDateTime(dateTimeZone15);
        long long22 = dateTimeZone15.nextTransition((long) 57);
        java.util.TimeZone timeZone23 = dateTimeZone15.toTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+29:00" + "'", str16, "+29:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 104400000 + "'", int19 == 104400000);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 57L + "'", long22 == 57L);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572522368,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=2,MILLISECOND=368,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        long long16 = calendar0.getTimeInMillis();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime19.minusDays((int) (byte) 10);
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration17, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = dateTime25.isEqualNow();
        org.joda.time.DateTime dateTime29 = dateTime25.minusSeconds(32772);
        boolean boolean30 = calendar0.after((java.lang.Object) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        int int41 = localDate38.getYearOfCentury();
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((-1L));
        org.joda.time.Chronology chronology48 = dateMidnight47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.secondOfMinute();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.LocalDate localDate52 = localDate50.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate54 = localDate50.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plus((-1L));
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.secondOfMinute();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.LocalDate localDate64 = localDate62.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate66 = localDate62.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtCurrentTime(dateTimeZone68);
        boolean boolean71 = dateTimeZone68.isFixed();
        org.joda.time.DateTime dateTime72 = localDate54.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = localDate38.toDateTime(localTime42, dateTimeZone68);
        java.util.TimeZone timeZone74 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        calendar0.setTimeZone(timeZone74);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone74);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-18000000L) + "'", long16 == (-18000000L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+29:00" + "'", str69, "+29:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1644572522384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=2,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval12.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDate localDate20 = dateTime3.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.era();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readableDuration29);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        java.util.Date date35 = dateMidnight34.toDate();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        boolean boolean40 = date35.before(date39);
        int int41 = date35.getDay();
        int int42 = date35.getHours();
        date35.setSeconds((int) '4');
        boolean boolean45 = dateTime30.equals((java.lang.Object) date35);
        org.joda.time.DateTime dateTime47 = dateTime30.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime49 = dateTime30.minusSeconds(4);
        boolean boolean50 = localDate20.equals((java.lang.Object) dateTime30);
        org.joda.time.LocalDate localDate52 = localDate20.plusYears(64);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.LocalDate.Property property54 = localDate52.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plus((-1L));
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.secondOfMinute();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.LocalDate localDate64 = localDate62.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate66 = localDate62.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtCurrentTime(dateTimeZone68);
        java.lang.String str71 = dateTimeZone68.toString();
        boolean boolean73 = dateTimeZone68.isStandardOffset(1644572157415L);
        org.joda.time.DateTime dateTime74 = localDate52.toDateTimeAtCurrentTime(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+29:00" + "'", str69, "+29:00");
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+29:00" + "'", str71, "+29:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("11 Feb 2022 09:35:24 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"11 Feb 2022 09:35:24 GMT\" is malformed at \" Feb 2022 09:35:24 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.set((int) (byte) -1, 59, (-1), 52, 21, 22);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        java.lang.String str11 = durationFieldType10.toString();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.withFieldAdded(durationFieldType10, 59);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay9.plusMillis(34624683);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean23 = dateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = timeOfDay9.get(dateTimeFieldType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62043824318000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=11,WEEK_OF_YEAR=48,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=21,SECOND=22,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hours" + "'", str11, "hours");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        boolean boolean12 = localDate7.equals((java.lang.Object) "19");
        int[] intArray13 = localDate7.getValues();
        org.joda.time.LocalDate localDate15 = localDate7.plusYears(44);
        org.joda.time.LocalDate localDate17 = localDate7.withWeekOfWeekyear(21);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.parse("25260000");
        int int20 = localDate17.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property21 = localDate17.year();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 12]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear(584);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 584 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.DateTime dateTime26 = dateTime7.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTime dateTime27 = dateTime7.withLaterOffsetAtOverlap();
        int int28 = dateTime27.getWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfSecond();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+29:00" + "'", str22, "+29:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(54);
        java.lang.Integer int8 = dateTimeFormatter5.getPivotYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (-1));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minus(readablePeriod14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay17.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay17.withSecondOfMinute(21);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusMillis(31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTimeFormatter5.print((org.joda.time.ReadablePartial) timeOfDay23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 24);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.Chronology chronology23 = timeOfDay20.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (-1));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minus(readablePeriod29);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay32.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean49 = interval45.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval45.toPeriod(periodType50);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay38.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay20.minus((org.joda.time.ReadablePeriod) period51);
        boolean boolean54 = dateTimeZone11.equals((java.lang.Object) period51);
        org.joda.time.Period period55 = period51.toPeriod();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime58 = dateTime5.withYear(46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = dateTime5.withTime(358, 1904, 37, 33330872);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.Interval interval9 = property4.toInterval();
        org.joda.time.DateMidnight dateMidnight10 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        boolean boolean18 = dateMidnight15.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property19 = dateMidnight15.centuryOfEra();
        boolean boolean20 = property19.isLeap();
        org.joda.time.DateMidnight dateMidnight22 = property19.setCopy("0");
        org.joda.time.DateTime dateTime23 = dateMidnight22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.DateTime dateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus((long) (-1));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minus(readablePeriod31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1);
        org.joda.time.DateTime dateTime35 = timeOfDay34.toDateTimeToday();
        org.joda.time.DateTime dateTime37 = dateTime35.plus((long) 14);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears(5);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minus((long) (-1));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minus(readablePeriod49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime54 = timeOfDay50.toDateTimeToday(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) dateTime41, dateTimeZone52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        java.util.Date date63 = dateMidnight62.toDate();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.dayOfWeek();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableDuration59, (org.joda.time.ReadableInstant) dateMidnight62);
        boolean boolean66 = interval58.isAfter((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration67 = interval65.toDuration();
        org.joda.time.DateTime dateTime69 = dateTime41.withDurationAdded((org.joda.time.ReadableDuration) duration67, 20);
        org.joda.time.DateTime dateTime70 = dateTime37.plus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateTime dateTime71 = dateTime25.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight10.withDurationAdded((org.joda.time.ReadableDuration) duration67, 786);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+29:00" + "'", str53, "+29:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant16 = calendar0.toInstant();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int19 = calendar17.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        boolean boolean28 = date23.before(date27);
        int int29 = date23.getMonth();
        calendar17.setTime(date23);
        java.util.TimeZone timeZone31 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        calendar0.setTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 10);
        int int44 = localDate41.getYearOfCentury();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate57 = localDate53.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str72 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtCurrentTime(dateTimeZone71);
        boolean boolean74 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime75 = localDate57.toDateTimeAtCurrentTime(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = localDate41.toDateTime(localTime45, dateTimeZone71);
        java.util.TimeZone timeZone77 = dateTimeZone71.toTimeZone();
        calendar0.setTimeZone(timeZone77);
        java.util.Date date79 = calendar0.getTime();
        java.util.Locale locale82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = calendar0.getDisplayName(323, 34697, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+29:00" + "'", str72, "+29:00");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(date79);
// flaky:         org.junit.Assert.assertEquals(date79.toString(), "Wed Dec 31 19:00:00 UTC 1969");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addToCopy(12);
        java.lang.String str11 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays(54);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, 11);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.centuries();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay23.withChronologyRetainFields(chronology29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(0L, chronology29);
        org.joda.time.DateTime.Property property33 = dateTime32.secondOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillis((long) 2000);
        boolean boolean36 = yearMonthDay12.equals((java.lang.Object) 2000);
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay12.toDateMidnight();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus(readablePeriod6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight5.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate28 = localDate22.withWeekyear(19);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        org.joda.time.LocalDate localDate30 = property29.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate47 = localDate43.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = localDate47.withWeekyear(19);
        org.joda.time.LocalTime localTime54 = null;
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime59 = localDate47.toDateTime(localTime54, dateTimeZone56);
        java.lang.String str61 = dateTimeZone56.getName(1000L);
        org.joda.time.DateTime dateTime62 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.Interval interval63 = localDate30.toInterval(dateTimeZone56);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight10.withChronology(chronology64);
        org.joda.time.DateMidnight dateMidnight66 = org.joda.time.DateMidnight.now(chronology64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay(38488446, 0, 47, chronology64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38488446 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+29:00" + "'", str25, "+29:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+29:00" + "'", str61, "+29:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = property9.setCopy("T00:45:32.617");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T00:45:32.617\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) localDate1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        long long27 = dateTimeZone22.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTimeAtMidnight(dateTimeZone22);
        java.lang.String str29 = localDate8.toString();
        int int30 = localDate8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+29:00" + "'", str23, "+29:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1659458699000L) + "'", long27 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-02" + "'", str29, "1970-01-02");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 5, chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = chronology6.getZone();
        org.joda.time.DurationField durationField10 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.YearMonthDay yearMonthDay16 = dateMidnight14.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.withPeriodAdded(readablePeriod17, 11);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMinimumValue();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property20.getAsText(locale22);
        java.lang.String str24 = property20.getAsText();
        org.joda.time.YearMonthDay yearMonthDay26 = property20.addToCopy(27);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withYear(36);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology36.millis();
        org.joda.time.DurationField durationField39 = durationFieldType30.getField(chronology36);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minus((long) (-1));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minus(readablePeriod45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1970);
        org.joda.time.Chronology chronology51 = timeOfDay48.getChronology();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minus((long) (-1));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.minus(readablePeriod57);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay60.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone69);
        java.util.Date date71 = dateMidnight70.toDate();
        org.joda.time.DateMidnight.Property property72 = dateMidnight70.dayOfWeek();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableDuration67, (org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean77 = interval73.isBefore((org.joda.time.ReadableInterval) interval76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval73.toPeriod(periodType78);
        org.joda.time.TimeOfDay timeOfDay80 = timeOfDay66.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay48.minus((org.joda.time.ReadablePeriod) period79);
        java.lang.String str82 = period79.toString();
        int[] intArray84 = chronology36.get((org.joda.time.ReadablePeriod) period79, (long) 131);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = dateTimeField11.set((org.joda.time.ReadablePartial) yearMonthDay28, 45, intArray84, 862);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "January" + "'", str23, "January");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "January" + "'", str24, "January");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(date71);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT0S" + "'", str82, "PT0S");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 131]");
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setInstant((long) 70);
        java.util.Calendar.Builder builder7 = builder0.setWeekDate(4, 0, (-1));
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder0.setLocale(locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        java.util.Date date5 = new java.util.Date(32769, 33330867, 2, (int) (byte) 10, (-391));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        boolean boolean14 = date9.before(date13);
        int int15 = date9.getMonth();
        java.lang.String str16 = date9.toGMTString();
        boolean boolean17 = date5.before(date9);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromDateFields(date9);
        int int19 = date9.getTimezoneOffset();
        int int20 = date9.getMinutes();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Apr 02 03:29:00 UTC 2812241");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "31 Dec 1969 19:00:00 GMT" + "'", str16, "31 Dec 1969 19:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        int int7 = dateMidnight6.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minus(readablePeriod19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMinutes(1970);
        org.joda.time.Chronology chronology25 = timeOfDay22.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus((long) (-1));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minus(readablePeriod31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay34.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay40.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.PeriodType periodType55 = period53.getPeriodType();
        int[] intArray58 = chronology25.get((org.joda.time.ReadablePeriod) period53, (long) (-1), (long) 24);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight6.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property68 = dateTime65.monthOfYear();
        org.joda.time.DateTime dateTime69 = property68.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean71 = dateTime69.isSupported(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType70.getDurationType();
        boolean boolean73 = dateMidnight63.isSupported(dateTimeFieldType70);
        java.lang.String str74 = dateMidnight63.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970-01-02T00:00:00.000+29:00" + "'", str74, "1970-01-02T00:00:00.000+29:00");
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder13 = builder8.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder17 = builder8.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder21 = builder8.setDate(37, 10, 14);
        java.util.Calendar calendar22 = builder8.build();
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder28 = builder23.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder31 = builder28.set(4, 0);
        java.util.Calendar.Builder builder33 = builder28.setCalendarType("gregory");
        java.util.Calendar.Builder builder35 = builder33.setLenient(true);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        int int37 = calendar36.getFirstDayOfWeek();
        int int38 = calendar36.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        boolean boolean47 = date42.before(date46);
        int int48 = date42.getMonth();
        calendar36.setTime(date42);
        java.util.TimeZone timeZone50 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.Calendar.Builder builder52 = builder33.setTimeZone(timeZone50);
        calendar22.setTimeZone(timeZone50);
        gregorianCalendar6.setTimeZone(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-60972226286000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=28,SECOND=34,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.minus(readableDuration15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate25.toInterval(dateTimeZone26);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime16, chronology28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay9.withChronologyRetainFields(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.era();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight2.toMutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.minuteOfHour();
        org.joda.time.DurationField durationField38 = chronology28.hours();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        boolean boolean46 = dateMidnight43.isBefore((long) ' ');
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.plus((long) 16);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.YearMonthDay yearMonthDay54 = dateMidnight52.toYearMonthDay();
        int[] intArray55 = yearMonthDay54.getValues();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay54.withPeriodAdded(readablePeriod56, 22);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.YearMonthDay yearMonthDay67 = dateMidnight65.toYearMonthDay();
        int[] intArray68 = yearMonthDay67.getValues();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay67.withPeriodAdded(readablePeriod69, 22);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone76);
        java.util.Date date78 = dateMidnight77.toDate();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.dayOfWeek();
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean84 = interval80.isBefore((org.joda.time.ReadableInterval) interval83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval80.toPeriod(periodType85);
        int int88 = period86.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay71.plus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay62.plus((org.joda.time.ReadablePeriod) period86);
        java.lang.String str91 = period86.toString();
        org.joda.time.LocalDate localDate92 = localDate49.minus((org.joda.time.ReadablePeriod) period86);
        long long95 = chronology28.add((org.joda.time.ReadablePeriod) period86, 31535980966L, 584);
        org.joda.time.DateTimeField dateTimeField96 = chronology28.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long99 = dateTimeField96.set(104400005L, 213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 213 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(intArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT0S" + "'", str91, "PT0S");
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 31535980966L + "'", long95 == 31535980966L);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        boolean boolean11 = localDate7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        int int17 = dateTime16.getSecondOfMinute();
        int int18 = dateTime16.getMonthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean24 = dateTime20.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = localDate7.withFieldAdded(durationFieldType25, 1904);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter8.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = localDate21.withWeekyear(19);
        org.joda.time.LocalTime localTime28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime33 = localDate21.toDateTime(localTime28, dateTimeZone30);
        int int34 = dateTime33.getYear();
        org.joda.time.DateTime.Property property35 = dateTime33.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime33.toYearMonthDay();
        int int37 = yearMonthDay36.size();
        org.joda.time.Chronology chronology38 = yearMonthDay36.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter8.withChronology(chronology38);
        org.joda.time.DurationField durationField40 = chronology38.millis();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(33330872, 34545, (-32), chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34545 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+29:00" + "'", str24, "+29:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minusYears(1970);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        boolean boolean20 = interval12.isAfter((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = interval19.withPeriodAfterStart(readablePeriod21);
        boolean boolean23 = dateMidnight4.equals((java.lang.Object) readablePeriod21);
        org.joda.time.DateTime dateTime24 = dateMidnight4.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight4.plusWeeks(19);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight4.withYearOfEra(32769);
        java.util.Date date29 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay30 = org.joda.time.YearMonthDay.fromDateFields(date29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Sat Feb 12 19:00:00 UTC 52");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        long long10 = dateTimeField8.roundHalfEven((long) (byte) 1);
        java.lang.String str12 = dateTimeField8.getAsText(10L);
        boolean boolean14 = dateTimeField8.isLeap((long) (-391));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight17.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        boolean boolean30 = yearMonthDay21.isEqual((org.joda.time.ReadablePartial) localDate29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (-1));
        long long36 = dateTimeZone32.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight37 = localDate29.toDateMidnight(dateTimeZone32);
        org.joda.time.LocalDate localDate39 = localDate29.plusDays(53);
        org.joda.time.LocalDate localDate41 = localDate29.plusWeeks(19);
        org.joda.time.LocalDate localDate43 = localDate41.withCenturyOfEra(12);
        java.lang.String str44 = localDate41.toString();
        org.joda.time.LocalDate localDate46 = localDate41.minusYears(0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.YearMonthDay yearMonthDay51 = dateMidnight49.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay51.withPeriodAdded(readablePeriod52, 11);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay51.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay56 = property55.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay57 = property55.withMaximumValue();
        int[] intArray58 = yearMonthDay57.getValues();
        int int59 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDate41, intArray58);
        boolean boolean60 = dateTimeField8.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-104400000L) + "'", long10 == (-104400000L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 104400005L + "'", long36 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-06-25" + "'", str44, "2022-06-25");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 12, 2]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.dayOfWeek();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23);
        boolean boolean27 = interval19.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval26.withPeriodAfterStart(readablePeriod28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration58 = interval36.toDuration();
        org.joda.time.Interval interval59 = interval29.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime60 = dateTime16.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property62 = dateTime16.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime64 = property62.addToCopy((int) (short) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        int int56 = localDate53.getYearOfCentury();
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plus((-1L));
        org.joda.time.Chronology chronology75 = dateMidnight74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfMinute();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.LocalDate localDate79 = localDate77.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate81 = localDate77.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        java.lang.String str84 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime85 = localDate81.toDateTimeAtCurrentTime(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isFixed();
        org.joda.time.DateTime dateTime87 = localDate69.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDate53.toDateTime(localTime57, dateTimeZone83);
        java.util.TimeZone timeZone89 = dateTimeZone83.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forTimeZone(timeZone89);
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone89);
        calendar0.setTimeZone(timeZone89);
        org.joda.time.LocalDate localDate93 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        calendar0.add(0, 52);
        boolean boolean97 = calendar0.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=3,MILLISECOND=406,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+29:00" + "'", str84, "+29:00");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=1644572523406,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=3,MILLISECOND=406,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minus((long) (-1));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        boolean boolean30 = property24.equals((java.lang.Object) chronology28);
        org.joda.time.LocalDate localDate32 = property24.setCopy(17);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight37 = dateTime36.toDateMidnight();
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.centuryOfEra();
        int int39 = dateMidnight37.getWeekyear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusMonths(27);
        int int42 = dateMidnight41.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight45.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.monthOfYear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime49.minus(readableDuration53);
        org.joda.time.DateMidnight dateMidnight55 = dateTime54.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((-1L));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfMinute();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = localDate63.toInterval(dateTimeZone64);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) dateTime54, chronology66);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay47.withChronologyRetainFields(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.seconds();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology66.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight41, chronology66);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight41.withCenturyOfEra(5601);
        java.lang.Object obj76 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone82);
        java.util.Date date84 = dateMidnight83.toDate();
        org.joda.time.DateMidnight.Property property85 = dateMidnight83.dayOfWeek();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableDuration80, (org.joda.time.ReadableInstant) dateMidnight83);
        boolean boolean87 = interval79.isAfter((org.joda.time.ReadableInterval) interval86);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Interval interval89 = interval86.withPeriodAfterStart(readablePeriod88);
        long long90 = interval86.toDurationMillis();
        org.joda.time.Chronology chronology91 = interval86.getChronology();
        org.joda.time.YearMonthDay yearMonthDay92 = new org.joda.time.YearMonthDay(obj76, chronology91);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight41.withFields((org.joda.time.ReadablePartial) yearMonthDay92);
        boolean boolean94 = localDate32.equals((java.lang.Object) dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(date84);
// flaky:         org.junit.Assert.assertEquals(date84.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minus((long) (-1));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology8);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology12.years();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) 1439, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((-20055), 27, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -20055 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        int int14 = timeOfDay13.size();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay13.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = property15.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        java.lang.String str10 = dateTimeField8.getAsShortText((long) 23);
        java.lang.String str11 = dateTimeField8.getName();
        long long13 = dateTimeField8.roundFloor((long) 1439);
        org.joda.time.DurationField durationField14 = dateTimeField8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(31449600000L);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withSecondOfMinute(0);
        int int19 = timeOfDay18.getHourOfDay();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) timeOfDay18, 34620, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34620");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan" + "'", str10, "Jan");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-104400000L) + "'", long13 == (-104400000L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(timeOfDay18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusYears(50400000);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withZoneRetainFields(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal(1670750256586L);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(dateTimeZone10);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusSeconds(34771);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 104400000 + "'", int13 == 104400000);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime39 = localDate21.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.Interval interval41 = yearMonthDay4.toInterval(dateTimeZone35);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusMonths(43);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-02" + "'", str9, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+29:00" + "'", str36, "+29:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+29:00" + "'", str40, "+29:00");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(365, 34660, (-391), 46, 34620, (-32));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate11.toDateTime(localTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        int int30 = localDate27.getYearOfCentury();
        boolean boolean31 = localDate11.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int33 = localDate11.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDate localDate35 = localDate11.plusYears(16);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        int int40 = date39.getHours();
        int int41 = date39.getDay();
        int int42 = date39.getDay();
        date39.setYear(4);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.fromDateFields(date39);
        org.joda.time.DateTime dateTime46 = localDate45.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate48 = localDate45.plusWeeks(36);
        boolean boolean49 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate48);
        int int50 = localDate48.getDayOfWeek();
        org.joda.time.LocalDate.Property property51 = localDate48.dayOfWeek();
        int int52 = property51.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Sat Dec 31 19:00:00 UTC 1904");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.months();
        org.joda.time.DurationField durationField9 = chronology4.halfdays();
        org.joda.time.DurationField durationField10 = chronology4.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(obj0);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        long long34 = chronology23.add(10035038L, 1640995199609L, 46);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.minuteOfDay();
        boolean boolean36 = dateTimeField35.isSupported();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 75485789217052L + "'", long34 == 75485789217052L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.withPeriodAdded(readablePeriod7, 11);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.withChronologyRetainFields(chronology15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DurationField durationField19 = chronology15.weekyears();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) 31, chronology15);
        int int23 = yearMonthDay22.getDayOfMonth();
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(5);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(581);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(6);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfSecond((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        boolean boolean12 = dateTime11.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.property(dateTimeFieldType3);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight2);
        int int6 = timeOfDay5.size();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusMinutes(4);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay5.millisOfSecond();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay5.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        int int5 = localDate1.getWeekyear();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfCentury(56);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        org.joda.time.LocalDate localDate11 = localDate1.withFieldAdded(durationFieldType9, 0);
        int int12 = localDate11.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.seconds();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology5);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        long long13 = dateTimeField10.getDifferenceAsLong(0L, 0L);
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField10.getMaximumValue(readablePartial14);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        boolean boolean9 = dateMidnight6.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.centuryOfEra();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateMidnight dateMidnight12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight12.withChronology(chronology18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.halfdayOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((-61567603199900L), chronology18);
        org.joda.time.DateTimeField dateTimeField25 = chronology18.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        boolean boolean33 = dateMidnight30.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property34 = dateMidnight30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = property34.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.YearMonthDay yearMonthDay40 = dateMidnight38.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((-1L));
        org.joda.time.Chronology chronology48 = dateMidnight47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.secondOfMinute();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        boolean boolean51 = yearMonthDay42.isEqual((org.joda.time.ReadablePartial) localDate50);
        int int52 = property34.compareTo((org.joda.time.ReadablePartial) yearMonthDay42);
        int[] intArray53 = yearMonthDay42.getValues();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        boolean boolean61 = dateMidnight58.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property62 = dateMidnight58.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = property62.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateMidnight.Property property65 = dateMidnight63.property(dateTimeFieldType64);
        org.joda.time.DateMidnight dateMidnight67 = property65.addToCopy((int) (byte) 1);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.plus((-82800391L));
        org.joda.time.DateTime dateTime71 = yearMonthDay42.toDateTime((org.joda.time.ReadableInstant) dateMidnight67);
        int int72 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 59 + "'", int72 == 59);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.dayOfWeek();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableDuration11, (org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean21 = interval17.isBefore((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval17.toPeriod(periodType22);
        int int25 = period23.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay8.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.YearMonthDay yearMonthDay31 = dateMidnight29.toYearMonthDay();
        int[] intArray32 = yearMonthDay31.getValues();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.withPeriodAdded(readablePeriod33, 22);
        java.lang.String str36 = yearMonthDay31.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfMinute();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.LocalDate localDate58 = localDate56.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate60 = localDate56.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtCurrentTime(dateTimeZone62);
        boolean boolean65 = dateTimeZone62.isFixed();
        org.joda.time.DateTime dateTime66 = localDate48.toDateTimeAtCurrentTime(dateTimeZone62);
        java.lang.String str67 = dateTimeZone62.toString();
        org.joda.time.Interval interval68 = yearMonthDay31.toInterval(dateTimeZone62);
        boolean boolean69 = yearMonthDay26.isEqual((org.joda.time.ReadablePartial) yearMonthDay31);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-02" + "'", str36, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+29:00" + "'", str63, "+29:00");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+29:00" + "'", str67, "+29:00");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minus(readablePeriod11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = timeOfDay12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTime3, dateTimeZone14);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration29 = interval27.toDuration();
        org.joda.time.DateTime dateTime31 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration29, 20);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfMonth(12);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property40 = dateTime37.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.DateTime dateTime42 = property40.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minus((long) (-1));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        int int47 = dateMidnight45.getYearOfEra();
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight.Property property49 = dateMidnight45.weekyear();
        int int50 = dateMidnight45.getMillisOfSecond();
        int int51 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime31.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+29:00" + "'", str15, "+29:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone52);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears(5);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean26 = interval22.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval22.toPeriod(periodType27);
        org.joda.time.DateTime dateTime29 = dateTime13.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime29.withZoneRetainFields(dateTimeZone32);
        java.lang.String str36 = dateTimeZone32.getName(292278994L);
        org.joda.time.Chronology chronology37 = chronology4.withZone(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology37.getDateTimeMillis(578, 2026, 34714550, 0, 79, (int) (short) 100, 76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+29:00" + "'", str36, "+29:00");
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(34585);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy("0");
        boolean boolean12 = dateMidnight11.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = localDate20.getField(1);
        org.joda.time.LocalDate localDate24 = localDate20.withDayOfYear(2);
        org.joda.time.LocalDate localDate26 = localDate20.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate39 = localDate35.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate47.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str54 = dateTimeZone53.toString();
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtCurrentTime(dateTimeZone53);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.DateTime dateTime57 = localDate39.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.LocalDate localDate59 = localDate39.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        boolean boolean62 = localDate59.isSupported(durationFieldType61);
        boolean boolean63 = localDate20.isSupported(durationFieldType61);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight11.withFieldAdded(durationFieldType61, 15);
        java.lang.String str66 = durationFieldType61.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+29:00" + "'", str54, "+29:00");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "days" + "'", str66, "days");
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        int int5 = dateTime4.getHourOfDay();
        java.util.Locale locale6 = null;
        java.util.Calendar calendar7 = dateTime4.toCalendar(locale6);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=34924155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=4,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay6.withChronologyRetainFields(chronology12);
        org.joda.time.DurationField durationField17 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.minuteOfHour();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 16, chronology12);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(1391247675549L, chronology12);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minus(readablePeriod11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay10.getFieldTypes();
        org.joda.time.DateTime dateTime14 = timeOfDay10.toDateTimeToday();
        int int15 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight16 = property5.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusMonths(33334743);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-19034) + "'", int15 == (-19034));
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        int int21 = localDate18.getDayOfMonth();
        int int22 = localDate18.getYear();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate18, locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate localDate27 = localDate18.withField(dateTimeFieldType25, 8);
        int int28 = localDate18.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        boolean boolean36 = dateMidnight33.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property37 = dateMidnight33.centuryOfEra();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.DateMidnight dateMidnight40 = property37.addToCopy((long) 6);
        int int41 = property37.get();
        org.joda.time.DateMidnight dateMidnight42 = property37.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis(70L);
        org.joda.time.DateTime dateTime45 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(25260000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime47.withYearOfCentury(1999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1999 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb" + "'", str24, "Feb");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "19" + "'", str38, "19");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        int int29 = dateTime26.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.DateTime dateTime56 = dateTime37.withFields((org.joda.time.ReadablePartial) localDate55);
        boolean boolean57 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime37);
        long long58 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property59 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime60 = dateTime26.toDateTimeISO();
        int int61 = dateTime60.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime60.withTime(46, 0, 302, 1917);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+29:00" + "'", str52, "+29:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 43 + "'", int61 == 43);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        int int4 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.minusYears((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis(1200000);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((-19035));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19035 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone15);
        java.lang.String str20 = dateTimeZone15.getNameKey((long) 2022);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-1L), dateTimeZone23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, 16);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime24.getZone();
        long long30 = dateTimeZone28.nextTransition(1644572120548L);
        org.joda.time.DateMidnight dateMidnight31 = localDate21.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight34.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar42 = dateMidnight40.toGregorianCalendar();
        boolean boolean43 = localDate21.equals((java.lang.Object) gregorianCalendar42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight46.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay48.withPeriodAdded(readablePeriod49, 11);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay48.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property52.getAsText(locale54);
        org.joda.time.YearMonthDay yearMonthDay57 = property52.addToCopy(40);
        boolean boolean58 = gregorianCalendar42.before((java.lang.Object) 40);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = gregorianCalendar42.getDisplayName(104400000, 2000, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+29:00" + "'", str16, "+29:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572120548L + "'", long30 == 1644572120548L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "January" + "'", str55, "January");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay11 = property7.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T14:42:04.325" + "'", str6, "T14:42:04.325");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "4" + "'", str8, "4");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.plusMonths(14);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar15 = dateMidnight14.toGregorianCalendar();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        int[] intArray23 = yearMonthDay22.getValues();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.withPeriodAdded(readablePeriod24, 22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        int[] intArray36 = yearMonthDay35.getValues();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.withPeriodAdded(readablePeriod37, 22);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean52 = interval48.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval48.toPeriod(periodType53);
        int int56 = period54.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay39.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay30.plus((org.joda.time.ReadablePeriod) period54);
        int[] intArray61 = chronology16.get((org.joda.time.ReadablePeriod) period54, (long) 42, 1644537600029L);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime68 = dateTime65.withFieldAdded(durationFieldType66, 16);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime65.getZone();
        org.joda.time.Interval interval70 = yearMonthDay8.toInterval(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.secondOfMinute();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        org.joda.time.LocalDate localDate80 = localDate78.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate82 = localDate78.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property83 = localDate82.era();
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = localDate82.getFields();
        org.joda.time.LocalDate.Property property85 = localDate82.dayOfYear();
        org.joda.time.LocalDate localDate87 = localDate82.withYearOfCentury(52);
        boolean boolean88 = yearMonthDay8.equals((java.lang.Object) localDate82);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay8.minusMonths(0);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(yearMonthDay90);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.plusDays(23);
        int int10 = yearMonthDay9.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight11.getZone();
        boolean boolean16 = dateTimeZone14.isStandardOffset(14400001L);
        org.joda.time.DateTime dateTime17 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone14);
        long long19 = dateTimeZone14.nextTransition(719528L);
        int int21 = dateTimeZone14.getStandardOffset((-82800391L));
        long long23 = dateTimeZone14.nextTransition(1644572442858L);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 719528L + "'", long19 == 719528L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 104400000 + "'", int21 == 104400000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644572442858L + "'", long23 == 1644572442858L);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate(59, 69, 8);
        java.util.Calendar.Builder builder16 = builder8.setWeekDate(29, 32, 29);
        java.util.Calendar.Builder builder20 = builder16.setDate((-378559), 33330867, 37);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime50 = localDate32.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate52 = localDate32.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.property(dateTimeFieldType56);
        org.joda.time.LocalDate.Property property58 = localDate52.property(dateTimeFieldType56);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str61 = dateTimeZone60.toString();
        org.joda.time.Interval interval62 = localDate52.toInterval(dateTimeZone60);
        java.util.TimeZone timeZone63 = dateTimeZone60.toTimeZone();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone63);
        java.util.Calendar.Builder builder65 = builder16.setTimeZone(timeZone63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder67 = builder16.setCalendarType("T09:39:06.104");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: T09:39:06.104");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+29:00" + "'", str47, "+29:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+29:00" + "'", str61, "+29:00");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644572524495,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=4,MILLISECOND=495,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        org.joda.time.LocalDate localDate12 = localDate7.plusYears(54);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        int int14 = calendar13.getFirstDayOfWeek();
        int int15 = calendar13.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date19.getMonth();
        calendar13.setTime(date19);
        java.util.TimeZone timeZone27 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.getID();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((-1L), dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.plus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        int int39 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        boolean boolean48 = date43.before(date47);
        int int49 = date43.getDay();
        int int50 = date43.getHours();
        date43.setSeconds((int) '4');
        boolean boolean53 = dateTime38.equals((java.lang.Object) date43);
        org.joda.time.DateTime dateTime55 = dateTime38.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime38.minusDays((-1));
        org.joda.time.DateTime dateTime59 = dateTime38.withMinuteOfHour(16);
        org.joda.time.DateTime dateTime61 = dateTime38.withYearOfEra((int) 'a');
        int int62 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateMidnight dateMidnight63 = localDate12.toDateMidnight(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Etc/UTC" + "'", str29, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 19 + "'", int50 == 19);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateMidnight63);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        int int9 = yearMonthDay4.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.DateMidnight.Property property15 = dateMidnight13.dayOfWeek();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean20 = interval16.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime21 = interval16.getEnd();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime21.withZone(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay4.toDateMidnight(dateTimeZone35);
        java.lang.String str40 = yearMonthDay4.toString();
        org.joda.time.DateMidnight dateMidnight41 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+29:00" + "'", str36, "+29:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-02" + "'", str40, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.LocalDate localDate13 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate15 = property10.addWrapFieldToCopy(953);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3369600000L + "'", long12 == 3369600000L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        boolean boolean18 = localDate15.isSupported(durationFieldType17);
        java.util.Date date19 = localDate15.toDate();
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Jan 02 00:00:00 UTC 1970");
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 617);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.centuries();
        long long12 = chronology7.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfEra();
        org.joda.time.DurationField durationField14 = chronology7.days();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateTimeField dateTimeField16 = chronology7.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight1.withChronology(chronology7);
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 292279042L + "'", long12 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime.Property property19 = dateTime17.dayOfYear();
        boolean boolean20 = dateMidnight8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.era();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28);
        boolean boolean32 = interval24.isAfter((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration33 = interval31.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration33, 52);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTime dateTime38 = dateTime17.withFieldAdded(durationFieldType36, 53);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean50 = interval42.isAfter((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Interval interval52 = interval49.withPeriodAfterStart(readablePeriod51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Interval interval54 = interval52.withPeriodAfterStart(readablePeriod53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.monthOfYear();
        org.joda.time.DateTime dateTime60 = property59.withMaximumValue();
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.Chronology chronology69 = dateMidnight68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.centuries();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(70L, chronology69);
        org.joda.time.DateTime dateTime72 = dateTime62.toDateTime(chronology69);
        org.joda.time.Interval interval73 = interval54.withChronology(chronology69);
        org.joda.time.DurationField durationField74 = chronology69.years();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(1644789600029L, chronology69);
        long long79 = chronology69.add((-292275000L), (long) 49, 50);
        org.joda.time.DateTime dateTime80 = dateTime38.withChronology(chronology69);
        boolean boolean81 = durationFieldType5.isSupported(chronology69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(56, 34771, 302, (int) ' ', chronology69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-292272550L) + "'", long79 == (-292272550L));
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addWrapFieldToCopy(32770);
        org.joda.time.DurationField durationField16 = property12.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) durationField16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 51, 4, 722]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.plusWeeks((int) ' ');
        boolean boolean18 = dateMidnight16.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.minus(readableDuration19);
        int int21 = dateMidnight16.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) (-1));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        int int26 = dateMidnight24.getYearOfEra();
        boolean boolean27 = dateMidnight16.isEqual((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.minus((long) 15);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight16.plusMonths(70);
        boolean boolean32 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.monthOfYear();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.minus(readableDuration38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        boolean boolean42 = dateMidnight40.isEqual(1644572146319L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readableDuration45);
        org.joda.time.DateTime dateTime48 = dateTime44.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) (-1));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.minus(readablePeriod54);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay57.minusMinutes(1970);
        org.joda.time.Chronology chronology60 = timeOfDay57.getChronology();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minus((long) (-1));
        org.joda.time.Chronology chronology64 = dateMidnight63.getChronology();
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.minus(readablePeriod66);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay67.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay69.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay69.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay73.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone78);
        java.util.Date date80 = dateMidnight79.toDate();
        org.joda.time.DateMidnight.Property property81 = dateMidnight79.dayOfWeek();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableDuration76, (org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean86 = interval82.isBefore((org.joda.time.ReadableInterval) interval85);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = interval82.toPeriod(periodType87);
        org.joda.time.TimeOfDay timeOfDay89 = timeOfDay75.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.PeriodType periodType90 = period88.getPeriodType();
        int[] intArray93 = chronology60.get((org.joda.time.ReadablePeriod) period88, (long) (-1), (long) 24);
        org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadablePeriod) period88);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight40.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period88);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = period88.getValue(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 33 + "'", int21 == 33);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property81);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(dateMidnight96);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(70L, chronology8);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = property14.setCopy(32772);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusWeeks(50);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minus((long) (-1));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minus(readablePeriod24);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.minusMinutes(1);
        org.joda.time.DateTime dateTime28 = timeOfDay27.toDateTimeToday();
        org.joda.time.DateTime dateTime29 = timeOfDay27.toDateTimeToday();
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday();
        boolean boolean31 = dateMidnight16.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.dayOfWeek();
        int int33 = dateTime30.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 14 + "'", int33 == 14);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        long long5 = dateTimeZone1.convertUTCToLocal((long) 5);
        long long8 = dateTimeZone1.convertLocalToUTC(32L, false);
        java.lang.String str10 = dateTimeZone1.getName(259199999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 104400005L + "'", long5 == 104400005L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-104399968L) + "'", long8 == (-104399968L));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+29:00" + "'", str10, "+29:00");
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval2.isAfter((long) 23);
        long long17 = interval2.getStartMillis();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) (-1));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        int int22 = dateMidnight20.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTimeAtMidnight(dateTimeZone29);
        long long32 = dateTimeZone29.previousTransition((long) 252);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight20.withZoneRetainFields(dateTimeZone29);
        boolean boolean34 = interval2.contains((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.YearMonthDay yearMonthDay46 = dateMidnight44.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime49 = yearMonthDay46.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears(5);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        java.util.Date date72 = dateMidnight71.toDate();
        org.joda.time.DateMidnight.Property property73 = dateMidnight71.dayOfWeek();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean78 = interval74.isBefore((org.joda.time.ReadableInterval) interval77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        org.joda.time.DateTime dateTime81 = dateTime65.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDate localDate83 = localDate61.withPeriodAdded((org.joda.time.ReadablePeriod) period80, 6);
        org.joda.time.PeriodType periodType84 = period80.getPeriodType();
        org.joda.time.DateTime dateTime86 = dateTime49.withPeriodAdded((org.joda.time.ReadablePeriod) period80, (int) '#');
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight41.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Interval interval88 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period80);
        boolean boolean89 = interval2.isBeforeNow();
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 252L + "'", long32 == 252L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter6.withDefaultYear(369);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = dateTimeFormatter43.print(795L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 104400005L + "'", long34 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+29:00" + "'", str37, "+29:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withDefaultYear(34555);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = dateTimeFormatter6.parseLocalTime("2");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate42 = localDate36.withWeekyear(19);
        org.joda.time.LocalTime localTime43 = null;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime48 = localDate36.toDateTime(localTime43, dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.getName(1000L);
        org.joda.time.DateTime dateTime51 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.Interval interval52 = localDate19.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate54 = localDate19.withYear(36);
        int int55 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate localDate57 = localDate19.plusMonths(513);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(76, 55, 71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 29, (long) 2022, chronology7);
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean22 = interval18.isBefore((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTime dateTime23 = interval18.getEnd();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        boolean boolean34 = interval26.isAfter((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.Interval interval38 = interval26.withStart((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = interval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval26.withPeriodAfterStart(readablePeriod40);
        boolean boolean42 = interval10.isAfter((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime44.monthOfYear();
        org.joda.time.DateTime dateTime48 = property47.withMaximumValue();
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.centuries();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(70L, chronology57);
        org.joda.time.DateTime dateTime60 = dateTime50.toDateTime(chronology57);
        long long61 = dateTime60.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval62 = interval10.withStart((org.joda.time.ReadableInstant) dateTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1670750464950L + "'", long61 == 1670750464950L);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        int int11 = localDate7.getYear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime12.withField(dateTimeFieldType15, 37);
        int int18 = dateTime17.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime17.withDate(34815702, (-378559), 387);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -378559 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology5.days();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar21 = dateMidnight20.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight26.toYearMonthDay();
        int[] intArray29 = yearMonthDay28.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.withPeriodAdded(readablePeriod30, 22);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        int[] intArray42 = yearMonthDay41.getValues();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.withPeriodAdded(readablePeriod43, 22);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.dayOfWeek();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean58 = interval54.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval54.toPeriod(periodType59);
        int int62 = period60.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay45.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay36.plus((org.joda.time.ReadablePeriod) period60);
        int[] intArray67 = chronology22.get((org.joda.time.ReadablePeriod) period60, (long) 42, 1644537600029L);
        int[] intArray69 = chronology5.get((org.joda.time.ReadablePeriod) period60, (-60522398665211L));
        org.joda.time.DateTimeField dateTimeField70 = chronology5.secondOfDay();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone76);
        java.util.Date date78 = dateMidnight77.toDate();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.dayOfWeek();
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77);
        boolean boolean81 = interval73.isAfter((org.joda.time.ReadableInterval) interval80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((-1L), dateTimeZone83);
        org.joda.time.Interval interval85 = interval73.withStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDate localDate86 = dateTime84.toLocalDate();
        org.joda.time.LocalDate.Property property87 = localDate86.yearOfEra();
        org.joda.time.LocalDate localDate89 = localDate86.withYearOfCentury(5);
        int int90 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) localDate89);
        int int91 = dateTimeField70.getMinimumValue();
        long long93 = dateTimeField70.roundHalfEven((long) 2130);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, -100070, 0, -17, -24, -25, -211]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 2000L + "'", long93 == 2000L);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        int int13 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateMidnight.Property property54 = dateMidnight2.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean65 = interval61.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval61.toPeriod(periodType66);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight2.minus((org.joda.time.ReadablePeriod) period67);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = period67.getValue(34773284);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34773284");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(date59);
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property11.addWrapFieldToCopy(999);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay4.withDayOfMonth((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay4.year();
        java.util.Locale locale29 = null;
        int int30 = property28.getMaximumShortTextLength(locale29);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.halfdayOfDay();
        org.joda.time.Chronology chronology23 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        long long26 = dateTimeField24.remainder((-19034L));
        java.lang.String str27 = dateTimeField24.toString();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31535980966L + "'", long26 == 31535980966L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str27, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int11 = timeOfDay10.size();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        boolean boolean19 = dateMidnight16.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property20 = dateMidnight16.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight16.minusWeeks(17);
        org.joda.time.DateMidnight.Property property23 = dateMidnight16.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight25 = property23.addToCopy((long) 15);
        int int26 = property23.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(10);
        boolean boolean29 = property23.equals((java.lang.Object) dateTimeZone28);
        int int31 = dateTimeZone28.getStandardOffset((-1167609599948L));
        org.joda.time.DateTime dateTime32 = timeOfDay10.toDateTimeToday(dateTimeZone28);
        int int33 = timeOfDay10.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        boolean boolean9 = dateMidnight6.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.centuryOfEra();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateMidnight dateMidnight12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight12.withChronology(chronology18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.halfdayOfDay();
        org.joda.time.Chronology chronology24 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(0L, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.era();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology24.getDateTimeMillis(7014000255285569199L, 31, 25, 43, 833);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime.Property property11 = dateTime1.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.property(dateTimeFieldType3);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight2);
        int int6 = timeOfDay5.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay5.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.minusMillis(2022);
        int int10 = timeOfDay5.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        boolean boolean18 = localDate15.isSupported(durationFieldType17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        boolean boolean26 = dateMidnight23.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight28 = property27.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.YearMonthDay yearMonthDay33 = dateMidnight31.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        boolean boolean44 = yearMonthDay35.isEqual((org.joda.time.ReadablePartial) localDate43);
        int int45 = property27.compareTo((org.joda.time.ReadablePartial) yearMonthDay35);
        int[] intArray46 = yearMonthDay35.getValues();
        int int47 = yearMonthDay35.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay35.minusMonths(2022);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay35.minusMonths(46);
        boolean boolean52 = localDate15.isEqual((org.joda.time.ReadablePartial) yearMonthDay35);
        org.joda.time.LocalDate localDate54 = localDate15.plusMonths(3993);
        int int55 = localDate54.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = localDate54.getValue(79);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 79");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1]");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        int[] intArray16 = yearMonthDay15.getValues();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.withPeriodAdded(readablePeriod17, 22);
        java.lang.String str20 = yearMonthDay15.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay15.minusDays(33);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        boolean boolean33 = dateMidnight30.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property34 = dateMidnight30.centuryOfEra();
        java.lang.String str35 = property34.getAsText();
        org.joda.time.DateMidnight dateMidnight36 = property34.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight36.withChronology(chronology42);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology42);
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.YearMonthDay yearMonthDay52 = dateMidnight50.toYearMonthDay();
        int[] intArray53 = yearMonthDay52.getValues();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay52.withPeriodAdded(readablePeriod54, 22);
        java.lang.String str57 = yearMonthDay52.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime71.plusYears(5);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone76);
        java.util.Date date78 = dateMidnight77.toDate();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.dayOfWeek();
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean84 = interval80.isBefore((org.joda.time.ReadableInterval) interval83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = interval80.toPeriod(periodType85);
        org.joda.time.DateTime dateTime87 = dateTime71.minus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.LocalDate localDate89 = localDate67.withPeriodAdded((org.joda.time.ReadablePeriod) period86, 6);
        org.joda.time.PeriodType periodType90 = period86.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay91 = yearMonthDay52.minus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.MutablePeriod mutablePeriod92 = period86.toMutablePeriod();
        int[] intArray95 = chronology42.get((org.joda.time.ReadablePeriod) mutablePeriod92, (long) 41, (long) 292278994);
        org.joda.time.Interval interval96 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.joda.time.Interval interval97 = interval2.gap((org.joda.time.ReadableInterval) interval96);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-02" + "'", str20, "1970-01-02");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "19" + "'", str35, "19");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-02" + "'", str57, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 0, 0, 3, 9, 11, 18, 953]");
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertNotNull(interval97);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology14.minutes();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((-1L), chronology14);
        org.joda.time.DurationField durationField21 = chronology14.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology14);
        java.lang.Integer int23 = dateTimeFormatter22.getPivotYear();
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter22.printTo(writer24, (-21297L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        java.util.Date date6 = calendar0.getTime();
        int int7 = calendar0.getFirstDayOfWeek();
        calendar0.set(41, 31, (int) '#', 1, 43);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar0.get(33334743);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33334743");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60789133019983,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=43,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=247,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=43,SECOND=0,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        int int56 = localDate53.getYearOfCentury();
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plus((-1L));
        org.joda.time.Chronology chronology75 = dateMidnight74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfMinute();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.LocalDate localDate79 = localDate77.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate81 = localDate77.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        java.lang.String str84 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime85 = localDate81.toDateTimeAtCurrentTime(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isFixed();
        org.joda.time.DateTime dateTime87 = localDate69.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDate53.toDateTime(localTime57, dateTimeZone83);
        java.util.TimeZone timeZone89 = dateTimeZone83.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forTimeZone(timeZone89);
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone89);
        calendar0.setTimeZone(timeZone89);
        org.joda.time.LocalDate localDate93 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        calendar0.add(0, 52);
        java.lang.String str97 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+29:00" + "'", str84, "+29:00");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=1644572525336,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate93);
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str97, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withPeriodAdded(readablePeriod9, 6);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime.Property property13 = dateTime11.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        int int10 = localDate7.getYearOfEra();
        int int11 = localDate7.size();
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (-1));
        long long14 = dateTimeZone10.convertUTCToLocal((long) 5);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone10.getName((long) 0, locale16);
        org.joda.time.Interval interval18 = yearMonthDay4.toInterval(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Interval interval20 = interval18.withPeriodAfterStart(readablePeriod19);
        boolean boolean22 = interval18.isAfter(31L);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 104400005L + "'", long14 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+29:00" + "'", str17, "+29:00");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(70L, chronology15);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology15);
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight27, readablePeriod28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight27.plus(1644572120548L);
        boolean boolean32 = interval21.isAfter((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight35.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay37.withPeriodAdded(readablePeriod38, 11);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = property41.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay43 = property41.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay44 = property41.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = localDate52.toInterval(dateTimeZone53);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfMinute();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay44.withChronologyRetainFields(chronology55);
        org.joda.time.DurationField durationField58 = chronology55.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval59 = new org.joda.time.Interval((java.lang.Object) boolean32, chronology55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate(59, 69, 8);
        java.util.Calendar.Builder builder14 = builder12.setLenient(true);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(33435, (-292275054), 40, 34628);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder19.set(34727424, 34909);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.DateTime dateTime26 = dateTime7.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate25.withDayOfYear(252);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.withMaximumValue();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+29:00" + "'", str22, "+29:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 617, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(36);
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.minusWeeks(17);
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        int int21 = dateTime7.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = dateTime7.withMonthOfYear(12);
        boolean boolean25 = dateTime23.isEqual((long) 2022);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime1.toCalendar(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime.Property property11 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(12);
        org.joda.time.DateTime.Property property15 = dateTime12.era();
        org.joda.time.DateTime dateTime17 = dateTime12.minusMillis(34903);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572525571,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=571,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(20);
        org.joda.time.LocalDate localDate28 = localDate22.plusMonths((int) (byte) -1);
        int int30 = localDate28.getValue(2);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        org.joda.time.LocalDate localDate35 = localDate28.withFieldAdded(durationFieldType33, 14);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withWeekOfWeekyear(6);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.minus(readablePeriod44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = localDate28.toDateTime((org.joda.time.ReadableInstant) dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (-1));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minus(readablePeriod12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        int int19 = dateTimeZone15.getOffset(5L);
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight2.toMutableDateTime(dateTimeZone15);
        long long22 = dateTimeZone15.nextTransition((long) 57);
        java.util.TimeZone timeZone23 = dateTimeZone15.toTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        int int25 = calendar24.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property30.getFieldType();
        org.joda.time.DateMidnight dateMidnight33 = property30.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight34 = property30.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withMillis((long) 2022);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.minusYears(34616473);
        boolean boolean39 = calendar24.after((java.lang.Object) dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+29:00" + "'", str16, "+29:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 104400000 + "'", int19 == 104400000);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 57L + "'", long22 == 57L);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572525628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=628,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.centuries();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(70L, chronology29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(chronology29);
        org.joda.time.Interval interval33 = interval14.withChronology(chronology29);
        boolean boolean34 = interval14.isAfterNow();
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        java.lang.Object obj0 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.DateMidnight.Property property9 = dateMidnight7.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7);
        boolean boolean11 = interval3.isAfter((org.joda.time.ReadableInterval) interval10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval10.withPeriodAfterStart(readablePeriod12);
        long long14 = interval10.toDurationMillis();
        org.joda.time.Chronology chronology15 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfDay(53);
        org.joda.time.DateTime dateTime23 = dateTime21.minus(748L);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(71);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        calendar0.set(0, 99, 59);
        java.util.Date date19 = calendar0.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar0.getMinimum(34674);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34674");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61901989200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue May 29 19:00:00 UTC 8");
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.YearMonthDay yearMonthDay38 = dateMidnight36.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay38.withPeriodAdded(readablePeriod39, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.minusYears((int) '#');
        int int44 = localDate31.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        java.util.Date date48 = dateMidnight47.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = dateMidnight47.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay49.withPeriodAdded(readablePeriod50, 11);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay55 = property53.addToCopy(9);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plusYears(5);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.DateMidnight.Property property67 = dateMidnight65.dayOfWeek();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableDuration62, (org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean72 = interval68.isBefore((org.joda.time.ReadableInterval) interval71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval68.toPeriod(periodType73);
        org.joda.time.DateTime dateTime75 = dateTime59.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = yearMonthDay77.toDateTimeAtMidnight(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = dateTime75.withZoneRetainFields(dateTimeZone78);
        org.joda.time.DateMidnight dateMidnight81 = yearMonthDay55.toDateMidnight(dateTimeZone78);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        org.joda.time.DateTime dateTime83 = yearMonthDay43.toDateTimeAtMidnight(dateTimeZone78);
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay43.plusMonths((-4871));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property67);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(yearMonthDay85);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        int int15 = localDate12.getYearOfCentury();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime46 = localDate28.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate12.toDateTime(localTime16, dateTimeZone42);
        java.util.TimeZone timeZone48 = dateTimeZone42.toTimeZone();
        calendar4.setTimeZone(timeZone48);
        calendar0.setTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay55.withPeriodAdded(readablePeriod56, 11);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.withMinimumValue();
        boolean boolean61 = calendar0.before((java.lang.Object) yearMonthDay60);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(34773284, 999, 38488446);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 38488446");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572525758,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=758,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572525758,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=5,MILLISECOND=758,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+29:00" + "'", str43, "+29:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(5601, 37, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addWrapFieldToCopy(55);
        int int10 = property7.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay11 = property7.withMaximumValue();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 999 + "'", int10 == 999);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.plusDays(23);
        int int10 = yearMonthDay9.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight11.getZone();
        boolean boolean16 = dateTimeZone14.isStandardOffset(14400001L);
        org.joda.time.DateTime dateTime17 = yearMonthDay9.toDateTimeAtCurrentTime(dateTimeZone14);
        long long19 = dateTimeZone14.nextTransition(719528L);
        int int21 = dateTimeZone14.getStandardOffset(2999995002930867L);
        long long23 = dateTimeZone14.nextTransition((long) 34699);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 719528L + "'", long19 == 719528L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 104400000 + "'", int21 == 104400000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 34699L + "'", long23 == 34699L);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        gregorianCalendar10.set(131, 996, 135, 25, 25260000);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar10.add(34702, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        long long34 = chronology23.add(10035038L, 1640995199609L, 46);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology23.weekOfWeekyear();
        long long39 = dateTimeField36.addWrapField((long) 786, 293);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 75485789217052L + "'", long34 == 75485789217052L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 16934400786L + "'", long39 == 16934400786L);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay4.getFieldTypes();
        org.joda.time.DateTime dateTime8 = timeOfDay4.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 34773284);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight10 = property8.getDateMidnight();
        java.util.Locale locale12 = null;
        org.joda.time.DateMidnight dateMidnight13 = property8.setCopy("19", locale12);
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.joda.time.DurationField durationField15 = property8.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = property8.addToCopy(1644572283814L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164457228381400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withDefaultYear((int) '#');
        boolean boolean52 = calendar0.after((java.lang.Object) dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withPivotYear(996);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = dateTimeFormatter54.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeFormatter54.getZone();
        java.lang.Appendable appendable57 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter54.printTo(appendable57, (long) 65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572526176,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=6,MILLISECOND=176,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimePrinter55);
        org.junit.Assert.assertNull(dateTimeZone56);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.minus(readableDuration16);
        org.joda.time.DateTime.Property property18 = dateTime12.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime12.withField(dateTimeFieldType19, (int) ' ');
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(32770);
        boolean boolean24 = dateMidnight5.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight5.plusDays(25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight5.plus(readableDuration27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = property29.addToCopy((-104399995L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.lang.Object obj9 = null;
        boolean boolean10 = property6.equals(obj9);
        org.joda.time.DateTime dateTime11 = property6.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear(34714550);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34714550 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(34825, 833);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 833");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.LocalDate.Property property74 = localDate73.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+29:00" + "'", str52, "+29:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.lang.String str19 = yearMonthDay14.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.toString();
        org.joda.time.Interval interval51 = yearMonthDay14.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate53 = localDate7.withFields((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-02" + "'", str19, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+29:00" + "'", str46, "+29:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+29:00" + "'", str50, "+29:00");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 22);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds(34771);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DurationField durationField13 = durationFieldType4.getField(chronology10);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minus(readablePeriod19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMinutes(1970);
        org.joda.time.Chronology chronology25 = timeOfDay22.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus((long) (-1));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minus(readablePeriod31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay34.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay40.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay22.minus((org.joda.time.ReadablePeriod) period53);
        java.lang.String str56 = period53.toString();
        int[] intArray58 = chronology10.get((org.joda.time.ReadablePeriod) period53, (long) 131);
        java.lang.String str59 = period53.toString();
        org.joda.time.Period period60 = period53.toPeriod();
        org.joda.time.Period period61 = period60.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 131]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT0S" + "'", str59, "PT0S");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(timeOfDay63);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DurationField durationField11 = chronology5.months();
        org.joda.time.DurationField durationField12 = chronology5.weeks();
        long long16 = chronology5.add((-1732790905000L), 1644572203083L, 54);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology5.getDateTimeMillis(20, 0, 79, 7, 0, 50, 87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 87074108061482L + "'", long16 == 87074108061482L);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.minus(readableDuration21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate31.toInterval(dateTimeZone32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay15.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType8.getField(chronology34);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTime dateTime40 = dateTime38.withMinuteOfHour(36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek((-4871));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4871 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        java.util.Locale locale12 = null;
        java.lang.String str13 = property8.getAsShortText(locale12);
        org.joda.time.YearMonthDay yearMonthDay14 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jan" + "'", str13, "Jan");
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(21, 34, 69);
        java.util.Calendar.Builder builder18 = builder13.setTimeOfDay(575, 34545, (-30801), 15);
        java.util.Calendar.Builder builder23 = builder18.setTimeOfDay(578, 31, 37, 292278994);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder18.setLocale(locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(70L, chronology9);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology9);
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(70691542L, chronology15);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusDays(12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withDurationAdded(52L, 24);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withYear(34585);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withYearOfEra((-1959));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1959 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant16 = calendar0.toInstant();
        int int17 = calendar0.getFirstDayOfWeek();
        calendar0.setLenient(false);
        java.util.TimeZone timeZone20 = calendar0.getTimeZone();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime7.withYearOfCentury(2008);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2008 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        boolean boolean33 = yearMonthDay24.isEqual((org.joda.time.ReadablePartial) localDate32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) (-1));
        long long39 = dateTimeZone35.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight40 = localDate32.toDateMidnight(dateTimeZone35);
        long long44 = dateTimeZone35.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str46 = dateTimeZone35.getNameKey((long) 33);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 34);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone35);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        int[] intArray56 = yearMonthDay55.getValues();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.withPeriodAdded(readablePeriod57, 22);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.DateMidnight.Property property67 = dateMidnight65.dayOfWeek();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableDuration62, (org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean72 = interval68.isBefore((org.joda.time.ReadableInterval) interval71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval68.toPeriod(periodType73);
        int int76 = period74.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay59.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.LocalDate localDate79 = localDate49.withPeriodAdded((org.joda.time.ReadablePeriod) period74, 13);
        org.joda.time.LocalDate localDate81 = localDate49.minusWeeks(365);
        org.joda.time.LocalDate.Property property82 = localDate81.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((java.lang.Object) property82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 104400005L + "'", long39 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight40);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-104399948L) + "'", long44 == (-104399948L));
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property67);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        calendar0.set(55, 0, 0, (int) (short) 10, 50, 33330867);
        calendar0.setTimeInMillis(1993L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=16,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=993,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.minusYears((int) '#');
        org.joda.time.LocalDate localDate33 = localDate11.minusDays(22);
        org.joda.time.LocalDate.Property property34 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        int int40 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTime.Property property41 = dateTime39.dayOfYear();
        org.joda.time.DateTime dateTime42 = property41.withMinimumValue();
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        int int44 = property34.compareTo((org.joda.time.ReadableInstant) dateTime43);
        int int45 = property34.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292275054) + "'", int45 == (-292275054));
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight14.getZone();
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.era();
        boolean boolean19 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTime.Property property20 = dateTime12.minuteOfHour();
        org.joda.time.DateTime.Property property21 = dateTime12.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weeks();
        org.joda.time.DurationField durationField27 = chronology23.eras();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(97L);
        org.joda.time.LocalDate localDate30 = dateMidnight29.toLocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.plusWeeks(22);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        int int34 = calendar33.getFirstDayOfWeek();
        int int35 = calendar33.getWeekYear();
        java.lang.String str36 = calendar33.getCalendarType();
        calendar33.setTimeInMillis((long) 17);
        java.util.Date date39 = calendar33.getTime();
        calendar33.add(10, 53);
        calendar33.setMinimalDaysInFirstWeek(2022);
        java.util.TimeZone timeZone45 = calendar33.getTimeZone();
        calendar33.set(0, 17, 30, 56, 52);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight54.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.plus((-1L));
        org.joda.time.Chronology chronology64 = dateMidnight63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.secondOfMinute();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        boolean boolean67 = yearMonthDay58.isEqual((org.joda.time.ReadablePartial) localDate66);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        java.lang.String str71 = dateTimeZone69.getNameKey((long) (-1));
        long long73 = dateTimeZone69.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight74 = localDate66.toDateMidnight(dateTimeZone69);
        long long78 = dateTimeZone69.convertLocalToUTC((long) '4', true, (long) 52);
        java.util.TimeZone timeZone79 = dateTimeZone69.toTimeZone();
        calendar33.setTimeZone(timeZone79);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.DateMidnight dateMidnight82 = localDate30.toDateMidnight(dateTimeZone81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) chronology23, dateTimeZone81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=2022,ERA=1,YEAR=0,MONTH=17,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=30,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=56,MINUTE=52,SECOND=0,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "gregory" + "'", str36, "gregory");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertNull(str71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 104400005L + "'", long73 == 104400005L);
        org.junit.Assert.assertNotNull(dateMidnight74);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-104399948L) + "'", long78 == (-104399948L));
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateMidnight82);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(5);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay17 = property15.addNoWrapToCopy(575);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        java.util.Locale locale20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = property15.setCopy("17", locale20);
        org.joda.time.TimeOfDay timeOfDay23 = property15.addWrapFieldToCopy(0);
        int int24 = property15.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = property15.setCopy(953);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 953 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        java.time.Instant instant2 = calendar0.toInstant();
        calendar0.set(100, 2022, 69);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = localDate14.getField(1);
        org.joda.time.LocalDate localDate18 = localDate14.withDayOfYear(2);
        org.joda.time.LocalDate localDate20 = localDate14.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate45 = localDate41.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtCurrentTime(dateTimeZone47);
        boolean boolean50 = dateTimeZone47.isFixed();
        org.joda.time.DateTime dateTime51 = localDate33.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.LocalDate localDate53 = localDate33.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        boolean boolean56 = localDate53.isSupported(durationFieldType55);
        boolean boolean57 = localDate14.isSupported(durationFieldType55);
        boolean boolean58 = calendar0.after((java.lang.Object) boolean57);
        org.joda.time.YearMonthDay yearMonthDay59 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.minusYears(38);
        org.joda.time.Interval interval62 = yearMonthDay59.toInterval();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-53688320273333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=268,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=251,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=6,MILLISECOND=667,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+29:00" + "'", str48, "+29:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(interval62);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        java.util.Date date3 = new java.util.Date((-292275054), 57, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        int int8 = date7.getHours();
        int int9 = date7.getDay();
        int int10 = date7.getDay();
        date7.setYear(4);
        int int13 = date7.getDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        boolean boolean22 = date17.before(date21);
        int int23 = date17.getDay();
        int int24 = date17.getHours();
        int int25 = date17.getMinutes();
        java.lang.String str26 = date17.toLocaleString();
        date17.setMinutes(17);
        boolean boolean29 = date7.before(date17);
        int int30 = date7.getHours();
        boolean boolean31 = date3.before(date7);
        java.lang.String str32 = date3.toLocaleString();
        org.junit.Assert.assertEquals(date3.toString(), "Thu May 15 14:25:51 UTC 292274898");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sat Dec 31 19:00:00 UTC 1904");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:17:00 UTC 1969");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dec 31, 1969 7:00:00 PM" + "'", str26, "Dec 31, 1969 7:00:00 PM");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "May 15, 292274898 2:25:51 PM" + "'", str32, "May 15, 292274898 2:25:51 PM");
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField12.getAsText(11318400000L, locale14);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "20" + "'", str15, "20");
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.DurationField durationField11 = chronology5.minutes();
        org.joda.time.DurationField durationField12 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.weekOfWeekyear();
        boolean boolean14 = dateTimeField13.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.LocalTime localTime11 = timeOfDay10.toLocalTime();
        java.lang.String str12 = timeOfDay10.toString();
        org.joda.time.TimeOfDay.Property property13 = timeOfDay10.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay15 = property13.addNoWrapToCopy(1970);
        org.joda.time.TimeOfDay timeOfDay16 = property13.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property13.getFieldType();
        int int18 = dateMidnight5.get(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "T14:42:06.793" + "'", str12, "T14:42:06.793");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology5.months();
        org.joda.time.DurationField durationField8 = chronology5.millis();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(21, 34, 69);
        java.util.Calendar.Builder builder18 = builder13.setTimeOfDay(575, 34545, (-30801), 15);
        java.util.Calendar.Builder builder22 = builder18.setDate(34612781, 42, 34615813);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder22.setWeekDefinition(34816, (-1974));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight5.toYearMonthDay();
        int[] intArray8 = yearMonthDay7.getValues();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withPeriodAdded(readablePeriod9, 22);
        java.lang.String str12 = yearMonthDay7.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay7.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay7.minusMonths(15);
        org.joda.time.LocalDate localDate17 = yearMonthDay16.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate25.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        boolean boolean46 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime47 = localDate29.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight48 = localDate17.toDateMidnight(dateTimeZone43);
        long long51 = dateTimeZone43.adjustOffset((long) 1971, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(34714550, 34727424, 34831, dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34727424 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-02" + "'", str12, "1970-01-02");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+29:00" + "'", str44, "+29:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1971L + "'", long51 == 1971L);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.LocalDate localDate16 = dateMidnight12.toLocalDate();
        org.joda.time.Chronology chronology17 = dateMidnight12.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean19 = dateMidnight12.isSupported(dateTimeFieldType18);
        boolean boolean20 = dateMidnight4.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime22.toMutableDateTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType18.getField(chronology28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology28);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        calendar0.set(55, 0, 0, (int) (short) 10, 50, 33330867);
        calendar0.setFirstDayOfWeek(70);
        java.lang.String str25 = calendar0.getCalendarType();
        calendar0.set(11, (int) ' ');
        java.time.Instant instant29 = calendar0.toInstant();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60398339733000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=70,minimalDaysInFirstWeek=16,ERA=1,YEAR=56,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=24,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        int int10 = calendar9.getFirstDayOfWeek();
        int int11 = calendar9.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        boolean boolean20 = date15.before(date19);
        int int21 = date15.getMonth();
        calendar9.setTime(date15);
        java.util.TimeZone timeZone23 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.withZoneRetainFields(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime36 = localDate18.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean38 = localDate18.equals((java.lang.Object) 1000L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.monthOfYear();
        org.joda.time.DateTime dateTime44 = property43.withMaximumValue();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(21);
        org.joda.time.DateTime.Property property47 = dateTime44.weekyear();
        int int48 = property47.getMinimumValueOverall();
        org.joda.time.DateTime dateTime49 = property47.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears(5);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        java.util.Date date72 = dateMidnight71.toDate();
        org.joda.time.DateMidnight.Property property73 = dateMidnight71.dayOfWeek();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean78 = interval74.isBefore((org.joda.time.ReadableInterval) interval77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        org.joda.time.DateTime dateTime81 = dateTime65.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDate localDate83 = localDate61.withPeriodAdded((org.joda.time.ReadablePeriod) period80, 6);
        org.joda.time.DateTime dateTime84 = dateTime49.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDate localDate85 = localDate18.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDate localDate87 = localDate18.withWeekOfWeekyear(11);
        org.joda.time.Chronology chronology88 = localDate87.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((-19034), 34890, 800, 48, 50, (-51), 34886, chronology88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+29:00" + "'", str33, "+29:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        java.util.Date date6 = calendar0.getTime();
        boolean boolean7 = calendar0.isWeekDateSupported();
        int int9 = calendar0.getLeastMaximum(7);
        int int10 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.setLenient(true);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=17,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 0);
        boolean boolean24 = dateTimeFormatter23.isParser();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        boolean boolean32 = dateMidnight29.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property33 = dateMidnight29.centuryOfEra();
        boolean boolean34 = property33.isLeap();
        org.joda.time.DateMidnight dateMidnight36 = property33.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        int[] intArray42 = yearMonthDay41.getValues();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.withPeriodAdded(readablePeriod43, 22);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str49 = dateTimeZone47.getNameKey((long) (-1));
        long long51 = dateTimeZone47.convertUTCToLocal((long) 5);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone47.getName((long) 0, locale53);
        org.joda.time.Interval interval55 = yearMonthDay41.toInterval(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight36.toMutableDateTime(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter23.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter6.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter6.withOffsetParsed();
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter6.withLocale(locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter63.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTimeFormatter64.parseDateTime("T09:36:33.845");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str49);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 104400005L + "'", long51 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+29:00" + "'", str54, "+29:00");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(1644572146480L);
        org.joda.time.DateTime dateTime2 = timeOfDay1.toDateTimeToday();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DurationField durationField10 = property8.getDurationField();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight13 = property8.addToCopy((long) 34697);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths(809);
        int int16 = dateMidnight13.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(20);
        org.joda.time.LocalDate localDate28 = localDate22.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate30 = localDate22.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int32 = localDate30.get(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = localDate40.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField42.getType();
        java.lang.String str44 = dateTimeFieldType43.toString();
        org.joda.time.Chronology chronology45 = null;
        boolean boolean46 = dateTimeFieldType43.isSupported(chronology45);
        org.joda.time.LocalDate localDate48 = localDate30.withField(dateTimeFieldType43, 7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField50 = localDate30.getField(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "monthOfYear" + "'", str44, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay4.plusMonths(34);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay54.year();
        org.joda.time.DateTime dateTime56 = yearMonthDay54.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.plus((-1L));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 11, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.year();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(32772, 7, 19, chronology66);
        org.joda.time.DateTime dateTime74 = dateTime56.withChronology(chronology66);
        java.util.Date date75 = dateTime74.toDate();
        org.joda.time.YearMonthDay yearMonthDay76 = org.joda.time.YearMonthDay.fromDateFields(date75);
        int int77 = yearMonthDay76.getMonthOfYear();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+29:00" + "'", str46, "+29:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(date75);
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Wed Nov 01 09:42:07 UTC 1972");
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 11 + "'", int77 == 11);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("56");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder2.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        boolean boolean8 = localDate1.equals((java.lang.Object) builder7);
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate1.compareTo(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.set((-1), 365, 1, (-378559), 100);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = calendar0.getGreatestMinimum(545);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 545");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-1,MONTH=365,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=-378559,MINUTE=100,SECOND=7,MILLISECOND=161,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime12.withMinuteOfHour(8);
        boolean boolean18 = dateMidnight5.equals((java.lang.Object) 8);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property25.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval40.getEnd();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean56 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = interval48.withStart((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = interval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration62 = interval40.toDuration();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight33.withDurationAdded((org.joda.time.ReadableDuration) duration62, 24);
        org.joda.time.DateTime dateTime66 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration62, 24);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration62, 131);
        org.joda.time.DateTimeZone dateTimeZone69 = dateMidnight5.getZone();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(30877879042L, dateTimeZone69);
        java.util.Locale locale71 = null;
        java.util.Calendar calendar72 = dateTime70.toCalendar(locale71);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = calendar72.getMaximum((-82));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -82");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(interval60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=30877879042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=358,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=11,SECOND=19,MILLISECOND=42,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj1, chronology7);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 786, chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.secondOfDay();
        long long16 = dateTimeField13.add(2831500800000L, (long) 17);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2831500817000L + "'", long16 == 2831500817000L);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property4.getAsText(locale6);
        org.joda.time.DateMidnight dateMidnight9 = property4.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay15.withChronologyRetainFields(chronology21);
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight27.getZone();
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay25.toDateMidnight(dateTimeZone30);
        java.util.Set<java.lang.String> strSet32 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean33 = dateTimeZone30.equals((java.lang.Object) strSet32);
        long long35 = dateTimeZone30.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone30.getMillisKeepLocal(dateTimeZone36, (long) 50);
        org.joda.time.Chronology chronology39 = chronology10.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Friday" + "'", str7, "Friday");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 14400001L + "'", long35 == 14400001L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 104400050L + "'", long38 == 104400050L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        int int14 = calendar13.getFirstDayOfWeek();
        int int15 = calendar13.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date19.getMonth();
        calendar13.setTime(date19);
        java.util.TimeZone timeZone27 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.Calendar.Builder builder29 = builder10.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder33 = builder10.setDate(38, 70, 19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder10.setWeekDefinition(327, 34850528);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.LocalDate localDate75 = localDate73.withWeekyear(32769);
        int int77 = localDate75.getValue(0);
        int int78 = localDate75.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = localDate75.getFieldTypes();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+29:00" + "'", str52, "+29:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 32769 + "'", int77 == 32769);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone15);
        org.joda.time.DateTime dateTime19 = interval18.getStart();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.days();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay24.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay24.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears(5);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        java.util.Date date67 = dateMidnight66.toDate();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.dayOfWeek();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableDuration63, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean73 = interval69.isBefore((org.joda.time.ReadableInterval) interval72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval69.toPeriod(periodType74);
        org.joda.time.DateTime dateTime76 = dateTime60.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.LocalDate localDate78 = localDate56.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 6);
        org.joda.time.PeriodType periodType79 = period75.getPeriodType();
        org.joda.time.DateTime dateTime81 = dateTime44.withPeriodAdded((org.joda.time.ReadablePeriod) period75, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay24.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.MutablePeriod mutablePeriod83 = period75.toMutablePeriod();
        org.joda.time.PeriodType periodType84 = period75.getPeriodType();
        org.joda.time.Period period85 = interval18.toPeriod(periodType84);
        int int86 = period85.size();
        int int87 = period85.size();
        org.joda.time.MutablePeriod mutablePeriod88 = period85.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+29:00" + "'", str16, "+29:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8 + "'", int87 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod88);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1644572115000L);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(86400000L, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.era();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(24);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.monthOfYear();
        boolean boolean19 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        int[] intArray26 = yearMonthDay25.getValues();
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay25.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.plusMonths(14);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar36 = dateMidnight35.toGregorianCalendar();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight41.toYearMonthDay();
        int[] intArray44 = yearMonthDay43.getValues();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.withPeriodAdded(readablePeriod45, 22);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight54.toYearMonthDay();
        int[] intArray57 = yearMonthDay56.getValues();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay56.withPeriodAdded(readablePeriod58, 22);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        java.util.Date date67 = dateMidnight66.toDate();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.dayOfWeek();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableDuration63, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean73 = interval69.isBefore((org.joda.time.ReadableInterval) interval72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval69.toPeriod(periodType74);
        int int77 = period75.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay60.plus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay51.plus((org.joda.time.ReadablePeriod) period75);
        int[] intArray82 = chronology37.get((org.joda.time.ReadablePeriod) period75, (long) 42, 1644537600029L);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay29.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight84.minus((long) (-1));
        org.joda.time.Chronology chronology87 = dateMidnight86.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.clockhourOfHalfday();
        org.joda.time.Chronology chronology89 = chronology87.withUTC();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone91 = chronology87.getZone();
        org.joda.time.DateTime dateTime92 = yearMonthDay83.toDateTimeAtMidnight(dateTimeZone91);
        boolean boolean93 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = dateTime11.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime97 = dateTime11.minusHours(34762);
        int int98 = dateTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withDefaultYear((int) '#');
        boolean boolean52 = calendar0.after((java.lang.Object) dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withPivotYear(996);
        java.lang.StringBuffer stringBuffer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter54.printTo(stringBuffer55, 1644572344023L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572527548,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=7,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+29:00" + "'", str39, "+29:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = dateTimeField6.getDurationField();
        boolean boolean8 = dateTimeField6.isLenient();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField6.getAsText(4, locale10);
        boolean boolean13 = dateTimeField6.isLeap(1644572184690L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4" + "'", str11, "4");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        calendar0.clear();
        calendar0.set(719528, 34654870, 365, 34627, 584, 286);
        calendar0.setLenient(false);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=719528,MONTH=34654870,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=365,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=34627,MINUTE=584,SECOND=286,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.centuryOfEra();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate24.toDateTime(localTime25, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate24.withYearOfEra(12);
        int[] intArray30 = localDate24.getValues();
        int int31 = localDate24.getYearOfEra();
        org.joda.time.LocalDate localDate33 = localDate24.withDayOfYear(5);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDate24, 38, locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField22.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField22.getType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight41.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime45.monthOfYear();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.minus(readableDuration49);
        org.joda.time.DateMidnight dateMidnight51 = dateTime50.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = localDate59.toInterval(dateTimeZone60);
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) dateTime50, chronology62);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay43.withChronologyRetainFields(chronology62);
        org.joda.time.DurationField durationField65 = chronology62.seconds();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyearOfCentury();
        org.joda.time.DurationField durationField68 = chronology62.months();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.yearOfEra();
        long long73 = chronology62.add(10035038L, 1640995199609L, 46);
        org.joda.time.DateTimeField dateTimeField74 = chronology62.minuteOfDay();
        boolean boolean75 = dateTimeFieldType38.isSupported(chronology62);
        org.joda.time.DateTimeField dateTimeField76 = chronology62.secondOfMinute();
        int int77 = dateTimeField76.getMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 2]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "38" + "'", str36, "38");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 75485789217052L + "'", long73 == 75485789217052L);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 59 + "'", int77 == 59);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property10.setCopy(2);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minus((long) (-1));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minus(readablePeriod22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus(readablePeriod25);
        org.joda.time.DateTime dateTime27 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.minus(readablePeriod30);
        int int32 = dateTime31.getMillisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.withYear(7);
        org.joda.time.DateTime dateTime36 = dateTime31.minusYears((-5599659));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52927647 + "'", int32 == 52927647);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        long long6 = chronology2.add(14400001L, (long) 20, 100);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DurationField durationField8 = chronology2.months();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = chronology2.getDateTimeMillis(122, 1917, 302, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1917 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 14402001L + "'", long6 == 14402001L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-311126400000L));
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        int int14 = timeOfDay13.size();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay13.minuteOfHour();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = property15.setCopy("1970-01-01T09:35:53.395Z", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T09:35:53.395Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 0, 2130);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2130 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay14.toDateMidnight(dateTimeZone19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean22 = dateTimeZone19.equals((java.lang.Object) strSet21);
        long long24 = dateTimeZone19.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        boolean boolean33 = dateTimeZone19.equals((java.lang.Object) chronology30);
        org.joda.time.DurationField durationField34 = chronology30.days();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(chronology30);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 14400001L + "'", long24 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime1.toCalendar(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime.Property property11 = dateTime1.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property11.getAsText(locale13);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572527799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=7,MILLISECOND=799,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "52927799" + "'", str14, "52927799");
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.dayOfYear();
        org.joda.time.LocalDate localDate25 = property24.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDate25.getFieldType(153);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 153");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        long long13 = dateTimeField11.roundFloor((-820540799993L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight16.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTimeAtMidnight();
        int[] intArray22 = yearMonthDay18.getValues();
        int int23 = yearMonthDay18.getMonthOfYear();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay18, locale24);
        int int26 = yearMonthDay18.getYear();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-820540800000L) + "'", long13 == (-820540800000L));
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 2]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Jan" + "'", str25, "Jan");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean57 = dateMidnight53.isSupported(dateTimeFieldType56);
        org.joda.time.DateMidnight.Property property58 = dateMidnight53.yearOfCentury();
        java.lang.String str59 = property58.toString();
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight62 = property58.setCopy("1970-01-01", locale61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Property[yearOfCentury]" + "'", str59, "Property[yearOfCentury]");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(1022, (-378559));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1022 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate31.dayOfYear();
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+29:00" + "'", str26, "+29:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(22, 11, 7, 7, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime8.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime8.minusDays((int) (byte) 10);
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateTime14);
        boolean boolean16 = dateTime14.isEqualNow();
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekOfWeekyear(11);
        boolean boolean19 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.lang.String str29 = yearMonthDay24.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears(5);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.dayOfWeek();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean56 = interval52.isBefore((org.joda.time.ReadableInterval) interval55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval52.toPeriod(periodType57);
        org.joda.time.DateTime dateTime59 = dateTime43.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.LocalDate localDate61 = localDate39.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.PeriodType periodType62 = period58.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay24.minus((org.joda.time.ReadablePeriod) period58);
        java.util.Date date64 = new java.util.Date();
        java.time.Instant instant65 = date64.toInstant();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) date64);
        int int67 = yearMonthDay24.compareTo((org.joda.time.ReadablePartial) localDate66);
        org.joda.time.LocalDate localDate69 = localDate66.withYear(3);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getNameKey((long) (-1));
        long long77 = dateTimeZone73.convertUTCToLocal((long) 5);
        java.util.Locale locale79 = null;
        java.lang.String str80 = dateTimeZone73.getName((long) 0, locale79);
        org.joda.time.Interval interval81 = new org.joda.time.Interval(0L, (long) 19, dateTimeZone73);
        java.util.Locale locale83 = null;
        java.lang.String str84 = dateTimeZone73.getShortName((-1732788000000L), locale83);
        org.joda.time.DateMidnight dateMidnight85 = localDate69.toDateMidnight(dateTimeZone73);
        org.joda.time.DateTime dateTime86 = localDate69.toDateTimeAtStartOfDay();
        boolean boolean87 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime.Property property88 = dateTime18.dayOfMonth();
        java.util.Locale locale89 = null;
        java.lang.String str90 = property88.getAsText(locale89);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 2]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-02" + "'", str29, "1970-01-02");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Fri Feb 11 09:42:08 UTC 2022");
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertNull(str75);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 104400005L + "'", long77 == 104400005L);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+29:00" + "'", str80, "+29:00");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+29:00" + "'", str84, "+29:00");
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "16" + "'", str90, "16");
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusSeconds(4);
        org.joda.time.DateTime dateTime29 = dateTime8.plusDays(56);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(2021);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        int int10 = property8.get();
        org.joda.time.DateMidnight dateMidnight12 = property8.addToCopy((long) 48);
        org.joda.time.DateMidnight dateMidnight13 = property8.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight14 = property8.getDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        int int17 = dateTimeField16.getMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMinimumValue();
        int int15 = property12.getMaximumValueOverall();
        java.lang.String str16 = property12.getAsText();
        int int17 = property12.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property12.setCopy(34890);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34890 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 51, 8, 180]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "51" + "'", str16, "51");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int11 = timeOfDay10.getMinuteOfHour();
        int int12 = timeOfDay10.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.minusMinutes(7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        org.joda.time.DurationField durationField24 = chronology20.minutes();
        boolean boolean25 = timeOfDay14.equals((java.lang.Object) durationField24);
        int int26 = timeOfDay14.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay14.plusMinutes(34702);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 31 19:00:00 UTC 1904");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        gregorianCalendar6.setLenient(false);
        gregorianCalendar6.set(779, 34522, 47, (int) ' ', 122);
        java.util.Date date15 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date23.getHours();
        int int26 = date23.getMonth();
        boolean boolean27 = date15.after(date23);
        date15.setYear((int) 'a');
        java.util.Date date35 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        boolean boolean44 = date39.before(date43);
        int int45 = date39.getDay();
        int int46 = date39.getHours();
        date39.setSeconds((int) '4');
        java.lang.String str49 = date39.toLocaleString();
        int int50 = date39.getYear();
        boolean boolean51 = date35.before(date39);
        boolean boolean52 = date15.after(date39);
        int int53 = date39.getSeconds();
        int int54 = date39.getTimezoneOffset();
        gregorianCalendar6.setTime(date39);
        java.util.Date date56 = gregorianCalendar6.getTime();
        java.lang.Object obj57 = gregorianCalendar6.clone();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 11 09:42:08 UTC 1997");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dec 31, 1969 7:00:52 PM" + "'", str49, "Dec 31, 1969 7:00:52 PM");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 69 + "'", int50 == 69);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Wed Dec 31 19:00:52 UTC 1969");
        org.junit.Assert.assertNotNull(obj57);
// flaky:         org.junit.Assert.assertEquals(obj57.toString(), "java.util.GregorianCalendar[time=-17948000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=52,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "java.util.GregorianCalendar[time=-17948000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=52,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "java.util.GregorianCalendar[time=-17948000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=0,SECOND=52,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        org.joda.time.DateTime dateTime12 = property6.setCopy(44);
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks(25);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        int int5 = localDate4.getEra();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra(70);
        int int8 = localDate4.getWeekyear();
        int int9 = localDate4.getDayOfYear();
        org.joda.time.LocalDate.Property property10 = localDate4.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        int int9 = dateTimeField7.get((long) (byte) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField7.getAsShortText(17, locale11);
        boolean boolean14 = dateTimeField7.isLeap((long) 253);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "17" + "'", str12, "17");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withChronologyRetainFields(chronology26);
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = yearMonthDay28.toInterval(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        java.util.Calendar.Builder builder77 = builder12.setTimeZone(timeZone76);
        java.util.Calendar.Builder builder81 = builder77.setWeekDate(0, 779, (-378559));
        java.util.Calendar.Builder builder85 = builder81.setWeekDate(252, 34709682, 39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder88 = builder81.set(33538, 580);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+29:00" + "'", str68, "+29:00");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        long long5 = dateMidnight0.getMillis();
        org.joda.time.Interval interval6 = dateMidnight0.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime18.withMinuteOfHour(8);
        boolean boolean24 = dateMidnight11.equals((java.lang.Object) 8);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight11.minus((-60522647075197L));
        org.joda.time.Interval interval27 = dateMidnight11.toInterval();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean38 = interval34.isBefore((org.joda.time.ReadableInterval) interval37);
        boolean boolean39 = interval34.containsNow();
        boolean boolean40 = interval27.contains((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration41 = interval27.toDuration();
        org.joda.time.Period period42 = interval27.toPeriod();
        org.joda.time.Interval interval43 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) period42);
        long long44 = interval6.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = localDate52.getField(1);
        org.joda.time.LocalDate localDate56 = localDate52.withDayOfYear(2);
        org.joda.time.LocalDate localDate58 = localDate52.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = localDate58.toDateTimeAtCurrentTime();
        boolean boolean60 = interval6.equals((java.lang.Object) localDate58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.plus((-1L));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.LocalDate localDate70 = localDate68.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate72 = localDate68.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        java.lang.String str75 = dateTimeZone74.toString();
        org.joda.time.DateTime dateTime76 = localDate72.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.LocalDate localDate78 = localDate72.withWeekyear(19);
        org.joda.time.LocalTime localTime79 = null;
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        java.lang.String str83 = dateTimeZone81.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime84 = localDate72.toDateTime(localTime79, dateTimeZone81);
        int int85 = dateTime84.getYear();
        org.joda.time.DateTime.Property property86 = dateTime84.secondOfDay();
        org.joda.time.DateTime dateTime87 = property86.roundFloorCopy();
        org.joda.time.DateTime dateTime88 = property86.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime90 = property86.setCopy(39);
        boolean boolean91 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644519600000L + "'", long5 == 1644519600000L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+29:00" + "'", str75, "+29:00");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
// flaky:         org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.lang.String str16 = yearMonthDay6.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.plusDays((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.withYear(21);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        long long6 = chronology2.add(14400001L, (long) 20, 100);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 14402001L + "'", long6 == 14402001L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.LocalDate localDate26 = localDate20.withWeekyear(19);
        org.joda.time.LocalTime localTime27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime32 = localDate20.toDateTime(localTime27, dateTimeZone29);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime34 = localDate8.toDateTimeAtMidnight(dateTimeZone29);
        long long36 = dateTimeZone29.convertUTCToLocal(611193600000L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        long long42 = dateTimeZone39.adjustOffset(1644572229996L, false);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDayOfYear(34714896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34714896 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 19:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+29:00" + "'", str23, "+29:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+29:00" + "'", str33, "+29:00");
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 611298000000L + "'", long36 == 611298000000L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572229996L + "'", long42 == 1644572229996L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setTime((long) (byte) 1);
        int int4 = date1.getMinutes();
        int int5 = date1.getDate();
        date1.setYear(387);
        org.junit.Assert.assertEquals(date1.toString(), "Sat Jan 01 00:00:00 UTC 2287");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate27 = property25.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.minus(readableDuration33);
        org.joda.time.DateTime.Property property35 = dateTime29.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime38 = dateTime29.withField(dateTimeFieldType36, (int) ' ');
        org.joda.time.DateTime dateTime40 = dateTime38.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime();
        boolean boolean43 = dateTime42.isEqualNow();
        org.joda.time.DateTime dateTime44 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property45 = dateTime44.weekOfWeekyear();
        long long46 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+29:00" + "'", str14, "+29:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 11L + "'", long46 == 11L);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(46, 34897, 522);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34897 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        java.util.Date date5 = new java.util.Date(55, 13, 57, 3993, 34713);
        date5.setHours((int) (short) 0);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Oct 04 00:33:00 UTC 1956");
    }
}

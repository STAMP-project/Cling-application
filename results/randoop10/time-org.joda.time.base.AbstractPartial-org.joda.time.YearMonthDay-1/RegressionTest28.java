import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 100, (long) 267336);
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        int int13 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.withMinimumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTime dateTime17 = property15.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(86400000L, chronology17);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean31 = dateTimeZone30.isFixed();
        boolean boolean32 = dateTimeZone30.isFixed();
        org.joda.time.Chronology chronology33 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField34 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.secondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime21.toDateTime(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((int) (short) 10);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronolgy();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (-1));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minus(readablePeriod14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay17.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay17.withSecondOfMinute(21);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusMillis(31);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay23.plusMinutes(56);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(stringBuffer8, (org.joda.time.ReadablePartial) timeOfDay27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        java.util.Date date1 = new java.util.Date((-61851340800000L));
        java.lang.String str2 = date1.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Mon Jan 06 00:00:00 UTC 10");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "6 Jan 10 00:00:00 GMT" + "'", str2, "6 Jan 10 00:00:00 GMT");
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(5);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay10.plusMillis(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = timeOfDay16.indexOf(dateTimeFieldType17);
        int int19 = timeOfDay16.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54 + "'", int12 == 54);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay14.toDateMidnight(dateTimeZone19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean22 = dateTimeZone19.equals((java.lang.Object) strSet21);
        long long24 = dateTimeZone19.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        boolean boolean33 = dateTimeZone19.equals((java.lang.Object) chronology30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 14400001L + "'", long24 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = localDate11.getDayOfWeek();
        int int17 = localDate11.getEra();
        org.joda.time.Chronology chronology18 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.minusYears(1970);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean39 = interval31.isAfter((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval38.withPeriodAfterStart(readablePeriod40);
        boolean boolean42 = dateMidnight23.equals((java.lang.Object) readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((-1L));
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight45.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar53 = dateMidnight51.toGregorianCalendar();
        boolean boolean54 = dateMidnight23.equals((java.lang.Object) dateMidnight51);
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight51.getZone();
        org.joda.time.DateTime dateTime56 = localDate11.toDateTimeAtMidnight(dateTimeZone55);
        java.lang.String str58 = dateTimeZone55.getName((-2678399004L));
        java.lang.String str59 = dateTimeZone55.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(gregorianCalendar53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = localDate21.withWeekyear(19);
        org.joda.time.LocalTime localTime28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime33 = localDate21.toDateTime(localTime28, dateTimeZone30);
        java.lang.String str34 = dateTimeZone30.getID();
        org.joda.time.DateTime dateTime35 = localDate9.toDateTimeAtMidnight(dateTimeZone30);
        long long37 = dateTimeZone30.convertUTCToLocal(611193600000L);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone30);
        long long42 = dateTimeZone30.convertLocalToUTC(1644572146761L, true, (long) 34545);
        long long44 = dateTimeZone30.convertUTCToLocal((long) 1439);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) "1904", dateTimeZone30);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears(34711521);
        int int48 = dateTime45.getMillisOfSecond();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 611193600000L + "'", long37 == 611193600000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572146761L + "'", long42 == 1644572146761L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1439L + "'", long44 == 1439L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        java.util.Calendar calendar14 = builder0.build();
        java.util.Calendar.Builder builder18 = builder0.setWeekDate(748, 37, 28);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-60972226286000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=28,SECOND=34,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime2.minusDays((int) (byte) 10);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.weekyear();
        org.joda.time.DateTime.Property property11 = dateTime8.hourOfDay();
        org.joda.time.DateTime.Property property12 = dateTime8.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime17.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        int int22 = dateTime21.getEra();
        boolean boolean23 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime13.withHourOfDay(33435);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33435 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        long long16 = dateTimeField14.roundFloor((long) 1439);
        java.lang.String str17 = dateTimeField14.getName();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 44 + "'", int9 == 44);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfMonth" + "'", str17, "dayOfMonth");
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.withPeriodAdded(readablePeriod19, 22);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfWeek();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean34 = interval30.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval30.toPeriod(periodType35);
        int int38 = period36.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate.Property property49 = localDate48.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        boolean boolean57 = dateMidnight54.isBefore((long) ' ');
        org.joda.time.LocalDate localDate58 = dateMidnight54.toLocalDate();
        org.joda.time.Chronology chronology59 = dateMidnight54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.plus((-1L));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.LocalDate localDate70 = localDate68.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate72 = localDate68.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property73 = localDate72.era();
        int int74 = dateTimeField60.getMaximumValue((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.LocalDate localDate76 = localDate72.minusWeeks(20);
        org.joda.time.LocalDate localDate78 = localDate72.plusMonths((int) (byte) -1);
        int int79 = localDate78.getDayOfMonth();
        boolean boolean80 = localDate48.equals((java.lang.Object) localDate78);
        boolean boolean81 = yearMonthDay40.equals((java.lang.Object) boolean80);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay40.minusMonths(2);
        org.joda.time.DateTime dateTime84 = yearMonthDay83.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property85 = dateTime84.era();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 24 + "'", int74 == 24);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 11 + "'", int79 == 11);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        int[] intArray11 = localDate9.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        boolean boolean14 = localDate9.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) localDate9);
        int int17 = localDate9.getValue(0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, 2, 11]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.setFirstDayOfWeek((int) '#');
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury((int) '#');
        org.joda.time.DateTime.Property property15 = dateTime12.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = localDate25.getField(1);
        org.joda.time.LocalDate localDate29 = localDate25.withDayOfYear(2);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate32 = localDate25.minusMonths(762);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDate25, 49, locale34);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "49" + "'", str35, "49");
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minus(readablePeriod6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 9, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minus((long) (-1));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeField26.set((long) 577, "2022-02-12T14:43:00.000+29:00", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-12T14:43:00.000+29:00\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay10 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale22 = null;
        int int23 = property20.getMaximumTextLength(locale22);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:45:02.795" + "'", str6, "T09:45:02.795");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval6.withPeriodAfterStart(readablePeriod28);
        org.joda.time.Interval interval30 = interval6.toInterval();
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.DateTime dateTime32 = interval30.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime32.withTime(2000, 23, (-391), 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight10 = property8.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight16.toYearMonthDay();
        int[] intArray19 = yearMonthDay18.getValues();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.withPeriodAdded(readablePeriod20, 22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean35 = interval31.isBefore((org.joda.time.ReadableInterval) interval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval31.toPeriod(periodType36);
        int int39 = period37.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay22.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadablePeriod) period37);
        int int42 = dateMidnight10.compareTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight48, readablePeriod49);
        org.joda.time.DateTime dateTime51 = interval50.getStart();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.monthOfYear();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime53.minus(readableDuration57);
        org.joda.time.DateTime.Property property59 = dateTime53.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime62 = dateTime53.withField(dateTimeFieldType60, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.YearMonthDay yearMonthDay67 = dateMidnight65.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.monthOfYear();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime69.minus(readableDuration73);
        org.joda.time.DateMidnight dateMidnight75 = dateTime74.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.plus((-1L));
        org.joda.time.Chronology chronology81 = dateMidnight80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.secondOfMinute();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.Interval interval85 = localDate83.toInterval(dateTimeZone84);
        org.joda.time.Chronology chronology86 = interval85.getChronology();
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((java.lang.Object) dateTime74, chronology86);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay67.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType60.getField(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField89.getType();
        int int91 = dateTime51.get(dateTimeField89);
        org.joda.time.DateTime.Property property92 = dateTime51.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property92.getFieldType();
        boolean boolean94 = dateMidnight10.isSupported(dateTimeFieldType93);
        org.joda.time.DateMidnight.Property property95 = dateMidnight10.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 212 + "'", int91 == 212);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj0, chronology6);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(obj0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        int int12 = dateTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay12 = property7.addWrapFieldToCopy(40);
        java.lang.String str13 = timeOfDay12.toString();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusSeconds(5255);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = timeOfDay12.getFieldType(2810341);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2810341");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:45:02.923" + "'", str6, "T09:45:02.923");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2" + "'", str8, "2");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T09:45:42.923" + "'", str13, "T09:45:42.923");
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder13 = builder8.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder17 = builder8.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder21 = builder8.setDate(37, 10, 14);
        java.util.Calendar calendar22 = builder8.build();
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder28 = builder23.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder31 = builder28.set(4, 0);
        java.util.Calendar.Builder builder33 = builder28.setCalendarType("gregory");
        java.util.Calendar.Builder builder35 = builder33.setLenient(true);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        int int37 = calendar36.getFirstDayOfWeek();
        int int38 = calendar36.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        boolean boolean47 = date42.before(date46);
        int int48 = date42.getMonth();
        calendar36.setTime(date42);
        java.util.TimeZone timeZone50 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.util.Calendar.Builder builder52 = builder33.setTimeZone(timeZone50);
        calendar22.setTimeZone(timeZone50);
        gregorianCalendar6.setTimeZone(timeZone50);
        gregorianCalendar6.setMinimalDaysInFirstWeek(45);
        gregorianCalendar6.setLenient(true);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap62 = gregorianCalendar6.getDisplayNames(38681035, 33538, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-60972226286000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=28,SECOND=34,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(34896);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight.Property property22 = dateMidnight20.dayOfWeek();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean24 = interval16.isAfter((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval23.withPeriodAfterStart(readablePeriod25);
        org.joda.time.Duration duration27 = interval23.toDuration();
        org.joda.time.DateTime dateTime28 = dateTime13.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        long long10 = dateTimeField8.roundHalfEven((long) 34);
        long long12 = dateTimeField8.roundHalfEven((long) 1);
        long long15 = dateTimeField8.add(292279042L, 354);
        long long18 = dateTimeField8.getDifferenceAsLong(1644572155702L, (long) (-292275054));
        java.lang.String str20 = dateTimeField8.getAsShortText((long) 2008);
        java.lang.String str22 = dateTimeField8.getAsShortText(7L);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property35 = localDate34.weekyear();
        int[] intArray36 = localDate34.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = dateTimeField8.addWrapPartial(readablePartial23, 428, intArray36, 34585);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 30877879042L + "'", long15 == 30877879042L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19037L + "'", long18 == 19037L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 2, 11]");
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMillis(10);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withSecondOfMinute(56);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(70L, chronology8);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withZoneRetainFields(dateTimeZone15);
        long long19 = dateTimeZone15.convertUTCToLocal(34657910L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 34657910L + "'", long19 == 34657910L);
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate11.toDateTime(localTime12, dateTimeZone13);
        int int15 = property8.compareTo((org.joda.time.ReadableInstant) dateTime14);
        java.util.Locale locale16 = null;
        java.lang.String str17 = property8.getAsShortText(locale16);
        org.joda.time.YearMonthDay yearMonthDay19 = property8.addToCopy((int) (byte) 1);
        java.lang.String str20 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = property8.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        int[] intArray27 = yearMonthDay26.getValues();
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay26.toDateMidnight();
        int int29 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTimeField dateTimeField30 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay31 = property8.withMaximumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Jan" + "'", str17, "Jan");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[monthOfYear]" + "'", str20, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withWeekyear(9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        boolean boolean17 = dateMidnight14.isBefore((long) ' ');
        org.joda.time.LocalDate localDate18 = dateMidnight14.toLocalDate();
        org.joda.time.Chronology chronology19 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property33 = localDate32.era();
        int int34 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate36 = localDate32.minusWeeks(20);
        org.joda.time.LocalDate localDate38 = localDate32.plusMonths((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property40 = localDate32.weekyear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDate32.getFieldTypes();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 8);
        int int2 = localDate1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime9 = property7.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds((int) (byte) -1);
        org.joda.time.DateTime dateTime38 = dateTime34.plusDays(34628);
        org.joda.time.DateTime dateTime40 = dateTime34.plusYears((int) (short) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillisOfDay(2021);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readableDuration4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        int int10 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plus((long) 44);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(chronology23);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((-58310378859000L), chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfYear();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology23);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime10 = dateTime8.withYear(2);
        int int11 = dateTime10.getYearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMillis(71);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("25260000");
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weeks();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        int int11 = localDate7.getWeekyear();
        org.joda.time.LocalDate.Property property12 = localDate7.year();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy((-5599659));
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        java.time.Instant instant8 = gregorianCalendar6.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jul 31 00:00:00 UTC 1969");
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        calendar0.setMinimalDaysInFirstWeek(3);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar0.getMinimum(548);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 548");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=3,ERA=1,YEAR=42,MONTH=-292275054,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=40,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.getYearMonthDay();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property8.getAsText(locale12);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "January" + "'", str13, "January");
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology11);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.minusMillis(52);
        int int21 = timeOfDay17.size();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay17.plusSeconds(12);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        boolean boolean31 = dateMidnight28.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property32 = dateMidnight28.centuryOfEra();
        java.lang.String str33 = property32.getAsText();
        org.joda.time.DateMidnight dateMidnight34 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight34.withChronology(chronology40);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minus((long) (-1));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minus(readablePeriod49);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMinutes(1970);
        org.joda.time.Chronology chronology55 = timeOfDay52.getChronology();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minus((long) (-1));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.minus(readablePeriod61);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay64.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay68.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        java.util.Date date75 = dateMidnight74.toDate();
        org.joda.time.DateMidnight.Property property76 = dateMidnight74.dayOfWeek();
        org.joda.time.Interval interval77 = new org.joda.time.Interval(readableDuration71, (org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean81 = interval77.isBefore((org.joda.time.ReadableInterval) interval80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval77.toPeriod(periodType82);
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay70.minus((org.joda.time.ReadablePeriod) period83);
        org.joda.time.TimeOfDay timeOfDay85 = timeOfDay52.minus((org.joda.time.ReadablePeriod) period83);
        java.lang.String str86 = period83.toString();
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.months();
        boolean boolean88 = period83.isSupported(durationFieldType87);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight34.minus((org.joda.time.ReadablePeriod) period83);
        java.lang.Object obj90 = null;
        boolean boolean91 = period83.equals(obj90);
        org.joda.time.TimeOfDay timeOfDay92 = timeOfDay23.plus((org.joda.time.ReadablePeriod) period83);
        boolean boolean93 = timeOfDay5.equals((java.lang.Object) timeOfDay92);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572703296,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=3,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "19" + "'", str33, "19");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0S" + "'", str86, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(timeOfDay92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateMidnight0.isAfter(readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        boolean boolean11 = dateMidnight8.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.centuryOfEra();
        boolean boolean13 = property12.isLeap();
        org.joda.time.DateMidnight dateMidnight15 = property12.setCopy("0");
        org.joda.time.DateTime dateTime16 = dateMidnight15.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int18 = dateMidnight15.get(dateTimeFieldType17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight0.property(dateTimeFieldType17);
        java.lang.Object obj20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.days();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay25.withChronologyRetainFields(chronology31);
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(obj20, chronology36);
        org.joda.time.DateTime dateTime38 = dateMidnight0.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        boolean boolean33 = yearMonthDay24.isEqual((org.joda.time.ReadablePartial) localDate32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) (-1));
        long long39 = dateTimeZone35.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight40 = localDate32.toDateMidnight(dateTimeZone35);
        long long44 = dateTimeZone35.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str46 = dateTimeZone35.getNameKey((long) 33);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 34);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone35);
        int int50 = localDate49.getDayOfYear();
        org.joda.time.LocalDate.Property property51 = localDate49.era();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5L + "'", long39 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(5);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean36 = interval32.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = interval32.toPeriod(periodType37);
        org.joda.time.DateTime dateTime39 = dateTime23.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalDate localDate41 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 6);
        org.joda.time.PeriodType periodType42 = period38.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period38);
        java.util.Date date44 = new java.util.Date();
        java.time.Instant instant45 = date44.toInstant();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) date44);
        int int47 = yearMonthDay4.compareTo((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.LocalDate localDate49 = localDate46.withYear(3);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (-1));
        long long57 = dateTimeZone53.convertUTCToLocal((long) 5);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone53.getName((long) 0, locale59);
        org.joda.time.Interval interval61 = new org.joda.time.Interval(0L, (long) 19, dateTimeZone53);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeZone53.getShortName((-1732788000000L), locale63);
        org.joda.time.DateMidnight dateMidnight65 = localDate49.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.yearOfEra();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Fri Feb 11 09:45:03 UTC 2022");
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 5L + "'", long57 == 5L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.months();
        long long19 = chronology10.add(59L, (-18L), 34727424);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-625093573L) + "'", long19 == (-625093573L));
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.LocalDate localDate13 = property10.withMaximumValue();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property10.setCopy("T09:44:59.491", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:44:59.491\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3283200000L + "'", long12 == 3283200000L);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.set((int) (byte) -1, 59, (-1), 52, 21, 22);
        calendar1.set(131, 34522, 28);
        java.time.Instant instant13 = calendar1.toInstant();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=32755119682000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3007,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=21,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=4,MINUTE=21,SECOND=22,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.minuteOfHour();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = timeOfDay9.getFieldType(69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays(49);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime15.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime15.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean23 = dateTime15.isSupported(dateTimeFieldType22);
        int int24 = dateMidnight13.get(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        boolean boolean40 = yearMonthDay31.isEqual((org.joda.time.ReadablePartial) localDate39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (-1));
        long long46 = dateTimeZone42.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight47 = localDate39.toDateMidnight(dateTimeZone42);
        org.joda.time.LocalDate localDate49 = localDate39.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.hours();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.DurationField durationField59 = chronology55.minutes();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((java.lang.Object) localDate39, chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.YearMonthDay yearMonthDay66 = dateMidnight64.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay66.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.plus((-1L));
        org.joda.time.Chronology chronology74 = dateMidnight73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.secondOfMinute();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology74);
        boolean boolean77 = yearMonthDay68.isEqual((org.joda.time.ReadablePartial) localDate76);
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        java.lang.String str81 = dateTimeZone79.getNameKey((long) (-1));
        long long83 = dateTimeZone79.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight84 = localDate76.toDateMidnight(dateTimeZone79);
        long long86 = dateTimeZone79.convertUTCToLocal((long) '4');
        org.joda.time.Chronology chronology87 = chronology55.withZone(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType22.getField(chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.minuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 5L + "'", long83 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 52L + "'", long86 == 52L);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMonths((-1));
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight37.withYear(11);
        boolean boolean46 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateTime dateTime48 = dateTime31.withYear(2018);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T09:45:03.587Z" + "'", str32, "1970-01-01T09:45:03.587Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        int int25 = localDate22.getDayOfMonth();
        int int26 = localDate22.getYear();
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime32 = dateTime27.withField(dateTimeFieldType30, 37);
        boolean boolean33 = dateTime9.isSupported(dateTimeFieldType30);
        org.joda.time.DateTime dateTime35 = dateTime9.plusHours(213);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.Interval interval13 = property11.toInterval();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime15 = dateTime12.withYearOfEra((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime12.withMillis(797128607520000069L);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField12 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(50400000, 0, (-292275054), chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50400000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        long long46 = calendar0.getTimeInMillis();
        calendar0.set(49, 0, 59, 36, 0, 20);
        calendar0.setMinimalDaysInFirstWeek(13);
        calendar0.clear();
        calendar0.set(23, 34585, 34699, 32770, 365, 40);
        int int65 = calendar0.getActualMinimum(0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=13,ERA=?,YEAR=23,MONTH=34585,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=34699,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=32770,MINUTE=365,SECOND=40,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572703700L + "'", long46 == 1644572703700L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        boolean boolean25 = yearMonthDay16.isEqual((org.joda.time.ReadablePartial) localDate24);
        int int26 = property8.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        int[] intArray27 = yearMonthDay16.getValues();
        int int28 = yearMonthDay16.getDayOfMonth();
        int[] intArray29 = yearMonthDay16.getValues();
        int int30 = yearMonthDay16.getMonthOfYear();
        int int31 = yearMonthDay16.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1969, 12, 31]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1969, 12, 31]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusDays(33);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(131);
        org.joda.time.Interval interval14 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = interval14.getStart();
        java.lang.String str16 = interval14.toString();
        org.joda.time.DateTime dateTime17 = interval14.getStart();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = interval27.withPeriodAfterStart(readablePeriod29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        java.util.Date date35 = dateMidnight34.toDate();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.dayOfWeek();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableDuration31, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean41 = interval37.isBefore((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTime dateTime42 = interval37.getEnd();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.dayOfWeek();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49);
        boolean boolean53 = interval45.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.Interval interval57 = interval45.withStart((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = interval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration59 = interval37.toDuration();
        org.joda.time.Interval interval60 = interval30.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration61 = interval60.toDuration();
        org.joda.time.DateTime dateTime63 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration61, 34832);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-11-29T00:00:00.000+131:00/1969-11-30T00:00:00.000+131:00" + "'", str16, "1969-11-29T00:00:00.000+131:00/1969-11-30T00:00:00.000+131:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        boolean boolean25 = yearMonthDay16.isEqual((org.joda.time.ReadablePartial) localDate24);
        int int26 = property8.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        int[] intArray27 = yearMonthDay16.getValues();
        int int28 = yearMonthDay16.getDayOfMonth();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (-1));
        long long35 = dateTimeZone31.convertUTCToLocal((long) 5);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone31.getName((long) 0, locale37);
        java.lang.String str39 = dateTimeZone31.toString();
        java.lang.String str40 = dateTimeZone31.getID();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(10L, dateTimeZone31);
        long long45 = dateTimeZone31.convertLocalToUTC(292278994L, false);
        org.joda.time.DateTime dateTime46 = yearMonthDay16.toDateTimeAtMidnight(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1969, 12, 31]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 5L + "'", long35 == 5L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 292278994L + "'", long45 == 292278994L);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        int int47 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone49 = calendar0.getTimeZone();
        calendar0.setLenient(false);
        int int52 = calendar0.getWeekYear();
        calendar0.setTimeInMillis(1670750417402L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1670750417402,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=20,SECOND=17,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = localDate14.getField(1);
        org.joda.time.LocalDate localDate18 = localDate14.withDayOfYear(2);
        org.joda.time.LocalDate localDate20 = localDate14.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        int[] intArray27 = yearMonthDay26.getValues();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.withPeriodAdded(readablePeriod28, 22);
        int int31 = yearMonthDay26.getDayOfMonth();
        int int32 = localDate14.compareTo((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.DateTime dateTime33 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) (-1));
        long long39 = dateTimeZone35.convertUTCToLocal((long) 5);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone35.getName((long) 0, locale41);
        java.lang.String str43 = dateTimeZone35.toString();
        java.lang.String str44 = dateTimeZone35.getID();
        org.joda.time.DateTime dateTime45 = yearMonthDay26.toDateTimeAtCurrentTime(dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(19033, 5222, 34846405, 7, 135, 34732484, 52958028, dateTimeZone35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 135 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5L + "'", long39 == 5L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDate localDate15 = dateMidnight6.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight6.plusMonths(286);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withMonthOfYear(34831);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34831 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime12.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime12.secondOfMinute();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        boolean boolean20 = property10.equals((java.lang.Object) property18);
        java.lang.String str21 = property10.getAsShortText();
        org.joda.time.LocalDate localDate22 = property10.roundHalfEvenCopy();
        int int23 = localDate22.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(34815702);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3283200000L + "'", long12 == 3283200000L);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minus(2L);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withDurationAdded((long) 11, 48);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(99);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight4.toMutableDateTime(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay13 = property8.addToCopy(36000000);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        calendar0.set(55, 0, 0, (int) (short) 10, 50, 33330867);
        calendar0.setFirstDayOfWeek(70);
        java.lang.String str25 = calendar0.getCalendarType();
        calendar0.setFirstDayOfWeek(34545);
        int int28 = calendar0.getFirstDayOfWeek();
        calendar0.set((-51), 87, 2810341, 34805967, 34875, (-4871));
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = calendar0.getDisplayName(335, 0, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=34545,minimalDaysInFirstWeek=16,ERA=1,YEAR=-51,MONTH=87,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=2810341,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=34805967,MINUTE=34875,SECOND=-4871,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 34545 + "'", int28 == 34545);
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        calendar0.set(779, 43, (int) (short) 0, 32769, 2, (int) (short) 0);
        java.util.Date date25 = calendar0.getTime();
        int int26 = calendar0.getWeeksInWeekYear();
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.plusMinutes(582);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.plusHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-37353106680000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=786,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=116,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=2,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Apr 26 09:02:00 UTC 786");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar.Builder builder16 = builder12.setWeekDate(34545, 933, 28);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 10);
        int int28 = localDate25.getYearOfCentury();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        boolean boolean58 = dateTimeZone55.isFixed();
        org.joda.time.DateTime dateTime59 = localDate41.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = localDate25.toDateTime(localTime29, dateTimeZone55);
        java.util.TimeZone timeZone61 = dateTimeZone55.toTimeZone();
        calendar17.setTimeZone(timeZone61);
        int int63 = calendar17.getMinimalDaysInFirstWeek();
        int int64 = calendar17.getMinimalDaysInFirstWeek();
        calendar17.set(37, 28, 25, 19, 131);
        calendar17.set(14, 48, 24, 9, (int) (short) 100);
        int int77 = calendar17.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone78 = calendar17.getTimeZone();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone78);
        java.util.Calendar.Builder builder80 = builder12.setTimeZone(timeZone78);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=48,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=24,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=100,SECOND=3,MILLISECOND=991,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1644572703992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=3,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology5.days();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.centuryOfEra();
        boolean boolean15 = dateTimeField14.isSupported();
        int int17 = dateTimeField14.get((long) 34715586);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField14.getType();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight10 = property8.getDateMidnight();
        java.util.Locale locale12 = null;
        org.joda.time.DateMidnight dateMidnight13 = property8.setCopy("19", locale12);
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.joda.time.DurationField durationField15 = property8.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight16 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readableDuration4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        int int10 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plus((long) 44);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plus((long) 22);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay(1670750125058L, chronology27);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean25 = interval21.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTime dateTime26 = interval21.getEnd();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        boolean boolean37 = interval29.isAfter((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.Interval interval41 = interval29.withStart((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = interval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration43 = interval21.toDuration();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration43, 24);
        org.joda.time.DateTime dateTime47 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration43, 24);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears(16);
        java.util.GregorianCalendar gregorianCalendar50 = dateTime47.toGregorianCalendar();
        java.lang.String str51 = gregorianCalendar50.getCalendarType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(gregorianCalendar50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gregory" + "'", str51, "gregory");
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusDays((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (-1));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minus(readablePeriod12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        int int19 = dateTimeZone15.getOffset(5L);
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight2.toMutableDateTime(dateTimeZone15);
        long long22 = dateTimeZone15.nextTransition((long) 57);
        java.util.TimeZone timeZone23 = dateTimeZone15.toTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        int int25 = calendar24.getWeekYear();
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap29 = calendar24.getDisplayNames(2130, 36522, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 57L + "'", long22 == 57L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572704093,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=4,MILLISECOND=93,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight10 = property8.getDateMidnight();
        java.util.Locale locale12 = null;
        org.joda.time.DateMidnight dateMidnight13 = property8.setCopy("19", locale12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay29.withPeriodAdded(readablePeriod30, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = localDate40.toInterval(dateTimeZone41);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.Period period44 = interval42.toPeriod();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weekyears();
        int int46 = period44.get(durationFieldType45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay29.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight53 = dateTime52.toDateMidnight();
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight53.minusYears(1970);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay24.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 57);
        org.joda.time.DateTime dateTime62 = yearMonthDay61.toDateTimeAtCurrentTime();
        int int63 = property8.getDifference((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        int[] intArray10 = yearMonthDay9.getValues();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withPeriodAdded(readablePeriod11, 22);
        java.lang.String str14 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay9.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay9.minusMonths(15);
        org.joda.time.LocalDate localDate19 = yearMonthDay18.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight50 = localDate19.toDateMidnight(dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(323, 52955, 521, (-24356213), (-378559), dateTimeZone45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -24356213 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) 22);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths(3993);
        int int28 = dateTime23.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime23.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getFirstDayOfWeek();
        int int13 = calendar11.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        boolean boolean22 = date17.before(date21);
        int int23 = date17.getMonth();
        calendar11.setTime(date17);
        calendar11.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant27 = calendar11.toInstant();
        boolean boolean28 = interval9.equals((java.lang.Object) calendar11);
        calendar11.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = calendar11.get(48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property32.getAsText(locale33);
        int int35 = property32.getMaximumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "January" + "'", str34, "January");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.secondOfMinute();
        long long15 = dateTimeField13.roundHalfEven(86400000L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(5);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean29 = interval25.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval25.toPeriod(periodType30);
        org.joda.time.DateTime dateTime32 = dateTime16.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime12.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period34 = period31.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = period34.getValue(862);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 862");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate.Property property26 = localDate11.year();
        org.joda.time.LocalDate localDate28 = localDate11.minusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.LocalDate localDate46 = localDate40.withWeekyear(19);
        org.joda.time.LocalTime localTime47 = null;
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str51 = dateTimeZone49.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime52 = localDate40.toDateTime(localTime47, dateTimeZone49);
        org.joda.time.LocalDate.Property property53 = localDate40.weekyear();
        org.joda.time.LocalDate.Property property54 = localDate40.dayOfWeek();
        org.joda.time.LocalDate.Property property55 = localDate40.year();
        org.joda.time.LocalDate localDate57 = localDate40.minusDays((int) (byte) 10);
        int int58 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate57);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = localDate28.getValue(226);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 226");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight17.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay19.withPeriodAdded(readablePeriod20, 11);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.centuries();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay22.withChronologyRetainFields(chronology28);
        int[] intArray32 = chronology12.get((org.joda.time.ReadablePartial) yearMonthDay30, (long) (-391));
        org.joda.time.DurationField durationField33 = chronology12.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1959), (-19034), 286, 34844635, 2130, 789, 34871746, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34844635 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        boolean boolean12 = localDate7.equals((java.lang.Object) "19");
        org.joda.time.LocalDate.Property property13 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean12 = dateTime8.isSupported(dateTimeFieldType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean23 = interval19.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = interval27.withStart((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = interval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Interval interval42 = interval19.withPeriodAfterStart(readablePeriod41);
        org.joda.time.Interval interval43 = interval19.toInterval();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Interval interval53 = localDate51.toInterval(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        boolean boolean55 = interval43.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Duration duration56 = interval43.toDuration();
        org.joda.time.DateTime dateTime58 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration56, 28);
        java.lang.Object obj59 = null;
        boolean boolean60 = dateTime8.equals(obj59);
        int int61 = dateTime8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        int[] intArray36 = localDate14.getValues();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.centuries();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        java.util.Date date48 = dateMidnight47.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = dateMidnight47.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.plusDays((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        java.util.Date date56 = dateMidnight55.toDate();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.dayOfWeek();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableDuration52, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean62 = interval58.isBefore((org.joda.time.ReadableInterval) interval61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval58.toPeriod(periodType63);
        int int66 = period64.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plus((-1L));
        org.joda.time.Chronology chronology72 = dateMidnight71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.secondOfMinute();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = localDate74.getField(1);
        long long78 = dateTimeField76.roundHalfCeiling((long) (byte) 10);
        long long80 = dateTimeField76.remainder((long) 'a');
        org.joda.time.DurationField durationField81 = dateTimeField76.getRangeDurationField();
        boolean boolean82 = period64.equals((java.lang.Object) durationField81);
        int int83 = period64.size();
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay51.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 34522);
        org.joda.time.DateTime dateTime87 = dateTime44.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 2022);
        org.joda.time.LocalDate localDate88 = localDate14.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTimeZone dateTimeZone90 = null;
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone90);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight91.plus((-1L));
        org.joda.time.Chronology chronology94 = dateMidnight93.getChronology();
        org.joda.time.DateTimeField dateTimeField95 = chronology94.secondOfMinute();
        org.joda.time.LocalDate localDate96 = new org.joda.time.LocalDate(chronology94);
        org.joda.time.DateTimeField dateTimeField98 = localDate96.getField(1);
        int int99 = localDate88.compareTo((org.joda.time.ReadablePartial) localDate96);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 97L + "'", long80 == 97L);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        long long46 = dateTimeZone38.previousTransition((-1028665186000L));
        long long49 = dateTimeZone38.convertLocalToUTC(1655717759L, true);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(1200979920000L, dateTimeZone38);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1028665186000L) + "'", long46 == (-1028665186000L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1655717759L + "'", long49 == 1655717759L);
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(35079787, 329, 34909);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 329 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        int int14 = calendar13.getFirstDayOfWeek();
        int int15 = calendar13.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date19.getMonth();
        calendar13.setTime(date19);
        java.util.TimeZone timeZone27 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.Calendar.Builder builder29 = builder10.setTimeZone(timeZone27);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        int int31 = calendar30.getWeeksInWeekYear();
        calendar30.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        int int39 = dateTime38.getSecondOfMinute();
        org.joda.time.DateTime.Property property40 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime41 = property40.withMinimumValue();
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime44 = dateTime41.minusYears(69);
        boolean boolean45 = calendar30.after((java.lang.Object) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            calendar30.roll(26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572704454,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=4,MILLISECOND=454,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight2.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withWeekyear(38);
        java.lang.String str8 = dateMidnight7.toString();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight7.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0038-01-07T00:00:00.000Z" + "'", str8, "0038-01-07T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.centuryOfEra();
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.dayOfYear();
        org.joda.time.DateMidnight.Property property6 = dateMidnight0.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.lang.String str20 = localDate17.toString("24");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        int int31 = localDate28.getYearOfCentury();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate56 = localDate52.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.DateTime dateTime62 = localDate44.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = localDate28.toDateTime(localTime32, dateTimeZone58);
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight65 = localDate17.toDateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.weekyear();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTimeISO();
        int int72 = dateTime71.getSecondOfMinute();
        int int73 = dateTime71.getMonthOfYear();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = dateTime71.toDateTime(chronology74);
        org.joda.time.DateTime dateTime77 = dateTime75.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean79 = dateTime75.isSupported(dateTimeFieldType78);
        boolean boolean80 = dateMidnight65.isSupported(dateTimeFieldType78);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight65.minusDays(34900);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "24" + "'", str20, "24");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateMidnight82);
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder14 = builder12.setLenient(true);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int19 = calendar17.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        boolean boolean28 = date23.before(date27);
        int int29 = date23.getMonth();
        calendar17.setTime(date23);
        calendar17.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant33 = calendar17.toInstant();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        int int35 = calendar34.getFirstDayOfWeek();
        int int36 = calendar34.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        boolean boolean45 = date40.before(date44);
        int int46 = date40.getMonth();
        calendar34.setTime(date40);
        java.util.TimeZone timeZone48 = calendar34.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        calendar17.setTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.util.Calendar.Builder builder52 = builder12.setTimeZone(timeZone48);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        boolean boolean17 = dateMidnight14.isBefore((long) ' ');
        org.joda.time.LocalDate localDate18 = dateMidnight14.toLocalDate();
        int int19 = property9.getDifference((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight20 = property9.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight21 = property9.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight23 = property9.setCopy(7200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7200000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) timeOfDay9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        org.joda.time.DateMidnight dateMidnight12 = property8.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = property8.addWrapFieldToCopy(34790);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean31 = localDate11.equals((java.lang.Object) 1000L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime33.monthOfYear();
        org.joda.time.DateTime dateTime37 = property36.withMaximumValue();
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(21);
        org.joda.time.DateTime.Property property40 = dateTime37.weekyear();
        int int41 = property40.getMinimumValueOverall();
        org.joda.time.DateTime dateTime42 = property40.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(5);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval67.toPeriod(periodType72);
        org.joda.time.DateTime dateTime74 = dateTime58.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDate localDate76 = localDate54.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 6);
        org.joda.time.DateTime dateTime77 = dateTime42.plus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDate localDate78 = localDate11.plus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property83 = dateTime80.monthOfYear();
        org.joda.time.DateTime dateTime84 = property83.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property83.getFieldType();
        org.joda.time.LocalDate.Property property86 = localDate78.property(dateTimeFieldType85);
        org.joda.time.LocalDate.Property property87 = localDate78.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(292278994L, chronology6);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyearOfCentury();
        java.lang.String str14 = dateTimeField13.toString();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str14, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        long long20 = chronology15.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfDay();
        org.joda.time.Chronology chronology22 = chronology15.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology22);
        boolean boolean24 = dateTimeFormatter23.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter23.getParser();
        boolean boolean26 = dateTimeFormatter23.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter23.withPivotYear(35091050);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 292279042L + "'", long20 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeParser25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusYears(34778);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(19033);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.monthOfYear();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.minus(readableDuration28);
        org.joda.time.DateMidnight dateMidnight30 = dateTime29.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = localDate38.toInterval(dateTimeZone39);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, chronology41);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay22.withChronologyRetainFields(chronology41);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay22.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minus((long) (-1));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay45.withChronologyRetainFields(chronology49);
        int int53 = yearMonthDay52.getDayOfMonth();
        int int54 = yearMonthDay52.getYear();
        int int55 = property15.compareTo((org.joda.time.ReadablePartial) yearMonthDay52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(46);
        org.joda.time.DateMidnight dateMidnight58 = yearMonthDay52.toDateMidnight(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight59 = localDate8.toDateMidnight(dateTimeZone57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withWeekOfWeekyear(34890);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34890 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property4.getAsText(locale6);
        org.joda.time.DateMidnight dateMidnight9 = property4.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay15.withChronologyRetainFields(chronology21);
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight27.getZone();
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay25.toDateMidnight(dateTimeZone30);
        java.util.Set<java.lang.String> strSet32 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean33 = dateTimeZone30.equals((java.lang.Object) strSet32);
        long long35 = dateTimeZone30.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone30.getMillisKeepLocal(dateTimeZone36, (long) 50);
        org.joda.time.Chronology chronology39 = chronology10.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField40 = chronology10.weekOfWeekyear();
        int int42 = dateTimeField40.getMaximumValue((long) 34897);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday" + "'", str7, "Thursday");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 14400001L + "'", long35 == 14400001L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 50L + "'", long38 == 50L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53 + "'", int42 == 53);
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.monthOfYear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.minus(readableDuration11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate21.toInterval(dateTimeZone22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateTime12, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay5.withChronologyRetainFields(chronology24);
        org.joda.time.DurationField durationField27 = durationFieldType0.getField(chronology24);
        org.joda.time.DurationField durationField28 = chronology24.minutes();
        java.lang.String str29 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfMonth();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfSecond();
        java.lang.String str54 = property53.getAsShortText();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        org.joda.time.DurationField durationField12 = property8.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property8.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay16 = property8.addToCopy(0);
        java.lang.Object obj17 = null;
        boolean boolean18 = property8.equals(obj17);
        java.util.Locale locale19 = null;
        int int20 = property8.getMaximumTextLength(locale19);
        org.joda.time.YearMonthDay yearMonthDay22 = property8.addToCopy(762);
        org.joda.time.DurationField durationField23 = property8.getDurationField();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateTime dateTime9 = dateMidnight4.toDateTime();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime12 = dateTime9.withFieldAdded(durationFieldType10, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.centuryOfEra();
        int int19 = dateMidnight17.getWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.plusMonths(27);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withFieldAdded(durationFieldType22, 34665286);
        org.joda.time.DateTime dateTime26 = dateTime9.withFieldAdded(durationFieldType22, 33334743);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime dateTime15 = dateTime12.plusYears(32);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = localDate23.getField(1);
        org.joda.time.LocalDate localDate27 = localDate23.withDayOfYear(2);
        org.joda.time.LocalDate localDate29 = localDate23.minusWeeks((int) (byte) 1);
        org.joda.time.Interval interval30 = localDate23.toInterval();
        org.joda.time.DateTime dateTime31 = dateTime12.withFields((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        long long33 = mutableDateTime32.getMillis();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572704815L + "'", long33 == 1644572704815L);
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays(9);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfDay();
        long long6 = property5.remainder();
        org.joda.time.DurationField durationField7 = property5.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 835L + "'", long6 == 835L);
        org.junit.Assert.assertNull(durationField7);
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter40.getParser();
        boolean boolean42 = dateTimeFormatter40.isPrinter();
        java.util.Locale locale43 = dateTimeFormatter40.getLocale();
        boolean boolean44 = dateTimeFormatter40.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeParser41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (-1));
        java.lang.String str6 = dateTimeZone2.getNameKey((long) (short) 0);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(70L, dateTimeZone2);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        int int9 = localDate7.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight17 = property16.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        boolean boolean25 = dateMidnight22.isBefore((long) ' ');
        org.joda.time.LocalDate localDate26 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology27 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        long long30 = dateTimeField28.roundHalfCeiling((long) 996);
        int int31 = dateTimeField28.getMinimumValue();
        long long33 = dateTimeField28.roundFloor((-1732790905000L));
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.YearMonthDay yearMonthDay38 = dateMidnight36.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay38.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTimeAtMidnight();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay38, 55, locale43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (int) (short) 10);
        boolean boolean49 = dateTimeZone47.isStandardOffset(252L);
        org.joda.time.Interval interval50 = yearMonthDay38.toInterval(dateTimeZone47);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight17, dateTimeZone47);
        org.joda.time.LocalDate.Property property52 = localDate51.dayOfMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1732791600000L) + "'", long33 == (-1732791600000L));
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "55" + "'", str44, "55");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minus(readablePeriod8);
        long long10 = dateMidnight9.getMillis();
        java.util.GregorianCalendar gregorianCalendar11 = dateMidnight9.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60522681600000L) + "'", long10 == (-60522681600000L));
        org.junit.Assert.assertNotNull(gregorianCalendar11);
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek((int) (byte) 1);
        java.lang.String str16 = calendar0.getCalendarType();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.LocalDate localDate34 = localDate28.withWeekyear(19);
        org.joda.time.LocalTime localTime35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime40 = localDate28.toDateTime(localTime35, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(dateTimeZone37);
        boolean boolean42 = calendar0.before((java.lang.Object) dateMidnight41);
        int int43 = dateMidnight41.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus(readablePeriod46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.withWeekOfWeekyear(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.withChronology(chronology16);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay12 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = property7.addWrapFieldToCopy(34875);
        org.joda.time.DateTimeField dateTimeField15 = property7.getField();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:45:04.943" + "'", str6, "T09:45:04.943");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = localDate26.toInterval(dateTimeZone27);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.Period period30 = interval28.toPeriod();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weekyears();
        int int32 = period30.get(durationFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.minusYears(1970);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 57);
        org.joda.time.DateTime dateTime48 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay47.withYear(15);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime52.monthOfYear();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime52.minus(readableDuration56);
        org.joda.time.DateTime.Property property58 = dateTime52.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime61 = dateTime52.withField(dateTimeFieldType59, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.YearMonthDay yearMonthDay66 = dateMidnight64.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property71 = dateTime68.monthOfYear();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime68.minus(readableDuration72);
        org.joda.time.DateMidnight dateMidnight74 = dateTime73.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.plus((-1L));
        org.joda.time.Chronology chronology80 = dateMidnight79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.secondOfMinute();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(chronology80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.Interval interval84 = localDate82.toInterval(dateTimeZone83);
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate((java.lang.Object) dateTime73, chronology85);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay66.withChronologyRetainFields(chronology85);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType59.getField(chronology85);
        org.joda.time.DateMidnight dateMidnight89 = org.joda.time.DateMidnight.now(chronology85);
        org.joda.time.DateTimeZone dateTimeZone90 = chronology85.getZone();
        org.joda.time.Interval interval91 = yearMonthDay50.toInterval(dateTimeZone90);
        boolean boolean92 = dateTimeZone90.isFixed();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology42 = dateTimeFormatter6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 35);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 1969, false, 3283200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter6.withZone(dateTimeZone45);
        int int51 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate63 = localDate59.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.lang.String str66 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate69 = localDate63.withWeekyear(19);
        org.joda.time.LocalTime localTime70 = null;
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.lang.String str74 = dateTimeZone72.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime75 = localDate63.toDateTime(localTime70, dateTimeZone72);
        int int76 = dateTime75.getYear();
        org.joda.time.DateTime.Property property77 = dateTime75.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay78 = dateTime75.toYearMonthDay();
        int int79 = yearMonthDay78.size();
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay78.plusDays(8);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay81.plusYears(42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) yearMonthDay83);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-189298031L) + "'", long49 == (-189298031L));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readableDuration19);
        int int21 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime18.minusYears((int) '#');
        boolean boolean25 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime27 = dateTime16.plusWeeks((-1));
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (-1));
        long long33 = dateTimeZone29.convertUTCToLocal((long) 5);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone29.getName((long) 0, locale35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readableDuration40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.monthOfYear();
        org.joda.time.DateTime dateTime47 = property46.withMaximumValue();
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.property(dateTimeFieldType59);
        int int61 = dateTime53.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime63 = dateTime49.withField(dateTimeFieldType59, 24);
        int int64 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime67 = dateTime39.withDurationAdded(1L, 577);
        int int68 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 5L + "'", long33 == 5L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 11 + "'", int61 == 11);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        java.util.Date date3 = new java.util.Date((-1), 8, 0);
        date3.setMinutes(0);
        int int6 = date3.getYear();
        int int7 = date3.getDay();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 31 00:00:00 UTC 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateMidnight0.isAfter(readableInstant2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.minusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight0.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        boolean boolean14 = dateMidnight11.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.centuryOfEra();
        java.lang.String str16 = property15.getAsText();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = dateMidnight18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime22 = dateTime19.withYearOfEra((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay32.withPeriodAdded(readablePeriod33, 11);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.centuries();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay35.withChronologyRetainFields(chronology41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(0L, chronology41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight26.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime19.toMutableDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight0.toMutableDateTime(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dateMidnight0.toString("T09:44:35.137");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.dayOfWeek();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean29 = interval21.isAfter((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = interval28.withPeriodAfterStart(readablePeriod30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean42 = interval38.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTime dateTime43 = interval38.getEnd();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfWeek();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean54 = interval46.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = interval46.withStart((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration60 = interval38.toDuration();
        org.joda.time.Interval interval61 = interval31.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime63 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration60, 22);
        org.joda.time.DateTime.Property property64 = dateTime18.era();
        java.util.Date date66 = new java.util.Date((-212399999L));
        int int67 = date66.getDate();
        boolean boolean68 = dateTime18.equals((java.lang.Object) date66);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Dec 29 13:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 29 + "'", int67 == 29);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField6.getLeapDurationField();
        long long12 = dateTimeField6.add((long) '#', (long) 10);
        long long14 = dateTimeField6.roundFloor(2831500800013L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight17.toYearMonthDay();
        int[] intArray20 = yearMonthDay19.getValues();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.withPeriodAdded(readablePeriod21, 22);
        java.lang.String str24 = yearMonthDay19.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears(5);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        org.joda.time.DateTime dateTime54 = dateTime38.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalDate localDate56 = localDate34.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 6);
        org.joda.time.PeriodType periodType57 = period53.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay58.year();
        org.joda.time.YearMonthDay yearMonthDay61 = property59.setCopy(0);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minus((long) (-1));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.DurationField durationField70 = chronology68.seconds();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology68);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.plus((-1L));
        org.joda.time.Chronology chronology77 = dateMidnight76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.secondOfMinute();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology77);
        org.joda.time.LocalDate localDate81 = localDate79.withYearOfEra((int) (byte) 10);
        int int82 = localDate79.getYearOfCentury();
        boolean boolean84 = localDate79.equals((java.lang.Object) "19");
        int[] intArray85 = localDate79.getValues();
        int[] intArray87 = chronology68.get((org.joda.time.ReadablePartial) localDate79, (long) 1022);
        int[] intArray89 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) yearMonthDay61, (int) (short) 0, intArray87, 0);
        int int90 = yearMonthDay61.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10035L + "'", long12 == 10035L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2831500800000L + "'", long14 == 2831500800000L);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 22 + "'", int82 == 22);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[50, 1, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[50, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight8.toYearMonthDay();
        int[] intArray11 = yearMonthDay10.getValues();
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay10.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.plusMonths(14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar21 = dateMidnight20.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight26.toYearMonthDay();
        int[] intArray29 = yearMonthDay28.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.withPeriodAdded(readablePeriod30, 22);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        int[] intArray42 = yearMonthDay41.getValues();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.withPeriodAdded(readablePeriod43, 22);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.dayOfWeek();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean58 = interval54.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval54.toPeriod(periodType59);
        int int62 = period60.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay45.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay36.plus((org.joda.time.ReadablePeriod) period60);
        int[] intArray67 = chronology22.get((org.joda.time.ReadablePeriod) period60, (long) 42, 1644537600029L);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay14.minus((org.joda.time.ReadablePeriod) period60);
        int[] intArray71 = chronology3.get((org.joda.time.ReadablePeriod) period60, 0L, (long) 70);
        long long75 = chronology3.add(34555L, (long) 17, 40);
        org.joda.time.DateTimeField dateTimeField76 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology3.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 70]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 35235L + "'", long75 == 35235L);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(5);
        int int15 = timeOfDay14.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54 + "'", int12 == 54);
        org.junit.Assert.assertNotNull(timeOfDay14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property11.addToCopy((long) 15);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withDayOfMonth(24);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withYear(29);
        org.joda.time.DateMidnight.Property property18 = dateMidnight13.yearOfCentury();
        org.joda.time.LocalDate localDate19 = dateMidnight13.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        int int6 = dateMidnight2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime11.millisOfDay();
        org.joda.time.DateTime.Property property16 = dateTime11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(5);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minus((long) (-1));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minus(readablePeriod28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime20, dateTimeZone31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean45 = interval37.isAfter((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration46 = interval44.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration46, 20);
        org.joda.time.DateTime dateTime49 = dateTime11.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight2.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight2.plusWeeks(34620);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.era();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.minus((long) 59);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.plusWeeks(33330867);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date3.getDay();
        int int10 = date3.getHours();
        date3.setSeconds((int) '4');
        java.lang.String str13 = date3.toLocaleString();
        int int14 = date3.getYear();
        long long15 = date3.getTime();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date3);
        java.lang.String str17 = date3.toGMTString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jan 1, 1970 12:00:52 AM" + "'", str13, "Jan 1, 1970 12:00:52 AM");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52000L + "'", long15 == 52000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1 Jan 1970 00:00:52 GMT" + "'", str17, "1 Jan 1970 00:00:52 GMT");
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType8.getField(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime7.withChronology(chronology14);
        boolean boolean18 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        java.lang.String str11 = dateTimeField9.getAsText(292279042L);
        java.util.Locale locale12 = null;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        calendar0.clear();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone8 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getGreatestMinimum(1200000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1200000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate25 = localDate21.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.LocalDate localDate31 = localDate25.withWeekyear(19);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfYear();
        org.joda.time.LocalDate localDate33 = property32.withMinimumValue();
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks(7);
        org.joda.time.LocalDate localDate37 = localDate35.minusDays(30);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = localDate45.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField47.getType();
        java.lang.String str49 = dateTimeFieldType48.toString();
        int int50 = localDate37.get(dateTimeFieldType48);
        boolean boolean51 = yearMonthDay13.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "monthOfYear" + "'", str49, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.yearOfCentury();
        int int7 = dateTimeField6.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        int int12 = date11.getHours();
        int int13 = date11.getDay();
        int int14 = date11.getDay();
        date11.setYear(4);
        int int17 = date11.getDate();
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromDateFields(date11);
        int int19 = timeOfDay18.getMinuteOfHour();
        int int20 = timeOfDay18.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.minusMinutes(7);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay18);
        org.joda.time.LocalTime localTime24 = timeOfDay23.toLocalTime();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minus((long) (-1));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minus(readablePeriod31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minus(readablePeriod34);
        org.joda.time.DateTime dateTime36 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateMidnight35);
        int[] intArray37 = timeOfDay30.getValues();
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = dateTimeField6.set((org.joda.time.ReadablePartial) timeOfDay23, 51, intArray37, "T14:41:57.648", locale39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T14:41:57.648\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[9, 45, 5, 326]");
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusMonths(2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.withEra(76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(34890, 757);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 757");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        int[] intArray11 = yearMonthDay10.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonthDay10.getFieldTypes();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 12, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfYear((int) '4');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay34.withPeriodAdded(readablePeriod35, 11);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.centuries();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.withChronologyRetainFields(chronology43);
        int[] intArray47 = chronology27.get((org.joda.time.ReadablePartial) yearMonthDay45, (long) (-391));
        int[] intArray49 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) localDate14, 1, intArray47, 10);
        org.joda.time.LocalDate.Property property50 = localDate14.dayOfMonth();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str54 = dateTimeZone52.getNameKey((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar61 = dateMidnight60.toGregorianCalendar();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = chronology62.getZone();
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone63.getShortName((long) 41, locale65);
        long long68 = dateTimeZone52.getMillisKeepLocal(dateTimeZone63, (-31603L));
        org.joda.time.Interval interval69 = localDate14.toInterval(dateTimeZone63);
        org.joda.time.LocalDate.Property property70 = localDate14.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        boolean boolean78 = dateMidnight75.isBefore((long) ' ');
        org.joda.time.LocalDate localDate79 = dateMidnight75.toLocalDate();
        org.joda.time.LocalDate localDate81 = localDate79.minusDays(2);
        org.joda.time.LocalDate localDate83 = localDate79.plusMonths(484);
        int int84 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate79);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1969, 10, 31]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1969, 10, 31]");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(gregorianCalendar61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-31603L) + "'", long68 == (-31603L));
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        boolean boolean9 = dateTimeField6.isSupported();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        int int26 = localDate21.getDayOfWeek();
        int int27 = localDate21.getEra();
        org.joda.time.LocalDate localDate29 = localDate21.plusWeeks(820);
        int int30 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate29.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Interval interval5 = yearMonthDay1.toInterval();
        org.joda.time.LocalDate localDate6 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonthDay1.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(131);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay1.toDateMidnight(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(76, 33);
        org.joda.time.Interval interval14 = yearMonthDay1.toInterval(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = localDate20.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        java.lang.String str24 = dateTimeFieldType23.toString();
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay12.property(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        int int31 = dateTime30.getSecondOfMinute();
        int int32 = dateTime30.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight35.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        boolean boolean48 = yearMonthDay39.isEqual((org.joda.time.ReadablePartial) localDate47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str52 = dateTimeZone50.getNameKey((long) (-1));
        long long54 = dateTimeZone50.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight55 = localDate47.toDateMidnight(dateTimeZone50);
        boolean boolean56 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateMidnight55);
        int int57 = property25.compareTo((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.YearMonthDay yearMonthDay58 = property25.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField59 = property25.getField();
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeField59.getAsShortText(117660000, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117660000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 5L + "'", long54 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.Calendar.Builder builder23 = builder16.setTimeOfDay(9, 314, 53, 55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder23.setInstant(2595599609L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate11.toDateTime(localTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        int int30 = localDate27.getYearOfCentury();
        boolean boolean31 = localDate11.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property32 = localDate27.monthOfYear();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property32.getAsText(locale33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.monthOfYear();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.minus(readableDuration40);
        org.joda.time.DateTime.Property property42 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        org.joda.time.DateTime dateTime44 = property42.roundCeilingCopy();
        long long45 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.YearMonthDay yearMonthDay50 = dateMidnight48.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property60 = dateTime57.monthOfYear();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime57.minus(readableDuration61);
        org.joda.time.DateMidnight dateMidnight63 = dateTime62.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.Chronology chronology69 = dateMidnight68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.secondOfMinute();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Interval interval73 = localDate71.toInterval(dateTimeZone72);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) dateTime62, chronology74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay55.withChronologyRetainFields(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.weeks();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.millisOfSecond();
        org.joda.time.DurationField durationField79 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField80 = chronology74.era();
        org.joda.time.MutableDateTime mutableDateTime81 = dateMidnight48.toMutableDateTime(chronology74);
        org.joda.time.DateTimeField dateTimeField82 = chronology74.weekOfWeekyear();
        org.joda.time.DateTime dateTime83 = dateTime44.toDateTime(chronology74);
        org.joda.time.DurationField durationField84 = chronology74.weeks();
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight(chronology74);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "February" + "'", str34, "February");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-10L) + "'", long45 == (-10L));
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(durationField84);
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readableDuration21);
        int int23 = dateTime20.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.Interval interval25 = interval18.withEnd((org.joda.time.ReadableInstant) dateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = interval18.withEndMillis((-2678399004L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.plusMonths(14);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay4.toDateTime(timeOfDay9);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay4.monthOfYear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        java.lang.String str12 = property8.getAsText();
        org.joda.time.YearMonthDay yearMonthDay13 = property8.withMaximumValue();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = property8.setCopy("2", locale15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.withMonthOfYear(3);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        boolean boolean21 = interval19.isBefore(0L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        int int24 = localDate21.getYearOfCentury();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.DateTime dateTime55 = localDate37.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime(localTime25, dateTimeZone51);
        java.util.TimeZone timeZone57 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        gregorianCalendar13.setTimeZone(timeZone57);
        int int60 = gregorianCalendar13.getWeekYear();
        gregorianCalendar13.setMinimalDaysInFirstWeek(29);
        gregorianCalendar13.setLenient(false);
        java.util.TimeZone timeZone65 = null;
        gregorianCalendar13.setTimeZone(timeZone65);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate46 = localDate26.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        boolean boolean49 = localDate46.isSupported(durationFieldType48);
        boolean boolean50 = localDate7.isSupported(durationFieldType48);
        org.joda.time.LocalDate localDate52 = localDate7.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus(readablePeriod56);
        org.joda.time.DateMidnight.Property property58 = dateMidnight55.year();
        org.joda.time.DateTime dateTime59 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateMidnight55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTime59.toString("T14:42:35.955");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        long long46 = dateTimeZone38.previousTransition((-1028665186000L));
        long long49 = dateTimeZone38.convertLocalToUTC(1655717759L, true);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1670750153987L, dateTimeZone38);
        long long51 = dateMidnight50.getMillis();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1028665186000L) + "'", long46 == (-1028665186000L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1655717759L + "'", long49 == 1655717759L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1670716800000L + "'", long51 == 1670716800000L);
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withMonthOfYear(11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        boolean boolean26 = dateMidnight23.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight23.minusWeeks(17);
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateMidnight29);
        int int31 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime17.withMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.joda.time.Interval interval35 = yearMonthDay9.toInterval(dateTimeZone34);
        org.joda.time.Interval interval37 = interval35.withStartMillis(43L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        boolean boolean10 = dateMidnight7.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property11 = dateMidnight7.centuryOfEra();
        java.lang.String str12 = property11.getAsText();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight13.withChronology(chronology19);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.centuryOfEra();
        org.joda.time.DurationField durationField25 = chronology19.halfdays();
        java.lang.String str26 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.weekOfWeekyear();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(514L, 2713244635L, chronology19);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "19" + "'", str12, "19");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = localDate20.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        java.lang.String str24 = dateTimeFieldType23.toString();
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay12.property(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        int int31 = dateTime30.getSecondOfMinute();
        int int32 = dateTime30.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight35.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        boolean boolean48 = yearMonthDay39.isEqual((org.joda.time.ReadablePartial) localDate47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str52 = dateTimeZone50.getNameKey((long) (-1));
        long long54 = dateTimeZone50.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight55 = localDate47.toDateMidnight(dateTimeZone50);
        boolean boolean56 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateMidnight55);
        int int57 = property25.compareTo((org.joda.time.ReadableInstant) dateMidnight55);
        java.lang.String str58 = property25.getName();
        int int59 = property25.getMaximumValue();
        org.joda.time.tz.Provider provider60 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider60);
        boolean boolean62 = property25.equals((java.lang.Object) provider60);
        java.util.Locale locale63 = null;
        java.lang.String str64 = property25.getAsText(locale63);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "monthOfYear" + "'", str24, "monthOfYear");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 5L + "'", long54 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "monthOfYear" + "'", str58, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "January" + "'", str64, "January");
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property25 = localDate22.weekOfWeekyear();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDate localDate27 = property25.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = property25.setCopy("770");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 770 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "6" + "'", str26, "6");
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.DateTime dateTime16 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28);
        boolean boolean32 = interval24.isAfter((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = interval31.withPeriodAfterStart(readablePeriod33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateMidnight.Property property40 = dateMidnight38.dayOfWeek();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean45 = interval41.isBefore((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTime dateTime46 = interval41.getEnd();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.dayOfWeek();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableDuration50, (org.joda.time.ReadableInstant) dateMidnight53);
        boolean boolean57 = interval49.isAfter((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        org.joda.time.Interval interval61 = interval49.withStart((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = interval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration63 = interval41.toDuration();
        org.joda.time.Interval interval64 = interval34.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime65 = dateTime21.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Instant instant66 = dateTime21.toInstant();
        org.joda.time.MutableDateTime mutableDateTime67 = instant66.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology6);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minus((long) (-1));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minus(readablePeriod15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1970);
        org.joda.time.Chronology chronology21 = timeOfDay18.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) (-1));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minus(readablePeriod27);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay30.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.dayOfWeek();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean47 = interval43.isBefore((org.joda.time.ReadableInterval) interval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval43.toPeriod(periodType48);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay36.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay18.minus((org.joda.time.ReadablePeriod) period49);
        java.lang.String str52 = period49.toString();
        int[] intArray54 = chronology6.get((org.joda.time.ReadablePeriod) period49, (long) 131);
        org.joda.time.DateTimeField dateTimeField55 = chronology6.minuteOfHour();
        java.util.Locale locale56 = null;
        int int57 = dateTimeField55.getMaximumTextLength(locale56);
        boolean boolean58 = dateTimeField55.isSupported();
        org.joda.time.DurationField durationField59 = dateTimeField55.getLeapDurationField();
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeField55.set((-60522646614267L), "T09:38:39.334", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:38:39.334\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0S" + "'", str52, "PT0S");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 131]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(durationField59);
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        int int15 = localDate12.getYearOfCentury();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime46 = localDate28.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate12.toDateTime(localTime16, dateTimeZone42);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(dateTimeZone42);
        boolean boolean50 = dateTimeZone42.isStandardOffset(18731052L);
        org.joda.time.DateTime dateTime51 = dateTime1.toDateTime(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property21 = localDate20.weekyear();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate24 = property21.addWrapFieldToCopy((int) (short) 0);
        boolean boolean25 = property8.equals((java.lang.Object) property21);
        java.util.Locale locale26 = null;
        int int27 = property8.getMaximumShortTextLength(locale26);
        int int28 = property8.get();
        java.lang.String str29 = property8.getAsString();
        org.joda.time.DurationField durationField30 = property8.getRangeDurationField();
        int int31 = property8.getMaximumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(chronology7);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        boolean boolean11 = dateTime10.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        gregorianCalendar6.setLenient(false);
        gregorianCalendar6.set(779, 34522, 47, (int) ' ', 122);
        java.util.Date date15 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date23.getHours();
        int int26 = date23.getMonth();
        boolean boolean27 = date15.after(date23);
        date15.setYear((int) 'a');
        java.util.Date date35 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        boolean boolean44 = date39.before(date43);
        int int45 = date39.getDay();
        int int46 = date39.getHours();
        date39.setSeconds((int) '4');
        java.lang.String str49 = date39.toLocaleString();
        int int50 = date39.getYear();
        boolean boolean51 = date35.before(date39);
        boolean boolean52 = date15.after(date39);
        int int53 = date39.getSeconds();
        int int54 = date39.getTimezoneOffset();
        gregorianCalendar6.setTime(date39);
        java.util.TimeZone timeZone56 = gregorianCalendar6.getTimeZone();
        gregorianCalendar6.setTimeInMillis((-59958248400000L));
        // The following exception was thrown during execution in test generation
        try {
            int int60 = gregorianCalendar6.getActualMaximum(78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 78");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 11 09:45:05 UTC 1997");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Jan 1, 1970 12:00:52 AM" + "'", str49, "Jan 1, 1970 12:00:52 AM");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 70 + "'", int50 == 70);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay14.toDateMidnight(dateTimeZone19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean22 = dateTimeZone19.equals((java.lang.Object) strSet21);
        long long24 = dateTimeZone19.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        boolean boolean33 = dateTimeZone19.equals((java.lang.Object) chronology30);
        long long37 = chronology30.add((-54132552840000L), (long) 135, 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.yearOfEra();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 14400001L + "'", long24 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-54132552840000L) + "'", long37 == (-54132552840000L));
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField21 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay23.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = property24.getTimeOfDay();
        int[] intArray26 = timeOfDay25.getValues();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight4.withFields((org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minus((long) (-1));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minus(readablePeriod33);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(1970);
        org.joda.time.Chronology chronology39 = timeOfDay36.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minus((long) (-1));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minus(readablePeriod45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay48.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean65 = interval61.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval61.toPeriod(periodType66);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay54.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay36.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay25.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.secondOfMinute();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        org.joda.time.LocalDate localDate80 = localDate78.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate82 = localDate78.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate84 = localDate78.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property85 = localDate78.weekOfWeekyear();
        org.joda.time.LocalDate localDate87 = localDate78.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate89 = localDate87.minusWeeks(100);
        org.joda.time.DateTime dateTime90 = localDate87.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property91 = localDate87.yearOfCentury();
        org.joda.time.LocalDate localDate93 = localDate87.plusYears(809);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = timeOfDay70.isBefore((org.joda.time.ReadablePartial) localDate93);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[9, 45, 5, 923]");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDate93);
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology5.getDateTimeMillis(366, 56, 46, 121, 34615813, 369, 34702);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 121 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsText(366L, locale9);
        org.joda.time.DurationField durationField11 = dateTimeField7.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeField7.getAsText((long) 4, locale13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minus(readablePeriod20);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusMinutes(1);
        int int24 = timeOfDay23.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.withHourOfDay(23);
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.withHourOfDay(1);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.secondOfMinute();
        int int31 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        java.util.Date date35 = dateMidnight34.toDate();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusWeeks(22);
        int int38 = dateMidnight34.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        int int44 = dateTime43.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.toDateTime(dateTimeZone45);
        org.joda.time.DateTime.Property property47 = dateTime43.millisOfDay();
        org.joda.time.DateTime.Property property48 = dateTime43.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears(5);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minus((long) (-1));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.minus(readablePeriod60);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str64 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime65 = timeOfDay61.toDateTimeToday(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) dateTime52, dateTimeZone63);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        java.util.Date date74 = dateMidnight73.toDate();
        org.joda.time.DateMidnight.Property property75 = dateMidnight73.dayOfWeek();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableDuration70, (org.joda.time.ReadableInstant) dateMidnight73);
        boolean boolean77 = interval69.isAfter((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration78 = interval76.toDuration();
        org.joda.time.DateTime dateTime80 = dateTime52.withDurationAdded((org.joda.time.ReadableDuration) duration78, 20);
        org.joda.time.DateTime dateTime81 = dateTime43.plus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight34.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight34.plus(1655717759L);
        org.joda.time.TimeOfDay timeOfDay85 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight84);
        java.util.Locale locale87 = null;
        java.lang.String str88 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) timeOfDay85, (-626), locale87);
        org.joda.time.TimeOfDay timeOfDay90 = timeOfDay85.plusHours(34629952);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "24" + "'", str10, "24");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "24" + "'", str14, "24");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 44 + "'", int24 == 44);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-626" + "'", str88, "-626");
        org.junit.Assert.assertNotNull(timeOfDay90);
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.lang.Object obj9 = null;
        boolean boolean10 = property6.equals(obj9);
        org.joda.time.DateTime dateTime12 = property6.addToCopy((long) 49);
        org.joda.time.DateTime dateTime13 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime2.minusDays(11);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate27 = localDate23.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.toString();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone29.getShortName(0L, locale34);
        long long38 = dateTimeZone29.convertLocalToUTC((long) 45, false);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) 51, 1644624000000L, dateTimeZone29);
        int int41 = dateTimeZone29.getOffset((long) 6);
        org.joda.time.DateTime dateTime42 = dateTime11.toDateTime(dateTimeZone29);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate44.toDateTime(localTime45, dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate44.withYearOfEra(12);
        int[] intArray50 = localDate44.getValues();
        int int51 = localDate44.getYearOfEra();
        org.joda.time.LocalDate.Property property52 = localDate44.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = property52.getDurationField();
        org.joda.time.LocalDate localDate54 = property52.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate55 = property52.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property52.getFieldType();
        org.joda.time.DateTime.Property property57 = dateTime11.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime59 = property57.addWrapFieldToCopy(1921208);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) 1921208);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 45L + "'", long38 == 45L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis((-19035));
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        int int16 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTime.Property property17 = dateTime15.dayOfYear();
        boolean boolean18 = dateMidnight6.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean35 = interval31.isBefore((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTime dateTime36 = interval31.getEnd();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.DateMidnight.Property property45 = dateMidnight43.dayOfWeek();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43);
        boolean boolean47 = interval39.isAfter((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((-1L), dateTimeZone49);
        org.joda.time.Interval interval51 = interval39.withStart((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = interval31.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration53 = interval31.toDuration();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight24.withDurationAdded((org.joda.time.ReadableDuration) duration53, 24);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight6.withDurationAdded((org.joda.time.ReadableDuration) duration53, 19);
        org.joda.time.DateMidnight.Property property58 = dateMidnight6.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        java.util.Date date63 = dateMidnight62.toDate();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.dayOfWeek();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableDuration59, (org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean69 = interval65.isBefore((org.joda.time.ReadableInterval) interval68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval65.toPeriod(periodType70);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight6.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay3.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.TimeOfDay.Property property74 = timeOfDay3.minuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime5.withDayOfWeek(35077381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35077381 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        java.time.Instant instant9 = date7.toInstant();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.lang.String str19 = yearMonthDay14.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.toString();
        org.joda.time.Interval interval51 = yearMonthDay14.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate53 = localDate7.withFields((org.joda.time.ReadablePartial) localDate52);
        int int54 = localDate52.size();
        org.joda.time.LocalDate.Property property55 = localDate52.monthOfYear();
        org.joda.time.LocalDate localDate56 = property55.roundCeilingCopy();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.LocalDate localDate59 = localDate56.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        boolean boolean67 = dateMidnight64.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property68 = dateMidnight64.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight64.minusWeeks(17);
        org.joda.time.DateMidnight.Property property71 = dateMidnight64.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight73 = property71.addToCopy((long) 15);
        int int74 = property71.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(10);
        boolean boolean77 = property71.equals((java.lang.Object) dateTimeZone76);
        java.util.Locale locale79 = null;
        java.lang.String str80 = dateTimeZone76.getName(1161946993740000L, locale79);
        org.joda.time.DateTime dateTime81 = localDate59.toDateTimeAtMidnight(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+10:00" + "'", str80, "+10:00");
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMinutes(52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.withSecondOfMinute(34732484);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34732484 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572706182,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=6,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.withYear(32769);
        org.joda.time.LocalDate localDate11 = localDate6.withWeekyear(69);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        boolean boolean19 = dateMidnight16.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property20 = dateMidnight16.centuryOfEra();
        boolean boolean21 = property20.isLeap();
        int int22 = property20.get();
        org.joda.time.DateMidnight dateMidnight24 = property20.addToCopy((long) 48);
        org.joda.time.DateMidnight dateMidnight25 = property20.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate37.withWeekyear(19);
        org.joda.time.LocalTime localTime44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime49 = localDate37.toDateTime(localTime44, dateTimeZone46);
        org.joda.time.LocalDate.Property property50 = localDate37.weekyear();
        org.joda.time.LocalDate.Property property51 = localDate37.dayOfWeek();
        org.joda.time.LocalDate localDate52 = property51.roundFloorCopy();
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(chronology53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.YearMonthDay yearMonthDay59 = dateMidnight57.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        boolean boolean70 = yearMonthDay61.isEqual((org.joda.time.ReadablePartial) localDate69);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.lang.String str74 = dateTimeZone72.getNameKey((long) (-1));
        long long76 = dateTimeZone72.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight77 = localDate69.toDateMidnight(dateTimeZone72);
        org.joda.time.LocalDate localDate79 = localDate69.plusDays(53);
        org.joda.time.LocalDate.Property property80 = localDate69.weekyear();
        int int81 = localDate69.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.DateTime dateTime85 = dateTime83.plus(readableDuration84);
        org.joda.time.DateTime dateTime87 = dateTime83.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime88 = dateTime83.toDateTimeISO();
        org.joda.time.DateTime.Property property89 = dateTime83.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean91 = dateTime83.isSupported(dateTimeFieldType90);
        int int92 = localDate69.get(dateTimeFieldType90);
        int int93 = localDate54.get(dateTimeFieldType90);
        java.lang.String str94 = dateTimeFieldType90.toString();
        org.joda.time.DateMidnight.Property property95 = dateMidnight25.property(dateTimeFieldType90);
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType90.getRangeDurationType();
        boolean boolean97 = localDate6.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 5L + "'", long76 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 42 + "'", int81 == 42);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 20 + "'", int92 == 20);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 20 + "'", int93 == 20);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "centuryOfEra" + "'", str94, "centuryOfEra");
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withYear(779);
        int int21 = property8.compareTo((org.joda.time.ReadablePartial) yearMonthDay17);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay14.plusDays(1200000);
        int int18 = yearMonthDay17.getDayOfMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 28 + "'", int18 == 28);
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readableDuration4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        int int10 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        boolean boolean19 = date14.before(date18);
        int int20 = date14.getDay();
        int int21 = date14.getHours();
        date14.setSeconds((int) '4');
        boolean boolean24 = dateTime9.equals((java.lang.Object) date14);
        org.joda.time.DateTime dateTime26 = dateTime9.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime9.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) 16);
        org.joda.time.DateTime dateTime37 = dateTime35.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        long long40 = dateTimeZone38.previousTransition((long) 36);
        org.joda.time.DateTime dateTime41 = dateTime28.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(52L, dateTimeZone38);
        int int43 = dateTime42.getCenturyOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.plusMinutes(583);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 36L + "'", long40 == 36L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        int int14 = calendar13.getFirstDayOfWeek();
        int int15 = calendar13.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date19.getMonth();
        calendar13.setTime(date19);
        java.util.TimeZone timeZone27 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.Calendar.Builder builder29 = builder10.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder33 = builder29.setTimeOfDay(41, (int) ' ', 2810341);
        java.util.Calendar calendar34 = builder33.build();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=2009461000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=24,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=11,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        long long10 = dateTimeField8.roundHalfEven((long) 34);
        long long13 = dateTimeField8.add((long) 13, (long) 32772);
        int int15 = dateTimeField8.getLeapAmount((long) 36);
        org.joda.time.DurationField durationField16 = dateTimeField8.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay21.withPeriodAdded(readablePeriod22, 11);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay21.monthOfYear();
        java.lang.String str26 = property25.toString();
        org.joda.time.YearMonthDay yearMonthDay27 = property25.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.plusDays(34615813);
        int int30 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2831500800013L + "'", long13 == 2831500800013L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[monthOfYear]" + "'", str26, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = localDate11.getDayOfWeek();
        int int17 = localDate11.getEra();
        org.joda.time.Chronology chronology18 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.minusYears(1970);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean39 = interval31.isAfter((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval38.withPeriodAfterStart(readablePeriod40);
        boolean boolean42 = dateMidnight23.equals((java.lang.Object) readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((-1L));
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight45.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar53 = dateMidnight51.toGregorianCalendar();
        boolean boolean54 = dateMidnight23.equals((java.lang.Object) dateMidnight51);
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight51.getZone();
        org.joda.time.DateTime dateTime56 = localDate11.toDateTimeAtMidnight(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate11.withWeekyear(18);
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(gregorianCalendar53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = property13.addToCopy((long) 1999);
        org.joda.time.DateMidnight dateMidnight17 = property13.withMinimumValue();
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology23.getDateTimeMillis((long) 960, 2040, 960, 254, 2005);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2040 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod6, chronology24);
        org.joda.time.DurationField durationField26 = chronology24.weeks();
        java.lang.String str27 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.centuryOfEra();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        boolean boolean52 = yearMonthDay43.isEqual((org.joda.time.ReadablePartial) localDate51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str56 = dateTimeZone54.getNameKey((long) (-1));
        long long58 = dateTimeZone54.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight59 = localDate51.toDateMidnight(dateTimeZone54);
        long long61 = dateTimeZone54.convertUTCToLocal((long) '4');
        org.joda.time.Chronology chronology62 = chronology30.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField63 = chronology30.dayOfMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 5L + "'", long58 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        boolean boolean12 = localDate7.equals((java.lang.Object) "19");
        int[] intArray13 = localDate7.getValues();
        org.joda.time.LocalDate localDate15 = localDate7.plusYears(44);
        org.joda.time.LocalDate localDate17 = localDate7.withWeekOfWeekyear(21);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.parse("25260000");
        int int20 = localDate17.compareTo((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate.Property property21 = localDate17.year();
        int int22 = localDate17.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        calendar0.set(55, 0, 0, (int) (short) 10, 50, 33330867);
        calendar0.setFirstDayOfWeek(70);
        java.lang.String str25 = calendar0.getCalendarType();
        calendar0.set(11, (int) ' ');
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        calendar29.setTimeZone(timeZone73);
        int int75 = calendar29.getWeeksInWeekYear();
        calendar29.setFirstDayOfWeek((int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.plus((-1L));
        org.joda.time.Chronology chronology83 = dateMidnight82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.hours();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.clockhourOfDay();
        java.util.Locale locale87 = null;
        java.lang.String str88 = dateTimeField85.getAsText((int) (short) 1, locale87);
        boolean boolean89 = calendar29.after((java.lang.Object) (short) 1);
        long long90 = calendar29.getTimeInMillis();
        int int91 = calendar29.getMinimalDaysInFirstWeek();
        java.util.Date date92 = calendar29.getTime();
        boolean boolean93 = calendar0.after((java.lang.Object) calendar29);
        int int94 = calendar0.getWeekYear();
        calendar0.add(385, 0);
        boolean boolean98 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60398339733000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=70,minimalDaysInFirstWeek=16,ERA=1,YEAR=56,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=24,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572706745,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=6,MILLISECOND=745,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 53 + "'", int75 == 53);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1644572706745L + "'", long90 == 1644572706745L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(date92);
// flaky:         org.junit.Assert.assertEquals(date92.toString(), "Fri Feb 11 09:45:06 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 56 + "'", int94 == 56);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withDayOfYear(19);
        org.joda.time.YearMonthDay yearMonthDay8 = dateMidnight7.toYearMonthDay();
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.property(dateTimeFieldType13);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight12);
        int int16 = timeOfDay15.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.minusMillis(2022);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = yearMonthDay8.isBefore((org.joda.time.ReadablePartial) timeOfDay15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("T09:41:30.221");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: T09:41:30.221");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        int int21 = localDate18.getDayOfMonth();
        int int22 = localDate18.getYear();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate18, locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate localDate27 = localDate18.withField(dateTimeFieldType25, 8);
        int int28 = localDate18.getYearOfCentury();
        org.joda.time.LocalDate localDate30 = localDate18.minusDays(8);
        org.joda.time.LocalDate localDate32 = localDate30.minusWeeks((-378559));
        int int33 = localDate30.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb" + "'", str24, "Feb");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = interval9.contains((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property16.setCopy("T14:42:05.465");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T14:42:05.465\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay14 = property12.addWrapFieldToCopy(292278994);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 54, 6, 829]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant16 = calendar0.toInstant();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int19 = calendar17.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        boolean boolean28 = date23.before(date27);
        int int29 = date23.getMonth();
        calendar17.setTime(date23);
        java.util.TimeZone timeZone31 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        calendar0.setTimeZone(timeZone31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31);
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572706842,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=6,MILLISECOND=842,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay35);
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.toString();
        long long20 = dateTimeZone13.convertLocalToUTC(1644572207520L, false, 35000L);
        int int22 = dateTimeZone13.getStandardOffset(107322789L);
        java.util.TimeZone timeZone23 = dateTimeZone13.toTimeZone();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572207520L + "'", long20 == 1644572207520L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.plusWeeks((int) ' ');
        boolean boolean9 = dateMidnight7.equals((java.lang.Object) 100.0f);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.LocalDate localDate12 = localDate0.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay17.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight29.getZone();
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay27.toDateMidnight(dateTimeZone32);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean35 = dateTimeZone32.equals((java.lang.Object) strSet34);
        org.joda.time.DateTime dateTime36 = localDate0.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears(22);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.plusDays((int) '#');
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.setFirstDayOfWeek((int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfDay();
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField56.getAsText((int) (short) 1, locale58);
        boolean boolean60 = calendar0.after((java.lang.Object) (short) 1);
        int int62 = calendar0.getActualMaximum(15);
        java.util.Date date63 = calendar0.getTime();
        date63.setHours(27);
        java.util.Date date66 = new java.util.Date();
        java.time.Instant instant67 = date66.toInstant();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone69);
        java.util.Date date71 = dateMidnight70.toDate();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        java.util.Date date75 = dateMidnight74.toDate();
        boolean boolean76 = date71.before(date75);
        int int77 = date71.getMonth();
        date71.setMonth(0);
        boolean boolean80 = date66.before(date71);
        int int81 = date71.getDay();
        boolean boolean82 = date63.before(date71);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572706911,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=6,MILLISECOND=911,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50400000 + "'", int62 == 50400000);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Sat Feb 12 03:45:06 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Fri Feb 11 09:45:06 UTC 2022");
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        int int4 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.minusYears((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis(1200000);
        boolean boolean10 = dateTime9.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = localDate18.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField20.getType();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        int int32 = localDate29.getDayOfMonth();
        int int33 = localDate29.getYear();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDate29, locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate localDate38 = localDate29.withField(dateTimeFieldType36, 8);
        int int39 = localDate29.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        boolean boolean47 = dateMidnight44.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property48 = dateMidnight44.centuryOfEra();
        java.lang.String str49 = property48.getAsShortText();
        org.joda.time.DateMidnight dateMidnight51 = property48.addToCopy((long) 6);
        int int52 = property48.get();
        org.joda.time.DateMidnight dateMidnight53 = property48.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withMillis(70L);
        org.joda.time.DateTime dateTime56 = localDate29.toDateTime((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime60 = dateTime56.minusMinutes(70);
        int int61 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "19" + "'", str49, "19");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.centuryOfEra();
        int int17 = dateMidnight5.compareTo((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.plusMonths(24);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight5.getZone();
        org.joda.time.DateMidnight.Property property21 = dateMidnight5.monthOfYear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.yearOfEra();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) 12);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.monthOfYear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.minus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime8.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime8.withField(dateTimeFieldType15, (int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(32770);
        org.joda.time.DateTime dateTime20 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime21 = yearMonthDay6.toDateTimeAtCurrentTime();
        int int22 = dateMidnight4.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight24 = property23.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.Chronology chronology15 = dateTimeFormatter6.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = dateTimeFormatter6.parseMutableDateTime("T09:39:40.168");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(chronology15);
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate20 = property18.addToCopy(17);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.days();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 11, chronology27);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.year();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        org.joda.time.DateTime dateTime37 = dateTime33.withField(dateTimeFieldType34, 7);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        boolean boolean48 = interval40.isAfter((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Interval interval50 = interval47.withPeriodAfterStart(readablePeriod49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.dayOfWeek();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean61 = interval57.isBefore((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTime dateTime62 = interval57.getEnd();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        java.util.Date date70 = dateMidnight69.toDate();
        org.joda.time.DateMidnight.Property property71 = dateMidnight69.dayOfWeek();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableDuration66, (org.joda.time.ReadableInstant) dateMidnight69);
        boolean boolean73 = interval65.isAfter((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((-1L), dateTimeZone75);
        org.joda.time.Interval interval77 = interval65.withStart((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = interval57.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration79 = interval57.toDuration();
        org.joda.time.Interval interval80 = interval50.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTime dateTime81 = dateTime37.minus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property83 = dateTime37.property(dateTimeFieldType82);
        org.joda.time.DateTime dateTime84 = localDate20.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int int85 = dateTime37.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 45 + "'", int85 == 45);
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays(15);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        long long28 = property27.remainder();
        java.lang.String str29 = property27.toString();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property27.getAsText(locale30);
        java.util.Locale locale33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = property27.setCopy("T14:42:46.937", locale33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T14:42:46.937\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2281507077L + "'", long28 == 2281507077L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[monthOfYear]" + "'", str29, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "January" + "'", str31, "January");
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis(1970);
        int int9 = dateTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setTime((long) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusYears(2040);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime36 = localDate18.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.LocalDate localDate38 = localDate18.plusWeeks(53);
        org.joda.time.DateTime dateTime39 = localDate38.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (-1));
        long long47 = dateTimeZone43.convertUTCToLocal((long) 5);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone43.getName((long) 0, locale49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval(0L, (long) 19, dateTimeZone43);
        int int53 = dateTimeZone43.getStandardOffset((long) 31);
        org.joda.time.DateTime dateTime54 = dateTime39.toDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime55 = yearMonthDay6.toDateTimeAtMidnight(dateTimeZone43);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 5L + "'", long47 == 5L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        int int36 = localDate14.getDayOfYear();
        org.joda.time.LocalDate.Property property37 = localDate14.dayOfMonth();
        org.joda.time.DurationField durationField38 = property37.getDurationField();
        org.joda.time.LocalDate localDate39 = property37.roundCeilingCopy();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 42 + "'", int36 == 42);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1L), dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime8.withWeekOfWeekyear(27);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime24.withMinuteOfHour(8);
        boolean boolean30 = dateMidnight17.equals((java.lang.Object) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime34.property(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = property37.withMaximumValue();
        org.joda.time.DateTime dateTime39 = property37.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.dayOfWeek();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean56 = interval52.isBefore((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTime dateTime57 = interval52.getEnd();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        boolean boolean68 = interval60.isAfter((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((-1L), dateTimeZone70);
        org.joda.time.Interval interval72 = interval60.withStart((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean73 = interval52.overlaps((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration74 = interval52.toDuration();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight45.withDurationAdded((org.joda.time.ReadableDuration) duration74, 24);
        org.joda.time.DateTime dateTime78 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration74, 24);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight17.withDurationAdded((org.joda.time.ReadableDuration) duration74, 131);
        org.joda.time.DateTimeZone dateTimeZone81 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, dateTimeZone81);
        long long86 = dateTimeZone81.convertLocalToUTC(1644572271547L, true, (long) 34522);
        long long88 = dateTimeZone81.nextTransition(1644572139488L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter5.withZone(dateTimeZone81);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1644572271547L + "'", long86 == 1644572271547L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1644572139488L + "'", long88 == 1644572139488L);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 5, chronology8);
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DurationField durationField12 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2022, (long) 2022, chronology8);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(1644572291810L);
        boolean boolean18 = mutableInterval15.equals((java.lang.Object) 1644572291810L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01");
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.dayOfYear();
        org.joda.time.DateTime dateTime5 = dateTime1.minusDays(1921208);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate7.yearOfEra();
        java.lang.String str14 = property13.getAsText();
        java.lang.String str15 = property13.getAsShortText();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.withChronology(chronology16);
        int int20 = dateMidnight19.getWeekyear();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1999 + "'", int20 == 1999);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        int int5 = localDate4.getEra();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra(70);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        int[] intArray13 = yearMonthDay12.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.withPeriodAdded(readablePeriod14, 22);
        java.lang.String str17 = yearMonthDay12.toString();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay12.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay12.minusMonths(15);
        boolean boolean22 = localDate7.isEqual((org.joda.time.ReadablePartial) yearMonthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = yearMonthDay21.getFields();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        int int29 = dateTime28.getSecondOfMinute();
        int int30 = dateTime28.getMonthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight37.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.plusDays((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean52 = interval48.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval48.toPeriod(periodType53);
        int int56 = period54.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.plus((-1L));
        org.joda.time.Chronology chronology62 = dateMidnight61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfMinute();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = localDate64.getField(1);
        long long68 = dateTimeField66.roundHalfCeiling((long) (byte) 10);
        long long70 = dateTimeField66.remainder((long) 'a');
        org.joda.time.DurationField durationField71 = dateTimeField66.getRangeDurationField();
        boolean boolean72 = period54.equals((java.lang.Object) durationField71);
        int int73 = period54.size();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay41.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 34522);
        org.joda.time.DateTime dateTime77 = dateTime34.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 575);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay21.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 34745483);
        int int80 = yearMonthDay79.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 97L + "'", long70 == 97L);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        int int24 = localDate21.getYearOfCentury();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.DateTime dateTime55 = localDate37.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime(localTime25, dateTimeZone51);
        java.util.TimeZone timeZone57 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        gregorianCalendar13.setTimeZone(timeZone57);
        gregorianCalendar13.setTimeInMillis(131L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        gregorianCalendar10.set(131, 996, 135, 25, 25260000);
        java.util.Date date17 = gregorianCalendar10.getTime();
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.year();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun May 25 17:00:00 UTC 262");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.plusDays(23);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar20 = dateMidnight19.toGregorianCalendar();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getShortName((long) 41, locale24);
        long long27 = dateTimeZone11.getMillisKeepLocal(dateTimeZone22, (-31603L));
        org.joda.time.DateTime dateTime28 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.YearMonthDay yearMonthDay33 = dateMidnight31.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime36 = yearMonthDay33.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime54 = yearMonthDay33.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateTime28, dateTimeZone50);
        boolean boolean57 = dateTimeZone50.isStandardOffset(1644572311590L);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone50.getShortName((long) 314, locale59);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-31603L) + "'", long27 == (-31603L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        boolean boolean16 = yearMonthDay7.isEqual((org.joda.time.ReadablePartial) localDate15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (-1));
        long long22 = dateTimeZone18.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight23 = localDate15.toDateMidnight(dateTimeZone18);
        org.joda.time.LocalDate localDate25 = localDate15.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DurationField durationField35 = chronology31.minutes();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((java.lang.Object) localDate15, chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.YearMonthDay yearMonthDay42 = dateMidnight40.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        boolean boolean53 = yearMonthDay44.isEqual((org.joda.time.ReadablePartial) localDate52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str57 = dateTimeZone55.getNameKey((long) (-1));
        long long59 = dateTimeZone55.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight60 = localDate52.toDateMidnight(dateTimeZone55);
        long long62 = dateTimeZone55.convertUTCToLocal((long) '4');
        org.joda.time.Chronology chronology63 = chronology31.withZone(dateTimeZone55);
        int int65 = dateTimeZone55.getOffset(1644572229996L);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(obj0, dateTimeZone55);
        int int67 = localDate66.getCenturyOfEra();
        org.joda.time.Interval interval68 = localDate66.toInterval();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5L + "'", long22 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 5L + "'", long59 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime39 = localDate21.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.Interval interval41 = yearMonthDay4.toInterval(dateTimeZone35);
        int int43 = dateTimeZone35.getOffset((long) (byte) 10);
        java.lang.String str45 = dateTimeZone35.getName((long) 2000);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone35);
        long long50 = dateTimeZone35.convertLocalToUTC((long) 34709682, true);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 34709682L + "'", long50 == 34709682L);
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        java.util.Date date1 = new java.util.Date(1644580800000L);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 12:00:00 UTC 2022");
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate46 = localDate26.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        boolean boolean49 = localDate46.isSupported(durationFieldType48);
        boolean boolean50 = localDate7.isSupported(durationFieldType48);
        org.joda.time.LocalDate localDate52 = localDate7.plusMonths(6);
        int int53 = localDate7.getEra();
        org.joda.time.LocalDate localDate55 = localDate7.withYear((-292275054));
        org.joda.time.LocalDate localDate57 = localDate7.plusDays((-378559));
        org.joda.time.LocalDate.Property property58 = localDate7.dayOfYear();
        org.joda.time.LocalDate.Property property59 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate60 = property59.roundFloorCopy();
        int int61 = localDate60.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay12 = property7.addWrapFieldToCopy(40);
        java.lang.String str13 = timeOfDay12.toString();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusSeconds(5255);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate27 = localDate23.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.LocalDate localDate33 = localDate27.withWeekyear(19);
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfYear();
        org.joda.time.LocalDate localDate36 = property34.addWrapFieldToCopy((-19034));
        org.joda.time.LocalDate localDate37 = property34.withMinimumValue();
        org.joda.time.LocalDate.Property property38 = localDate37.monthOfYear();
        java.lang.String str39 = property38.getAsText();
        org.joda.time.LocalDate localDate40 = property38.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate41 = property38.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = timeOfDay12.compareTo((org.joda.time.ReadablePartial) localDate41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:45:07.439" + "'", str6, "T09:45:07.439");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7" + "'", str8, "7");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T09:45:47.439" + "'", str13, "T09:45:47.439");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "January" + "'", str39, "January");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        long long20 = chronology15.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfDay();
        org.joda.time.Chronology chronology22 = chronology15.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology22);
        boolean boolean24 = dateTimeFormatter23.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter23.getParser();
        boolean boolean26 = dateTimeFormatter23.isOffsetParsed();
        java.lang.Integer int27 = dateTimeFormatter23.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter23.withOffsetParsed();
        boolean boolean29 = dateTimeFormatter23.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 292279042L + "'", long20 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeParser25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField6.getLeapDurationField();
        long long12 = dateTimeField6.add((long) '#', (long) 10);
        long long14 = dateTimeField6.roundFloor(2831500800013L);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight17.toYearMonthDay();
        int[] intArray20 = yearMonthDay19.getValues();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.withPeriodAdded(readablePeriod21, 22);
        java.lang.String str24 = yearMonthDay19.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears(5);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean51 = interval47.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval47.toPeriod(periodType52);
        org.joda.time.DateTime dateTime54 = dateTime38.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalDate localDate56 = localDate34.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 6);
        org.joda.time.PeriodType periodType57 = period53.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay58.year();
        org.joda.time.YearMonthDay yearMonthDay61 = property59.setCopy(0);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minus((long) (-1));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.DurationField durationField70 = chronology68.seconds();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology68);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.plus((-1L));
        org.joda.time.Chronology chronology77 = dateMidnight76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.secondOfMinute();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology77);
        org.joda.time.LocalDate localDate81 = localDate79.withYearOfEra((int) (byte) 10);
        int int82 = localDate79.getYearOfCentury();
        boolean boolean84 = localDate79.equals((java.lang.Object) "19");
        int[] intArray85 = localDate79.getValues();
        int[] intArray87 = chronology68.get((org.joda.time.ReadablePartial) localDate79, (long) 1022);
        int[] intArray89 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) yearMonthDay61, (int) (short) 0, intArray87, 0);
        int int90 = yearMonthDay61.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10035L + "'", long12 == 10035L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2831500800000L + "'", long14 == 2831500800000L);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 22 + "'", int82 == 22);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[50, 1, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[50, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.withMinimumValue();
        boolean boolean9 = dateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withPeriodAdded(readablePeriod16, 11);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.centuries();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withChronologyRetainFields(chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, chronology24);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekOfWeekyear((int) '#');
        boolean boolean30 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.LocalDate localDate75 = localDate73.withWeekyear(32769);
        int int76 = localDate75.getCenturyOfEra();
        org.joda.time.LocalDate.Property property77 = localDate75.weekOfWeekyear();
        org.joda.time.LocalDate localDate79 = property77.addWrapFieldToCopy(34879031);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 327 + "'", int76 == 327);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate79);
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        int int6 = yearMonthDay4.getYear();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property7.addToCopy(34722164);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        long long10 = dateTimeField8.roundHalfEven((long) (byte) 1);
        java.lang.String str12 = dateTimeField8.getAsText(10L);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField8.set(1917L, "6343-12-31T00:00:00.000Z", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"6343-12-31T00:00:00.000Z\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate11.toDateTime(localTime12, dateTimeZone13);
        int int15 = property8.compareTo((org.joda.time.ReadableInstant) dateTime14);
        java.util.Locale locale16 = null;
        java.lang.String str17 = property8.getAsShortText(locale16);
        org.joda.time.YearMonthDay yearMonthDay19 = property8.addToCopy((int) (byte) 1);
        java.lang.String str20 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay21 = property8.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime.Property property35 = dateTime33.dayOfYear();
        boolean boolean36 = dateMidnight24.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTime dateTime54 = interval49.getEnd();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        java.util.Date date62 = dateMidnight61.toDate();
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.dayOfWeek();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableDuration58, (org.joda.time.ReadableInstant) dateMidnight61);
        boolean boolean65 = interval57.isAfter((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.Interval interval69 = interval57.withStart((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = interval49.overlaps((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Duration duration71 = interval49.toDuration();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight42.withDurationAdded((org.joda.time.ReadableDuration) duration71, 24);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight24.withDurationAdded((org.joda.time.ReadableDuration) duration71, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.property(dateTimeFieldType76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean79 = dateMidnight75.isSupported(dateTimeFieldType78);
        java.lang.String str80 = dateTimeFieldType78.toString();
        java.lang.String str81 = dateTimeFieldType78.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property82 = yearMonthDay21.property(dateTimeFieldType78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Jan" + "'", str17, "Jan");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[monthOfYear]" + "'", str20, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "yearOfCentury" + "'", str80, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "yearOfCentury" + "'", str81, "yearOfCentury");
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withYear(11);
        boolean boolean12 = dateMidnight2.isBefore((long) 28);
        boolean boolean14 = dateMidnight2.isEqual((long) (-19034));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.setFirstDayOfWeek((int) '#');
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572707645,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=7,MILLISECOND=645,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getRangeDurationField();
        long long19 = dateTimeField15.add(1814380966L, 34647002);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2993502787180966L + "'", long19 == 2993502787180966L);
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = property4.setCopy("Sep 30, 1970 12:00:00 AM", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Sep 30, 1970 12:00:00 AM\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.Chronology chronology5 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.dayOfWeek();
        long long8 = dateTimeField6.roundFloor((-1732790905000L));
        java.util.Locale locale9 = null;
        int int10 = dateTimeField6.getMaximumTextLength(locale9);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1732838400000L) + "'", long8 == (-1732838400000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(0);
        org.joda.time.DateMidnight dateMidnight7 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate8 = dateTime6.toLocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        int int10 = localDate8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        boolean boolean14 = dateMidnight11.isBefore((long) ' ');
        org.joda.time.LocalDate localDate15 = dateMidnight11.toLocalDate();
        org.joda.time.Chronology chronology16 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate25.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property30 = localDate29.era();
        int int31 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate33 = localDate29.minusWeeks(20);
        org.joda.time.LocalDate localDate35 = localDate29.plusMonths((int) (byte) -1);
        org.joda.time.LocalDate localDate37 = localDate29.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int39 = localDate37.get(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = localDate47.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField49.getType();
        java.lang.String str51 = dateTimeFieldType50.toString();
        org.joda.time.Chronology chronology52 = null;
        boolean boolean53 = dateTimeFieldType50.isSupported(chronology52);
        org.joda.time.LocalDate localDate55 = localDate37.withField(dateTimeFieldType50, 7);
        boolean boolean56 = localDate1.isBefore((org.joda.time.ReadablePartial) localDate37);
        java.util.Date date57 = localDate1.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDate1.getFieldType(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 16");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "monthOfYear" + "'", str51, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight2.getZone();
        java.lang.String str17 = dateTimeZone15.getName(3516860307634L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withYearOfCentury(5);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfYear();
        boolean boolean27 = dateMidnight15.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval40.getEnd();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean56 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = interval48.withStart((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = interval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration62 = interval40.toDuration();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight33.withDurationAdded((org.joda.time.ReadableDuration) duration62, 24);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight15.withDurationAdded((org.joda.time.ReadableDuration) duration62, 19);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        java.util.Date date74 = dateMidnight73.toDate();
        org.joda.time.DateMidnight.Property property75 = dateMidnight73.dayOfWeek();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableDuration70, (org.joda.time.ReadableInstant) dateMidnight73);
        boolean boolean77 = interval69.isAfter((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration78 = interval76.toDuration();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight66.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight12.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.minus((long) (-1));
        org.joda.time.Chronology chronology85 = dateMidnight84.getChronology();
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(chronology85);
        org.joda.time.DateTime dateTime87 = localDate86.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime88 = localDate86.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime90 = dateTime88.plusMillis(1970);
        org.joda.time.DateTime dateTime92 = dateTime90.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime93 = dateTime90.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime93.toMutableDateTimeISO();
        org.joda.time.Interval interval95 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration78, (org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate31.dayOfYear();
        org.joda.time.LocalDate.Property property36 = localDate31.year();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.LocalDate localDate39 = property36.setCopy(34615813);
        org.joda.time.LocalDate localDate41 = property36.setCopy(557);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.LocalDate localDate17 = dateMidnight13.toLocalDate();
        org.joda.time.Chronology chronology18 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        int int20 = dateMidnight4.get(dateTimeField19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight23 = property21.addToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DurationField durationField27 = durationFieldType25.getField(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 24 + "'", int20 == 24);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        java.lang.String str9 = localDate8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = localDate21.withWeekyear(19);
        org.joda.time.LocalTime localTime28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime33 = localDate21.toDateTime(localTime28, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = localDate8.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.LocalDate localDate37 = localDate8.withCenturyOfEra(36522);
        org.joda.time.LocalDate.Property property38 = localDate8.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-12-31" + "'", str9, "1969-12-31");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setSeconds(365);
        date3.setSeconds(10022);
        date3.setTime(18731052L);
        int int13 = date3.getTimezoneOffset();
        date3.setMinutes(34647002);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Nov 16 15:02:11 UTC 2035");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        boolean boolean7 = dateTime5.isAfter((long) 545);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfMonth();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.LocalDate localDate34 = localDate28.withWeekyear(19);
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfYear();
        org.joda.time.LocalDate localDate36 = property35.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate59 = localDate53.withWeekyear(19);
        org.joda.time.LocalTime localTime60 = null;
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        java.lang.String str64 = dateTimeZone62.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime65 = localDate53.toDateTime(localTime60, dateTimeZone62);
        java.lang.String str67 = dateTimeZone62.getName(1000L);
        org.joda.time.DateTime dateTime68 = yearMonthDay41.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.Interval interval69 = localDate36.toInterval(dateTimeZone62);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) ' ', chronology70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        java.util.Date date75 = dateMidnight74.toDate();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight74.minusWeeks(22);
        int int78 = dateMidnight74.getMillisOfDay();
        boolean boolean79 = dateTime71.isAfter((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType80.getRangeDurationType();
        boolean boolean82 = dateMidnight74.isSupported(dateTimeFieldType80);
        boolean boolean83 = interval15.isAfter((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight74.withDurationAdded(87074108061482L, 35017);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateMidnight86);
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(97L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withField(dateTimeFieldType2, 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.withYear(44);
        int int8 = dateMidnight1.getDayOfWeek();
        int int9 = dateMidnight1.getEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        org.joda.time.DateMidnight dateMidnight17 = property14.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight18 = property14.withMaximumValue();
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfYear();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.DateMidnight.Property property22 = dateMidnight1.property(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        int int17 = localDate14.getDayOfMonth();
        int int18 = localDate14.getYear();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDate14, (int) (short) 0, locale20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean23 = localDate14.isSupported(durationFieldType22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.days();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay28.withChronologyRetainFields(chronology34);
        org.joda.time.DurationField durationField39 = chronology34.months();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField42 = durationFieldType22.getField(chronology34);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DurationField durationField44 = chronology34.seconds();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) 22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight28.toYearMonthDay();
        int[] intArray31 = yearMonthDay30.getValues();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.withPeriodAdded(readablePeriod32, 22);
        java.lang.String str35 = yearMonthDay30.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears(5);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        java.util.Date date56 = dateMidnight55.toDate();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.dayOfWeek();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableDuration52, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean62 = interval58.isBefore((org.joda.time.ReadableInterval) interval61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval58.toPeriod(periodType63);
        org.joda.time.DateTime dateTime65 = dateTime49.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.LocalDate localDate67 = localDate45.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 6);
        org.joda.time.PeriodType periodType68 = period64.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay30.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.MutablePeriod mutablePeriod70 = period64.toMutablePeriod();
        org.joda.time.DateTime dateTime71 = dateTime23.plus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.days();
        java.lang.String str73 = durationFieldType72.getName();
        java.lang.String str74 = durationFieldType72.toString();
        int int75 = mutablePeriod70.get(durationFieldType72);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.minutes();
        boolean boolean77 = mutablePeriod70.isSupported(durationFieldType76);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "days" + "'", str73, "days");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "days" + "'", str74, "days");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks(1970);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.withDurationAdded(2281005493L, 28);
        org.joda.time.DateMidnight.Property property10 = dateMidnight2.year();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder5.setWeekDate(820, 2099, 2922789);
        java.util.Calendar.Builder builder16 = builder5.setWeekDate(617, 213, 56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder5.setCalendarType("Mon");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: Mon");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate18.withWeekyear(19);
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTime dateTime26 = localDate18.toDateTime(localTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        int int37 = localDate34.getYearOfCentury();
        boolean boolean38 = localDate18.isBefore((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minus((long) (-1));
        org.joda.time.DateTime dateTime42 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateTime dateTime43 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime43.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime46 = dateTime44.withCenturyOfEra(50);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.YearMonthDay yearMonthDay51 = dateMidnight49.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay51.withPeriodAdded(readablePeriod52, 11);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay51.monthOfYear();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.YearMonthDay yearMonthDay58 = property55.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay60 = property55.addWrapFieldToCopy(33435);
        org.joda.time.DateTime dateTime61 = dateTime46.withFields((org.joda.time.ReadablePartial) yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays((int) 'a');
        org.joda.time.Interval interval47 = interval14.withEnd((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime48 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime50 = dateTime44.withYear(31);
        org.joda.time.DateTime dateTime52 = dateTime50.minusYears(323);
        org.joda.time.DateTime dateTime54 = dateTime52.minus((-1656L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.LocalDate localDate16 = property14.addWrapFieldToCopy(16);
        org.joda.time.DateTimeField dateTimeField17 = property14.getField();
        long long19 = dateTimeField17.roundFloor((long) (byte) 0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(21, 34, 69);
        java.util.Calendar.Builder builder18 = builder13.setTimeOfDay(575, 34545, (-30801), 15);
        java.util.Calendar.Builder builder22 = builder18.setDate(34612781, 42, 34615813);
        java.util.Calendar.Builder builder26 = builder22.setWeekDate(579, 779, 292278994);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.monthOfYear();
        org.joda.time.DateTime dateTime32 = property31.withMaximumValue();
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.centuries();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(70L, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime34.toDateTime(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay((java.lang.Object) 779, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minus((long) (-1));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        boolean boolean30 = property24.equals((java.lang.Object) chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property24.getFieldType();
        org.joda.time.LocalDate localDate32 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate33 = property24.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readableDuration36);
        org.joda.time.DateTime dateTime39 = dateTime35.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime41 = dateTime35.minusMinutes(0);
        int int42 = property24.getDifference((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.Calendar.Builder builder23 = builder16.setTimeOfDay(9, 314, 53, 55);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        int int25 = calendar24.getFirstDayOfWeek();
        int int26 = calendar24.getWeekYear();
        int int27 = calendar24.getMinimalDaysInFirstWeek();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        int int39 = localDate36.getYearOfCentury();
        org.joda.time.LocalTime localTime40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate48.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus((-1L));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfMinute();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate62 = localDate60.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate64 = localDate60.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.DateTime dateTime68 = localDate64.toDateTimeAtCurrentTime(dateTimeZone66);
        boolean boolean69 = dateTimeZone66.isFixed();
        org.joda.time.DateTime dateTime70 = localDate52.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = localDate36.toDateTime(localTime40, dateTimeZone66);
        java.util.TimeZone timeZone72 = dateTimeZone66.toTimeZone();
        calendar28.setTimeZone(timeZone72);
        calendar24.setTimeZone(timeZone72);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone72);
        java.util.Calendar.Builder builder76 = builder23.setTimeZone(timeZone72);
        java.util.Locale locale77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder78 = builder23.setLocale(locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572708240,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=8,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644572708240,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=8,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1644572708240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=8,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        java.lang.String str18 = dateTimeField17.toString();
        int int20 = dateTimeField17.getMaximumValue(1644676693801L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str18, "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay4.minuteOfHour();
        int int11 = property10.get();
        org.joda.time.TimeOfDay timeOfDay13 = property10.addToCopy(79);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:45:08.271" + "'", str6, "T09:45:08.271");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 45 + "'", int11 == 45);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight14.getZone();
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.era();
        boolean boolean19 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.withWeekOfWeekyear(21);
        boolean boolean29 = dateMidnight14.isBefore((org.joda.time.ReadableInstant) dateMidnight26);
        int int30 = dateMidnight26.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant16 = calendar0.toInstant();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int19 = calendar17.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        boolean boolean28 = date23.before(date27);
        int int29 = date23.getMonth();
        calendar17.setTime(date23);
        java.util.TimeZone timeZone31 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        calendar0.setTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 10);
        int int44 = localDate41.getYearOfCentury();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate57 = localDate53.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str72 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtCurrentTime(dateTimeZone71);
        boolean boolean74 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime75 = localDate57.toDateTimeAtCurrentTime(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = localDate41.toDateTime(localTime45, dateTimeZone71);
        java.util.TimeZone timeZone77 = dateTimeZone71.toTimeZone();
        calendar0.setTimeZone(timeZone77);
        calendar0.add(100, (int) (byte) 0);
        calendar0.setMinimalDaysInFirstWeek(76);
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=76,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localDate84);
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date7.getHours();
        int int10 = date7.getMinutes();
        long long11 = date7.getTime();
        date7.setTime((long) 34875);
        java.time.Instant instant14 = date7.toInstant();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:34 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        java.util.Date date5 = new java.util.Date(36, 35, 29, 39, (int) 'a');
        date5.setMonth(0);
        date5.setSeconds(292278994);
        date5.setMonth(1970);
        int int12 = date5.getMinutes();
        date5.setYear(0);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jul 04 13:13:34 UTC 1900");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.minusYears((int) '#');
        org.joda.time.LocalDate localDate33 = localDate11.minusDays(22);
        org.joda.time.LocalDate.Property property34 = localDate11.weekyear();
        org.joda.time.DateMidnight dateMidnight35 = localDate11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime37.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime37.secondOfMinute();
        int int44 = property43.getMaximumValue();
        org.joda.time.DateTime dateTime45 = property43.getDateTime();
        int int46 = dateMidnight35.compareTo((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime45.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 59 + "'", int44 == 59);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        int int11 = property7.get();
        org.joda.time.TimeOfDay timeOfDay13 = property7.setCopy(23);
        int int14 = property7.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property7.getFieldType();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:45:08.395" + "'", str6, "T09:45:08.395");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8" + "'", str8, "8");
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.withChronology(chronology16);
        int int20 = dateMidnight19.getWeekyear();
        boolean boolean22 = dateMidnight19.isEqual((-60522647031666L));
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.plusDays(34815702);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1999 + "'", int20 == 1999);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        java.lang.Object obj0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.minus(readableDuration7);
        org.joda.time.DateTime.Property property9 = dateTime3.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime3.withField(dateTimeFieldType10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime12.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury(14);
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfCentury();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (-1));
        long long23 = dateTimeZone19.convertUTCToLocal((long) 5);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone19.getName((long) 0, locale25);
        java.lang.String str27 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone19);
        org.joda.time.Interval interval29 = yearMonthDay1.toInterval(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay1.withDayOfMonth(521);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 521 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5L + "'", long23 == 5L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(70L, chronology8);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        int int15 = timeOfDay13.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay18 = property16.addToCopy(50400000);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(64, 327);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 327");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("56");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder2.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        boolean boolean8 = localDate1.equals((java.lang.Object) builder7);
        java.util.Calendar.Builder builder13 = builder7.setTimeOfDay(22, 7, 27, (-391));
        java.util.Calendar.Builder builder18 = builder7.setTimeOfDay(314, 43, (-292275054), (-1974));
        java.util.Calendar calendar19 = builder18.build();
        java.util.Date date25 = new java.util.Date((int) '#', (int) (byte) 0, 7, 44, (int) (byte) -1);
        java.lang.String str26 = date25.toLocaleString();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date25);
        int int28 = date25.getDay();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder29 = builder18.setInstant(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-291142075974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1960,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=284,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=4,MILLISECOND=26,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date25.toString(), "Tue Jan 08 19:59:00 UTC 1935");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Jan 8, 1935 7:59:00 PM" + "'", str26, "Jan 8, 1935 7:59:00 PM");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.property(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        int int15 = localDate12.getYearOfCentury();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime46 = localDate28.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate12.toDateTime(localTime16, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight2.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight2.plusYears((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusYears(31);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfMonth();
        int int54 = dateMidnight52.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.minusWeeks(17);
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        int int21 = dateTime7.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = dateTime7.withMonthOfYear(12);
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMonths(34555);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        int int39 = dateTime38.getSecondOfMinute();
        org.joda.time.DateTime.Property property40 = dateTime38.dayOfYear();
        boolean boolean41 = dateMidnight29.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury(8);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.YearMonthDay yearMonthDay50 = dateMidnight48.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((-1L));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfMinute();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.LocalDate localDate65 = localDate63.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears(5);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone74);
        java.util.Date date76 = dateMidnight75.toDate();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfWeek();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableDuration72, (org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean82 = interval78.isBefore((org.joda.time.ReadableInterval) interval81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval78.toPeriod(periodType83);
        org.joda.time.DateTime dateTime85 = dateTime69.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.LocalDate localDate87 = localDate65.withPeriodAdded((org.joda.time.ReadablePeriod) period84, 6);
        org.joda.time.PeriodType periodType88 = period84.getPeriodType();
        org.joda.time.DateTime dateTime90 = dateTime53.withPeriodAdded((org.joda.time.ReadablePeriod) period84, (int) '#');
        org.joda.time.DateTime dateTime92 = dateTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period84, 35);
        org.joda.time.Period period93 = period84.toPeriod();
        org.joda.time.DateTime dateTime94 = dateTime23.plus((org.joda.time.ReadablePeriod) period84);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        int int25 = dateTimeField23.get(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        int int36 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDate35);
        java.util.Locale locale37 = null;
        int int38 = dateTimeField23.getMaximumShortTextLength(locale37);
        java.util.Locale locale39 = null;
        int int40 = dateTimeField23.getMaximumShortTextLength(locale39);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy(575);
        org.joda.time.DateMidnight dateMidnight12 = property8.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        boolean boolean26 = interval18.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration27 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration27, 52);
        boolean boolean30 = dateTime11.isBeforeNow();
        int int31 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime dateTime33 = dateTime11.withYear(11);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 585 + "'", int31 == 585);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfYear();
        boolean boolean17 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfWeek();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean34 = interval30.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTime dateTime35 = interval30.getEnd();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        boolean boolean46 = interval38.isAfter((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        org.joda.time.Interval interval50 = interval38.withStart((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = interval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration52 = interval30.toDuration();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration52, 24);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration52, 19);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.DateMidnight.Property property65 = dateMidnight63.dayOfWeek();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableDuration60, (org.joda.time.ReadableInstant) dateMidnight63);
        boolean boolean67 = interval59.isAfter((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration68 = interval66.toDuration();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight56.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration68, readableInstant71);
        org.joda.time.DateTime dateTime74 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration68, 27);
        org.joda.time.DateTime.Property property75 = dateTime74.weekOfWeekyear();
        int int76 = dateTime74.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1969 + "'", int76 == 1969);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.monthOfYear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.minus(readableDuration11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate21.toInterval(dateTimeZone22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateTime12, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay5.withChronologyRetainFields(chronology24);
        org.joda.time.DurationField durationField27 = durationFieldType0.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        boolean boolean35 = dateMidnight32.isBefore((long) ' ');
        org.joda.time.LocalDate localDate36 = dateMidnight32.toLocalDate();
        org.joda.time.Chronology chronology37 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate50 = localDate46.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property51 = localDate50.era();
        int int52 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate localDate54 = localDate50.minusWeeks(20);
        org.joda.time.LocalDate localDate56 = localDate50.plusMonths((int) (byte) -1);
        int int58 = localDate56.getValue(2);
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtStartOfDay();
        int[] intArray61 = chronology24.get((org.joda.time.ReadablePartial) localDate56, 1644572336000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 24 + "'", int52 == 24);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 11 + "'", int58 == 11);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2022, 2, 11]");
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter6.withPivotYear((java.lang.Integer) (-36962));
        int int44 = dateTimeFormatter6.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2000 + "'", int44 == 2000);
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.millisOfSecond();
        org.joda.time.DurationField durationField38 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.clockhourOfDay();
        java.util.Locale locale40 = null;
        int int41 = dateTimeField39.getMaximumShortTextLength(locale40);
        boolean boolean43 = dateTimeField39.isLeap((-60972226286000L));
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        long long11 = chronology5.add(25260000L, (long) (byte) 100, 34660);
        org.joda.time.DurationField durationField12 = chronology5.halfdays();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 28726000L + "'", long11 == 28726000L);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.monthOfYear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.minus(readableDuration11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate21.toInterval(dateTimeZone22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateTime12, chronology24);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay5.withChronologyRetainFields(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.seconds();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 131, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.yearOfEra();
        long long32 = dateTimeField29.getDifferenceAsLong((long) 58, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears(5);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean49 = interval45.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval45.toPeriod(periodType50);
        org.joda.time.DateTime dateTime52 = dateTime36.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.LocalDate localDate53 = dateTime36.toLocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.plusMonths(39);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDate53, locale56);
        java.util.Locale locale58 = null;
        int int59 = dateTimeField29.getMaximumShortTextLength(locale58);
        long long62 = dateTimeField29.add((-127L), 34612781);
        long long65 = dateTimeField29.add((long) 314, 34992502);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1092273868569599873L + "'", long62 == 1092273868569599873L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1104256705996800314L + "'", long65 == 1104256705996800314L);
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval14.withPeriodAfterStart(readablePeriod28);
        long long30 = interval29.getEndMillis();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays(34805967);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusDays((-1));
        org.joda.time.DateTime dateTime29 = dateTime8.withMinuteOfHour(16);
        org.joda.time.DateTime dateTime31 = dateTime8.withYearOfEra((int) 'a');
        int int32 = dateTime8.getHourOfDay();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTime8.toString("2022", locale34);
        java.util.Locale locale36 = null;
        java.util.Calendar calendar37 = dateTime8.toCalendar(locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.YearMonthDay yearMonthDay42 = dateMidnight40.toYearMonthDay();
        int[] intArray43 = yearMonthDay42.getValues();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.withPeriodAdded(readablePeriod44, 22);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean59 = interval55.isBefore((org.joda.time.ReadableInterval) interval58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval55.toPeriod(periodType60);
        int int63 = period61.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay46.plus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime65 = dateTime8.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime66 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime68 = dateTime66.plusYears((-1));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572708860,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=45,SECOND=8,MILLISECOND=860,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
    }
}

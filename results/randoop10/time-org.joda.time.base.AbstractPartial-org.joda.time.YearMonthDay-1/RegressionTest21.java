import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        long long46 = calendar0.getTimeInMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate58 = localDate54.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str61 = dateTimeZone60.toString();
        org.joda.time.DateTime dateTime62 = localDate58.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.LocalDate localDate64 = localDate58.withWeekyear(19);
        org.joda.time.LocalTime localTime65 = null;
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str69 = dateTimeZone67.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime70 = localDate58.toDateTime(localTime65, dateTimeZone67);
        java.lang.String str71 = dateTimeZone67.getID();
        java.util.TimeZone timeZone72 = dateTimeZone67.toTimeZone();
        calendar0.setTimeZone(timeZone72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone72);
        java.util.Date date75 = calendar74.getTime();
        date75.setMinutes(34879031);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572595361,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=15,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1644572595361L + "'", long46 == 1644572595361L);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTC" + "'", str71, "UTC");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1644572595361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=15,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date75);
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Sat Jun 05 22:11:15 UTC 2088");
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(0);
        org.joda.time.DateTime dateTime8 = dateTime6.withYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.minus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime10.withField(dateTimeFieldType17, (int) ' ');
        int int20 = dateTime8.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime21 = dateTime8.toLocalDateTime();
        int int22 = dateTime8.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 365 + "'", int20 == 365);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.minus((-60522611065211L));
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology12.getDateTimeMillis((long) 34871746, 34693, (int) '#', 395, 953);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34693 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(5);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean29 = interval25.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval25.toPeriod(periodType30);
        org.joda.time.DateTime dateTime32 = dateTime16.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime12.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        int int35 = dateTime33.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 327 + "'", int35 == 327);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        int int23 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property24 = localDate18.yearOfEra();
        long long26 = chronology9.set((org.joda.time.ReadablePartial) localDate18, (long) 29);
        org.joda.time.DateTimeField dateTimeField27 = chronology9.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(34890, 47, 323, 58, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34890 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644537600029L + "'", long26 == 1644537600029L);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(70L, chronology9);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology9);
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(87651714038400000L, chronology13);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withMillisOfSecond(122);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        int[] intArray8 = yearMonthDay4.getValues();
        org.joda.time.DateTime dateTime9 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = yearMonthDay4.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DurationField durationField12 = chronology10.hours();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfYear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate50 = localDate44.withWeekyear(19);
        org.joda.time.LocalTime localTime51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime56 = localDate44.toDateTime(localTime51, dateTimeZone53);
        java.lang.String str58 = dateTimeZone53.getName(1000L);
        org.joda.time.DateTime dateTime59 = yearMonthDay32.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.Interval interval60 = localDate27.toInterval(dateTimeZone53);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight7.withChronology(chronology61);
        org.joda.time.Interval interval63 = dateMidnight62.toInterval();
        boolean boolean64 = dateMidnight62.isAfterNow();
        boolean boolean65 = dateMidnight62.isBeforeNow();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime5.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property8.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        int int15 = dateMidnight13.getYearOfEra();
        int int16 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.year();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.withYear(32);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withYear(34745483);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus(readablePeriod25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate localDate47 = localDate41.withWeekyear(19);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfYear();
        org.joda.time.LocalDate localDate49 = property48.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.YearMonthDay yearMonthDay54 = dateMidnight52.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plus((-1L));
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.secondOfMinute();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.LocalDate localDate64 = localDate62.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate66 = localDate62.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate72 = localDate66.withWeekyear(19);
        org.joda.time.LocalTime localTime73 = null;
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        java.lang.String str77 = dateTimeZone75.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime78 = localDate66.toDateTime(localTime73, dateTimeZone75);
        java.lang.String str80 = dateTimeZone75.getName(1000L);
        org.joda.time.DateTime dateTime81 = yearMonthDay54.toDateTimeAtCurrentTime(dateTimeZone75);
        org.joda.time.Interval interval82 = localDate49.toInterval(dateTimeZone75);
        org.joda.time.Chronology chronology83 = interval82.getChronology();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight29.withChronology(chronology83);
        org.joda.time.DateMidnight dateMidnight85 = org.joda.time.DateMidnight.now(chronology83);
        org.joda.time.DateTime dateTime86 = dateMidnight21.toDateTime(chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay87 = new org.joda.time.TimeOfDay(3, 779, chronology83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 779 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate11.toDateTime(localTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        int int30 = localDate27.getYearOfCentury();
        boolean boolean31 = localDate11.isBefore((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property32 = localDate27.monthOfYear();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property32.getAsText(locale33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.monthOfYear();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.minus(readableDuration40);
        org.joda.time.DateTime.Property property42 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        org.joda.time.DateTime dateTime44 = property42.roundCeilingCopy();
        long long45 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = property32.isLeap();
        org.joda.time.LocalDate localDate47 = property32.getLocalDate();
        org.joda.time.LocalDate localDate48 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.YearMonthDay yearMonthDay53 = dateMidnight51.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((-1L));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfMinute();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        boolean boolean64 = yearMonthDay55.isEqual((org.joda.time.ReadablePartial) localDate63);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str68 = dateTimeZone66.getNameKey((long) (-1));
        long long70 = dateTimeZone66.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight71 = localDate63.toDateMidnight(dateTimeZone66);
        long long75 = dateTimeZone66.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str77 = dateTimeZone66.getNameKey((long) 33);
        java.lang.String str79 = dateTimeZone66.getNameKey(1644572171333L);
        org.joda.time.DateTime dateTime80 = localDate48.toDateTimeAtStartOfDay(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "February" + "'", str34, "February");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-10L) + "'", long45 == (-10L));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 5L + "'", long70 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime8.withField(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMonths(293);
        org.joda.time.DateTime.Property property18 = dateTime14.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.dayOfWeek();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23);
        boolean boolean27 = interval19.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval26.withPeriodAfterStart(readablePeriod28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration58 = interval36.toDuration();
        org.joda.time.Interval interval59 = interval29.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime60 = dateTime16.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property62 = dateTime16.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = property62.getDateTime();
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays(66);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withChronologyRetainFields(chronology26);
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = yearMonthDay28.toInterval(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        java.util.Calendar.Builder builder77 = builder12.setTimeZone(timeZone76);
        java.util.Calendar.Builder builder81 = builder77.setTimeOfDay(34628, 24, 1439);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder84 = builder77.setWeekDefinition(57, 34871746);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight8.withChronology(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withWeekOfWeekyear(34715586);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34715586 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.DateMidnight.Property property9 = dateMidnight7.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7);
        boolean boolean11 = interval3.isAfter((org.joda.time.ReadableInterval) interval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-1L), dateTimeZone13);
        org.joda.time.Interval interval15 = interval3.withStart((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 11, chronology16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.withPeriodAdded(readablePeriod23, 11);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        int int27 = property26.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay28 = property26.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.plusMonths(1971);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(2);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = yearMonthDay30.toDateTimeAtMidnight(dateTimeZone32);
        int int35 = yearMonthDay30.size();
        boolean boolean36 = localDate17.isBefore((org.joda.time.ReadablePartial) yearMonthDay30);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.minus(readableDuration18);
        boolean boolean20 = dateMidnight12.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTime.Property property37 = dateTime35.dayOfYear();
        boolean boolean38 = dateMidnight26.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean55 = interval51.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTime dateTime56 = interval51.getEnd();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.DateMidnight.Property property65 = dateMidnight63.dayOfWeek();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableDuration60, (org.joda.time.ReadableInstant) dateMidnight63);
        boolean boolean67 = interval59.isAfter((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-1L), dateTimeZone69);
        org.joda.time.Interval interval71 = interval59.withStart((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = interval51.overlaps((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration73 = interval51.toDuration();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight44.withDurationAdded((org.joda.time.ReadableDuration) duration73, 24);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight26.withDurationAdded((org.joda.time.ReadableDuration) duration73, 19);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone83);
        java.util.Date date85 = dateMidnight84.toDate();
        org.joda.time.DateMidnight.Property property86 = dateMidnight84.dayOfWeek();
        org.joda.time.Interval interval87 = new org.joda.time.Interval(readableDuration81, (org.joda.time.ReadableInstant) dateMidnight84);
        boolean boolean88 = interval80.isAfter((org.joda.time.ReadableInterval) interval87);
        org.joda.time.Duration duration89 = interval87.toDuration();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight77.withDurationAdded((org.joda.time.ReadableDuration) duration89, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant92 = null;
        org.joda.time.Interval interval93 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration89, readableInstant92);
        org.joda.time.DateTime dateTime95 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration89, 27);
        org.joda.time.DateTime dateTime96 = dateTime14.plus((org.joda.time.ReadableDuration) duration89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = dateTime14.withEra(34799);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34799 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(22);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(21);
        org.joda.time.DateTime.Property property16 = dateTime13.weekyear();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.DateTime dateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears(5);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.dayOfWeek();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean47 = interval43.isBefore((org.joda.time.ReadableInterval) interval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval43.toPeriod(periodType48);
        org.joda.time.DateTime dateTime50 = dateTime34.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.LocalDate localDate52 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 6);
        org.joda.time.DateTime dateTime53 = dateTime18.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime54 = dateTime7.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.plus(readableDuration57);
        int int59 = dateTime56.getWeekyear();
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime();
        org.joda.time.DateTime dateTime62 = dateTime60.plus(1644572152803L);
        boolean boolean63 = dateTime54.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = dateTime62.minusDays((int) '4');
        java.lang.String str66 = dateTime62.toString();
        org.joda.time.DateTime dateTime67 = dateTime62.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = dateTime67.withWeekOfWeekyear(64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-292275054) + "'", int17 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2074-03-24T19:19:08.820Z" + "'", str66, "2074-03-24T19:19:08.820Z");
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusDays((int) (byte) -1);
        java.lang.String str7 = dateMidnight6.toString();
        long long8 = dateMidnight6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.minusWeeks(17);
        org.joda.time.DateMidnight.Property property20 = dateMidnight13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        org.joda.time.DurationField durationField30 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay34 = property33.getTimeOfDay();
        int[] intArray35 = timeOfDay34.getValues();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight13.withFields((org.joda.time.ReadablePartial) timeOfDay34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minus((long) (-1));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.minus(readablePeriod42);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.minusMinutes(1970);
        org.joda.time.Chronology chronology48 = timeOfDay45.getChronology();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) (-1));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.minus(readablePeriod54);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay57.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay57.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        java.util.Date date68 = dateMidnight67.toDate();
        org.joda.time.DateMidnight.Property property69 = dateMidnight67.dayOfWeek();
        org.joda.time.Interval interval70 = new org.joda.time.Interval(readableDuration64, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean74 = interval70.isBefore((org.joda.time.ReadableInterval) interval73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval70.toPeriod(periodType75);
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay63.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay45.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay34.plus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight6.withPeriodAdded((org.joda.time.ReadablePeriod) period76, 1904);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:00:00.000Z" + "'", str7, "1969-12-31T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-86400000L) + "'", long8 == (-86400000L));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[9, 43, 16, 43]");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(dateMidnight81);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        int int6 = dateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsText((int) (short) 1, locale17);
        int int21 = dateTimeField15.getDifference(281723794000L, 1644537600029L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField15.getAsText((long) (byte) -1, locale23);
        int int25 = dateTime5.get(dateTimeField15);
        org.joda.time.DateTime.Property property26 = dateTime5.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-378559) + "'", int21 == (-378559));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "23" + "'", str24, "23");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight dateMidnight8 = property4.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate.Property property17 = localDate16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        boolean boolean25 = dateMidnight22.isBefore((long) ' ');
        org.joda.time.LocalDate localDate26 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology27 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property41 = localDate40.era();
        int int42 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.LocalDate localDate44 = localDate40.minusWeeks(20);
        org.joda.time.LocalDate localDate46 = localDate40.plusMonths((int) (byte) -1);
        int int47 = localDate46.getDayOfMonth();
        boolean boolean48 = localDate16.equals((java.lang.Object) localDate46);
        int int49 = property4.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate51 = localDate16.withMonthOfYear(6);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 24 + "'", int42 == 24);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        boolean boolean6 = property4.isLeap();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minus((long) (-1));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minus(readablePeriod13);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minusMinutes(1);
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        org.joda.time.DateTime dateTime18 = timeOfDay16.toDateTimeToday();
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTimeToday();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus((long) (-1));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minus(readablePeriod25);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minusMinutes(1970);
        org.joda.time.Chronology chronology31 = timeOfDay28.getChronology();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minus((long) (-1));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minus(readablePeriod37);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay40.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfWeek();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean57 = interval53.isBefore((org.joda.time.ReadableInterval) interval56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = interval53.toPeriod(periodType58);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay46.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.PeriodType periodType61 = period59.getPeriodType();
        int[] intArray64 = chronology31.get((org.joda.time.ReadablePeriod) period59, (long) (-1), (long) 24);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay16.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.PeriodType periodType66 = period59.getPeriodType();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight7.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 57);
        int int69 = dateMidnight7.getMinuteOfHour();
        int int70 = dateMidnight7.getMonthOfYear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        boolean boolean17 = yearMonthDay8.isEqual((org.joda.time.ReadablePartial) localDate16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (-1));
        long long23 = dateTimeZone19.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight24 = localDate16.toDateMidnight(dateTimeZone19);
        long long28 = dateTimeZone19.convertLocalToUTC((long) '4', true, (long) 52);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1, dateTimeZone19);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj0, dateTimeZone19);
        java.util.TimeZone timeZone32 = dateTimeZone19.toTimeZone();
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5L + "'", long23 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy((long) 6);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate13.toDateTime(localTime14, dateTimeZone15);
        int int17 = localDate13.getWeekyear();
        org.joda.time.LocalDate.Property property18 = localDate13.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate24 = localDate19.minusYears(484);
        org.joda.time.LocalDate.Property property25 = localDate19.yearOfEra();
        org.joda.time.LocalDate localDate26 = property25.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        boolean boolean11 = dateMidnight9.isAfter(22L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        org.joda.time.LocalDate localDate23 = localDate19.withDayOfYear(2);
        org.joda.time.LocalDate localDate25 = localDate19.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property26 = localDate19.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        boolean boolean28 = localDate19.isSupported(durationFieldType27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight9.withFieldAdded(durationFieldType27, 34522);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight9.plus((long) 34762);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime3.toMutableDateTime(chronology9);
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfWeek();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((-61851340800000L), (long) 12, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DurationField durationField15 = chronology11.centuries();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        date0.setYear((int) 'a');
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        boolean boolean29 = date24.before(date28);
        int int30 = date24.getDay();
        int int31 = date24.getHours();
        date24.setSeconds((int) '4');
        java.lang.String str34 = date24.toLocaleString();
        int int35 = date24.getYear();
        boolean boolean36 = date20.before(date24);
        boolean boolean37 = date0.after(date24);
        int int38 = date24.getSeconds();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date24);
        java.util.Date date41 = new java.util.Date((long) '4');
        date41.setHours(70);
        boolean boolean44 = date24.before(date41);
        java.lang.String str45 = date41.toLocaleString();
        date41.setSeconds(34545);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 11 09:43:16 UTC 1997");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Jan 1, 1970 12:00:52 AM" + "'", str34, "Jan 1, 1970 12:00:52 AM");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Jan 04 07:35:45 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Jan 3, 1970 10:00:00 PM" + "'", str45, "Jan 3, 1970 10:00:00 PM");
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        java.util.Date date0 = new java.util.Date();
        java.time.Instant instant1 = date0.toInstant();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((java.lang.Object) date0);
        date0.setDate(34616473);
        java.time.Instant instant5 = date0.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Thu Oct 08 09:43:16 UTC 96798");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Oct 08 09:43:16 UTC 96798");
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) 22);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths(3993);
        long long28 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime23.plusHours(13);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644571396399L + "'", long28 == 1644571396399L);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj0, chronology6);
        long long14 = chronology6.add((long) 34647002, (long) 358, 0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34647002L + "'", long14 == 34647002L);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfYear((int) '4');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay34.withPeriodAdded(readablePeriod35, 11);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.centuries();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay37.withChronologyRetainFields(chronology43);
        int[] intArray47 = chronology27.get((org.joda.time.ReadablePartial) yearMonthDay45, (long) (-391));
        int[] intArray49 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) localDate14, 1, intArray47, 10);
        org.joda.time.LocalDate.Property property50 = localDate14.dayOfMonth();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str54 = dateTimeZone52.getNameKey((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar61 = dateMidnight60.toGregorianCalendar();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = chronology62.getZone();
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone63.getShortName((long) 41, locale65);
        long long68 = dateTimeZone52.getMillisKeepLocal(dateTimeZone63, (-31603L));
        org.joda.time.Interval interval69 = localDate14.toInterval(dateTimeZone63);
        int int70 = localDate14.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1969, 10, 31]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1969, 10, 31]");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(gregorianCalendar61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-31603L) + "'", long68 == (-31603L));
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20 + "'", int70 == 20);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear(34522);
        org.joda.time.LocalTime localTime11 = dateTime8.toLocalTime();
        int int12 = dateTime8.getDayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime8.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.minuteOfHour();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 14, (long) 32770);
        boolean boolean12 = interval7.abuts((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Period period13 = interval7.toPeriod();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate15.toDateTime(localTime16, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate15.withYearOfEra(12);
        int[] intArray21 = localDate15.getValues();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) localDate15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate34 = localDate30.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        long long41 = dateTimeZone36.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime42 = localDate22.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        long long46 = dateTimeZone36.adjustOffset(36L, false);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval49 = interval7.withStart((org.joda.time.ReadableInstant) dateMidnight48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1659458699000L) + "'", long41 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 36L + "'", long46 == 36L);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(33330872, 1439, 52952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33330872 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime21.millisOfDay();
        org.joda.time.DateTime.Property property26 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = yearMonthDay14.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay14.year();
        int int29 = yearMonthDay14.size();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.withChronology(chronology16);
        org.joda.time.DateMidnight.Property property20 = dateMidnight10.centuryOfEra();
        boolean boolean21 = property20.isLeap();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = property20.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy("0");
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        int int13 = dateTime12.getHourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusMinutes(0);
        int int16 = dateTime12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        int int20 = localDate15.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property21 = localDate15.yearOfEra();
        long long23 = chronology6.set((org.joda.time.ReadablePartial) localDate15, (long) 29);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(1644572146319L, chronology6);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology6);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = localDate34.getField(1);
        org.joda.time.LocalDate localDate38 = localDate34.withDayOfYear(2);
        org.joda.time.LocalDate localDate40 = localDate34.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property41 = localDate34.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getRangeDurationType();
        boolean boolean44 = localDate34.isSupported(durationFieldType43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight26.withFieldAdded(durationFieldType43, 135);
        org.joda.time.DateMidnight.Property property47 = dateMidnight26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.YearMonthDay yearMonthDay52 = dateMidnight50.toYearMonthDay();
        int[] intArray53 = yearMonthDay52.getValues();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay52.withPeriodAdded(readablePeriod54, 22);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        java.util.Date date60 = dateMidnight59.toDate();
        org.joda.time.YearMonthDay yearMonthDay61 = dateMidnight59.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.DurationField durationField70 = chronology67.days();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay61.withChronologyRetainFields(chronology67);
        org.joda.time.Chronology chronology72 = yearMonthDay71.getChronology();
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod54, chronology72);
        org.joda.time.DurationField durationField74 = chronology72.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((java.lang.Object) property47, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644537600029L + "'", long23 == 1644537600029L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight22, readablePeriod23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight22.plus(1644572120548L);
        boolean boolean27 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime dateTime29 = dateTime16.minusHours((-391));
        org.joda.time.DateTime dateTime31 = dateTime16.withWeekOfWeekyear(18);
        org.joda.time.DateTime.Property property32 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime33 = property32.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        java.lang.String str25 = dateTimeZone20.getName(1000L);
        java.lang.String str27 = dateTimeZone20.getShortName((long) 292278994);
        long long29 = dateTimeZone20.previousTransition(1644572120548L);
        long long32 = dateTimeZone20.convertLocalToUTC((long) (short) -1, false);
        boolean boolean34 = dateTimeZone20.isStandardOffset(1644572195872L);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.plus(readableDuration43);
        int int45 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime48 = property46.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime49 = property46.roundHalfEvenCopy();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        java.util.Date date57 = dateMidnight56.toDate();
        org.joda.time.DateMidnight.Property property58 = dateMidnight56.dayOfWeek();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableDuration53, (org.joda.time.ReadableInstant) dateMidnight56);
        boolean boolean60 = interval52.isAfter((org.joda.time.ReadableInterval) interval59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Interval interval62 = interval59.withPeriodAfterStart(readablePeriod61);
        org.joda.time.Duration duration63 = interval59.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime49.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime65 = dateTime35.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        java.util.Date date70 = dateMidnight69.toDate();
        org.joda.time.YearMonthDay yearMonthDay71 = dateMidnight69.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.plus((-1L));
        org.joda.time.Chronology chronology77 = dateMidnight76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.secondOfMinute();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology77);
        org.joda.time.DurationField durationField80 = chronology77.days();
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay71.withChronologyRetainFields(chronology77);
        org.joda.time.Chronology chronology82 = yearMonthDay81.getChronology();
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone86 = dateMidnight83.getZone();
        org.joda.time.DateMidnight dateMidnight87 = yearMonthDay81.toDateMidnight(dateTimeZone86);
        java.util.Set<java.lang.String> strSet88 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean89 = dateTimeZone86.equals((java.lang.Object) strSet88);
        long long91 = dateTimeZone86.nextTransition(14400001L);
        java.lang.String str93 = dateTimeZone86.getNameKey(26L);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime((long) 996, dateTimeZone86);
        org.joda.time.DateTime dateTime95 = dateTime65.withZoneRetainFields(dateTimeZone86);
        org.joda.time.DateTime.Property property96 = dateTime95.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572120548L + "'", long29 == 1644572120548L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 14400001L + "'", long91 == 14400001L);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "UTC" + "'", str93, "UTC");
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        java.lang.String str2 = timeOfDay1.toString();
        int[] intArray3 = timeOfDay1.getValues();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.minusSeconds(35);
        int[] intArray6 = timeOfDay5.getValues();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "T00:00:01.970" + "'", str2, "T00:00:01.970");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 1, 970]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[23, 59, 26, 970]");
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(579);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        gregorianCalendar6.setLenient(false);
        gregorianCalendar6.set(779, 34522, 47, (int) ' ', 122);
        java.util.Date date15 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        boolean boolean24 = date19.before(date23);
        int int25 = date23.getHours();
        int int26 = date23.getMonth();
        boolean boolean27 = date15.after(date23);
        date15.setYear((int) 'a');
        java.util.Date date35 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        boolean boolean44 = date39.before(date43);
        int int45 = date39.getDay();
        int int46 = date39.getHours();
        date39.setSeconds((int) '4');
        java.lang.String str49 = date39.toLocaleString();
        int int50 = date39.getYear();
        boolean boolean51 = date35.before(date39);
        boolean boolean52 = date15.after(date39);
        int int53 = date39.getSeconds();
        int int54 = date39.getTimezoneOffset();
        gregorianCalendar6.setTime(date39);
        gregorianCalendar6.set(809, 25260000, (-19034));
        gregorianCalendar6.setMinimalDaysInFirstWeek(5255);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar6.clear(19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 11 09:43:16 UTC 1997");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Jan 1, 1970 12:00:52 AM" + "'", str49, "Jan 1, 1970 12:00:52 AM");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 70 + "'", int50 == 70);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDate11.getFields();
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfYear();
        org.joda.time.LocalDate localDate15 = property14.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate16 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withCenturyOfEra(56);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withMillis(1644572468833L);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMinimumValue();
        int int12 = yearMonthDay10.getValue(0);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds(34891714);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(5);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay10.plusHours(2040);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay10.withHourOfDay(575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 575 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime20.dayOfYear();
        boolean boolean23 = dateMidnight11.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration58 = interval36.toDuration();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight29.withDurationAdded((org.joda.time.ReadableDuration) duration58, 24);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight11.withDurationAdded((org.joda.time.ReadableDuration) duration58, 19);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        java.util.Date date70 = dateMidnight69.toDate();
        org.joda.time.DateMidnight.Property property71 = dateMidnight69.dayOfWeek();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableDuration66, (org.joda.time.ReadableInstant) dateMidnight69);
        boolean boolean73 = interval65.isAfter((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Duration duration74 = interval72.toDuration();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight62.withDurationAdded((org.joda.time.ReadableDuration) duration74, (int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime8.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfEra(33);
        org.joda.time.LocalTime localTime80 = dateTime79.toLocalTime();
        org.joda.time.DateTime.Property property81 = dateTime79.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        int int20 = localDate15.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property21 = localDate15.yearOfEra();
        long long23 = chronology6.set((org.joda.time.ReadablePartial) localDate15, (long) 29);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(1644572146319L, chronology6);
        org.joda.time.DurationField durationField25 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology6.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644537600029L + "'", long23 == 1644537600029L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        int[] intArray28 = yearMonthDay27.getValues();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.withPeriodAdded(readablePeriod29, 22);
        java.lang.String str32 = yearMonthDay27.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plusYears(5);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean59 = interval55.isBefore((org.joda.time.ReadableInterval) interval58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval55.toPeriod(periodType60);
        org.joda.time.DateTime dateTime62 = dateTime46.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.LocalDate localDate64 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) period61, 6);
        org.joda.time.PeriodType periodType65 = period61.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay27.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.MutablePeriod mutablePeriod67 = period61.toMutablePeriod();
        int[] intArray70 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod67, (long) 41, (long) 292278994);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime72 = dateTime71.withEarlierOffsetAtOverlap();
        java.util.Locale locale73 = null;
        java.util.Calendar calendar74 = dateTime72.toCalendar(locale73);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 3, 9, 11, 18, 953]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1644572597034,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=34,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        java.util.Date date3 = new java.util.Date(2130, 52931126, 34896);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Sep 14 00:00:00 UTC 4415052");
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        boolean boolean19 = dateMidnight16.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property20 = dateMidnight16.centuryOfEra();
        boolean boolean21 = property20.isLeap();
        org.joda.time.DateMidnight dateMidnight22 = property20.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = property20.roundHalfFloorCopy();
        boolean boolean24 = property7.equals((java.lang.Object) property20);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:17.098" + "'", str6, "T09:43:17.098");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYear(24);
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight12.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        java.util.Locale locale10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = property7.setCopy("11", locale10);
        org.joda.time.TimeOfDay timeOfDay12 = property7.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:17.150" + "'", str6, "T09:43:17.150");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "17" + "'", str8, "17");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        java.util.Date date0 = new java.util.Date();
        java.time.Instant instant1 = date0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        boolean boolean10 = date5.before(date9);
        int int11 = date5.getMonth();
        date5.setMonth(0);
        boolean boolean14 = date0.before(date5);
        date5.setYear(34709682);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(1644572157415L);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusYears(1969);
        boolean boolean21 = date5.equals((java.lang.Object) 1969);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:43:17 UTC 2022");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 UTC 34711582");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        int int6 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusMonths(27);
        int int9 = dateMidnight8.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.minus(readableDuration20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = localDate30.toInterval(dateTimeZone31);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay14.withChronologyRetainFields(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.seconds();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight8, chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight45.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTimeAtMidnight();
        int[] intArray51 = yearMonthDay47.getValues();
        int int52 = dateTimeField41.getMaximumValue(readablePartial42, intArray51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime54 = dateTime52.withYear(32772);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.plus((-1L));
        org.joda.time.Chronology chronology62 = dateMidnight61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfMinute();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.LocalDate localDate66 = localDate64.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate68 = localDate64.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        java.lang.String str71 = dateTimeZone70.toString();
        org.joda.time.DateTime dateTime72 = localDate68.toDateTimeAtCurrentTime(dateTimeZone70);
        java.lang.String str73 = dateTimeZone70.toString();
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeZone70.getShortName(0L, locale75);
        long long79 = dateTimeZone70.convertLocalToUTC((long) 45, false);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 51, 1644624000000L, dateTimeZone70);
        int int82 = dateTimeZone70.getOffset((long) 6);
        org.joda.time.DateTime dateTime83 = dateTime54.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime85 = dateTime83.plusDays(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = dateTime83.withDayOfWeek(52958028);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52958028 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTC" + "'", str71, "UTC");
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "UTC" + "'", str73, "UTC");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 45L + "'", long79 == 45L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(6);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 17 + "'", int5 == 17);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        int int16 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTime.Property property17 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        boolean boolean27 = dateMidnight24.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property28 = dateMidnight24.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight24.minusWeeks(17);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime33 = localDate9.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isStandardOffset((long) 1222);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 17 + "'", int16 == 17);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = localDate15.toInterval(dateTimeZone16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        int int21 = period19.get(durationFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight28 = dateTime27.toDateMidnight();
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.minusYears(1970);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight37.withYear(11);
        boolean boolean47 = dateMidnight37.isBefore((long) 28);
        org.joda.time.Interval interval48 = dateMidnight37.toInterval();
        org.joda.time.Interval interval49 = interval34.gap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime.Property property20 = dateTime18.dayOfYear();
        boolean boolean21 = dateMidnight9.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean38 = interval34.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateTime dateTime39 = interval34.getEnd();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean50 = interval42.isAfter((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.Interval interval54 = interval42.withStart((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = interval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration56 = interval34.toDuration();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration56, 24);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight9.withDurationAdded((org.joda.time.ReadableDuration) duration56, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.property(dateTimeFieldType61);
        boolean boolean63 = localDate6.isSupported(dateTimeFieldType61);
        org.joda.time.DateMidnight dateMidnight64 = localDate6.toDateMidnight();
        java.lang.Object obj65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(obj65);
        org.joda.time.DateTime dateTime68 = dateTime66.withCenturyOfEra(34555);
        int int69 = dateMidnight64.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property7.withMaximumValue();
        int int12 = property7.get();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property7.getAsShortText(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property7.getField();
        org.joda.time.TimeOfDay timeOfDay17 = property7.addNoWrapToCopy(99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMillisOfSecond(34660);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34660 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:17.406" + "'", str6, "T09:43:17.406");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(timeOfDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 17 + "'", int12 == 17);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "17" + "'", str14, "17");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("T14:42:11.552");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: T14:42:11.552");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property11.addToCopy((long) 15);
        int int14 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(10);
        boolean boolean17 = property11.equals((java.lang.Object) dateTimeZone16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone16.getName(1161946993740000L, locale19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (-1));
        long long14 = dateTimeZone10.convertUTCToLocal((long) 5);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone10.getName((long) 0, locale16);
        org.joda.time.Interval interval18 = yearMonthDay4.toInterval(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime20.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillisOfSecond(40);
        org.joda.time.DateTime dateTime27 = dateTime20.minusSeconds(925);
        boolean boolean28 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5L + "'", long14 == 5L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        org.joda.time.DateTime.Property property17 = dateTime14.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(70L, chronology9);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology9);
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(87651714038400000L, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfDay();
        long long19 = dateTimeField16.set((long) 581, 584);
        org.joda.time.DurationField durationField20 = dateTimeField16.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35040581L + "'", long19 == 35040581L);
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        calendar0.setMinimalDaysInFirstWeek(3);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar0.getGreatestMinimum(999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=3,ERA=1,YEAR=42,MONTH=-292275054,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=40,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.plusWeeks((int) ' ');
        boolean boolean18 = dateMidnight16.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.minus(readableDuration19);
        int int21 = dateMidnight16.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) (-1));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        int int26 = dateMidnight24.getYearOfEra();
        boolean boolean27 = dateMidnight16.isEqual((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.minus((long) 15);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight16.plusMonths(70);
        boolean boolean32 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.monthOfYear();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.minus(readableDuration38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        boolean boolean42 = dateMidnight40.isEqual(1644572146319L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readableDuration45);
        org.joda.time.DateTime dateTime48 = dateTime44.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) (-1));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.minus(readablePeriod54);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay57.minusMinutes(1970);
        org.joda.time.Chronology chronology60 = timeOfDay57.getChronology();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minus((long) (-1));
        org.joda.time.Chronology chronology64 = dateMidnight63.getChronology();
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.minus(readablePeriod66);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay67.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay69.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay69.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay73.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone78);
        java.util.Date date80 = dateMidnight79.toDate();
        org.joda.time.DateMidnight.Property property81 = dateMidnight79.dayOfWeek();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableDuration76, (org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean86 = interval82.isBefore((org.joda.time.ReadableInterval) interval85);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = interval82.toPeriod(periodType87);
        org.joda.time.TimeOfDay timeOfDay89 = timeOfDay75.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.PeriodType periodType90 = period88.getPeriodType();
        int[] intArray93 = chronology60.get((org.joda.time.ReadablePeriod) period88, (long) (-1), (long) 24);
        org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadablePeriod) period88);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight40.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.DateMidnight dateMidnight98 = dateMidnight96.minusMonths(996);
        int int99 = dateMidnight96.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 33 + "'", int21 == 33);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(dateMidnight96);
        org.junit.Assert.assertNotNull(dateMidnight98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1969 + "'", int99 == 1969);
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusDays(33);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay4.toDateMidnight(dateTimeZone12);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withSecondOfMinute(31);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay14 = property12.addWrapFieldToCopy(51);
        java.util.Locale locale15 = null;
        int int16 = property12.getMaximumShortTextLength(locale15);
        org.joda.time.TimeOfDay timeOfDay18 = property12.addNoWrapToCopy(29);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate11.toDateTime(localTime18);
        java.util.Date date20 = localDate11.toDate();
        org.joda.time.LocalDate localDate22 = localDate11.withWeekyear(36);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.monthOfYear();
        org.joda.time.DateTime dateTime28 = property27.getDateTime();
        java.lang.String str29 = property27.toString();
        org.joda.time.DateTime dateTime30 = property27.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.property(dateTimeFieldType40);
        int int42 = dateTime34.get(dateTimeFieldType40);
        org.joda.time.DateTime.Property property43 = dateTime30.property(dateTimeFieldType40);
        boolean boolean44 = localDate22.isSupported(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[monthOfYear]" + "'", str29, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        int int6 = dateTime4.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((long) (-1));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.LocalTime localTime21 = timeOfDay20.toLocalTime();
        java.lang.String str22 = timeOfDay20.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.minus(readablePeriod23);
        int int25 = timeOfDay20.getMinuteOfHour();
        boolean boolean26 = dateMidnight15.equals((java.lang.Object) int25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight15.plus(readablePeriod27);
        boolean boolean29 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 17 + "'", int5 == 17);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "T09:43:17.699" + "'", str22, "T09:43:17.699");
        org.junit.Assert.assertNotNull(timeOfDay24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 43 + "'", int25 == 43);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(5);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean29 = interval25.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval25.toPeriod(periodType30);
        org.joda.time.DateTime dateTime32 = dateTime16.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime12.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        java.util.Date date35 = dateTime33.toDate();
        org.joda.time.DateTime dateTime37 = dateTime33.minus(1644537600000L);
        org.joda.time.DateTime dateTime39 = dateTime33.withWeekOfWeekyear(44);
        org.joda.time.DateTime.Property property40 = dateTime33.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 01 09:43:17 UTC 32770");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfYear();
        boolean boolean8 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateTime dateTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(34620);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(34890);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone15);
        java.lang.String str20 = dateTimeZone15.getNameKey((long) 2022);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone15);
        long long23 = dateTimeZone15.convertUTCToLocal(3516860307634L);
        java.lang.String str24 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone15);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone15.getName((-2219511600000L), locale27);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3516860307634L + "'", long23 == 3516860307634L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean6 = dateTimeZone5.isFixed();
        boolean boolean7 = dateTimeZone5.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getName((long) (-391), locale9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime4.toMutableDateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime12 = dateTime4.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.LocalDate localDate19 = localDate13.withWeekyear(19);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.joda.time.LocalDate localDate21 = property20.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate44 = localDate38.withWeekyear(19);
        org.joda.time.LocalTime localTime45 = null;
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str49 = dateTimeZone47.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime50 = localDate38.toDateTime(localTime45, dateTimeZone47);
        java.lang.String str52 = dateTimeZone47.getName(1000L);
        org.joda.time.DateTime dateTime53 = yearMonthDay26.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.Interval interval54 = localDate21.toInterval(dateTimeZone47);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) ' ', chronology55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        java.util.Date date60 = dateMidnight59.toDate();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.minusWeeks(22);
        int int63 = dateMidnight59.getMillisOfDay();
        boolean boolean64 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plus((-1L));
        org.joda.time.Chronology chronology70 = dateMidnight69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfMinute();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.days();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.centuryOfEra();
        org.joda.time.DurationField durationField76 = chronology70.millis();
        org.joda.time.MutableDateTime mutableDateTime77 = dateMidnight59.toMutableDateTime(chronology70);
        org.joda.time.DateTimeField dateTimeField78 = chronology70.millisOfSecond();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (-1), chronology70);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.DateTimeField dateTimeField81 = chronology70.minuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval2.isAfter((long) 23);
        long long17 = interval2.getStartMillis();
        org.joda.time.DateTime dateTime18 = interval2.getStart();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.dayOfWeek();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean29 = interval21.isAfter((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = interval28.withPeriodAfterStart(readablePeriod30);
        org.joda.time.Duration duration32 = interval28.toDuration();
        org.joda.time.Interval interval33 = interval28.toInterval();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfDay();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) 29, (long) 2022, chronology41);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.YearMonthDay yearMonthDay52 = dateMidnight50.toYearMonthDay();
        int[] intArray53 = yearMonthDay52.getValues();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay52.withPeriodAdded(readablePeriod54, 22);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        java.util.Date date63 = dateMidnight62.toDate();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.dayOfWeek();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableDuration59, (org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean69 = interval65.isBefore((org.joda.time.ReadableInterval) interval68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = interval65.toPeriod(periodType70);
        int int73 = period71.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay56.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight45, (org.joda.time.ReadablePeriod) period71);
        org.joda.time.Interval interval76 = interval44.withPeriodAfterStart((org.joda.time.ReadablePeriod) period71);
        boolean boolean77 = interval28.abuts((org.joda.time.ReadableInterval) interval44);
        boolean boolean78 = interval2.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Interval interval79 = interval2.toInterval();
        org.joda.time.DateTime dateTime80 = interval79.getEnd();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.LocalDate localDate13 = property10.withMinimumValue();
        org.joda.time.LocalDate localDate14 = property10.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.LocalDate localDate32 = localDate26.withWeekyear(19);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfYear();
        java.lang.String str35 = localDate32.toString("24");
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 10);
        int int46 = localDate43.getYearOfCentury();
        org.joda.time.LocalTime localTime47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plus((-1L));
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.secondOfMinute();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.LocalDate localDate57 = localDate55.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate59 = localDate55.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.secondOfMinute();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate71 = localDate67.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str74 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime75 = localDate71.toDateTimeAtCurrentTime(dateTimeZone73);
        boolean boolean76 = dateTimeZone73.isFixed();
        org.joda.time.DateTime dateTime77 = localDate59.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.DateTime dateTime78 = localDate43.toDateTime(localTime47, dateTimeZone73);
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight80 = localDate32.toDateMidnight(dateTimeZone73);
        org.joda.time.DateTime dateTime81 = localDate14.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.DateTime dateTime82 = dateTime81.toDateTime();
        org.joda.time.DateTime dateTime83 = dateTime81.toDateTimeISO();
        org.joda.time.DateTime dateTime85 = dateTime83.plusMinutes(235);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3283200000L + "'", long12 == 3283200000L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "24" + "'", str35, "24");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.DurationField durationField13 = property10.getLeapDurationField();
        int int14 = property10.get();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3283200000L + "'", long12 == 3283200000L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(70L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(chronology14);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        int int20 = property19.getMaximumValueOverall();
        org.joda.time.DateTime dateTime21 = property19.withMinimumValue();
        java.lang.String str22 = property19.toString();
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        java.lang.String str25 = dateTimeField23.getAsText(1644565091L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1670750538096L + "'", long18 == 1670750538096L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[weekyear]" + "'", str22, "Property[weekyear]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date3.getDay();
        int int10 = date3.getHours();
        java.lang.String str11 = date3.toGMTString();
        date3.setMinutes(1);
        java.lang.String str14 = date3.toGMTString();
        date3.setHours(34895);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Dec 24 23:01:00 UTC 1973");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str11, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1 Jan 1970 00:01:00 GMT" + "'", str14, "1 Jan 1970 00:01:00 GMT");
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minusYears(1970);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.property(dateTimeFieldType13);
        int int15 = dateMidnight4.get(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight4.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = localDate26.toInterval(dateTimeZone27);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.Period period30 = interval28.toPeriod();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weekyears();
        int int32 = period30.get(durationFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.minusYears(1970);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 57);
        org.joda.time.Chronology chronology48 = yearMonthDay10.getChronology();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        int int17 = localDate14.getDayOfMonth();
        int int18 = localDate14.getYear();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDate14, (int) (short) 0, locale20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField6.getAsShortText((long) (short) 1, locale23);
        int int25 = dateTimeField6.getMaximumValue();
        long long27 = dateTimeField6.roundCeiling((long) 46);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField6.getAsShortText((long) 44, locale29);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Jan" + "'", str24, "Jan");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2678400000L + "'", long27 == 2678400000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Jan" + "'", str30, "Jan");
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.halfdayOfDay();
        int int10 = dateTimeField9.getMaximumValue();
        int int12 = dateTimeField9.getLeapAmount((long) 131);
        int int14 = dateTimeField9.get(1000L);
        boolean boolean15 = dateTimeField9.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy((long) 6);
        int int12 = property8.get();
        org.joda.time.DateMidnight dateMidnight13 = property8.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis(70L);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        boolean boolean12 = dateTimeFieldType5.isSupported(chronology9);
        org.joda.time.DurationField durationField13 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.DateTime.Property property28 = dateTime26.dayOfYear();
        boolean boolean29 = dateMidnight17.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean46 = interval42.isBefore((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTime dateTime47 = interval42.getEnd();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.dayOfWeek();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54);
        boolean boolean58 = interval50.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.Interval interval62 = interval50.withStart((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = interval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration64 = interval42.toDuration();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight35.withDurationAdded((org.joda.time.ReadableDuration) duration64, 24);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight17.withDurationAdded((org.joda.time.ReadableDuration) duration64, 19);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone74);
        java.util.Date date76 = dateMidnight75.toDate();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfWeek();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableDuration72, (org.joda.time.ReadableInstant) dateMidnight75);
        boolean boolean79 = interval71.isAfter((org.joda.time.ReadableInterval) interval78);
        org.joda.time.Duration duration80 = interval78.toDuration();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight68.withDurationAdded((org.joda.time.ReadableDuration) duration80, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone83 = dateMidnight82.getZone();
        org.joda.time.Chronology chronology84 = chronology9.withZone(dateTimeZone83);
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        java.lang.String str87 = dateTimeZone86.toString();
        long long89 = dateTimeZone83.getMillisKeepLocal(dateTimeZone86, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(118800000, 52942, (-20055), 52935, 999, dateTimeZone83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52935 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "UTC" + "'", str87, "UTC");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate21 = property18.addToCopy(226);
        java.lang.String str22 = property18.getName();
        org.joda.time.DurationField durationField23 = property18.getLeapDurationField();
        int int24 = property18.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "dayOfYear" + "'", str22, "dayOfYear");
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property4.getAsText(locale6);
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday" + "'", str7, "Thursday");
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime4.millisOfDay();
        org.joda.time.DateTime.Property property9 = dateTime4.dayOfWeek();
        boolean boolean10 = property9.isLeap();
        org.joda.time.Interval interval11 = property9.toInterval();
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) 617);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        long long25 = chronology20.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.yearOfEra();
        org.joda.time.DurationField durationField27 = chronology20.days();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateTimeField dateTimeField29 = chronology20.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight14.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField31 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology20.weekyears();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime12, chronology20);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 18 + "'", int5 == 18);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 292279042L + "'", long25 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01");
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minus((long) (-1));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minus(readablePeriod10);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusMinutes(1);
        int int14 = timeOfDay13.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withHourOfDay(23);
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(1644572203083L, chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime1.withChronology(chronology17);
        org.joda.time.DateMidnight dateMidnight22 = dateTime1.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42 + "'", int14 == 42);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime.Property property16 = dateTime14.dayOfYear();
        boolean boolean17 = dateMidnight5.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfWeek();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean34 = interval30.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTime dateTime35 = interval30.getEnd();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        boolean boolean46 = interval38.isAfter((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((-1L), dateTimeZone48);
        org.joda.time.Interval interval50 = interval38.withStart((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = interval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration52 = interval30.toDuration();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration52, 24);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration52, 19);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.DateMidnight.Property property65 = dateMidnight63.dayOfWeek();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableDuration60, (org.joda.time.ReadableInstant) dateMidnight63);
        boolean boolean67 = interval59.isAfter((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration68 = interval66.toDuration();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight56.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration68, readableInstant71);
        org.joda.time.DateTime dateTime74 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration68, 27);
        org.joda.time.DateTime.Property property75 = dateTime74.weekOfWeekyear();
        long long76 = property75.remainder();
        org.joda.time.DateTime dateTime77 = property75.getDateTime();
        java.util.Locale locale78 = null;
        java.lang.String str79 = property75.getAsShortText(locale78);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 18 + "'", int15 == 18);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 259199999L + "'", long76 == 259199999L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight57 = property55.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withCenturyOfEra(5);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 18 + "'", int12 == 18);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy(1644572402458L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1644572402458");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(2831500800013L);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.seconds();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology5);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        java.lang.String str10 = chronology9.toString();
        org.joda.time.DurationField durationField11 = chronology9.centuries();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        long long3 = dateTimeZone1.convertUTCToLocal((-1028665186000L));
        int int5 = dateTimeZone1.getOffset(36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1028629186000L) + "'", long3 == (-1028629186000L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        java.util.Date date1 = new java.util.Date((-19L));
        org.junit.Assert.assertEquals(date1.toString(), "Wed Dec 31 23:59:59 UTC 1969");
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        long long10 = dateTimeField8.roundHalfEven((long) 34);
        long long12 = dateTimeField8.roundHalfEven((long) 1);
        long long15 = dateTimeField8.add(292279042L, 354);
        long long18 = dateTimeField8.getDifferenceAsLong(1644572155702L, (long) (-292275054));
        long long20 = dateTimeField8.roundCeiling(1644572565989L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 30877879042L + "'", long15 == 30877879042L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19037L + "'", long18 == 19037L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644624000000L + "'", long20 == 1644624000000L);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.centuryOfEra();
        int int11 = dateTimeField10.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField10.add((long) 21600, 91031175067980000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 9103117506798000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.getTimeOfDay();
        org.joda.time.LocalTime localTime16 = timeOfDay15.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        boolean boolean24 = dateMidnight21.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property25 = dateMidnight21.centuryOfEra();
        boolean boolean26 = property25.isLeap();
        org.joda.time.DateMidnight dateMidnight27 = property25.getDateMidnight();
        java.util.Locale locale29 = null;
        org.joda.time.DateMidnight dateMidnight30 = property25.setCopy("19", locale29);
        org.joda.time.DateTime dateTime31 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.plusWeeks(2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusWeeks(0);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 52, 18, 547]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusDays(12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withDurationAdded(52L, 24);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withYear(34585);
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight12.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 16);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1, dateTimeZone14);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 21, 281723794000L, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime6.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime6.minus((long) 1999);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        java.util.Date date5 = new java.util.Date(52, 34585, (int) (short) 0, 17, (-30801));
        date5.setMinutes(484);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 10 15:04:00 UTC 4834");
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.minusMillis(557);
        java.lang.String str5 = timeOfDay1.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T00:00:01.970" + "'", str5, "T00:00:01.970");
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.monthOfYear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.minus(readableDuration12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateTime13, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay6.withChronologyRetainFields(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weeks();
        org.joda.time.DurationField durationField29 = chronology25.weeks();
        org.joda.time.DurationField durationField30 = chronology25.years();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) -1, 1644789600029L, chronology25);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology42 = dateTimeFormatter6.getChronology();
        org.joda.time.Chronology chronology43 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter6.withDefaultYear(0);
        boolean boolean47 = dateTimeFormatter6.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNull(chronology42);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertNull(dateTimePrinter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.parse("70");
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone34);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime38 = localDate20.toDateTimeAtCurrentTime(dateTimeZone34);
        boolean boolean40 = localDate20.equals((java.lang.Object) 1000L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime42.monthOfYear();
        org.joda.time.DateTime dateTime46 = property45.withMaximumValue();
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes(21);
        org.joda.time.DateTime.Property property49 = dateTime46.weekyear();
        int int50 = property49.getMinimumValueOverall();
        org.joda.time.DateTime dateTime51 = property49.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears(5);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        java.util.Date date74 = dateMidnight73.toDate();
        org.joda.time.DateMidnight.Property property75 = dateMidnight73.dayOfWeek();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableDuration70, (org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean80 = interval76.isBefore((org.joda.time.ReadableInterval) interval79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval76.toPeriod(periodType81);
        org.joda.time.DateTime dateTime83 = dateTime67.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.LocalDate localDate85 = localDate63.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 6);
        org.joda.time.DateTime dateTime86 = dateTime51.plus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.LocalDate localDate87 = localDate20.plus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.Period period89 = period82.toPeriod();
        org.joda.time.Period period90 = period89.toPeriod();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) period89, 582);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(dateMidnight92);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        boolean boolean16 = localDate7.isSupported(durationFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.LocalDate localDate34 = localDate28.withWeekyear(19);
        org.joda.time.LocalDate localDate35 = localDate7.withFields((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateMidnight dateMidnight36 = localDate34.toDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        int int11 = dateTimeField8.getDifference((-1028665186000L), 366L);
        long long14 = dateTimeField8.add((long) 16, 366L);
        long long17 = dateTimeField8.getDifferenceAsLong(87651714038400000L, 1644624000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField8.getType();
        boolean boolean19 = dateTimeField8.isSupported();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-391) + "'", int11 == (-391));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 962409600016L + "'", long14 == 962409600016L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 33330241L + "'", long17 == 33330241L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        java.util.Date date5 = new java.util.Date(32769, 33330867, 2, (int) (byte) 10, (-391));
        int int6 = date5.getTimezoneOffset();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Apr 02 03:29:00 UTC 2812241");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval6.withPeriodAfterStart(readablePeriod28);
        org.joda.time.Interval interval30 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = localDate38.toInterval(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        boolean boolean42 = interval30.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean51 = interval49.isAfter(366L);
        boolean boolean52 = interval40.equals((java.lang.Object) boolean51);
        org.joda.time.Chronology chronology53 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfMonth();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight10 = property8.getDateMidnight();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        org.joda.time.DateMidnight dateMidnight13 = property8.addToCopy(43);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = property8.setCopy("T09:39:28.644", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:39:28.644\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(23014L, 611193600000L);
        org.joda.time.Interval interval3 = interval2.toInterval();
        org.joda.time.Interval interval5 = interval2.withStartMillis(0L);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval12.getEnd();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.Interval interval32 = interval20.withStart((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = interval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration34 = interval12.toDuration();
        org.joda.time.Interval interval36 = interval12.withEndMillis(1092273868569599873L);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.hours();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfDay();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) 29, (long) 2022, chronology45);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight54.toYearMonthDay();
        int[] intArray57 = yearMonthDay56.getValues();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay56.withPeriodAdded(readablePeriod58, 22);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        java.util.Date date67 = dateMidnight66.toDate();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.dayOfWeek();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableDuration63, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean73 = interval69.isBefore((org.joda.time.ReadableInterval) interval72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = interval69.toPeriod(periodType74);
        int int77 = period75.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay60.plus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadablePeriod) period75);
        org.joda.time.Interval interval80 = interval48.withPeriodAfterStart((org.joda.time.ReadablePeriod) period75);
        org.joda.time.PeriodType periodType81 = period75.getPeriodType();
        org.joda.time.Period period82 = mutableInterval37.toPeriod(periodType81);
        org.joda.time.Interval interval83 = interval2.overlap((org.joda.time.ReadableInterval) mutableInterval37);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        boolean boolean22 = dateMidnight19.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property23 = dateMidnight19.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight19.minusWeeks(17);
        org.joda.time.DateMidnight.Property property26 = dateMidnight19.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = property26.addToCopy((long) 15);
        int int29 = property26.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(10);
        boolean boolean32 = property26.equals((java.lang.Object) dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = property26.addToCopy(27833L);
        boolean boolean35 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date3);
        int int11 = localDate10.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate10.withYearOfCentury(560);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 560 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withChronology(chronology12);
        boolean boolean17 = dateTimeFormatter6.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter6.getParser();
        java.lang.StringBuffer stringBuffer19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus((long) (-1));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.LocalTime localTime25 = timeOfDay24.toLocalTime();
        java.lang.String str26 = timeOfDay24.toString();
        org.joda.time.TimeOfDay.Property property27 = timeOfDay24.secondOfMinute();
        java.lang.String str28 = property27.getAsText();
        java.util.Locale locale30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = property27.setCopy("11", locale30);
        org.joda.time.TimeOfDay timeOfDay32 = property27.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.plusMinutes(35);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer19, (org.joda.time.ReadablePartial) timeOfDay34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "T09:43:19.053" + "'", str26, "T09:43:19.053");
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "19" + "'", str28, "19");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 52935);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("T09:43:03.085");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minus(readablePeriod11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = timeOfDay12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTime3, dateTimeZone14);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration29 = interval27.toDuration();
        org.joda.time.DateTime dateTime31 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration29, 20);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfMonth(12);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minus((long) (-1));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) localTime34, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.LocalDate localDate16 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean25 = dateTime23.isSupported(dateTimeFieldType24);
        boolean boolean26 = dateTime17.isSupported(dateTimeFieldType24);
        org.joda.time.DateTime.Property property27 = dateTime17.millisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(chronology5);
        int int10 = dateMidnight9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(97L);
        org.joda.time.LocalDate localDate2 = dateMidnight1.toLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks(22);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(27);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property8 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.Interval interval10 = property8.toInterval();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minus(readablePeriod11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minusMinutes(1970);
        org.joda.time.Chronology chronology17 = timeOfDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) (-1));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minus(readablePeriod23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay26.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean43 = interval39.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval39.toPeriod(periodType44);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay32.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.PeriodType periodType47 = period45.getPeriodType();
        int[] intArray50 = chronology17.get((org.joda.time.ReadablePeriod) period45, (long) (-1), (long) 24);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime53 = dateTime5.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime55 = dateTime5.withSecondOfMinute(39);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = localDate11.getDayOfWeek();
        int int17 = localDate11.getEra();
        org.joda.time.Chronology chronology18 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight21.toYearMonthDay();
        int[] intArray24 = yearMonthDay23.getValues();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.withPeriodAdded(readablePeriod25, 22);
        java.lang.String str28 = yearMonthDay23.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears(5);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean55 = interval51.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval51.toPeriod(periodType56);
        org.joda.time.DateTime dateTime58 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate60 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 6);
        org.joda.time.PeriodType periodType61 = period57.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay23.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutablePeriod mutablePeriod63 = period57.toMutablePeriod();
        org.joda.time.LocalDate localDate64 = localDate11.plus((org.joda.time.ReadablePeriod) mutablePeriod63);
        int int65 = localDate11.getWeekyear();
        int int66 = localDate11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01" + "'", str28, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20 + "'", int66 == 20);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval12.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime21 = dateTime3.plusYears(46);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        int int23 = dateMidnight22.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight22.getZone();
        java.lang.String str25 = dateTimeZone24.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 484);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(34833);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withZoneUTC();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight14, readablePeriod15);
        org.joda.time.DateTime dateTime17 = interval16.getStart();
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        org.joda.time.DateTime.Property property19 = dateTime17.millisOfSecond();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer8, (org.joda.time.ReadableInstant) dateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.withMinimumValue();
        int int12 = property8.get();
        int int13 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minusYears(1970);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        boolean boolean20 = interval12.isAfter((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = interval19.withPeriodAfterStart(readablePeriod21);
        boolean boolean23 = dateMidnight4.equals((java.lang.Object) readablePeriod21);
        org.joda.time.DateTime dateTime24 = dateMidnight4.toDateTimeISO();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Interval interval37 = interval34.withPeriodAfterStart(readablePeriod36);
        long long38 = interval34.toDurationMillis();
        org.joda.time.Interval interval39 = interval34.toInterval();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.DateMidnight.Property property45 = dateMidnight43.dayOfWeek();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean50 = interval46.isBefore((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTime dateTime51 = interval46.getEnd();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        boolean boolean62 = interval54.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.Interval interval66 = interval54.withStart((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean67 = interval46.overlaps((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Duration duration68 = interval46.toDuration();
        org.joda.time.Interval interval69 = interval39.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableDuration) duration68);
        long long71 = interval70.getEndMillis();
        org.joda.time.Interval interval73 = interval70.withEndMillis(1670750280000L);
        java.lang.String str74 = interval73.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-60522681600000L) + "'", long71 == (-60522681600000L));
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0052-02-11T00:00:00.000Z/2022-12-11T09:18:00.000Z" + "'", str74, "0052-02-11T00:00:00.000Z/2022-12-11T09:18:00.000Z");
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.plusHours(45);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay4.plusSeconds(34714896);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight11.getZone();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.era();
        org.joda.time.DateMidnight dateMidnight16 = property15.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight18 = property15.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight dateMidnight19 = property15.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField27.getAsText((int) (short) 1, locale29);
        java.lang.String str32 = dateTimeField27.getAsShortText((long) 24);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight35.toYearMonthDay();
        int[] intArray38 = yearMonthDay37.getValues();
        org.joda.time.LocalDate localDate39 = yearMonthDay37.toLocalDate();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.plus(readableDuration43);
        org.joda.time.DateTime dateTime46 = dateTime42.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime48 = dateTime42.minusDays((int) (byte) 10);
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration40, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = localDate39.equals((java.lang.Object) readableDuration40);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        int[] intArray56 = yearMonthDay55.getValues();
        int int57 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localDate39, intArray56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plus((-1L));
        org.joda.time.Chronology chronology75 = dateMidnight74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfMinute();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.LocalDate localDate79 = localDate77.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate81 = localDate77.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        java.lang.String str84 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime85 = localDate81.toDateTimeAtCurrentTime(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isFixed();
        org.joda.time.DateTime dateTime87 = localDate69.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.LocalDate localDate89 = localDate69.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone91 = null;
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone91);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property94 = dateMidnight92.property(dateTimeFieldType93);
        org.joda.time.LocalDate.Property property95 = localDate89.property(dateTimeFieldType93);
        org.joda.time.LocalDate localDate97 = localDate39.withField(dateTimeFieldType93, 9);
        org.joda.time.DateMidnight.Property property98 = dateMidnight19.property(dateTimeFieldType93);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = timeOfDay4.get(dateTimeFieldType93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "24" + "'", str32, "24");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 24 + "'", int57 == 24);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "UTC" + "'", str84, "UTC");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(localDate97);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.LocalDate localDate26 = localDate20.withWeekyear(19);
        org.joda.time.LocalTime localTime27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime32 = localDate20.toDateTime(localTime27, dateTimeZone29);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime34 = localDate8.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (-1));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minus(readablePeriod12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight6.toMutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate35 = localDate31.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone37);
        boolean boolean40 = dateTimeZone37.isFixed();
        org.joda.time.DateTime dateTime41 = localDate23.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = localDate7.toDateTime(localTime11, dateTimeZone37);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds(15);
        org.joda.time.DateTime dateTime46 = dateTime42.minusMonths(2);
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour(16);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfYear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate50 = localDate44.withWeekyear(19);
        org.joda.time.LocalTime localTime51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime56 = localDate44.toDateTime(localTime51, dateTimeZone53);
        java.lang.String str58 = dateTimeZone53.getName(1000L);
        org.joda.time.DateTime dateTime59 = yearMonthDay32.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.Interval interval60 = localDate27.toInterval(dateTimeZone53);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight7.withChronology(chronology61);
        org.joda.time.DateMidnight dateMidnight63 = org.joda.time.DateMidnight.now(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long70 = chronology61.getDateTimeMillis(0L, 513, 34753, 31, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 513 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        long long34 = chronology23.add(10035038L, 1640995199609L, 46);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withYear(34629952);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 75485789217052L + "'", long34 == 75485789217052L);
        org.junit.Assert.assertNotNull(yearMonthDay37);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfCentury(5);
        org.joda.time.LocalDate localDate20 = localDate18.withYear((-36962));
        int int21 = localDate20.getEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(22, 11, 7, 7, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.plus(readableDuration31);
        org.joda.time.DateTime dateTime34 = dateTime30.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime36 = dateTime30.minusDays((int) (byte) 10);
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = dateTime36.isEqualNow();
        org.joda.time.DateTime dateTime40 = dateTime36.withWeekOfWeekyear(11);
        boolean boolean41 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = localDate49.toInterval(dateTimeZone50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.Period period53 = interval51.toPeriod();
        org.joda.time.DateTime dateTime55 = dateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period53, (int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.millis();
        boolean boolean57 = period53.isSupported(durationFieldType56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate59 = localDate20.withFieldAdded(durationFieldType56, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.property(dateTimeFieldType3);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight2);
        int int6 = timeOfDay5.size();
        org.joda.time.Chronology chronology7 = timeOfDay5.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 1022);
        org.joda.time.DateTime.Property property34 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        org.joda.time.DateTime dateTime36 = property34.roundHalfFloorCopy();
        java.lang.String str37 = property34.getAsText();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        int int12 = dateTime4.getMinuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime4.withWeekyear(41);
        org.joda.time.DateTime dateTime16 = dateTime4.minusYears(34896167);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(5);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.dayOfWeek();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean33 = interval29.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = interval29.toPeriod(periodType34);
        org.joda.time.DateTime dateTime36 = dateTime20.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = yearMonthDay38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime36.withZoneRetainFields(dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getName(292278994L);
        org.joda.time.DateTime dateTime44 = dateTime16.toDateTime(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.DateMidnight.Property property9 = dateMidnight7.dayOfWeek();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7);
        boolean boolean11 = interval3.isAfter((org.joda.time.ReadableInterval) interval10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval10.withPeriodAfterStart(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Interval interval15 = interval13.withPeriodAfterStart(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.centuries();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(70L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(chronology30);
        org.joda.time.Interval interval34 = interval15.withChronology(chronology30);
        org.joda.time.Chronology chronology35 = chronology30.withUTC();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) 1439, chronology30);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withMillis((long) 28);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withCenturyOfEra(1999);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        int int10 = localDate7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        int[] intArray16 = yearMonthDay15.getValues();
        boolean boolean17 = localDate7.isAfter((org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfWeek();
        org.joda.time.LocalDate.Property property19 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate7.toDateTimeAtMidnight(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setSeconds(30);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date0);
        org.joda.time.Chronology chronology5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((java.lang.Object) timeOfDay4, chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:43:30 UTC 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 9 + "'", int1 == 9);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        int int3 = dateMidnight2.getYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.era();
        long long8 = dateTimeField6.roundHalfFloor(719528L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135596800000L) + "'", long8 == (-62135596800000L));
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-1659458699000L));
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        int int6 = dateMidnight4.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime.Property property20 = dateTime18.dayOfYear();
        boolean boolean21 = dateMidnight9.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean38 = interval34.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateTime dateTime39 = interval34.getEnd();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean50 = interval42.isAfter((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((-1L), dateTimeZone52);
        org.joda.time.Interval interval54 = interval42.withStart((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = interval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration56 = interval34.toDuration();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration56, 24);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight9.withDurationAdded((org.joda.time.ReadableDuration) duration56, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.property(dateTimeFieldType61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean64 = dateMidnight60.isSupported(dateTimeFieldType63);
        boolean boolean65 = dateMidnight4.isSupported(dateTimeFieldType63);
        boolean boolean66 = dateTime1.isSupported(dateTimeFieldType63);
        org.joda.time.LocalDate localDate67 = dateTime1.toLocalDate();
        int int68 = dateTime1.getEra();
        org.joda.time.DateTime dateTime69 = dateTime1.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.LocalDate localDate17 = property14.addToCopy(32);
        org.joda.time.LocalDate localDate18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate19 = property14.roundCeilingCopy();
        int int20 = localDate19.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "20" + "'", str15, "20");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withWeekOfWeekyear(21);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        int int18 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime21 = property19.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime21.plus((long) 44);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) 22);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight37.toYearMonthDay();
        int[] intArray40 = yearMonthDay39.getValues();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.withPeriodAdded(readablePeriod41, 22);
        java.lang.String str44 = yearMonthDay39.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(5);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval67.toPeriod(periodType72);
        org.joda.time.DateTime dateTime74 = dateTime58.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDate localDate76 = localDate54.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 6);
        org.joda.time.PeriodType periodType77 = period73.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay39.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.MutablePeriod mutablePeriod79 = period73.toMutablePeriod();
        org.joda.time.DateTime dateTime80 = dateTime32.plus((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight8.plus((org.joda.time.ReadablePeriod) mutablePeriod79);
        int int82 = dateMidnight8.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 370 + "'", int82 == 370);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.monthOfYear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime2.minus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime2.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime2.withField(dateTimeFieldType9, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.YearMonthDay yearMonthDay16 = dateMidnight14.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.monthOfYear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.minus(readableDuration22);
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = localDate32.toInterval(dateTimeZone33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, chronology35);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay16.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType9.getField(chronology35);
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(chronology35);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((-60522398665211L), chronology35);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) (byte) 10);
        int int51 = localDate48.getYearOfCentury();
        org.joda.time.LocalTime localTime52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus((-1L));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfMinute();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate62 = localDate60.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate64 = localDate60.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plus((-1L));
        org.joda.time.Chronology chronology70 = dateMidnight69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfMinute();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.LocalDate localDate74 = localDate72.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate76 = localDate72.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        java.lang.String str79 = dateTimeZone78.toString();
        org.joda.time.DateTime dateTime80 = localDate76.toDateTimeAtCurrentTime(dateTimeZone78);
        boolean boolean81 = dateTimeZone78.isFixed();
        org.joda.time.DateTime dateTime82 = localDate64.toDateTimeAtCurrentTime(dateTimeZone78);
        org.joda.time.DateTime dateTime83 = localDate48.toDateTime(localTime52, dateTimeZone78);
        java.util.TimeZone timeZone84 = dateTimeZone78.toTimeZone();
        long long86 = dateTimeZone78.previousTransition((-1028665186000L));
        long long89 = dateTimeZone78.convertLocalToUTC(1655717759L, true);
        org.joda.time.Chronology chronology90 = chronology35.withZone(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1028665186000L) + "'", long86 == (-1028665186000L));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1655717759L + "'", long89 == 1655717759L);
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays(0);
        org.joda.time.DateTime dateTime17 = dateTime12.plusMillis(100);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths(32769);
        boolean boolean31 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime33 = dateTime17.plusHours(800);
        org.joda.time.DateTime dateTime35 = dateTime17.plusMinutes(32769);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int11 = date3.getDate();
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromDateFields(date3);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMillis(0);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusMinutes(59);
        java.lang.String str14 = timeOfDay10.toString();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 52, 20, 20]");
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "T00:52:20.020" + "'", str14, "T00:52:20.020");
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        int int15 = localDate12.getYearOfCentury();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime46 = localDate28.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate12.toDateTime(localTime16, dateTimeZone42);
        java.util.TimeZone timeZone48 = dateTimeZone42.toTimeZone();
        calendar4.setTimeZone(timeZone48);
        calendar0.setTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone48);
        int int54 = calendar52.getMinimum((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            calendar52.roll(31, 34555);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572600061,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=61,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572600061,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=61,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572600061,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=61,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readableDuration15);
        int int17 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTimeISO();
        int int22 = dateTime4.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Instant instant23 = dateTime4.toInstant();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) instant23);
        int int25 = localDate24.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusSeconds(4);
        org.joda.time.DateTime dateTime29 = dateTime8.plusDays(56);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate8.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.LocalDate localDate18 = localDate12.withWeekyear(19);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate37.withWeekyear(19);
        org.joda.time.LocalTime localTime44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime49 = localDate37.toDateTime(localTime44, dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getName(1000L);
        org.joda.time.DateTime dateTime52 = yearMonthDay25.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.Interval interval53 = localDate20.toInterval(dateTimeZone46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) ' ', chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.era();
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long61 = dateTimeField57.set((long) 5, "", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withWeekOfWeekyear(21);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withYearOfEra(49);
        int int11 = dateMidnight10.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withFieldAdded(durationFieldType12, 32772);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withPeriodAdded(readablePeriod15, 34745483);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTime dateTime19 = localDate11.toDateTime(localTime18);
        java.util.Date date20 = localDate11.toDate();
        java.lang.String str21 = date20.toGMTString();
        date20.setDate(5222);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon May 19 00:00:00 UTC 2036");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11 Feb 2022 00:00:00 GMT" + "'", str21, "11 Feb 2022 00:00:00 GMT");
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval12.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDate localDate20 = dateTime3.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.era();
        org.joda.time.LocalDate localDate23 = localDate20.minusWeeks(1984);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight12 = property9.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime20 = dateTime17.withFieldAdded(durationFieldType18, 16);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime17.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) 42, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight12.toMutableDateTime(dateTimeZone21);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone21.getShortName(3542400000L, locale27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 1999, dateTimeZone21);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 42L + "'", long24 == 42L);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) 22);
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology26);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        calendar0.set(779, 43, (int) (short) 0, 32769, 2, (int) (short) 0);
        java.util.Date date25 = calendar0.getTime();
        java.time.Instant instant26 = date25.toInstant();
        int int27 = date25.getSeconds();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-37353106680000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=786,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=116,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=2,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Wed Apr 26 09:02:00 UTC 786");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate localDate13 = property10.addWrapFieldToCopy((int) (short) 0);
        java.lang.String str14 = property10.getAsText();
        org.joda.time.LocalDate localDate15 = property10.roundHalfCeilingCopy();
        int int16 = property10.get();
        org.joda.time.LocalDate localDate18 = property10.addToCopy(18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate18.withMonthOfYear(34715586);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34715586 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis(34988549);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-04-09T09:40:36.268Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-04-09T09:40:36.268Z\" is malformed at \"T09:40:36.268Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        java.util.Date date5 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        int int6 = date5.getSeconds();
        java.time.Instant instant7 = date5.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        int int9 = date8.getTimezoneOffset();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) localDate1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        long long27 = dateTimeZone22.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.LocalDate localDate30 = localDate8.minusYears(25);
        org.joda.time.LocalDate.Property property31 = localDate8.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDate8.getFieldTypes();
        org.joda.time.LocalDate localDate34 = localDate8.withCenturyOfEra(36);
        int int35 = localDate34.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1659458699000L) + "'", long27 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = dateTimeFormatter40.parseMillis("T01:40:10.842");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval6.withPeriodAfterStart(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate43 = localDate37.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property44 = localDate37.centuryOfEra();
        org.joda.time.LocalDate localDate45 = property44.roundCeilingCopy();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        org.joda.time.Interval interval48 = interval29.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology46);
        java.util.GregorianCalendar gregorianCalendar52 = dateMidnight51.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus((-1L));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfMinute();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate62 = localDate60.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate64 = localDate60.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.DateTime dateTime68 = localDate64.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.LocalDate localDate70 = localDate64.withWeekyear(19);
        org.joda.time.LocalTime localTime71 = null;
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime76 = localDate64.toDateTime(localTime71, dateTimeZone73);
        java.lang.String str78 = dateTimeZone73.getName(1000L);
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now(dateTimeZone73);
        java.util.Locale locale81 = null;
        java.lang.String str82 = dateTimeZone73.getName(4L, locale81);
        org.joda.time.DateTime dateTime83 = dateMidnight51.toDateTime(dateTimeZone73);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(gregorianCalendar52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withWeekOfWeekyear(21);
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight7.toYearMonthDay();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.dayOfWeek();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableDuration11, (org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean21 = interval17.isBefore((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTime dateTime22 = interval17.getEnd();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29);
        boolean boolean33 = interval25.isAfter((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = interval25.withStart((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = interval17.overlaps((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean49 = interval45.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTime dateTime50 = interval45.getEnd();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.DateMidnight.Property property59 = dateMidnight57.dayOfWeek();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableDuration54, (org.joda.time.ReadableInstant) dateMidnight57);
        boolean boolean61 = interval53.isAfter((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.Interval interval65 = interval53.withStart((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = interval45.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Interval interval68 = interval45.withPeriodAfterStart(readablePeriod67);
        org.joda.time.Interval interval69 = interval45.toInterval();
        org.joda.time.Interval interval70 = interval17.gap((org.joda.time.ReadableInterval) interval69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        java.util.Date date74 = dateMidnight73.toDate();
        org.joda.time.YearMonthDay yearMonthDay75 = dateMidnight73.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.plus((-1L));
        org.joda.time.Chronology chronology81 = dateMidnight80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.secondOfMinute();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.DurationField durationField84 = chronology81.days();
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay75.withChronologyRetainFields(chronology81);
        org.joda.time.DurationField durationField86 = chronology81.months();
        org.joda.time.Interval interval87 = interval17.withChronology(chronology81);
        org.joda.time.DateTimeField dateTimeField88 = chronology81.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight7.withChronology(chronology81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval90 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableInstant) dateMidnight89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNull(interval70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateMidnight89);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(23014L);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((int) (short) 0, 254, 292278994, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 254 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay4.minusMonths(15);
        org.joda.time.LocalDate localDate14 = yearMonthDay13.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight45 = localDate14.toDateMidnight(dateTimeZone40);
        long long48 = dateTimeZone40.adjustOffset(1644572155702L, true);
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.now(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) 34627);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str53 = dateTimeFieldType52.getName();
        int int54 = dateMidnight51.get(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight51.plusMonths((-82));
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644572155702L + "'", long48 == 1644572155702L);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfHour" + "'", str53, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateMidnight56);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek((int) (byte) 1);
        calendar0.set((int) (byte) 0, 51, 17);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-62031916800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=108,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        int int3 = dateMidnight2.getYear();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusMonths(762);
        org.joda.time.DateTime dateTime7 = dateMidnight2.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight12.minusWeeks(17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.dayOfWeek();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.minusDays(1);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((long) 49);
        boolean boolean31 = dateMidnight12.isAfter((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = dateMidnight12.getSecondOfDay();
        int int33 = dateMidnight12.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval40.getEnd();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean56 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = interval48.withStart((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = interval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Interval interval63 = interval40.withPeriodAfterStart(readablePeriod62);
        org.joda.time.Interval interval64 = interval40.toInterval();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plus((-1L));
        org.joda.time.Chronology chronology70 = dateMidnight69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfMinute();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.Interval interval74 = localDate72.toInterval(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        boolean boolean76 = interval64.overlaps((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration77 = interval64.toDuration();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight12.withDurationAdded((org.joda.time.ReadableDuration) duration77, 10022);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight2.minus((org.joda.time.ReadableDuration) duration77);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(323, 34624683, 34879031, 842, 12, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 842 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.hourOfDay();
        org.joda.time.LocalTime localTime4 = timeOfDay1.toLocalTime();
        int int5 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.plusMillis(38);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMinutes(34555);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay22 = property20.setCopy(27);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusSeconds(135);
        org.joda.time.LocalTime localTime25 = timeOfDay24.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusMillis(428);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.centuries();
        long long38 = chronology33.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.yearOfEra();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minus((long) (-1));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minus(readablePeriod45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1970);
        int[] intArray51 = timeOfDay50.getValues();
        org.joda.time.TimeOfDay.Property property52 = timeOfDay50.minuteOfHour();
        int[] intArray54 = chronology33.get((org.joda.time.ReadablePartial) timeOfDay50, 59L);
        org.joda.time.DateTimeField dateTimeField55 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology33.hourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay24.withChronologyRetainFields(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:20.723" + "'", str6, "T09:43:20.723");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 292279042L + "'", long38 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 20, 723]");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 59]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(timeOfDay57);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getNameKey((long) (-1));
        long long7 = dateTimeZone3.convertUTCToLocal((long) 5);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, (long) 19, dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = interval11.withDurationAfterStart(readableDuration12);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone17.getName((long) 0, locale23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(0L, (long) 19, dateTimeZone17);
        boolean boolean26 = interval13.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        boolean boolean37 = interval29.isAfter((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.YearMonthDay yearMonthDay42 = dateMidnight40.toYearMonthDay();
        int[] intArray43 = yearMonthDay42.getValues();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.withPeriodAdded(readablePeriod44, 22);
        java.lang.String str47 = yearMonthDay42.toString();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay42.minusDays(33);
        org.joda.time.Interval interval50 = yearMonthDay49.toInterval();
        boolean boolean52 = interval50.isAfter(1644572146319L);
        boolean boolean54 = interval50.contains((long) (short) 100);
        boolean boolean55 = interval50.isBeforeNow();
        org.joda.time.Duration duration56 = interval50.toDuration();
        org.joda.time.Interval interval57 = interval36.gap((org.joda.time.ReadableInterval) interval50);
        boolean boolean58 = interval25.isAfter((org.joda.time.ReadableInterval) interval50);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5L + "'", long7 == 5L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DurationField durationField18 = chronology14.weekyears();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.weekOfWeekyear();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getTimezoneOffset();
        java.util.Date date6 = new java.util.Date((long) '4');
        date6.setYear(33);
        boolean boolean9 = date3.before(date6);
        java.lang.String str10 = date6.toGMTString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 01 00:00:00 UTC 1933");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1 Jan 1933 00:00:00 GMT" + "'", str10, "1 Jan 1933 00:00:00 GMT");
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        int int47 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(37, 28, 25, 19, 131);
        calendar0.set(14, 48, 24, 9, (int) (short) 100);
        int int60 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.YearMonthDay yearMonthDay61 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61597286379106,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=18,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=24,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=40,SECOND=20,MILLISECOND=894,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateMidnight.Property property54 = dateMidnight2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plus((-1L));
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        boolean boolean62 = dateMidnight59.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property63 = dateMidnight59.weekyear();
        org.joda.time.DateTime dateTime64 = dateMidnight59.toDateTime();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime67 = dateTime64.withFieldAdded(durationFieldType65, (int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight2.withFieldAdded(durationFieldType65, 42);
        java.lang.String str70 = durationFieldType65.getName();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "minutes" + "'", str70, "minutes");
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        int int47 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(37, 28, 25, 19, 131);
        int int55 = calendar0.getGreatestMinimum(0);
        java.util.TimeZone timeZone56 = calendar0.getTimeZone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=28,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=25,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=19,MINUTE=131,SECOND=20,MILLISECOND=955,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.LocalDate localDate26 = localDate20.withWeekyear(19);
        org.joda.time.LocalTime localTime27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime32 = localDate20.toDateTime(localTime27, dateTimeZone29);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime34 = localDate8.toDateTimeAtMidnight(dateTimeZone29);
        long long36 = dateTimeZone29.convertUTCToLocal(611193600000L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        long long42 = dateTimeZone39.adjustOffset(1644572229996L, false);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plusMonths(0);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 611193600000L + "'", long36 == 611193600000L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572229996L + "'", long42 == 1644572229996L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        int int20 = dateTimeField19.getMinimumValue();
        int int21 = dateMidnight9.get(dateTimeField19);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight9.withMillis((-86400000L));
        org.joda.time.LocalDate localDate24 = dateMidnight9.toLocalDate();
        org.joda.time.DateMidnight.Property property25 = dateMidnight9.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight9.minusMonths(0);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap14 = gregorianCalendar10.getDisplayNames(45, 50400000, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(29);
        java.lang.String str2 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+29:00" + "'", str2, "+29:00");
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 366);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfYear();
        boolean boolean16 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.dayOfWeek();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean33 = interval29.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTime dateTime34 = interval29.getEnd();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean45 = interval37.isAfter((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((-1L), dateTimeZone47);
        org.joda.time.Interval interval49 = interval37.withStart((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = interval29.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration51 = interval29.toDuration();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight22.withDurationAdded((org.joda.time.ReadableDuration) duration51, 24);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight4.withDurationAdded((org.joda.time.ReadableDuration) duration51, 19);
        org.joda.time.DateMidnight.Property property56 = dateMidnight4.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.plus((-1L));
        org.joda.time.Chronology chronology62 = dateMidnight61.getChronology();
        boolean boolean64 = dateMidnight61.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property65 = dateMidnight61.weekyear();
        org.joda.time.DateTime dateTime66 = dateMidnight61.toDateTime();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime69 = dateTime66.withFieldAdded(durationFieldType67, (int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight4.withFieldAdded(durationFieldType67, 42);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay1.withFieldAdded(durationFieldType67, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((java.lang.Object) timeOfDay1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(timeOfDay73);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(chronology7);
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        long long14 = dateTimeField11.getDifferenceAsLong((long) (-5599659), (long) 34988549);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-40588L) + "'", long14 == (-40588L));
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property8.addToCopy(428);
        org.joda.time.DateTimeField dateTimeField16 = property8.getField();
        int int17 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone15);
        java.lang.String str20 = dateTimeZone15.getNameKey((long) 2022);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone15);
        boolean boolean22 = dateTimeZone15.isFixed();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTime.Property property37 = dateTime35.dayOfYear();
        boolean boolean38 = dateMidnight26.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight26.getZone();
        long long41 = dateTimeZone15.getMillisKeepLocal(dateTimeZone39, (-29221200000L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21 + "'", int36 == 21);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-29221200000L) + "'", long41 == (-29221200000L));
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsText((int) (short) 1, locale9);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 24);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.LocalDate localDate19 = yearMonthDay17.toLocalDate();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime28 = dateTime22.minusDays((int) (byte) 10);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = localDate19.equals((java.lang.Object) readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        int[] intArray36 = yearMonthDay35.getValues();
        int int37 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate19, intArray36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfMinute();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate61 = localDate57.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str64 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtCurrentTime(dateTimeZone63);
        boolean boolean66 = dateTimeZone63.isFixed();
        org.joda.time.DateTime dateTime67 = localDate49.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate69 = localDate49.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.property(dateTimeFieldType73);
        org.joda.time.LocalDate.Property property75 = localDate69.property(dateTimeFieldType73);
        org.joda.time.LocalDate localDate77 = localDate19.withField(dateTimeFieldType73, 9);
        org.joda.time.DateTime dateTime78 = localDate77.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "24" + "'", str12, "24");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 24 + "'", int37 == 24);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay14.toDateMidnight(dateTimeZone19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean22 = dateTimeZone19.equals((java.lang.Object) strSet21);
        long long24 = dateTimeZone19.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        boolean boolean33 = dateTimeZone19.equals((java.lang.Object) chronology30);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone19);
        int int35 = localDate34.getCenturyOfEra();
        org.joda.time.LocalDate.Property property36 = localDate34.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial37 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = localDate34.compareTo(readablePartial37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 14400001L + "'", long24 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        java.util.Calendar calendar14 = builder0.build();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder23 = builder20.set(4, 0);
        java.util.Calendar.Builder builder25 = builder20.setCalendarType("gregory");
        java.util.Calendar.Builder builder27 = builder25.setLenient(true);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        int int29 = calendar28.getFirstDayOfWeek();
        int int30 = calendar28.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        boolean boolean39 = date34.before(date38);
        int int40 = date34.getMonth();
        calendar28.setTime(date34);
        java.util.TimeZone timeZone42 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.util.Calendar.Builder builder44 = builder25.setTimeZone(timeZone42);
        calendar14.setTimeZone(timeZone42);
        org.joda.time.TimeOfDay timeOfDay46 = org.joda.time.TimeOfDay.fromCalendarFields(calendar14);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-60972226286000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=37,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=28,SECOND=34,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(timeOfDay46);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder16 = builder0.setTimeOfDay(522, 21600, 34, 34799);
        java.util.Calendar.Builder builder20 = builder16.setWeekDate((int) (byte) 1, 387, 2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        int int17 = date16.getHours();
        int int18 = date16.getDay();
        int int19 = date16.getDay();
        date16.setYear(4);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date16);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtCurrentTime();
        int int24 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate32 = yearMonthDay31.toLocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra(8);
        int int35 = localDate32.getDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) 12);
        int[] intArray39 = yearMonthDay38.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = dateTimeField11.set((org.joda.time.ReadablePartial) localDate32, (-32), intArray39, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1]");
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays(9);
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(26);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.DateTime.Property property12 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        boolean boolean22 = dateMidnight19.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property23 = dateMidnight19.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight19.minusWeeks(17);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight25.getZone();
        org.joda.time.DateTime dateTime28 = dateTime1.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime31 = dateTime28.plusDays(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(6);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.parse("19");
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfMonth(21);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight17.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.days();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.withChronologyRetainFields(chronology25);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (-1));
        long long35 = dateTimeZone31.nextTransition((long) 70);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = yearMonthDay19.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = localDate14.toDateTimeAtMidnight(dateTimeZone31);
        java.util.Date date40 = new java.util.Date((long) '4');
        date40.setTime((long) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay43 = org.joda.time.YearMonthDay.fromDateFields(date40);
        int int44 = localDate14.compareTo((org.joda.time.ReadablePartial) yearMonthDay43);
        org.joda.time.DateTime dateTime45 = dateTime9.withFields((org.joda.time.ReadablePartial) localDate14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21 + "'", int5 == 21);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 70L + "'", long35 == 70L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        int int3 = dateMidnight2.getYear();
        org.joda.time.Chronology chronology4 = dateMidnight2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.dayOfYear();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfDay();
        int int8 = dateTimeField7.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399 + "'", int8 == 86399);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate35 = localDate31.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone37);
        boolean boolean40 = dateTimeZone37.isFixed();
        org.joda.time.DateTime dateTime41 = localDate23.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = localDate7.toDateTime(localTime11, dateTimeZone37);
        java.util.TimeZone timeZone43 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone43);
        boolean boolean46 = calendar45.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572601465,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=21,MILLISECOND=465,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        long long5 = dateTimeZone1.nextTransition((long) 70);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone1);
        int int7 = dateMidnight6.getWeekyear();
        int int8 = dateMidnight6.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.withDayOfYear(1200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 70L + "'", long5 == 70L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("T09:41:49.087");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant47 = calendar0.toInstant();
        java.lang.String str48 = calendar0.getCalendarType();
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "gregory" + "'", str48, "gregory");
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.lang.String str19 = yearMonthDay14.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.toString();
        org.joda.time.Interval interval51 = yearMonthDay14.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate53 = localDate7.withFields((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.LocalDate.Property property54 = localDate52.dayOfMonth();
        org.joda.time.LocalDate localDate56 = localDate52.plusYears(34693);
        org.joda.time.LocalDate localDate58 = localDate52.withYearOfEra(34896);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.lang.String str20 = localDate17.toString("24");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        int int31 = localDate28.getYearOfCentury();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate56 = localDate52.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.DateTime dateTime62 = localDate44.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = localDate28.toDateTime(localTime32, dateTimeZone58);
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight65 = localDate17.toDateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.DateMidnight dateMidnight68 = property66.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.hours();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.clockhourOfDay();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) 29, (long) 2022, chronology76);
        org.joda.time.DurationField durationField80 = chronology76.millis();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateMidnight68, chronology76);
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.DateTime.Property property83 = dateTime81.millisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "24" + "'", str20, "24");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        int int18 = localDate11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.LocalDate localDate26 = yearMonthDay24.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(962409600016L, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.monthOfYear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.minus(readableDuration36);
        org.joda.time.DateTime.Property property38 = dateTime32.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime41 = dateTime32.withField(dateTimeFieldType39, (int) ' ');
        org.joda.time.DateTime dateTime43 = dateTime41.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfCentury(14);
        int int46 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateMidnight dateMidnight47 = localDate11.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.monthOfYear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime49.minus(readableDuration53);
        org.joda.time.DateTime.Property property55 = dateTime49.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime58 = dateTime49.withField(dateTimeFieldType56, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        java.util.Date date62 = dateMidnight61.toDate();
        org.joda.time.YearMonthDay yearMonthDay63 = dateMidnight61.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property68 = dateTime65.monthOfYear();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime65.minus(readableDuration69);
        org.joda.time.DateMidnight dateMidnight71 = dateTime70.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.plus((-1L));
        org.joda.time.Chronology chronology77 = dateMidnight76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.secondOfMinute();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology77);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Interval interval81 = localDate79.toInterval(dateTimeZone80);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) dateTime70, chronology82);
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay63.withChronologyRetainFields(chronology82);
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType56.getField(chronology82);
        org.joda.time.DateMidnight dateMidnight86 = org.joda.time.DateMidnight.now(chronology82);
        org.joda.time.DateTimeZone dateTimeZone87 = chronology82.getZone();
        org.joda.time.DateTime dateTime88 = localDate11.toDateTimeAtCurrentTime(dateTimeZone87);
        java.util.Date date89 = dateTime88.toDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(date89);
// flaky:         org.junit.Assert.assertEquals(date89.toString(), "Fri Feb 11 09:43:21 UTC 2022");
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        java.util.Date date3 = new java.util.Date(41, 36, 358);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 23 00:00:00 UTC 1944");
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withChronologyRetainFields(chronology26);
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = yearMonthDay28.toInterval(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        java.util.Calendar.Builder builder77 = builder12.setTimeZone(timeZone76);
        java.util.Calendar.Builder builder81 = builder77.setDate(779, 32769, 33435);
        java.util.Calendar.Builder builder86 = builder77.setTimeOfDay(53, 314, 14, 122);
        java.util.Calendar.Builder builder91 = builder77.setTimeOfDay(46, 0, 34727424, 28);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(20);
        org.joda.time.LocalDate localDate28 = localDate22.plusMonths((int) (byte) -1);
        int int29 = localDate28.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight();
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime33 = dateTime31.minusYears(555);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay4.plusMonths(34);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay54.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay54.minusDays(212);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = localDate11.getField(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        int int47 = dateTime46.getSecondOfMinute();
        org.joda.time.DateTime.Property property48 = dateTime46.dayOfYear();
        boolean boolean49 = dateMidnight37.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime51 = dateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.DateTimeField dateTimeField61 = localDate59.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        java.lang.String str63 = dateTimeFieldType62.toString();
        int int64 = dateTime51.get(dateTimeFieldType62);
        org.joda.time.LocalDate.Property property65 = localDate34.property(dateTimeFieldType62);
        org.joda.time.LocalDate localDate66 = property65.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate68 = localDate66.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plus((-1L));
        org.joda.time.Chronology chronology75 = dateMidnight74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfMinute();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.LocalDate localDate79 = localDate77.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate81 = localDate77.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        java.lang.String str84 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime85 = localDate81.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.YearMonthDay yearMonthDay86 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay86.minusMonths(33);
        int[] intArray89 = yearMonthDay86.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField26.set((org.joda.time.ReadablePartial) localDate68, 2922789, intArray89, 1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "monthOfYear" + "'", str63, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "UTC" + "'", str84, "UTC");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2022, 2, 11]");
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getWeekOfWeekyear();
        int int11 = localDate7.getYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay4.getFieldTypes();
        int int8 = timeOfDay4.getSecondOfMinute();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay4.getFields();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay4.plusMinutes(366);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DurationField durationField11 = chronology6.hours();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        int int47 = calendar0.getMinimalDaysInFirstWeek();
        int int49 = calendar0.getActualMaximum(1);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(34886, (-7));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572602058,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=22,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278994 + "'", int49 == 292278994);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        java.util.Date date6 = calendar0.getTime();
        calendar0.clear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        boolean boolean16 = date11.before(date15);
        int int17 = date11.getDay();
        int int18 = date11.getHours();
        date11.setSeconds((int) '4');
        java.lang.String str21 = date11.toLocaleString();
        int int22 = date11.getYear();
        long long23 = date11.getTime();
        calendar0.setTime(date11);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int26 = localDate25.getCenturyOfEra();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=52000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=52,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Jan 1, 1970 12:00:52 AM" + "'", str21, "Jan 1, 1970 12:00:52 AM");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52000L + "'", long23 == 52000L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        java.util.Date date6 = calendar0.getTime();
        calendar0.roll(0, true);
        java.util.TimeZone timeZone10 = calendar0.getTimeZone();
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = yearMonthDay11.getFieldType(46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 46");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-124304284799983,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime10 = dateTime8.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.plusWeeks(1970);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.plusDays(35);
        org.joda.time.DateMidnight.Property property20 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundHalfCeilingCopy();
        boolean boolean22 = dateTime8.equals((java.lang.Object) dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(6);
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withDayOfYear(53);
        int int13 = dateTime9.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minus(readablePeriod19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1);
        int int23 = timeOfDay22.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.withSecondOfMinute(31);
        org.joda.time.DateTime dateTime26 = dateTime9.withFields((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = property27.setCopy(34910);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34910 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 42 + "'", int23 == 42);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        java.util.Date date1 = new java.util.Date((long) 366);
        date1.setDate(10022);
        org.junit.Assert.assertEquals(date1.toString(), "Mon Jun 09 00:00:00 UTC 1997");
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        long long9 = interval7.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        long long24 = dateTimeZone20.convertUTCToLocal((long) 5);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone20.getName((long) 0, locale26);
        org.joda.time.Interval interval28 = yearMonthDay14.toInterval(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = interval28.getStart();
        org.joda.time.Interval interval30 = interval7.gap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutableInterval mutableInterval31 = interval30.toMutableInterval();
        long long32 = mutableInterval31.getStartMillis();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-13305600000L) + "'", long9 == (-13305600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5L + "'", long24 == 5L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-13305600000L) + "'", long32 == (-13305600000L));
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(23014L, 611193600000L);
        org.joda.time.Interval interval3 = interval2.toInterval();
        boolean boolean5 = interval3.isAfter(1055934191293000L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.LocalTime localTime26 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime31 = localDate19.toDateTime(localTime26, dateTimeZone28);
        org.joda.time.LocalDate.Property property32 = localDate19.weekyear();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minus((long) (-1));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        boolean boolean38 = property32.equals((java.lang.Object) chronology36);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) 0, 100L, chronology36);
        boolean boolean40 = interval3.overlaps((org.joda.time.ReadableInterval) interval39);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        int int21 = localDate18.getDayOfMonth();
        int int22 = localDate18.getYear();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate18, locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate localDate27 = localDate18.withField(dateTimeFieldType25, 8);
        int int28 = localDate18.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        boolean boolean36 = dateMidnight33.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property37 = dateMidnight33.centuryOfEra();
        java.lang.String str38 = property37.getAsShortText();
        org.joda.time.DateMidnight dateMidnight40 = property37.addToCopy((long) 6);
        int int41 = property37.get();
        org.joda.time.DateMidnight dateMidnight42 = property37.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withMillis(70L);
        org.joda.time.DateTime dateTime45 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime49 = dateTime45.minusMinutes(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime49.withHourOfDay(34585);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34585 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb" + "'", str24, "Feb");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "19" + "'", str38, "19");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfYear();
        boolean boolean27 = dateMidnight15.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property28 = dateTime24.era();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean39 = interval31.isAfter((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration40 = interval38.toDuration();
        org.joda.time.DateTime dateTime42 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration40, 52);
        org.joda.time.DateTime dateTime44 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration40, 6);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears(5);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minus((long) (-1));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.minus(readablePeriod60);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str64 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime65 = timeOfDay61.toDateTimeToday(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) dateTime52, dateTimeZone63);
        long long68 = dateTimeZone46.getMillisKeepLocal(dateTimeZone63, 0L);
        org.joda.time.DateTime dateTime69 = dateTime11.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime71 = dateTime69.minusSeconds(0);
        org.joda.time.DateTime dateTime73 = dateTime71.plusMinutes(235);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        java.util.Date date6 = calendar0.getTime();
        calendar0.add(10, 53);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.millisOfSecond();
        int int12 = property11.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=190800017,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=0,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.Calendar.Builder builder22 = builder16.setWeekDate(34816, 34654870, 8);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateMidnight6.toCalendar(locale15);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromCalendarFields(calendar16);
        java.util.TimeZone timeZone18 = calendar16.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar16.getMaximum((-1959));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1959");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=19353600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        int int5 = localDate1.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 10);
        int int16 = localDate13.getYearOfCentury();
        boolean boolean18 = localDate13.equals((java.lang.Object) "19");
        org.joda.time.LocalDate.Property property19 = localDate13.monthOfYear();
        org.joda.time.LocalDate localDate20 = localDate1.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate22 = localDate1.minusDays((-1));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay27.withPeriodAdded(readablePeriod28, 11);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay27.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay32 = property31.withMinimumValue();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property31.getAsText(locale33);
        java.lang.String str35 = property31.getAsText();
        org.joda.time.YearMonthDay yearMonthDay37 = property31.addToCopy(27);
        boolean boolean38 = localDate22.isAfter((org.joda.time.ReadablePartial) yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "January" + "'", str34, "January");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "January" + "'", str35, "January");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears(5);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean26 = interval22.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval22.toPeriod(periodType27);
        org.joda.time.DateTime dateTime29 = dateTime13.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 6);
        int int32 = localDate31.getCenturyOfEra();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long37 = dateTimeZone34.convertLocalToUTC((long) 5, true);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = localDate31.toDateTimeAtStartOfDay(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime39.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5L + "'", long37 == 5L);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        int int9 = dateTimeField7.get((long) (byte) 100);
        long long11 = dateTimeField7.roundCeiling((-60522398665211L));
        boolean boolean12 = dateTimeField7.isSupported();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60522397200000L) + "'", long11 == (-60522397200000L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        date0.setHours(34624683);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sun Jan 30 03:43:22 UTC 5972");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        org.joda.time.YearMonthDay yearMonthDay11 = property8.withMaximumValue();
        int[] intArray12 = yearMonthDay11.getValues();
        org.joda.time.Interval interval13 = yearMonthDay11.toInterval();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 12, 1]");
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder5.setDate((-30801), 1200000, 22);
        java.util.Date date13 = new java.util.Date();
        java.time.Instant instant14 = date13.toInstant();
        int int15 = date13.getDate();
        int int16 = date13.getSeconds();
        date13.setSeconds((int) '4');
        date13.setDate(2026);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder12.setInstant(date13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Aug 19 09:43:52 UTC 2027");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology30);
        org.joda.time.DateTimeField dateTimeField37 = chronology30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight43, readablePeriod44);
        org.joda.time.Period period46 = interval45.toPeriod();
        int[] intArray48 = chronology30.get((org.joda.time.ReadablePeriod) period46, 75485789217052L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField50 = chronology30.dayOfWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 124811, 1, 2, 46, 57, 52]");
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime32 = yearMonthDay11.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter5.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology34 = dateTimeFormatter33.getChronolgy();
        java.util.Locale locale35 = dateTimeFormatter33.getLocale();
        java.lang.Appendable appendable36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        boolean boolean44 = dateMidnight41.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property45 = dateMidnight41.centuryOfEra();
        boolean boolean46 = property45.isLeap();
        org.joda.time.DateMidnight dateMidnight48 = property45.setCopy("0");
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int51 = dateMidnight48.get(dateTimeFieldType50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight48.minus(28L);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(appendable36, (org.joda.time.ReadableInstant) dateMidnight53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(chronology34);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 69 + "'", int51 == 69);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.minus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime10.withField(dateTimeFieldType17, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.monthOfYear();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.minus(readableDuration30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = localDate40.toInterval(dateTimeZone41);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) dateTime31, chronology43);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay24.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType17.getField(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        int int48 = dateTime8.get(dateTimeField46);
        java.util.Date date49 = dateTime8.toDate();
        org.joda.time.DateTime.Property property50 = dateTime8.year();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 212 + "'", int48 == 212);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jul 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval12.getEnd();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.Interval interval32 = interval20.withStart((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = interval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration34 = interval12.toDuration();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration34, 24);
        boolean boolean38 = dateMidnight5.isBefore((long) 69);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight5.plusMonths(53);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.plus(readableDuration44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.plus(readableDuration48);
        int int50 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minus((long) (-1));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.minus(readablePeriod56);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay57.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay59.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay63.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        java.util.Date date70 = dateMidnight69.toDate();
        org.joda.time.DateMidnight.Property property71 = dateMidnight69.dayOfWeek();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableDuration66, (org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean76 = interval72.isBefore((org.joda.time.ReadableInterval) interval75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = interval72.toPeriod(periodType77);
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay65.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime81 = dateTime43.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 19);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight40.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.days();
        boolean boolean84 = period78.isSupported(durationFieldType83);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) localDate1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        long long27 = dateTimeZone22.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate.Property property30 = localDate8.property(dateTimeFieldType29);
        java.util.Locale locale31 = null;
        int int32 = property30.getMaximumShortTextLength(locale31);
        org.joda.time.DurationField durationField33 = property30.getDurationField();
        java.lang.String str34 = property30.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1659458699000L) + "'", long27 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        int int11 = property7.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addNoWrapToCopy(14);
        int int14 = property7.get();
        java.lang.String str15 = property7.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property7.getFieldType();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:22.763" + "'", str6, "T09:43:22.763");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22" + "'", str8, "22");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "22" + "'", str15, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.property(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight13 = property11.addToCopy((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = property11.setCopy(76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        boolean boolean26 = interval18.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration27 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration27, 52);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTime dateTime32 = dateTime11.withFieldAdded(durationFieldType30, 53);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight41.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay43.withPeriodAdded(readablePeriod44, 11);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.centuries();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay46.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.YearMonthDay yearMonthDay59 = dateMidnight57.toYearMonthDay();
        int[] intArray60 = yearMonthDay59.getValues();
        chronology38.validate((org.joda.time.ReadablePartial) yearMonthDay54, intArray60);
        boolean boolean62 = durationFieldType30.isSupported(chronology38);
        java.lang.String str63 = durationFieldType30.getName();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.Chronology chronology69 = dateMidnight68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.secondOfMinute();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.LocalDate localDate73 = localDate71.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate75 = localDate71.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        java.lang.String str78 = dateTimeZone77.toString();
        org.joda.time.DateTime dateTime79 = localDate75.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int81 = dateTime79.get(dateTimeFieldType80);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone84);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.plus((-1L));
        org.joda.time.Chronology chronology88 = dateMidnight87.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.secondOfMinute();
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate(chronology88);
        org.joda.time.DurationField durationField91 = chronology88.days();
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((long) 11, chronology88);
        org.joda.time.DateTimeField dateTimeField93 = chronology88.year();
        org.joda.time.DateTime dateTime94 = dateTime79.toDateTime(chronology88);
        org.joda.time.DurationField durationField95 = durationFieldType30.getField(chronology88);
        org.joda.time.DateTimeField dateTimeField96 = chronology88.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "weekyears" + "'", str63, "weekyears");
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        date3.setMinutes(14);
        date3.setSeconds(2008);
        java.time.Instant instant10 = date3.toInstant();
        date3.setMonth(2023);
        date3.setMinutes(34771);
        date3.setMinutes(2038);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 02 09:58:28 UTC 2138");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        long long6 = java.util.Date.UTC(34753, 33538, 1921208, 34, 17, 34654870);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1348713203890000L + "'", long6 == 1348713203890000L);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        int int11 = localDate7.getYear();
        int int12 = localDate7.getYearOfCentury();
        org.joda.time.LocalDate localDate14 = localDate7.withCenturyOfEra(365);
        int int16 = localDate14.getValue(0);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.withPeriodAdded(readablePeriod23, 11);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        int int28 = localDate17.get(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = localDate14.withField(dateTimeFieldType27, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36522 + "'", int16 == 36522);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(22);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis(14400001L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate28 = localDate22.withWeekyear(19);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        org.joda.time.LocalDate localDate30 = property29.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus((-1L));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfMinute();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate47 = localDate43.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = localDate47.withWeekyear(19);
        org.joda.time.LocalTime localTime54 = null;
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime59 = localDate47.toDateTime(localTime54, dateTimeZone56);
        java.lang.String str61 = dateTimeZone56.getName(1000L);
        org.joda.time.DateTime dateTime62 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.Interval interval63 = localDate30.toInterval(dateTimeZone56);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) ' ', chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTime dateTime67 = dateTime9.withChronology(chronology64);
        org.joda.time.DateTime dateTime68 = dateTime67.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = dateTime67.withMonthOfYear(1904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1904 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.LocalDate localDate26 = localDate20.withWeekyear(19);
        org.joda.time.LocalTime localTime27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime32 = localDate20.toDateTime(localTime27, dateTimeZone29);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime34 = localDate8.toDateTimeAtMidnight(dateTimeZone29);
        long long36 = dateTimeZone29.convertUTCToLocal(611193600000L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone29);
        long long41 = dateTimeZone29.convertLocalToUTC(1644572146761L, true, (long) 34545);
        long long43 = dateTimeZone29.convertUTCToLocal((long) 1439);
        java.lang.String str45 = dateTimeZone29.getName((long) (-51));
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 611193600000L + "'", long36 == 611193600000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644572146761L + "'", long41 == 1644572146761L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1439L + "'", long43 == 1439L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        boolean boolean21 = yearMonthDay12.isEqual((org.joda.time.ReadablePartial) localDate20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (-1));
        long long27 = dateTimeZone23.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight28 = localDate20.toDateMidnight(dateTimeZone23);
        long long32 = dateTimeZone23.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str34 = dateTimeZone23.getNameKey((long) 33);
        java.lang.String str36 = dateTimeZone23.getNameKey(1644572171333L);
        long long38 = dateTimeZone23.convertUTCToLocal((long) 1022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(34831, 0, 86399999, 118800000, 580, 34665286, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 118800000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5L + "'", long27 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1022L + "'", long38 == 1022L);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(9, 35);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.millisOfSecond();
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        long long11 = dateTimeField9.roundHalfCeiling((long) (byte) 10);
        int int13 = dateTimeField9.get((-59958248400000L));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(6);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfSecond((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property4.getAsText(locale6);
        org.joda.time.DateMidnight dateMidnight9 = property4.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(5);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.dayOfWeek();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean28 = interval24.isBefore((org.joda.time.ReadableInterval) interval27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = interval24.toPeriod(periodType29);
        org.joda.time.DateTime dateTime31 = dateTime15.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.LocalDate localDate32 = dateTime15.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.era();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.plus(readableDuration41);
        int int43 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        boolean boolean52 = date47.before(date51);
        int int53 = date47.getDay();
        int int54 = date47.getHours();
        date47.setSeconds((int) '4');
        boolean boolean57 = dateTime42.equals((java.lang.Object) date47);
        org.joda.time.DateTime dateTime59 = dateTime42.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime61 = dateTime42.minusSeconds(4);
        boolean boolean62 = localDate32.equals((java.lang.Object) dateTime42);
        org.joda.time.LocalDate localDate64 = localDate32.plusYears(64);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.parse("19");
        org.joda.time.Chronology chronology68 = localDate67.getChronology();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        java.util.Date date73 = dateMidnight72.toDate();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.dayOfWeek();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean79 = interval75.isBefore((org.joda.time.ReadableInterval) interval78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval75.toPeriod(periodType80);
        int int83 = period81.getValue((int) (byte) 0);
        int[] intArray85 = chronology68.get((org.joda.time.ReadablePeriod) period81, 70L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) localDate32, 34697823, intArray85, 19231);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday" + "'", str7, "Thursday");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 0, 70]");
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.dayOfWeek();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean29 = interval21.isAfter((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = interval28.withPeriodAfterStart(readablePeriod30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean42 = interval38.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTime dateTime43 = interval38.getEnd();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfWeek();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean54 = interval46.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = interval46.withStart((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration60 = interval38.toDuration();
        org.joda.time.Interval interval61 = interval31.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime63 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration60, 22);
        org.joda.time.DateTime.Property property64 = dateTime18.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = property64.addToCopy((long) 175);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.setCopy((int) (byte) 1);
        java.util.Locale locale14 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = property8.setCopy("Jul", locale14);
        org.joda.time.YearMonthDay yearMonthDay16 = property8.withMinimumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        java.time.Instant instant13 = date8.toInstant();
        date8.setMinutes(522);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readableDuration19);
        int int21 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime18.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded((long) 34, 33330867);
        int int27 = dateTime23.getYearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime23.withEarlierOffsetAtOverlap();
        boolean boolean29 = date8.equals((java.lang.Object) dateTime28);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:43:23 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 08:42:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readableDuration15);
        int int17 = dateTime14.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        boolean boolean25 = dateMidnight22.isBefore((long) ' ');
        org.joda.time.LocalDate localDate26 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology27 = dateMidnight22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean29 = dateMidnight22.isSupported(dateTimeFieldType28);
        int int30 = dateTime14.get(dateTimeFieldType28);
        boolean boolean31 = localDate11.isSupported(dateTimeFieldType28);
        int int32 = localDate11.size();
        org.joda.time.LocalDate localDate34 = localDate11.minusYears(2000);
        org.joda.time.LocalDate.Property property35 = localDate11.yearOfEra();
        org.joda.time.DateTime dateTime36 = localDate11.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35003 + "'", int30 == 35003);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = localDate32.getField(1);
        org.joda.time.LocalDate localDate36 = localDate32.withDayOfYear(2);
        org.joda.time.LocalDate localDate38 = localDate32.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate47.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate63 = localDate59.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.lang.String str66 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isFixed();
        org.joda.time.DateTime dateTime69 = localDate51.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate71 = localDate51.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getRangeDurationType();
        boolean boolean74 = localDate71.isSupported(durationFieldType73);
        boolean boolean75 = localDate32.isSupported(durationFieldType73);
        org.joda.time.LocalDate localDate77 = localDate32.plusMonths(6);
        int int78 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = localDate11.toDateTimeAtStartOfDay(dateTimeZone79);
        org.joda.time.LocalDate localDate82 = localDate11.plusDays(34697);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((java.lang.Object) localDate82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDate82);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay4.plusMonths(34);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay54.year();
        org.joda.time.DateTime dateTime56 = yearMonthDay54.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.plus((-1L));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 11, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.year();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(32772, 7, 19, chronology66);
        org.joda.time.DateTime dateTime74 = dateTime56.withChronology(chronology66);
        org.joda.time.YearMonthDay yearMonthDay75 = dateTime56.toYearMonthDay();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = localDate32.getField(1);
        org.joda.time.LocalDate localDate36 = localDate32.withDayOfYear(2);
        org.joda.time.LocalDate localDate38 = localDate32.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate47.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate63 = localDate59.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.lang.String str66 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isFixed();
        org.joda.time.DateTime dateTime69 = localDate51.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate71 = localDate51.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getRangeDurationType();
        boolean boolean74 = localDate71.isSupported(durationFieldType73);
        boolean boolean75 = localDate32.isSupported(durationFieldType73);
        org.joda.time.LocalDate localDate77 = localDate32.plusMonths(6);
        int int78 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property79 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate80 = property79.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate80);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay4.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(5);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        org.joda.time.DateTime dateTime56 = dateTime40.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.LocalDate localDate58 = localDate36.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.PeriodType periodType59 = period55.getPeriodType();
        org.joda.time.DateTime dateTime61 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period55, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.withYear(2);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay62.withYear(34713);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = yearMonthDay62.getFieldTypes();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        int int32 = dateTime31.getMillisOfSecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 385 + "'", int32 == 385);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        boolean boolean3 = dateTimeZone1.isFixed();
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 27, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateMidnight.Property property12 = dateMidnight9.year();
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.era();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime.Property property27 = dateTime25.dayOfYear();
        boolean boolean28 = dateMidnight16.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property29 = dateTime25.era();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        boolean boolean40 = interval32.isAfter((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration41 = interval39.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime25.withDurationAdded((org.joda.time.ReadableDuration) duration41, 52);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime46 = dateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration41, 34715586);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.minus(readableDuration21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate31.toInterval(dateTimeZone32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay15.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType8.getField(chronology34);
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(chronology34);
        int int39 = dateMidnight38.getDayOfMonth();
        org.joda.time.Interval interval40 = dateMidnight38.toInterval();
        org.joda.time.DateMidnight.Property property41 = dateMidnight38.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusSeconds(4);
        org.joda.time.DateTime dateTime29 = dateTime8.withMillisOfSecond(1);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        int int35 = date34.getHours();
        int int36 = date34.getDay();
        int int37 = date34.getDay();
        date34.setYear(4);
        int int40 = date34.getDate();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.fromDateFields(date34);
        org.joda.time.LocalDate.Property property42 = localDate41.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        org.joda.time.DateTime.Property property44 = dateTime30.property(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate(59, 69, 8);
        java.util.Calendar.Builder builder16 = builder8.setWeekDate(29, 32, 29);
        java.util.Calendar.Builder builder20 = builder16.setTimeOfDay(135, 575, 53);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(34545, 0, 43);
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder26 = builder20.setLocale(locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.minusHours(235);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate12 = property10.addToCopy((-19035));
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withYearOfCentury(34555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34555 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.joda.time.TimeOfDay timeOfDay12 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay14 = property7.addNoWrapToCopy(49);
        java.lang.String str15 = property7.getName();
        java.lang.String str16 = property7.toString();
        java.lang.String str17 = property7.getName();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:23.585" + "'", str6, "T09:43:23.585");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23" + "'", str8, "23");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondOfMinute" + "'", str15, "secondOfMinute");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[secondOfMinute]" + "'", str16, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondOfMinute" + "'", str17, "secondOfMinute");
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(5255, 54, 34627);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = interval9.contains((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime12.plusDays(24);
        boolean boolean19 = dateTime18.isBeforeNow();
        java.lang.String str20 = dateTime18.toString();
        org.joda.time.LocalDate localDate21 = dateTime18.toLocalDate();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-03-07T09:43:23.637Z" + "'", str20, "2022-03-07T09:43:23.637Z");
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withWeekyear(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withFieldAdded(durationFieldType11, 32769);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays(2000);
        boolean boolean17 = dateMidnight13.isAfter((long) 292278994);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.withPeriodAdded(readablePeriod23, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = localDate33.toInterval(dateTimeZone34);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.Period period37 = interval35.toPeriod();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.weekyears();
        int int39 = period37.get(durationFieldType38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay22.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight46 = dateTime45.toDateMidnight();
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.minusYears(1970);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        java.util.Date date56 = dateMidnight55.toDate();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight55.toYearMonthDay();
        int[] intArray58 = yearMonthDay57.getValues();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay57.withPeriodAdded(readablePeriod59, 22);
        java.lang.String str62 = yearMonthDay57.toString();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay57.minusDays(33);
        org.joda.time.Interval interval65 = yearMonthDay64.toInterval();
        boolean boolean67 = interval65.isAfter(1644572146319L);
        boolean boolean69 = interval65.contains((long) (short) 100);
        boolean boolean70 = interval65.isBeforeNow();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone76);
        java.util.Date date78 = dateMidnight77.toDate();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.dayOfWeek();
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77);
        boolean boolean81 = interval73.isAfter((org.joda.time.ReadableInterval) interval80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((-1L), dateTimeZone83);
        org.joda.time.Interval interval85 = interval73.withStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Interval interval87 = interval73.withPeriodBeforeEnd(readablePeriod86);
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.minus((long) (-1));
        org.joda.time.DateMidnight.Property property91 = dateMidnight90.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime92 = dateMidnight90.toMutableDateTime();
        boolean boolean93 = interval87.isBefore((org.joda.time.ReadableInstant) mutableDateTime92);
        org.joda.time.Duration duration94 = interval87.toDuration();
        org.joda.time.Interval interval95 = interval65.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration94);
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight46.plus((org.joda.time.ReadableDuration) duration94);
        org.joda.time.DateMidnight dateMidnight97 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight99 = dateMidnight13.withMonthOfYear(33330872);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33330872 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(mutableDateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(dateMidnight96);
        org.junit.Assert.assertNotNull(dateMidnight97);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("T09:39:56.941");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withLocale(locale41);
        int int43 = dateTimeFormatter6.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = dateTimeFormatter6.print(1644572310564L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2000 + "'", int43 == 2000);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsShortText(locale10);
        org.joda.time.DurationField durationField12 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField13 = property8.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getYear();
        org.joda.time.LocalDate localDate36 = localDate31.plusWeeks((-391));
        int int37 = localDate31.getYearOfCentury();
        org.joda.time.LocalDate localDate39 = localDate31.withCenturyOfEra(2810341);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears(0);
        java.lang.String str44 = localDate43.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1022 + "'", int34 == 1022);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "281034122-02-11" + "'", str44, "281034122-02-11");
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 329);
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate8.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.LocalDate localDate18 = localDate12.withWeekyear(19);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate37.withWeekyear(19);
        org.joda.time.LocalTime localTime44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime49 = localDate37.toDateTime(localTime44, dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getName(1000L);
        org.joda.time.DateTime dateTime52 = yearMonthDay25.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.Interval interval53 = localDate20.toInterval(dateTimeZone46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) ' ', chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(chronology54);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay57.toDateTime(timeOfDay58);
        int int60 = yearMonthDay57.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.yearOfEra();
        long long10 = dateTimeField8.roundHalfFloor((long) 14);
        org.joda.time.DurationField durationField11 = dateTimeField8.getDurationField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 14, (long) 32770);
        long long3 = interval2.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay9.withPeriodAdded(readablePeriod10, 11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.centuries();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay12.withChronologyRetainFields(chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(0L, chronology18);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekOfWeekyear((int) '#');
        boolean boolean24 = interval2.contains((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.DateTime.Property property39 = dateTime37.dayOfYear();
        boolean boolean40 = dateMidnight28.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfWeek();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean57 = interval53.isBefore((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTime dateTime58 = interval53.getEnd();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.DateMidnight.Property property67 = dateMidnight65.dayOfWeek();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableDuration62, (org.joda.time.ReadableInstant) dateMidnight65);
        boolean boolean69 = interval61.isAfter((org.joda.time.ReadableInterval) interval68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((-1L), dateTimeZone71);
        org.joda.time.Interval interval73 = interval61.withStart((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = interval53.overlaps((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Duration duration75 = interval53.toDuration();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight46.withDurationAdded((org.joda.time.ReadableDuration) duration75, 24);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight28.withDurationAdded((org.joda.time.ReadableDuration) duration75, 19);
        org.joda.time.DateTime dateTime81 = dateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration75, 15);
        org.joda.time.DateTime dateTime83 = dateTime21.withYearOfCentury(0);
        org.joda.time.DateTime dateTime84 = dateTime83.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 14L + "'", long3 == 14L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.minus(readableDuration18);
        org.joda.time.DateTime.Property property20 = dateTime14.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime14.withField(dateTimeFieldType21, (int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis(12);
        int int26 = property12.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.util.Locale locale27 = null;
        java.lang.String str28 = property12.getAsText(locale27);
        org.joda.time.TimeOfDay timeOfDay29 = property12.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        org.joda.time.DurationField durationField39 = chronology35.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology35);
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay43 = property42.withMinimumValue();
        int int44 = property42.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay46 = property42.addToCopy(617);
        org.joda.time.DateTime dateTime47 = timeOfDay46.toDateTimeToday();
        int int48 = property12.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 52, 23, 942]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23 + "'", int44 == 23);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.seconds();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology5);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.dayOfWeek();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean19 = interval15.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime20 = interval15.getEnd();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfWeek();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27);
        boolean boolean31 = interval23.isAfter((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-1L), dateTimeZone33);
        org.joda.time.Interval interval35 = interval23.withStart((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = interval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Interval interval38 = interval15.withPeriodAfterStart(readablePeriod37);
        org.joda.time.Interval interval39 = interval15.toInterval();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = localDate47.toInterval(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        boolean boolean51 = interval39.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        boolean boolean62 = interval54.isAfter((org.joda.time.ReadableInterval) interval61);
        boolean boolean63 = interval39.isAfter((org.joda.time.ReadableInterval) interval54);
        boolean boolean64 = interval8.isBefore((org.joda.time.ReadableInterval) interval39);
        long long65 = interval8.getEndMillis();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 131L + "'", long65 == 131L);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        int int19 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.monthOfYear();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.minus(readableDuration25);
        org.joda.time.DateMidnight dateMidnight27 = dateTime26.toDateMidnight();
        boolean boolean28 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Interval interval29 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTime18.toString("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35,MONTH=29,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=100,DAY_OF_YEAR=318,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=327,MINUTE=21,SECOND=11,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekyearOfCentury();
        boolean boolean8 = dateTimeFieldType1.isSupported(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTime22.getSecondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfYear();
        boolean boolean25 = dateMidnight13.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean42 = interval38.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTime dateTime43 = interval38.getEnd();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfWeek();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean54 = interval46.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = interval46.withStart((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration60 = interval38.toDuration();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight31.withDurationAdded((org.joda.time.ReadableDuration) duration60, 24);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight13.withDurationAdded((org.joda.time.ReadableDuration) duration60, 19);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        java.util.Date date72 = dateMidnight71.toDate();
        org.joda.time.DateMidnight.Property property73 = dateMidnight71.dayOfWeek();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71);
        boolean boolean75 = interval67.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration76 = interval74.toDuration();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight64.withDurationAdded((org.joda.time.ReadableDuration) duration76, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone79 = dateMidnight78.getZone();
        org.joda.time.Chronology chronology80 = chronology5.withZone(dateTimeZone79);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        java.lang.String str83 = dateTimeZone82.toString();
        long long85 = dateTimeZone79.getMillisKeepLocal(dateTimeZone82, 0L);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate((long) 395, dateTimeZone79);
        org.joda.time.LocalDate localDate88 = localDate86.withYear(72);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 24 + "'", int23 == 24);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(localDate88);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder5.setTimeOfDay(8, 32770, 2);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime2.minusDays(11);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int14 = dateTime11.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 34545, (-292275054));
        org.joda.time.DateTime dateTime20 = dateTime11.withDurationAdded(5L, 28);
        org.joda.time.DateTime dateTime22 = dateTime11.withMinuteOfHour(27);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long27 = dateTimeZone24.convertLocalToUTC((long) 5, true);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime22.toMutableDateTime(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5L + "'", long27 == 5L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        calendar0.setMinimalDaysInFirstWeek(12);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=12,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.hourOfDay();
        org.joda.time.Chronology chronology12 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        long long16 = dateTimeField13.addWrapField((long) 34815702, 52935);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-2051187584298L) + "'", long16 == (-2051187584298L));
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date7.getHours();
        int int10 = date7.getMonth();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date7);
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(34900);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-1L), dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readableDuration15);
        int int17 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTimeISO();
        int int22 = dateTime4.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        boolean boolean31 = dateMidnight28.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property32 = dateMidnight28.centuryOfEra();
        java.lang.String str33 = property32.getAsText();
        org.joda.time.DateMidnight dateMidnight34 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight34.withChronology(chronology40);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.yearOfCentury();
        org.joda.time.DateTime dateTime47 = dateTime4.toDateTime(chronology40);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "19" + "'", str33, "19");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-59007882089833L));
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths(99);
        org.junit.Assert.assertNotNull(yearMonthDay3);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime2.minusDays(11);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int14 = dateTime11.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 34545, (-292275054));
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight24, readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight34 = dateTime33.toDateMidnight();
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.centuryOfEra();
        int int36 = dateMidnight24.compareTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getRangeDurationType();
        int int39 = dateMidnight24.get(dateTimeFieldType37);
        org.joda.time.DateTime.Property property40 = dateTime18.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime41 = property40.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.property(dateTimeFieldType17);
        int int19 = dateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime21 = dateTime7.withField(dateTimeFieldType17, 24);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = localDate31.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField33.getType();
        java.lang.String str35 = dateTimeFieldType34.toString();
        org.joda.time.DateTime dateTime37 = dateTime23.withField(dateTimeFieldType34, 5);
        org.joda.time.DateTime dateTime39 = dateTime23.minusHours(34715586);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime23.withDayOfYear(52952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52952 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "monthOfYear" + "'", str35, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("56");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder2.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        boolean boolean8 = localDate1.equals((java.lang.Object) builder7);
        java.util.Calendar.Builder builder12 = builder7.setDate(40, 292278993, (int) (short) 10);
        java.util.Calendar.Builder builder16 = builder7.setDate(10, 1971, 28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder19 = builder7.set(45, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.clockhourOfHalfday();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(3516860307634L, chronology4);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        java.util.Locale locale13 = null;
        int int14 = property11.getMaximumShortTextLength(locale13);
        org.joda.time.LocalDate localDate16 = property11.setCopy(9);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.setCopy(59);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.Interval interval17 = localDate15.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfYear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readableDuration15);
        int int17 = dateTime14.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        boolean boolean25 = dateMidnight22.isBefore((long) ' ');
        org.joda.time.LocalDate localDate26 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology27 = dateMidnight22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean29 = dateMidnight22.isSupported(dateTimeFieldType28);
        int int30 = dateTime14.get(dateTimeFieldType28);
        boolean boolean31 = localDate11.isSupported(dateTimeFieldType28);
        int int32 = localDate11.size();
        org.joda.time.LocalDate.Property property33 = localDate11.monthOfYear();
        int int34 = localDate11.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35004 + "'", int30 == 35004);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = interval9.contains((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime17.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime23 = dateTime17.minusDays((int) (byte) 10);
        boolean boolean24 = interval9.contains((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay29.withPeriodAdded(readablePeriod30, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = localDate40.toInterval(dateTimeZone41);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.Period period44 = interval42.toPeriod();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weekyears();
        int int46 = period44.get(durationFieldType45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay29.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 0);
        org.joda.time.MutablePeriod mutablePeriod49 = period44.toMutablePeriod();
        org.joda.time.Interval interval50 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(interval50);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(27);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(5);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minus((long) (-1));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minus(readablePeriod22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = timeOfDay23.toDateTimeToday(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone25);
        long long30 = dateTimeZone8.getMillisKeepLocal(dateTimeZone25, 0L);
        org.joda.time.DateTime dateTime31 = dateTime2.toDateTime(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime2.toGregorianCalendar();
        java.util.TimeZone timeZone33 = gregorianCalendar32.getTimeZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter5.getPrinter();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str8 = dateTimeZone6.getNameKey((long) (short) 0);
        boolean boolean10 = dateTimeZone6.isStandardOffset(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(385, 33334743, (-378559), (int) (short) 0, 21, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33334743 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(97L);
        org.joda.time.LocalDate localDate2 = dateMidnight1.toLocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.plusWeeks(22);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(27);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.LocalDate.Property property8 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks(54);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra(32772);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minus((long) (-1));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minus(readablePeriod10);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusMinutes(1);
        int int14 = timeOfDay13.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withHourOfDay(23);
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(617, 36000000, 2810341, 34727424, 34736, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34727424 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42 + "'", int14 == 42);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        java.util.Date date5 = new java.util.Date(32769, 33330867, 2, (int) (byte) 10, (-391));
        long long6 = date5.getTime();
        int int7 = date5.getSeconds();
        java.lang.String str8 = date5.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Apr 02 03:29:00 UTC 2812241");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 88683594953340000L + "'", long6 == 88683594953340000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Fri Apr 02 03:29:00 UTC 2812241" + "'", str8, "Fri Apr 02 03:29:00 UTC 2812241");
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(33538L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.dayOfWeek();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableDuration2, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean12 = interval8.isBefore((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTime dateTime13 = interval8.getEnd();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight.Property property22 = dateMidnight20.dayOfWeek();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean24 = interval16.isAfter((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.Interval interval28 = interval16.withStart((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = interval8.overlaps((org.joda.time.ReadableInterval) interval16);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Interval interval59 = interval36.withPeriodAfterStart(readablePeriod58);
        org.joda.time.Interval interval60 = interval36.toInterval();
        org.joda.time.Interval interval61 = interval8.gap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.YearMonthDay yearMonthDay66 = dateMidnight64.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plus((-1L));
        org.joda.time.Chronology chronology72 = dateMidnight71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.secondOfMinute();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology72);
        org.joda.time.DurationField durationField75 = chronology72.days();
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay66.withChronologyRetainFields(chronology72);
        org.joda.time.DurationField durationField77 = chronology72.months();
        org.joda.time.Interval interval78 = interval8.withChronology(chronology72);
        org.joda.time.DateTimeField dateTimeField79 = chronology72.secondOfDay();
        org.joda.time.DurationField durationField80 = chronology72.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval81 = new org.joda.time.Interval(31535999999L, (long) 791, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNull(interval61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology42 = dateTimeFormatter6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 35);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 1969, false, 3283200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter6.withZone(dateTimeZone45);
        int int51 = dateTimeFormatter6.getDefaultYear();
        boolean boolean52 = dateTimeFormatter6.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-189298031L) + "'", long49 == (-189298031L));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.Chronology chronology5 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight8.toYearMonthDay();
        int[] intArray11 = yearMonthDay10.getValues();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.withPeriodAdded(readablePeriod12, 22);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusMonths(13);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears(5);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval40.toPeriod(periodType45);
        org.joda.time.DateTime dateTime47 = dateTime31.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.LocalDate localDate49 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 6);
        org.joda.time.PeriodType periodType50 = period46.getPeriodType();
        org.joda.time.Period period51 = interval17.toPeriod(periodType50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears(5);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        java.util.Date date72 = dateMidnight71.toDate();
        org.joda.time.DateMidnight.Property property73 = dateMidnight71.dayOfWeek();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean78 = interval74.isBefore((org.joda.time.ReadableInterval) interval77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        org.joda.time.DateTime dateTime81 = dateTime65.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDate localDate83 = localDate61.withPeriodAdded((org.joda.time.ReadablePeriod) period80, 6);
        org.joda.time.PeriodType periodType84 = period80.getPeriodType();
        org.joda.time.Period period85 = interval17.toPeriod(periodType84);
        org.joda.time.LocalDate localDate86 = localDate1.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray87 = localDate86.getFieldTypes();
        int int88 = localDate86.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 365 + "'", int88 == 365);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.minusMinutes(32772);
        boolean boolean12 = dateTime5.isBefore((-61851340800000L));
        java.util.Date date13 = dateTime5.toDate();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 11 09:43:24 UTC 2022");
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime.Property property19 = dateTime17.dayOfYear();
        boolean boolean20 = dateMidnight8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime38 = interval33.getEnd();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45);
        boolean boolean49 = interval41.isAfter((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L), dateTimeZone51);
        org.joda.time.Interval interval53 = interval41.withStart((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = interval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration55 = interval33.toDuration();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight26.withDurationAdded((org.joda.time.ReadableDuration) duration55, 24);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight8.withDurationAdded((org.joda.time.ReadableDuration) duration55, 19);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        java.util.Date date67 = dateMidnight66.toDate();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.dayOfWeek();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableDuration63, (org.joda.time.ReadableInstant) dateMidnight66);
        boolean boolean70 = interval62.isAfter((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Duration duration71 = interval69.toDuration();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight59.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration71, readableInstant74);
        org.joda.time.DateTime dateTime76 = dateTime5.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getDurationType();
        org.joda.time.DateTime.Property property79 = dateTime76.property(dateTimeFieldType77);
        org.joda.time.DateTime dateTime80 = property79.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime81 = dateTime80.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        java.util.Date date3 = new java.util.Date(800, 122, 34699);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 28 00:00:00 UTC 2805");
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.centuries();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay7.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int17 = yearMonthDay7.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.days();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay22.withChronologyRetainFields(chronology28);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay22.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight37.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime44 = dateTime42.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(5);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval67.toPeriod(periodType72);
        org.joda.time.DateTime dateTime74 = dateTime58.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDate localDate76 = localDate54.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 6);
        org.joda.time.PeriodType periodType77 = period73.getPeriodType();
        org.joda.time.DateTime dateTime79 = dateTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period73, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay22.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.MutablePeriod mutablePeriod81 = period73.toMutablePeriod();
        org.joda.time.PeriodType periodType82 = period73.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = yearMonthDay7.getFieldTypes();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight5.toYearMonthDay();
        int[] intArray8 = yearMonthDay7.getValues();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withPeriodAdded(readablePeriod9, 22);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.dayOfWeek();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean24 = interval20.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int int28 = period26.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate48 = localDate42.withWeekyear(19);
        org.joda.time.LocalTime localTime49 = null;
        org.joda.time.DateTime dateTime50 = localDate42.toDateTime(localTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        int int61 = localDate58.getYearOfCentury();
        boolean boolean62 = localDate42.isBefore((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.DateTime dateTime66 = localDate42.toDateTime((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight65);
        int int68 = period26.size();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = period26.getValue((-19034));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -19034");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        boolean boolean13 = interval5.isAfter((org.joda.time.ReadableInterval) interval12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Interval interval15 = interval12.withPeriodAfterStart(readablePeriod14);
        long long16 = interval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = interval12.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate25.toInterval(dateTimeZone26);
        boolean boolean28 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        boolean boolean36 = dateMidnight33.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property37 = dateMidnight33.weekyear();
        org.joda.time.DateMidnight dateMidnight39 = property37.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.monthOfYear();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime43.minus(readableDuration47);
        boolean boolean49 = dateMidnight41.isAfter((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean50 = mutableInterval17.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        boolean boolean59 = dateMidnight56.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property60 = dateMidnight56.centuryOfEra();
        java.lang.String str61 = property60.getAsText();
        org.joda.time.DateMidnight dateMidnight62 = property60.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plus((-1L));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.hours();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight62.withChronology(chronology68);
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology68);
        org.joda.time.DateTime dateTime73 = dateTime43.toDateTime(chronology68);
        org.joda.time.LocalDate localDate74 = org.joda.time.LocalDate.now(chronology68);
        org.joda.time.DateTimeField dateTimeField75 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField76 = chronology68.weekyear();
        org.joda.time.DateTimeField dateTimeField77 = chronology68.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(578, 0, 51, chronology68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "19" + "'", str61, "19");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime37 = localDate19.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 59, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 34647002, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        int int50 = localDate47.getYearOfCentury();
        org.joda.time.LocalTime localTime51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate63 = localDate59.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.Chronology chronology69 = dateMidnight68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.secondOfMinute();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.LocalDate localDate73 = localDate71.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate75 = localDate71.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        java.lang.String str78 = dateTimeZone77.toString();
        org.joda.time.DateTime dateTime79 = localDate75.toDateTimeAtCurrentTime(dateTimeZone77);
        boolean boolean80 = dateTimeZone77.isFixed();
        org.joda.time.DateTime dateTime81 = localDate63.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTime dateTime82 = localDate47.toDateTime(localTime51, dateTimeZone77);
        java.util.TimeZone timeZone83 = dateTimeZone77.toTimeZone();
        long long85 = dateTimeZone77.previousTransition((-1028665186000L));
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight39.withZoneRetainFields(dateTimeZone77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(3993, 18, 34709682, 18, 314, 292278993, dateTimeZone77);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 314 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1028665186000L) + "'", long85 == (-1028665186000L));
        org.junit.Assert.assertNotNull(dateMidnight86);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(25);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology42 = dateTimeFormatter6.getChronology();
        org.joda.time.Chronology chronology43 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter6.withDefaultYear(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = dateTimeFormatter46.print(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNull(chronology42);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertNull(dateTimePrinter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy("0");
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTimeISO();
        int int13 = dateMidnight11.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight16.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay18.withPeriodAdded(readablePeriod19, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.withFieldAdded(durationFieldType23, 3);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.withDayOfMonth(26);
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        int int29 = dateMidnight11.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(38488446, 24, 327, (-5599659));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38488446 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime1.toCalendar(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime.Property property11 = dateTime1.secondOfMinute();
        long long12 = property11.remainder();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572605258,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=25,MILLISECOND=258,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 258L + "'", long12 == 258L);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        int int13 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DurationField durationField15 = property12.getLeapDurationField();
        java.lang.String str16 = property12.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "6" + "'", str16, "6");
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval2.withPeriodBeforeEnd(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        boolean boolean24 = dateMidnight21.isBefore((long) ' ');
        org.joda.time.LocalDate localDate25 = dateMidnight21.toLocalDate();
        boolean boolean26 = interval16.equals((java.lang.Object) localDate25);
        org.joda.time.DateTime dateTime27 = interval16.getStart();
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(11);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.year();
        org.joda.time.DateMidnight dateMidnight7 = property5.addWrapFieldToCopy(19);
        org.joda.time.DateMidnight dateMidnight9 = property5.addToCopy(354);
        org.joda.time.DateMidnight dateMidnight10 = property5.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plusYears(3993);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property32 = localDate11.year();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.DateTime dateTime40 = dateTime37.plusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-1L), dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.plus(readableDuration44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.plus(readableDuration48);
        int int50 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property51 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime53 = property51.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime53.toMutableDateTimeISO();
        int int55 = dateTime37.compareTo((org.joda.time.ReadableInstant) mutableDateTime54);
        int int56 = property32.compareTo((org.joda.time.ReadableInstant) mutableDateTime54);
        int int57 = mutableDateTime54.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        boolean boolean65 = dateMidnight62.isBefore((long) ' ');
        org.joda.time.LocalDate localDate66 = dateMidnight62.toLocalDate();
        org.joda.time.Chronology chronology67 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.plus((-1L));
        org.joda.time.Chronology chronology74 = dateMidnight73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.secondOfMinute();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology74);
        org.joda.time.LocalDate localDate78 = localDate76.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate80 = localDate76.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property81 = localDate80.era();
        int int82 = dateTimeField68.getMaximumValue((org.joda.time.ReadablePartial) localDate80);
        java.util.Locale locale84 = null;
        java.lang.String str85 = dateTimeField68.getAsShortText((int) (byte) -1, locale84);
        int int86 = mutableDateTime54.get(dateTimeField68);
        int int88 = dateTimeField68.get(1900800000L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 25 + "'", int38 == 25);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 33805 + "'", int57 == 33805);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 24 + "'", int82 == 24);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-1" + "'", str85, "-1");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 24 + "'", int88 == 24);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.set((int) (byte) -1, 59, (-1), 52, 21, 22);
        java.time.Instant instant9 = calendar1.toInstant();
        int int10 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.add((-20952), 0);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62043824318000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=4,MINUTE=21,SECOND=22,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.plusWeeks(53);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        java.util.Date date35 = calendar34.getTime();
        calendar34.setFirstDayOfWeek(34585);
        calendar34.clear(0);
        int int40 = calendar34.getWeekYear();
        int int42 = calendar34.getMinimum(0);
        calendar34.setTimeInMillis(33330241L);
        int int45 = calendar34.getWeeksInWeekYear();
        java.time.Instant instant46 = calendar34.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=33330241,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=34585,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=15,SECOND=30,MILLISECOND=241,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 17 00:00:00 UTC 2023");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2023 + "'", int40 == 2023);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(instant46);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter6.getZone();
        java.util.Locale locale42 = dateTimeFormatter6.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTimeFormatter6.print((-5L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNull(locale42);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        long long16 = calendar0.getTimeInMillis();
        int int17 = calendar0.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar0.getActualMinimum(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.property(dateTimeFieldType3);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.plus(readablePeriod6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusHours(99);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = timeOfDay7.getFields();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay7.plusMinutes(762);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay7.minusMillis(50);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(70L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(chronology14);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime.Property property20 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime22 = property20.addToCopy(2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1670750545591L + "'", long18 == 1670750545591L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readableDuration15);
        int int17 = dateTime14.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        boolean boolean25 = dateMidnight22.isBefore((long) ' ');
        org.joda.time.LocalDate localDate26 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology27 = dateMidnight22.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean29 = dateMidnight22.isSupported(dateTimeFieldType28);
        int int30 = dateTime14.get(dateTimeFieldType28);
        boolean boolean31 = localDate11.isSupported(dateTimeFieldType28);
        int int32 = localDate11.size();
        org.joda.time.LocalDate.Property property33 = localDate11.monthOfYear();
        int int34 = localDate11.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35005 + "'", int30 == 35005);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = localDate11.getDayOfWeek();
        int int17 = localDate11.getEra();
        org.joda.time.LocalDate localDate19 = localDate11.plusWeeks(820);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.days();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay24.withChronologyRetainFields(chronology30);
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight36.getZone();
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay34.toDateMidnight(dateTimeZone39);
        java.util.Set<java.lang.String> strSet41 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean42 = dateTimeZone39.equals((java.lang.Object) strSet41);
        long long44 = dateTimeZone39.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.DurationField durationField52 = chronology50.millis();
        boolean boolean53 = dateTimeZone39.equals((java.lang.Object) chronology50);
        org.joda.time.DateMidnight dateMidnight54 = localDate11.toDateMidnight(dateTimeZone39);
        java.lang.String str56 = dateTimeZone39.getName(1670750545591L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 14400001L + "'", long44 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime4.minusSeconds(29);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval2.withPeriodBeforeEnd(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = property21.roundHalfCeilingCopy();
        org.joda.time.Interval interval23 = interval2.withEnd((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        int int30 = dateTime29.getSecondOfMinute();
        org.joda.time.DateTime.Property property31 = dateTime29.dayOfYear();
        java.util.Locale locale32 = null;
        int int33 = property31.getMaximumTextLength(locale32);
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        int int40 = dateTime37.getWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime37.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded((long) 34, 33330867);
        long long46 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean47 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime49 = dateTime42.withYearOfEra(2066);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25 + "'", int30 == 25);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-719528L) + "'", long46 == (-719528L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfYear();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMinimumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.TimeOfDay timeOfDay23 = property20.addWrapFieldToCopy(52);
        org.joda.time.DurationField durationField24 = property20.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        boolean boolean40 = yearMonthDay31.isEqual((org.joda.time.ReadablePartial) localDate39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (-1));
        long long46 = dateTimeZone42.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight47 = localDate39.toDateMidnight(dateTimeZone42);
        org.joda.time.LocalDate localDate49 = localDate39.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.hours();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.DurationField durationField59 = chronology55.minutes();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((java.lang.Object) localDate39, chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.dayOfWeek();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) property20, chronology55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.TimeOfDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:43:25.777" + "'", str6, "T09:43:25.777");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property4.getDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone15);
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-19034));
        org.joda.time.DateTime dateTime23 = dateTime21.plus((-60522647076000L));
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addWrapFieldToCopy(32770);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.minuteOfHour();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        org.joda.time.TimeOfDay timeOfDay19 = property16.addToCopy(34615813);
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 52, 25, 844]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval2.isAfter((long) 23);
        long long17 = interval2.getStartMillis();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minus((long) (-1));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        int int22 = dateMidnight20.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTimeAtMidnight(dateTimeZone29);
        long long32 = dateTimeZone29.previousTransition((long) 252);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight20.withZoneRetainFields(dateTimeZone29);
        boolean boolean34 = interval2.contains((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean45 = interval37.isAfter((org.joda.time.ReadableInterval) interval44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Interval interval47 = interval44.withPeriodAfterStart(readablePeriod46);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        java.util.Date date55 = dateMidnight54.toDate();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.dayOfWeek();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54);
        boolean boolean58 = interval50.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.Interval interval62 = interval50.withStart((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval50.isAfter((long) 23);
        org.joda.time.Interval interval65 = interval44.gap((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Interval interval66 = interval44.toInterval();
        boolean boolean67 = interval2.abuts((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.monthOfYear();
        org.joda.time.DateTime dateTime73 = property72.getDateTime();
        java.lang.String str74 = property72.toString();
        org.joda.time.DateTime dateTime75 = property72.withMinimumValue();
        int int76 = dateTime75.getMillisOfDay();
        int int77 = dateTime75.getYear();
        org.joda.time.DateTime.Property property78 = dateTime75.centuryOfEra();
        boolean boolean79 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 252L + "'", long32 == 252L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Property[monthOfYear]" + "'", str74, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35005879 + "'", int76 == 35005879);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        java.lang.String str13 = property12.getName();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay16 = property12.setCopy(9);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusHours((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hourOfDay" + "'", str13, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addToCopy(9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(5);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight.Property property22 = dateMidnight20.dayOfWeek();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean27 = interval23.isBefore((org.joda.time.ReadableInterval) interval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = interval23.toPeriod(periodType28);
        org.joda.time.DateTime dateTime30 = dateTime14.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime30.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = yearMonthDay10.toDateMidnight(dateTimeZone33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        java.lang.String str38 = dateTimeZone33.getID();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        java.lang.String str10 = property8.getAsString();
        org.joda.time.DurationField durationField11 = property8.getDurationField();
        java.lang.String str12 = property8.getName();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        int int25 = localDate20.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate27 = localDate20.minusDays(24);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minus((long) (-1));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DateTime dateTime33 = localDate32.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType34.getField(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime33.withChronology(chronology40);
        org.joda.time.DateTime dateTime44 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime49 = dateTime44.withZoneRetainFields(dateTimeZone48);
        org.joda.time.Interval interval50 = localDate20.toInterval(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate62 = localDate58.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.String str65 = dateTimeZone64.toString();
        org.joda.time.DateTime dateTime66 = localDate62.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate localDate68 = localDate62.withWeekyear(19);
        org.joda.time.LocalTime localTime69 = null;
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str73 = dateTimeZone71.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime74 = localDate62.toDateTime(localTime69, dateTimeZone71);
        org.joda.time.LocalDate.Property property75 = localDate62.weekyear();
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minus((long) (-1));
        org.joda.time.Chronology chronology79 = dateMidnight78.getChronology();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology79);
        boolean boolean81 = property75.equals((java.lang.Object) chronology79);
        org.joda.time.LocalDate localDate83 = property75.setCopy(17);
        int int84 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate83);
        org.joda.time.Chronology chronology85 = localDate83.getChronology();
        boolean boolean86 = property8.equals((java.lang.Object) chronology85);
        org.joda.time.YearMonthDay yearMonthDay87 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay87.plusDays(41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField91 = yearMonthDay89.getField(69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "UTC" + "'", str73, "UTC");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        int int47 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int49 = calendar0.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = calendar0.get(25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572606065,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=26,MILLISECOND=65,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology6);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minus((long) (-1));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minus(readablePeriod15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1970);
        org.joda.time.Chronology chronology21 = timeOfDay18.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) (-1));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minus(readablePeriod27);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay30.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.dayOfWeek();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean47 = interval43.isBefore((org.joda.time.ReadableInterval) interval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval43.toPeriod(periodType48);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay36.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay18.minus((org.joda.time.ReadablePeriod) period49);
        java.lang.String str52 = period49.toString();
        int[] intArray54 = chronology6.get((org.joda.time.ReadablePeriod) period49, (long) 131);
        org.joda.time.DateTimeField dateTimeField55 = chronology6.minuteOfHour();
        boolean boolean57 = dateTimeField55.isLeap(1644572221393L);
        java.util.Locale locale58 = null;
        int int59 = dateTimeField55.getMaximumShortTextLength(locale58);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0S" + "'", str52, "PT0S");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 131]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        long long5 = dateTimeZone1.nextTransition((long) 70);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone1);
        int int7 = dateMidnight6.getWeekyear();
        int int8 = dateMidnight6.getYearOfEra();
        int int9 = dateMidnight6.getMillisOfDay();
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 70L + "'", long5 == 70L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight13, readablePeriod14);
        org.joda.time.DateTime dateTime16 = interval15.getStart();
        long long17 = interval15.getEndMillis();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.dayOfWeek();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean28 = interval24.isBefore((org.joda.time.ReadableInterval) interval27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = interval24.toPeriod(periodType29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        java.util.Date date35 = dateMidnight34.toDate();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.dayOfWeek();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableDuration31, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean41 = interval37.isBefore((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTime dateTime42 = interval37.getEnd();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.dayOfWeek();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49);
        boolean boolean53 = interval45.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((-1L), dateTimeZone55);
        org.joda.time.Interval interval57 = interval45.withStart((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = interval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Interval interval60 = interval37.withPeriodAfterStart(readablePeriod59);
        org.joda.time.Interval interval61 = interval37.toInterval();
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        boolean boolean63 = interval24.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval24.withDurationAfterStart(readableDuration64);
        org.joda.time.Interval interval67 = interval24.withEndMillis((long) (short) 100);
        org.joda.time.Interval interval68 = interval15.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Period period69 = interval24.toPeriod();
        boolean boolean70 = interval24.containsNow();
        org.joda.time.Duration duration71 = interval24.toDuration();
        org.joda.time.DateTime dateTime72 = dateTime4.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.LocalTime localTime73 = dateTime72.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26 + "'", int5 == 26);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-13305600000L) + "'", long17 == (-13305600000L));
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localTime73);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (-1));
        java.lang.String str6 = dateTimeZone2.getNameKey((long) (short) 0);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(2311590L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight16.toYearMonthDay();
        int[] intArray19 = yearMonthDay18.getValues();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay18.withPeriodAdded(readablePeriod20, 22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean35 = interval31.isBefore((org.joda.time.ReadableInterval) interval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = interval31.toPeriod(periodType36);
        int int39 = period37.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay22.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate59 = localDate53.withWeekyear(19);
        org.joda.time.LocalTime localTime60 = null;
        org.joda.time.DateTime dateTime61 = localDate53.toDateTime(localTime60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.LocalDate localDate71 = localDate69.withYearOfEra((int) (byte) 10);
        int int72 = localDate69.getYearOfCentury();
        boolean boolean73 = localDate53.isBefore((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minus((long) (-1));
        org.joda.time.DateTime dateTime77 = localDate53.toDateTime((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateMidnight76);
        int int79 = period37.size();
        org.joda.time.LocalDate localDate80 = localDate7.minus((org.joda.time.ReadablePeriod) period37);
        java.lang.String str81 = period37.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11" + "'", str10, "2022-02-11");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 22 + "'", int72 == 22);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0S" + "'", str81, "PT0S");
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsText(locale10);
        java.lang.String str12 = property8.getAsText();
        org.joda.time.YearMonthDay yearMonthDay14 = property8.addToCopy(27);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.withYear(36);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate39 = localDate33.withWeekyear(19);
        org.joda.time.LocalTime localTime40 = null;
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime45 = localDate33.toDateTime(localTime40, dateTimeZone42);
        java.lang.String str47 = dateTimeZone42.getName(1000L);
        org.joda.time.DateTime dateTime48 = yearMonthDay21.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime.Property property49 = dateTime48.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property51 = dateTime48.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property52 = yearMonthDay16.property(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = localDate11.getField((-1860));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1860");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.yearOfEra();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsShortText(3283200000L, locale11);
        java.lang.String str14 = dateTimeField9.getAsText((long) 34522);
        int int16 = dateTimeField9.get(1670750220229L);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(4L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) timeOfDay18, 2100, locale20);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2100" + "'", str21, "2100");
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = dateTimeFormatter2.parseLocalDate("T09:38:33.505");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("T09:40:44.610");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property7.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusHours(10);
        int int14 = timeOfDay11.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        calendar0.add(6, 292278994);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate25.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        boolean boolean46 = dateTimeZone43.isFixed();
        org.joda.time.DateTime dateTime47 = localDate29.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate localDate49 = localDate29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property50 = localDate29.year();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        int int56 = dateTime55.getSecondOfMinute();
        org.joda.time.DateTime dateTime58 = dateTime55.plusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((-1L), dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.plus(readableDuration62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.plus(readableDuration66);
        int int68 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property69 = dateTime67.minuteOfHour();
        org.joda.time.DateTime dateTime71 = property69.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime71.toMutableDateTimeISO();
        int int73 = dateTime55.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        int int74 = property50.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property50.getFieldType();
        java.lang.String str76 = property50.toString();
        boolean boolean77 = calendar0.before((java.lang.Object) property50);
        int int78 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 26 + "'", int56 == 26);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Property[year]" + "'", str76, "Property[year]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (int) (short) 10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        int int13 = localDate8.getYearOfCentury();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 69 + "'", int13 == 69);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy((long) 6);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate13.toDateTime(localTime14, dateTimeZone15);
        int int17 = localDate13.getWeekyear();
        org.joda.time.LocalDate.Property property18 = localDate13.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate24 = localDate19.minusYears(484);
        int[] intArray25 = localDate24.getValues();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1486, 1, 1]");
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight2.toMutableDateTimeISO();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long10 = dateTimeZone7.convertLocalToUTC((long) 5, true);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.getNameKey((-60522647075197L));
        java.util.TimeZone timeZone14 = dateTimeZone7.toTimeZone();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = mutableDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5L + "'", long10 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        int int18 = localDate11.getYearOfEra();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-1160753259000L));
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.lang.String str13 = property10.getAsString();
        org.joda.time.LocalDate localDate14 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.addToCopy(34816);
        org.joda.time.YearMonthDay yearMonthDay20 = property17.withMinimumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate31.dayOfYear();
        org.joda.time.LocalDate.Property property36 = localDate31.year();
        int int37 = localDate31.getEra();
        org.joda.time.DateTime dateTime38 = localDate31.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime39 = localDate31.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        int int20 = localDate17.getYearOfEra();
        int int21 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate17);
        int int22 = dateTimeField9.getMaximumValue();
        long long25 = dateTimeField9.add(45L, (long) 59);
        int int26 = dateTimeField9.getMinimumValue();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate28.toDateTime(localTime29, dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate28.withYearOfEra(12);
        int[] intArray34 = localDate28.getValues();
        int int35 = localDate28.getYearOfEra();
        org.joda.time.LocalDate.Property property36 = localDate28.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.LocalDate localDate38 = property36.roundHalfEvenCopy();
        int int39 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 155088000045L + "'", long25 == 155088000045L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval12.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = dateTime3.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime21 = dateTime3.plusYears(46);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.minus(readableDuration21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate31.toInterval(dateTimeZone32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay15.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType8.getField(chronology34);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.halfdayOfDay();
        java.lang.String str40 = chronology34.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.DateTime dateTime9 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.Chronology chronology23 = timeOfDay20.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (-1));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minus(readablePeriod29);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay32.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean49 = interval45.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval45.toPeriod(periodType50);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay38.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.PeriodType periodType53 = period51.getPeriodType();
        int[] intArray56 = chronology23.get((org.joda.time.ReadablePeriod) period51, (long) (-1), (long) 24);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay8.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay8.minusMillis(292278994);
        org.joda.time.LocalTime localTime60 = timeOfDay8.toLocalTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(localTime60);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minusYears(1970);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        boolean boolean20 = interval12.isAfter((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = interval19.withPeriodAfterStart(readablePeriod21);
        boolean boolean23 = dateMidnight4.equals((java.lang.Object) readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight26.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar34 = dateMidnight32.toGregorianCalendar();
        boolean boolean35 = dateMidnight4.equals((java.lang.Object) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withDurationAdded((long) (-30801), 34555);
        org.joda.time.DateMidnight.Property property39 = dateMidnight32.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gregorianCalendar34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime2.minusDays(11);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int14 = dateTime11.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 34545, (-292275054));
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime17.minusDays(579);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = localDate16.toInterval(dateTimeZone17);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.Period period20 = interval18.toPeriod();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weekyears();
        int int22 = period20.get(durationFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime8.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        boolean boolean25 = period20.isSupported(durationFieldType24);
        org.joda.time.MutablePeriod mutablePeriod26 = period20.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutablePeriod26);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (-1));
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1644789600029L, dateTimeZone4);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 235, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((-61567603199900L), dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(32772);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        int[] intArray10 = yearMonthDay9.getValues();
        org.joda.time.LocalDate localDate11 = yearMonthDay9.toLocalDate();
        org.joda.time.DateTime dateTime12 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.Instant instant13 = dateTime2.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField29 = chronology23.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        long long34 = chronology23.add(10035038L, 1640995199609L, 46);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField36 = chronology23.minutes();
        org.joda.time.Chronology chronology37 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        long long42 = dateTimeField39.addWrapField((long) 34722164, 29);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField39.getAsText((long) 33330872, locale44);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 75485789217052L + "'", long34 == 75485789217052L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 17573922164L + "'", long42 == 17573922164L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        calendar0.set(0, 99, 59);
        calendar0.clear();
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder28 = builder25.set(4, 0);
        java.util.Calendar.Builder builder30 = builder25.setCalendarType("gregory");
        java.util.Calendar.Builder builder32 = builder30.setLenient(true);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        int int34 = calendar33.getFirstDayOfWeek();
        int int35 = calendar33.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        boolean boolean44 = date39.before(date43);
        int int45 = date39.getMonth();
        calendar33.setTime(date39);
        java.util.TimeZone timeZone47 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.util.Calendar.Builder builder49 = builder30.setTimeZone(timeZone47);
        boolean boolean50 = calendar0.before((java.lang.Object) builder30);
        long long51 = calendar0.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        int int18 = calendar0.getWeeksInWeekYear();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = calendar0.getDisplayName((int) (byte) 0, 34988549, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=42,MONTH=-292275054,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=40,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        long long16 = calendar0.getTimeInMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate39 = localDate33.withWeekyear(19);
        org.joda.time.LocalTime localTime40 = null;
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str44 = dateTimeZone42.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime45 = localDate33.toDateTime(localTime40, dateTimeZone42);
        java.lang.String str47 = dateTimeZone42.getName(1000L);
        org.joda.time.DateTime dateTime48 = yearMonthDay21.toDateTimeAtCurrentTime(dateTimeZone42);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.plusMonths((-1));
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight54.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight54.withYear(11);
        boolean boolean63 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTime.Property property64 = dateTime48.weekyear();
        java.util.Locale locale65 = null;
        java.lang.String str66 = property64.getAsText(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        boolean boolean68 = calendar0.before((java.lang.Object) property64);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T09:43:27.116Z" + "'", str49, "1970-01-01T09:43:27.116Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970" + "'", str66, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfWeek();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean16 = interval12.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval12.getEnd();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.Interval interval32 = interval20.withStart((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = interval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration34 = interval12.toDuration();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration34, 24);
        org.joda.time.DateMidnight.Property property37 = dateMidnight5.monthOfYear();
        org.joda.time.DurationField durationField38 = property37.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        int int42 = dateTimeField39.getDifference((-25253155306220000L), (long) 34796);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9602887) + "'", int42 == (-9602887));
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMonthOfYear((int) (short) 1);
        int int6 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        int int6 = dateMidnight4.getWeekyear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusMonths(27);
        int int9 = dateMidnight8.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.minus(readableDuration20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = localDate30.toInterval(dateTimeZone31);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay14.withChronologyRetainFields(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.seconds();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight8, chronology33);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight8.withCenturyOfEra(5601);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.DateTime dateTime54 = interval49.getEnd();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        java.util.Date date62 = dateMidnight61.toDate();
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.dayOfWeek();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableDuration58, (org.joda.time.ReadableInstant) dateMidnight61);
        boolean boolean65 = interval57.isAfter((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((-1L), dateTimeZone67);
        org.joda.time.Interval interval69 = interval57.withStart((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = interval49.overlaps((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval49.withPeriodAfterStart(readablePeriod71);
        org.joda.time.Interval interval73 = interval49.toInterval();
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime77 = dateTime74.withField(dateTimeFieldType75, 4);
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType75.getDurationType();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight8.withField(dateTimeFieldType75, 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight82 = dateMidnight8.withMonthOfYear(34522);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34522 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        long long9 = interval7.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        long long24 = dateTimeZone20.convertUTCToLocal((long) 5);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone20.getName((long) 0, locale26);
        org.joda.time.Interval interval28 = yearMonthDay14.toInterval(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = interval28.getStart();
        org.joda.time.Interval interval30 = interval7.gap((org.joda.time.ReadableInterval) interval28);
        long long31 = interval30.toDurationMillis();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateMidnight.Property property40 = dateMidnight38.dayOfWeek();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38);
        boolean boolean42 = interval34.isAfter((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Interval interval44 = interval41.withPeriodAfterStart(readablePeriod43);
        long long45 = interval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = interval41.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = localDate54.toInterval(dateTimeZone55);
        boolean boolean57 = mutableInterval46.isBefore((org.joda.time.ReadableInterval) interval56);
        boolean boolean58 = mutableInterval46.isBeforeNow();
        org.joda.time.Interval interval59 = interval30.gap((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        boolean boolean67 = dateMidnight64.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property68 = dateMidnight64.centuryOfEra();
        boolean boolean69 = property68.isLeap();
        org.joda.time.DateMidnight dateMidnight71 = property68.setCopy("0");
        org.joda.time.DateTime dateTime72 = dateMidnight71.toDateTimeISO();
        int int73 = dateTime72.getHourOfDay();
        org.joda.time.DateTime dateTime75 = dateTime72.minusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.LocalDate localDate77 = dateTime72.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = interval59.isAfter((org.joda.time.ReadableInstant) dateTime72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-13305600000L) + "'", long9 == (-13305600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5L + "'", long24 == 5L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 13305600000L + "'", long31 == 13305600000L);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(interval59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 12);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.minus(readableDuration7);
        org.joda.time.DateTime.Property property9 = dateTime3.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime3.withField(dateTimeFieldType10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime12.withYear(32770);
        org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        long long17 = dateTime15.getMillis();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35007288L + "'", long17 == 35007288L);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        long long20 = chronology15.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfDay();
        org.joda.time.Chronology chronology22 = chronology15.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.seconds();
        org.joda.time.DurationField durationField25 = chronology22.months();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 292279042L + "'", long20 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.LocalDate localDate75 = localDate73.withWeekyear(32769);
        org.joda.time.LocalDate.Property property76 = localDate73.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.property(dateTimeFieldType33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate36.toDateTime(localTime37, dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate36.withYearOfEra(12);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate59 = localDate53.withWeekyear(19);
        org.joda.time.LocalTime localTime60 = null;
        org.joda.time.DateTime dateTime61 = localDate53.toDateTime(localTime60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.LocalDate localDate71 = localDate69.withYearOfEra((int) (byte) 10);
        int int72 = localDate69.getYearOfCentury();
        boolean boolean73 = localDate53.isBefore((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minus((long) (-1));
        org.joda.time.DateTime dateTime77 = localDate53.toDateTime((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.DateTime dateTime78 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = dateTime78.withLaterOffsetAtOverlap();
        boolean boolean80 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime82 = dateTime78.minusMillis(64);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 22 + "'", int72 == 22);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(34714550, 25260000, 33435, 79, 579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(327);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str8 = dateTimeZone6.getNameKey((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(5);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minus(readablePeriod20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = timeOfDay21.toDateTimeToday(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime12, dateTimeZone23);
        long long28 = dateTimeZone6.getMillisKeepLocal(dateTimeZone23, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(555, 2026, (int) (byte) 100, 39, 0, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(chronology6);
        int int8 = yearMonthDay7.size();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight14, readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.centuryOfEra();
        int int26 = dateMidnight14.compareTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight14.plusMonths(24);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight14.getZone();
        org.joda.time.Interval interval30 = yearMonthDay7.toInterval(dateTimeZone29);
        org.joda.time.Chronology chronology31 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(obj0, chronology31);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(212);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = dateTimeFormatter2.parseLocalTime("T09:40:23.972");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime1.withMillisOfSecond(0);
        int int10 = dateTime1.getEra();
        org.joda.time.DateTime.Property property11 = dateTime1.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusDays((-1));
        org.joda.time.DateTime dateTime29 = dateTime8.withMinuteOfHour(16);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.secondOfMinute();
        org.joda.time.DateTime dateTime39 = dateTime8.toDateTime(chronology35);
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(5);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minus((long) (-1));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minus(readablePeriod28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime20, dateTimeZone31);
        java.util.TimeZone timeZone35 = dateTimeZone31.toTimeZone();
        java.util.Calendar.Builder builder36 = builder12.setTimeZone(timeZone35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder39 = builder36.setWeekDefinition(0, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property35 = localDate31.dayOfYear();
        org.joda.time.LocalDate.Property property36 = localDate31.year();
        org.joda.time.Chronology chronology37 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology37);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.withMinimumValue();
        org.joda.time.DateTime dateTime9 = property7.roundCeilingCopy();
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(9);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((-1L), dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        int int30 = dateTime29.getSecondOfMinute();
        org.joda.time.DateTime.Property property31 = dateTime29.dayOfYear();
        boolean boolean32 = dateMidnight20.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean49 = interval45.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTime dateTime50 = interval45.getEnd();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.DateMidnight.Property property59 = dateMidnight57.dayOfWeek();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableDuration54, (org.joda.time.ReadableInstant) dateMidnight57);
        boolean boolean61 = interval53.isAfter((org.joda.time.ReadableInterval) interval60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-1L), dateTimeZone63);
        org.joda.time.Interval interval65 = interval53.withStart((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = interval45.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Duration duration67 = interval45.toDuration();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight38.withDurationAdded((org.joda.time.ReadableDuration) duration67, 24);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration67, 19);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone77);
        java.util.Date date79 = dateMidnight78.toDate();
        org.joda.time.DateMidnight.Property property80 = dateMidnight78.dayOfWeek();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration75, (org.joda.time.ReadableInstant) dateMidnight78);
        boolean boolean82 = interval74.isAfter((org.joda.time.ReadableInterval) interval81);
        org.joda.time.Duration duration83 = interval81.toDuration();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight71.withDurationAdded((org.joda.time.ReadableDuration) duration83, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration83, readableInstant86);
        org.joda.time.DateTime dateTime89 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration83, 27);
        org.joda.time.DateTime dateTime90 = dateTime14.minus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateTime dateTime91 = dateTime9.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.DateTime dateTime93 = dateTime91.minusMillis(122);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = dateTime93.withMonthOfYear(1968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 27 + "'", int30 == 27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        int int19 = dateTime18.getHourOfDay();
        int int20 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.plusMinutes(5);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes((-1974));
        org.joda.time.DateTime dateTime26 = dateTime22.plusDays(0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27 + "'", int12 == 27);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 583 + "'", int20 == 583);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMillis((int) (short) 0);
        java.lang.String str6 = timeOfDay4.toString("122");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "122" + "'", str6, "122");
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(5);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean36 = interval32.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = interval32.toPeriod(periodType37);
        org.joda.time.DateTime dateTime39 = dateTime23.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalDate localDate41 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 6);
        org.joda.time.PeriodType periodType42 = period38.getPeriodType();
        org.joda.time.DateTime dateTime44 = dateTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period38, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime7.getZone();
        org.joda.time.DateTime dateTime48 = dateTime7.minusMonths(17);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        java.util.Date date56 = dateMidnight55.toDate();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.dayOfWeek();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableDuration52, (org.joda.time.ReadableInstant) dateMidnight55);
        boolean boolean59 = interval51.isAfter((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Interval interval61 = interval58.withPeriodAfterStart(readablePeriod60);
        long long62 = interval58.toDurationMillis();
        org.joda.time.Interval interval63 = interval58.toInterval();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        java.util.Date date68 = dateMidnight67.toDate();
        org.joda.time.DateMidnight.Property property69 = dateMidnight67.dayOfWeek();
        org.joda.time.Interval interval70 = new org.joda.time.Interval(readableDuration64, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean74 = interval70.isBefore((org.joda.time.ReadableInterval) interval73);
        org.joda.time.DateTime dateTime75 = interval70.getEnd();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone81);
        java.util.Date date83 = dateMidnight82.toDate();
        org.joda.time.DateMidnight.Property property84 = dateMidnight82.dayOfWeek();
        org.joda.time.Interval interval85 = new org.joda.time.Interval(readableDuration79, (org.joda.time.ReadableInstant) dateMidnight82);
        boolean boolean86 = interval78.isAfter((org.joda.time.ReadableInterval) interval85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((-1L), dateTimeZone88);
        org.joda.time.Interval interval90 = interval78.withStart((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = interval70.overlaps((org.joda.time.ReadableInterval) interval78);
        org.joda.time.Duration duration92 = interval70.toDuration();
        org.joda.time.Interval interval93 = interval63.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration92);
        org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration92);
        int int95 = dateTime48.getMinuteOfHour();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1643673600000L, 1670751480776L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears(5);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean29 = interval25.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval25.toPeriod(periodType30);
        org.joda.time.DateTime dateTime32 = dateTime16.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate34 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 6);
        org.joda.time.PeriodType periodType35 = period31.getPeriodType();
        org.joda.time.Period period36 = interval2.toPeriod(periodType35);
        org.joda.time.DateTime dateTime37 = interval2.getEnd();
        java.lang.String str38 = dateTime37.toString();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-12-11T09:38:00.776Z" + "'", str38, "2022-12-11T09:38:00.776Z");
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.Period period11 = interval9.toPeriod();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean22 = interval18.isBefore((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTime dateTime23 = interval18.getEnd();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        boolean boolean34 = interval26.isAfter((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1L), dateTimeZone36);
        org.joda.time.Interval interval38 = interval26.withStart((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = interval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval26.withPeriodAfterStart(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.monthOfYear();
        org.joda.time.Interval interval49 = interval41.withChronology(chronology47);
        boolean boolean50 = interval9.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTime dateTime51 = interval41.getEnd();
        boolean boolean53 = interval41.isBefore((-1028665186000L));
        org.joda.time.Interval interval55 = interval41.withEndMillis((long) 38488446);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval55);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval2.withPeriodBeforeEnd(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = property21.roundHalfCeilingCopy();
        org.joda.time.Interval interval23 = interval2.withEnd((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime35.withMinuteOfHour(8);
        boolean boolean41 = dateMidnight28.equals((java.lang.Object) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property48 = dateTime45.property(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = property48.withMaximumValue();
        org.joda.time.DateTime dateTime50 = property48.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        java.util.Date date61 = dateMidnight60.toDate();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.dayOfWeek();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration57, (org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean67 = interval63.isBefore((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTime dateTime68 = interval63.getEnd();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone74);
        java.util.Date date76 = dateMidnight75.toDate();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfWeek();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableDuration72, (org.joda.time.ReadableInstant) dateMidnight75);
        boolean boolean79 = interval71.isAfter((org.joda.time.ReadableInterval) interval78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((-1L), dateTimeZone81);
        org.joda.time.Interval interval83 = interval71.withStart((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean84 = interval63.overlaps((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Duration duration85 = interval63.toDuration();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight56.withDurationAdded((org.joda.time.ReadableDuration) duration85, 24);
        org.joda.time.DateTime dateTime89 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration85, 24);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight28.withDurationAdded((org.joda.time.ReadableDuration) duration85, 131);
        org.joda.time.Interval interval92 = interval23.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.Interval interval94 = interval92.withChronology(chronology93);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 27 + "'", int36 == 27);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval94);
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.Chronology chronology11 = timeOfDay8.getChronology();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay26.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay8.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.millisOfSecond();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay41.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 16);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        boolean boolean22 = yearMonthDay13.isEqual((org.joda.time.ReadablePartial) localDate21);
        java.lang.String str23 = yearMonthDay13.toString();
        org.joda.time.DateTime dateTime24 = dateTime6.withFields((org.joda.time.ReadablePartial) yearMonthDay13);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay13.minusYears(2);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay13.withYear(21);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        int[] intArray35 = yearMonthDay34.getValues();
        org.joda.time.LocalDate localDate36 = yearMonthDay34.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(962409600016L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = yearMonthDay13.toDateTimeAtMidnight(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-12-31" + "'", str23, "1969-12-31");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 16);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        java.lang.String str11 = dateTimeZone9.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 16);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) 25);
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.DateTime.Property property10 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime6.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology6);
        int int9 = dateTimeField8.getMaximumValue();
        java.lang.String str10 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        int int15 = date14.getHours();
        int int16 = date14.getDay();
        int int17 = date14.getDay();
        date14.setYear(4);
        int int20 = date14.getDate();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromDateFields(date14);
        int int22 = timeOfDay21.getMinuteOfHour();
        int int23 = timeOfDay21.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay21.minusMinutes(7);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay21);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) timeOfDay26, 3, locale28);
        long long32 = dateTimeField8.addWrapField((long) (short) 0, 5601);
        boolean boolean33 = dateTimeField8.isSupported();
        long long35 = dateTimeField8.roundFloor((-311126400000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfDay" + "'", str10, "hourOfDay");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3" + "'", str29, "3");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32400000L + "'", long32 == 32400000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-311126400000L) + "'", long35 == (-311126400000L));
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        boolean boolean14 = date9.before(date13);
        int int15 = date9.getDay();
        calendar0.setTime(date9);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar0.getActualMinimum(34699);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34699");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(6);
        int int10 = dateTime9.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType17.getField(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime16.withChronology(chronology23);
        org.joda.time.DateTime dateTime27 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis(281723794000L);
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfMinute();
        boolean boolean31 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime33 = dateTime29.withMillisOfSecond(522);
        boolean boolean34 = dateTime33.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 28 + "'", int5 == 28);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant47 = calendar0.toInstant();
        java.util.Date date48 = java.util.Date.from(instant47);
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        java.lang.String str50 = date48.toGMTString();
        date48.setMonth(57);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572608055,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=28,MILLISECOND=55,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Sun Oct 11 09:43:28 UTC 2026");
        org.junit.Assert.assertNotNull(yearMonthDay49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "11 Feb 2022 09:43:28 GMT" + "'", str50, "11 Feb 2022 09:43:28 GMT");
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        java.util.Date date0 = new java.util.Date();
        java.time.Instant instant1 = date0.toInstant();
        int int2 = date0.getDate();
        java.lang.String str3 = date0.toGMTString();
        date0.setSeconds(35);
        date0.setSeconds(580);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:52:40 UTC 2022");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "11 Feb 2022 09:43:28 GMT" + "'", str3, "11 Feb 2022 09:43:28 GMT");
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder5.setTimeOfDay(8, 32770, 2);
        java.util.Calendar calendar13 = builder12.build();
        java.util.Calendar.Builder builder15 = builder12.setLenient(false);
        java.util.Calendar.Builder builder19 = builder15.setWeekDate(43, 32770, 38);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.LocalDate localDate51 = localDate31.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.property(dateTimeFieldType55);
        org.joda.time.LocalDate.Property property57 = localDate51.property(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.property(dateTimeFieldType67);
        int int69 = dateTime61.get(dateTimeFieldType67);
        org.joda.time.LocalDate.Property property70 = localDate51.property(dateTimeFieldType67);
        org.joda.time.Interval interval71 = localDate51.toInterval();
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone74);
        java.util.Date date76 = dateMidnight75.toDate();
        org.joda.time.YearMonthDay yearMonthDay77 = dateMidnight75.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay77.withPeriodAdded(readablePeriod78, (int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = yearMonthDay80.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay80.plusDays(32770);
        int[] intArray84 = yearMonthDay83.getValues();
        int[] intArray86 = chronology72.get((org.joda.time.ReadablePartial) yearMonthDay83, (long) 38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder87 = builder19.setFields(intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1044602000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=10,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 11 + "'", int69 == 11);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray81);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[2059, 9, 21]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1970, 1, 1]");
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(27);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(5);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minus((long) (-1));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minus(readablePeriod22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = timeOfDay23.toDateTimeToday(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone25);
        long long30 = dateTimeZone8.getMillisKeepLocal(dateTimeZone25, 0L);
        org.joda.time.DateTime dateTime31 = dateTime2.toDateTime(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime2.toGregorianCalendar();
        gregorianCalendar32.setMinimalDaysInFirstWeek(49);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withDefaultYear((int) '#');
        boolean boolean52 = calendar0.after((java.lang.Object) dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withPivotYear(51);
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withLocale(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter54.withOffsetParsed();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572608136,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=28,MILLISECOND=136,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        calendar0.set(1969, (int) (short) 10, 14, 1022, (-1), 4);
        calendar0.setMinimalDaysInFirstWeek((int) (byte) -1);
        java.lang.String str15 = calendar0.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = calendar0.getTimeInMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-1,ERA=1,YEAR=1969,MONTH=10,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=14,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1022,MINUTE=-1,SECOND=4,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        int int6 = dateMidnight2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime11.millisOfDay();
        org.joda.time.DateTime.Property property16 = dateTime11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(5);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minus((long) (-1));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minus(readablePeriod28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime20, dateTimeZone31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean45 = interval37.isAfter((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration46 = interval44.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration46, 20);
        org.joda.time.DateTime dateTime49 = dateTime11.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight2.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight2.plus(1655717759L);
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight52);
        int int54 = timeOfDay53.size();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.plus(readableDuration58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.plus(readableDuration62);
        int int64 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime.Property property65 = dateTime63.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay66 = dateTime63.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime69 = dateTime63.withField(dateTimeFieldType67, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property70 = timeOfDay53.property(dateTimeFieldType67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 28 + "'", int12 == 28);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate7.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks(100);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime();
        int int20 = localDate16.getYearOfEra();
        org.joda.time.LocalDate localDate22 = localDate16.minusWeeks(45);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYear(0);
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        org.joda.time.LocalDate localDate33 = dateTime31.toLocalDate();
        org.joda.time.DateTime.Property property34 = dateTime31.era();
        boolean boolean35 = property34.isLeap();
        org.joda.time.DateTime dateTime36 = property34.getDateTime();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        int int38 = calendar37.getFirstDayOfWeek();
        int int39 = calendar37.getWeekYear();
        java.lang.String str40 = calendar37.getCalendarType();
        calendar37.setTimeInMillis((long) 17);
        java.util.Date date43 = calendar37.getTime();
        calendar37.add(10, 53);
        calendar37.setMinimalDaysInFirstWeek(2022);
        java.util.TimeZone timeZone49 = calendar37.getTimeZone();
        calendar37.set(0, 17, 30, 56, 52);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.YearMonthDay yearMonthDay60 = dateMidnight58.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plus((-1L));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfMinute();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        boolean boolean71 = yearMonthDay62.isEqual((org.joda.time.ReadablePartial) localDate70);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getNameKey((long) (-1));
        long long77 = dateTimeZone73.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight78 = localDate70.toDateMidnight(dateTimeZone73);
        long long82 = dateTimeZone73.convertLocalToUTC((long) '4', true, (long) 52);
        java.util.TimeZone timeZone83 = dateTimeZone73.toTimeZone();
        calendar37.setTimeZone(timeZone83);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        org.joda.time.DateTime dateTime86 = dateTime36.toDateTime(dateTimeZone85);
        long long88 = dateTimeZone85.previousTransition(1644572237448L);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight24.withZoneRetainFields(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10022 + "'", int20 == 10022);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=2022,ERA=1,YEAR=0,MONTH=17,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=30,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=56,MINUTE=52,SECOND=0,MILLISECOND=17,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "gregory" + "'", str40, "gregory");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 5L + "'", long77 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 52L + "'", long82 == 52L);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1644572237448L + "'", long88 == 1644572237448L);
        org.junit.Assert.assertNotNull(dateMidnight89);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.parse("19");
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate31.toInterval(dateTimeZone32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.Period period35 = interval33.toPeriod();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weekyears();
        int int37 = period35.get(durationFieldType36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay20.withPeriodAdded((org.joda.time.ReadablePeriod) period35, 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight44 = dateTime43.toDateMidnight();
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight44.minusYears(1970);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period35, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period35, 57);
        org.joda.time.DateTime dateTime53 = yearMonthDay52.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay52.withYear(15);
        int[] intArray57 = chronology4.get((org.joda.time.ReadablePartial) yearMonthDay52, (long) 70);
        long long61 = chronology4.add((long) 996, 4579200000L, 34771);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) 40, (long) 2099, chronology4);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 159223363200996L + "'", long61 == 159223363200996L);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.minusYears((int) '#');
        org.joda.time.LocalDate localDate33 = localDate11.minusDays(22);
        org.joda.time.LocalDate localDate35 = localDate11.withYearOfEra(32770);
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths(0);
        org.joda.time.Interval interval38 = localDate35.toInterval();
        org.joda.time.LocalDate localDate40 = localDate35.plusWeeks(50400000);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (-1));
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1644789600029L, dateTimeZone4);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 235, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((-1164178799948L), dateTimeZone4);
        java.lang.String str11 = dateTimeZone4.getName(1644572155702L);
        int int13 = dateTimeZone4.getStandardOffset((long) 35005);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime9.minusDays((int) (byte) 10);
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableDuration7, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean17 = localDate6.equals((java.lang.Object) readableDuration7);
        int int18 = localDate6.getYear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("T09:40:44.808");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: T09:40:44.808");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        gregorianCalendar8.setMinimalDaysInFirstWeek((int) 'a');
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minus(readablePeriod6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime11 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 9, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minus((long) (-1));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minus(readablePeriod18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus(readablePeriod21);
        org.joda.time.DateTime dateTime23 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime23.withDayOfYear(560);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 560 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withOffsetParsed();
        java.io.Writer writer43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight46.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        boolean boolean59 = yearMonthDay50.isEqual((org.joda.time.ReadablePartial) localDate58);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        java.lang.String str63 = dateTimeZone61.getNameKey((long) (-1));
        long long65 = dateTimeZone61.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight66 = localDate58.toDateMidnight(dateTimeZone61);
        org.joda.time.LocalDate localDate68 = localDate58.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.plus((-1L));
        org.joda.time.Chronology chronology74 = dateMidnight73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.hours();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.dayOfYear();
        org.joda.time.DurationField durationField78 = chronology74.minutes();
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((java.lang.Object) localDate58, chronology74);
        org.joda.time.LocalDate localDate80 = org.joda.time.LocalDate.now(chronology74);
        org.joda.time.DateTimeField dateTimeField81 = chronology74.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone83);
        java.util.Date date85 = dateMidnight84.toDate();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight84.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight87, readablePeriod88);
        org.joda.time.Period period90 = interval89.toPeriod();
        int[] intArray92 = chronology74.get((org.joda.time.ReadablePeriod) period90, 75485789217052L);
        org.joda.time.DateTime dateTime93 = org.joda.time.DateTime.now(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer43, (org.joda.time.ReadableInstant) dateTime93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 5L + "'", long65 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 124811, 1, 2, 46, 57, 52]");
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getNameKey((long) (-1));
        long long9 = dateTimeZone5.nextTransition((long) 70);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone5);
        int int11 = dateMidnight10.getWeekyear();
        int int12 = dateMidnight10.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.withPeriodAdded(readablePeriod19, 22);
        java.lang.String str22 = yearMonthDay17.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay17.minusDays(33);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        boolean boolean27 = interval25.isAfter(1644572146319L);
        boolean boolean29 = interval25.contains((long) (short) 100);
        boolean boolean30 = interval25.isBeforeNow();
        org.joda.time.Duration duration31 = interval25.toDuration();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight10.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime33 = dateTime1.plus((org.joda.time.ReadableDuration) duration31);
        int int34 = dateTime33.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 70L + "'", long9 == 70L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.plus((long) 16);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight21.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.days();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay23.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology34 = yearMonthDay33.getChronology();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod16, chronology34);
        boolean boolean36 = dateMidnight4.isBefore((org.joda.time.ReadableInstant) dateMidnight35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight38 = dateMidnight4.withMonthOfYear(33805);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33805 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property11.addToCopy((long) 2000);
        org.joda.time.DateMidnight dateMidnight15 = property11.addToCopy(10L);
        org.joda.time.DateMidnight dateMidnight16 = property11.roundCeilingCopy();
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight16.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.property(dateTimeFieldType22);
        boolean boolean24 = dateMidnight16.isSupported(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.millisOfSecond();
        long long39 = dateTimeField37.roundFloor(33330867L);
        boolean boolean40 = dateTimeField37.isSupported();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 33330867L + "'", long39 == 33330867L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withChronologyRetainFields(chronology26);
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = yearMonthDay28.toInterval(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        java.util.Calendar.Builder builder77 = builder12.setTimeZone(timeZone76);
        java.util.Calendar.Builder builder81 = builder77.setDate(779, 32769, 33435);
        java.util.Calendar.Builder builder86 = builder81.setTimeOfDay(34722164, 34713, 21, 70);
        java.util.Calendar calendar87 = builder86.build();
        java.util.Calendar.Builder builder91 = builder86.setDate(34753, 76, 22);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=176482449201070,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7562,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=185,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=33,SECOND=21,MILLISECOND=70,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date3.getDay();
        int int10 = date3.getHours();
        int int11 = date3.getMinutes();
        date3.setSeconds(0);
        int int14 = date3.getYear();
        int int15 = date3.getHours();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        int int6 = dateMidnight2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime11.millisOfDay();
        org.joda.time.DateTime.Property property16 = dateTime11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(5);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minus((long) (-1));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minus(readablePeriod28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime20, dateTimeZone31);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        java.util.Date date42 = dateMidnight41.toDate();
        org.joda.time.DateMidnight.Property property43 = dateMidnight41.dayOfWeek();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean45 = interval37.isAfter((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration46 = interval44.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration46, 20);
        org.joda.time.DateTime dateTime49 = dateTime11.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight2.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minus((long) (-1));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(chronology54);
        org.joda.time.LocalTime localTime56 = timeOfDay55.toLocalTime();
        java.lang.String str57 = timeOfDay55.toString();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay55.minus(readablePeriod58);
        int int60 = timeOfDay55.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight66, readablePeriod67);
        org.joda.time.Period period69 = interval68.toPeriod();
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay55.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight2.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.PeriodType periodType72 = period69.getPeriodType();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 28 + "'", int12 == 28);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "T09:43:28.680" + "'", str57, "T09:43:28.680");
        org.junit.Assert.assertNotNull(timeOfDay59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 43 + "'", int60 == 43);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.Chronology chronology11 = timeOfDay8.getChronology();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay26.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay8.minus((org.joda.time.ReadablePeriod) period39);
        java.lang.String str42 = period39.toString();
        int int43 = period39.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(10L);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        int int3 = property2.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfYear();
        boolean boolean15 = dateMidnight3.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime17 = dateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime19 = dateTime12.withYearOfCentury(8);
        org.joda.time.DateTime dateTime21 = dateTime12.plusDays(365);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.centuries();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(70L, chronology31);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology31);
        org.joda.time.Chronology chronology35 = chronology31.withUTC();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(chronology35);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(87651714038400000L, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfYear();
        org.joda.time.DateTime dateTime41 = dateTime12.toDateTime(chronology35);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay((long) 27, chronology35);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 28 + "'", int13 == 28);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date7.getHours();
        int int10 = date7.getMinutes();
        long long11 = date7.getTime();
        date7.setSeconds(34699);
        int int14 = date7.getDay();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 09:38:19 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.lang.String str16 = yearMonthDay6.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = localDate24.toInterval(dateTimeZone25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.Period period28 = interval26.toPeriod();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weekyears();
        int int30 = period28.get(durationFieldType29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period28, (int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusMonths((-378559));
        int int35 = yearMonthDay34.size();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31" + "'", str16, "1969-12-31");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 0);
        boolean boolean5 = dateTimeZone1.isStandardOffset(0L);
        long long7 = dateTimeZone1.nextTransition((long) 34674);
        java.lang.String str8 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 34674L + "'", long7 == 34674L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = property13.setCopy(8);
        org.joda.time.DateMidnight dateMidnight18 = property13.addWrapFieldToCopy(34647002);
        boolean boolean19 = dateMidnight18.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withDayOfMonth(34771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34771 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.minus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate9.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        org.joda.time.LocalDate localDate16 = localDate13.withCenturyOfEra(51);
        org.joda.time.LocalDate.Property property17 = localDate16.year();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight16, readablePeriod17);
        org.joda.time.Period period19 = interval18.toPeriod();
        org.joda.time.DurationFieldType durationFieldType21 = period19.getFieldType(7);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay8.withFieldAdded(durationFieldType21, 135);
        org.joda.time.DateTime dateTime24 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(23, 34825, 292278994, 579, 34831, 6, 34555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(29);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getShortName((long) 1904, locale4);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+29:00" + "'", str5, "+29:00");
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.minusWeeks(17);
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight19.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readableDuration24);
        org.joda.time.DateTime dateTime27 = dateTime23.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minus((long) (-1));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minus(readablePeriod33);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(1970);
        org.joda.time.Chronology chronology39 = timeOfDay36.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minus((long) (-1));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minus(readablePeriod45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay48.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean65 = interval61.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval61.toPeriod(periodType66);
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay54.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.PeriodType periodType69 = period67.getPeriodType();
        int[] intArray72 = chronology39.get((org.joda.time.ReadablePeriod) period67, (long) (-1), (long) 24);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight19.withPeriodAdded((org.joda.time.ReadablePeriod) period67, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = period67.getValue(2008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2008");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 29 + "'", int5 == 29);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(22, 11, 7, 7, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime22 = dateTime16.minusDays((int) (byte) 10);
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration14, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = dateTime22.isEqualNow();
        org.joda.time.DateTime dateTime26 = dateTime22.withWeekOfWeekyear(11);
        boolean boolean27 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = localDate35.toInterval(dateTimeZone36);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.Period period39 = interval37.toPeriod();
        org.joda.time.DateTime dateTime41 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period39, (int) (byte) 100);
        org.joda.time.LocalDate localDate43 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 212);
        org.joda.time.LocalDate localDate45 = localDate1.withYearOfEra((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.DurationField durationField50 = dateTimeField49.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((java.lang.Object) 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate46 = localDate26.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        boolean boolean49 = localDate46.isSupported(durationFieldType48);
        boolean boolean50 = localDate7.isSupported(durationFieldType48);
        org.joda.time.LocalDate localDate52 = localDate7.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus(readablePeriod56);
        org.joda.time.DateMidnight.Property property58 = dateMidnight55.year();
        org.joda.time.DateTime dateTime59 = localDate7.toDateTime((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.secondOfMinute();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.LocalDate localDate69 = localDate67.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate71 = localDate67.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str74 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime75 = localDate71.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.LocalDate localDate77 = localDate71.withWeekyear(19);
        org.joda.time.LocalTime localTime78 = null;
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        java.lang.String str82 = dateTimeZone80.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime83 = localDate71.toDateTime(localTime78, dateTimeZone80);
        int int84 = dateTime83.getYear();
        org.joda.time.DateTime.Property property85 = dateTime83.secondOfDay();
        org.joda.time.DateTime dateTime86 = property85.roundFloorCopy();
        org.joda.time.DateTime dateTime87 = dateTime86.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str89 = dateTimeFieldType88.getName();
        boolean boolean90 = dateTime87.isSupported(dateTimeFieldType88);
        org.joda.time.DateTime.Property property91 = dateTime59.property(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "UTC" + "'", str82, "UTC");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2022 + "'", int84 == 2022);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "minuteOfHour" + "'", str89, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 1969);
        org.joda.time.Chronology chronology43 = dateTimeFormatter42.getChronolgy();
        int int44 = dateTimeFormatter42.getDefaultYear();
        org.joda.time.Chronology chronology45 = dateTimeFormatter42.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeFormatter42.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2000 + "'", int44 == 2000);
        org.junit.Assert.assertNull(chronology45);
        org.junit.Assert.assertNull(dateTimeZone46);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        java.lang.String str12 = property8.getAsText();
        org.joda.time.YearMonthDay yearMonthDay13 = property8.withMaximumValue();
        java.util.Locale locale15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = property8.setCopy("2", locale15);
        org.joda.time.YearMonthDay yearMonthDay17 = property8.getYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar24 = dateMidnight23.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.plusYears(15);
        int int27 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight23);
        int int28 = property8.get();
        java.lang.String str29 = property8.getName();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January" + "'", str12, "January");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "monthOfYear" + "'", str29, "monthOfYear");
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.DateMidnight dateMidnight7 = property4.addToCopy(10);
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfEvenCopy();
        int int9 = dateMidnight8.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDayOfMonth(578);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 578 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMinimumValue();
        int int12 = yearMonthDay10.getValue(0);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology14 = yearMonthDay10.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.seconds();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField6.getLeapDurationField();
        long long12 = dateTimeField6.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        int int23 = localDate20.getYearOfCentury();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime54 = localDate36.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = localDate20.toDateTime(localTime24, dateTimeZone50);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate57.toDateTime(localTime58, dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate57.withYearOfEra(12);
        int[] intArray63 = localDate57.getValues();
        int int64 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate20, intArray63);
        int int65 = localDate20.getYear();
        int int66 = localDate20.getYearOfCentury();
        int int67 = localDate20.getYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10035L + "'", long12 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        int[] intArray6 = yearMonthDay5.getValues();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.withPeriodAdded(readablePeriod7, 22);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (-1));
        long long15 = dateTimeZone11.convertUTCToLocal((long) 5);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone11.getName((long) 0, locale17);
        org.joda.time.Interval interval19 = yearMonthDay5.toInterval(dateTimeZone11);
        org.joda.time.DateTime dateTime20 = interval19.getStart();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.halfdays();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (byte) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.era();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 5L + "'", long15 == 5L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField6.getLeapDurationField();
        long long12 = dateTimeField6.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        int int23 = localDate20.getYearOfCentury();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime54 = localDate36.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = localDate20.toDateTime(localTime24, dateTimeZone50);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate57.toDateTime(localTime58, dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate57.withYearOfEra(12);
        int[] intArray63 = localDate57.getValues();
        int int64 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate20, intArray63);
        int int65 = localDate20.getYear();
        int int66 = localDate20.getYearOfCentury();
        org.joda.time.Chronology chronology67 = localDate20.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10035L + "'", long12 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        long long26 = dateTimeZone17.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str28 = dateTimeZone17.getNameKey((long) 33);
        long long30 = dateTimeZone17.previousTransition((long) 32772);
        java.lang.String str31 = dateTimeZone17.getID();
        java.util.TimeZone timeZone32 = dateTimeZone17.toTimeZone();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32772L + "'", long30 == 32772L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.DurationField durationField11 = chronology5.minutes();
        org.joda.time.DurationField durationField12 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsText(locale10);
        org.joda.time.YearMonthDay yearMonthDay13 = property8.addToCopy(40);
        org.joda.time.YearMonthDay yearMonthDay14 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay15 = property8.withMinimumValue();
        org.joda.time.DurationField durationField16 = property8.getRangeDurationField();
        org.joda.time.DurationField durationField17 = property8.getDurationField();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime39 = localDate21.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.Interval interval41 = yearMonthDay4.toInterval(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay4.withYear(69);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight46.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay48.withPeriodAdded(readablePeriod49, 11);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.centuries();
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay51.withChronologyRetainFields(chronology57);
        org.joda.time.LocalDate localDate60 = yearMonthDay59.toLocalDate();
        boolean boolean61 = yearMonthDay43.isEqual((org.joda.time.ReadablePartial) yearMonthDay59);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay59.minusYears(15);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = yearMonthDay63.toString("Property[era]", locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(yearMonthDay63);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy("0");
        boolean boolean12 = dateMidnight11.isEqualNow();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.year();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusWeeks(8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        int int13 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.withMinimumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime16.withTime(4, 2040, 925, 19231);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2040 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 29 + "'", int5 == 29);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DurationField durationField19 = chronology16.days();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 11, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTime dateTime26 = dateTime22.withField(dateTimeFieldType23, 7);
        org.joda.time.LocalDate.Property property27 = localDate7.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate29 = property27.addToCopy(9);
        java.util.Locale locale30 = null;
        java.lang.String str31 = property27.getAsShortText(locale30);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "22" + "'", str31, "22");
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime2.getZone();
        long long9 = dateTimeZone6.convertLocalToUTC((long) 42, false);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone6);
        long long12 = dateTimeZone6.previousTransition(108953532532802001L);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 42L + "'", long9 == 42L);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 108953532532802001L + "'", long12 == 108953532532802001L);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate localDate25 = property24.withMinimumValue();
        int int26 = localDate25.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 54 + "'", int26 == 54);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        long long24 = dateTimeField22.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField25 = dateTimeField22.getLeapDurationField();
        long long28 = dateTimeField22.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        int int39 = localDate36.getYearOfCentury();
        org.joda.time.LocalTime localTime40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate48.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus((-1L));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfMinute();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.LocalDate localDate62 = localDate60.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate64 = localDate60.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.DateTime dateTime68 = localDate64.toDateTimeAtCurrentTime(dateTimeZone66);
        boolean boolean69 = dateTimeZone66.isFixed();
        org.joda.time.DateTime dateTime70 = localDate52.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = localDate36.toDateTime(localTime40, dateTimeZone66);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDate73.toDateTime(localTime74, dateTimeZone75);
        org.joda.time.LocalDate localDate78 = localDate73.withYearOfEra(12);
        int[] intArray79 = localDate73.getValues();
        int int80 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDate36, intArray79);
        int int81 = localDate36.getCenturyOfEra();
        int int82 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str84 = dateTimeFieldType83.getName();
        java.lang.String str85 = dateTimeFieldType83.toString();
        int int86 = localDate36.get(dateTimeFieldType83);
        org.joda.time.LocalDate localDate88 = localDate36.minusDays(345);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray89 = localDate36.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.minutes();
        boolean boolean91 = localDate36.isSupported(durationFieldType90);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1000L + "'", long24 == 1000L);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10035L + "'", long28 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20 + "'", int81 == 20);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "centuryOfEra" + "'", str84, "centuryOfEra");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "centuryOfEra" + "'", str85, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 20 + "'", int86 == 20);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime11.withMinuteOfHour(8);
        boolean boolean17 = dateMidnight4.equals((java.lang.Object) 8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property24 = dateTime21.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime26 = property24.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean43 = interval39.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTime dateTime44 = interval39.getEnd();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.dayOfWeek();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51);
        boolean boolean55 = interval47.isAfter((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        org.joda.time.Interval interval59 = interval47.withStart((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = interval39.overlaps((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Duration duration61 = interval39.toDuration();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight32.withDurationAdded((org.joda.time.ReadableDuration) duration61, 24);
        org.joda.time.DateTime dateTime65 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration61, 24);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight4.withDurationAdded((org.joda.time.ReadableDuration) duration61, 131);
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight4.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 29 + "'", int12 == 29);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        java.util.Date date61 = dateMidnight60.toDate();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.dayOfWeek();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration57, (org.joda.time.ReadableInstant) dateMidnight60);
        boolean boolean64 = interval56.isAfter((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration65 = interval63.toDuration();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight53.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = dateMidnight67.getZone();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.withCenturyOfEra(15);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.lang.String str74 = dateTimeZone72.getNameKey((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight67.toMutableDateTime(dateTimeZone72);
        org.joda.time.TimeOfDay timeOfDay77 = new org.joda.time.TimeOfDay((long) 1970);
        java.lang.String str78 = timeOfDay77.toString();
        org.joda.time.TimeOfDay timeOfDay80 = timeOfDay77.plusSeconds(24);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight67.withFields((org.joda.time.ReadablePartial) timeOfDay77);
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay77.plusMillis(54);
        org.joda.time.Chronology chronology84 = timeOfDay77.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 29 + "'", int12 == 29);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "T00:00:01.970" + "'", str78, "T00:00:01.970");
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setTime((long) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTime(timeOfDay6);
        org.joda.time.Chronology chronology8 = yearMonthDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsShortText((long) 19033, locale11);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "70" + "'", str12, "70");
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDayOfYear(5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime.Property property19 = dateTime17.dayOfYear();
        boolean boolean20 = dateMidnight8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime17.era();
        org.joda.time.LocalDate localDate22 = dateTime17.toLocalDate();
        int int23 = dateMidnight5.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears(5);
        org.joda.time.DateTime.Property property30 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy(6);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfSecond((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime.Property property36 = dateTime34.weekyear();
        java.util.GregorianCalendar gregorianCalendar37 = dateTime34.toGregorianCalendar();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 29 + "'", int18 == 29);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        calendar0.set(0, 99, 59);
        calendar0.set(210, 76, 387, 64, 2922789, (int) (short) 1);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=210,MONTH=76,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=387,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=64,MINUTE=2922789,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        int int10 = localDate7.getYearOfEra();
        org.joda.time.LocalDate localDate12 = localDate7.minusDays(135);
        org.joda.time.LocalDate.Property property13 = localDate7.weekOfWeekyear();
        int int14 = localDate7.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        date3.setYear((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromDateFields(date3);
        java.util.Date date18 = new java.util.Date((int) ' ', 34522, (-391), 64, 6);
        java.lang.String str19 = date18.toGMTString();
        boolean boolean20 = date3.after(date18);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 01 00:00:00 UTC 2000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Oct 08 16:06:00 UTC 4807");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8 Oct 4807 16:06:00 GMT" + "'", str19, "8 Oct 4807 16:06:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        int int30 = dateTime27.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        boolean boolean38 = dateMidnight35.isBefore((long) ' ');
        org.joda.time.LocalDate localDate39 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology40 = dateMidnight35.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean42 = dateMidnight35.isSupported(dateTimeFieldType41);
        int int43 = dateTime27.get(dateTimeFieldType41);
        boolean boolean44 = localDate24.isSupported(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = localDate12.withField(dateTimeFieldType41, (-20952));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35010 + "'", int43 == 35010);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.YearMonthDay yearMonthDay42 = dateMidnight40.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate45 = yearMonthDay42.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay42.plusDays(23);
        int int48 = yearMonthDay47.getMonthOfYear();
        int[] intArray50 = chronology30.get((org.joda.time.ReadablePartial) yearMonthDay47, 252L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1970, 1, 1]");
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.monthOfYear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.minus(readableDuration12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateTime13, chronology25);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay6.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay6.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minus((long) (-1));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay29.withChronologyRetainFields(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(17, 52955, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52955 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        int int8 = localDate1.getYearOfEra();
        org.joda.time.LocalDate localDate10 = localDate1.withDayOfYear(5);
        org.joda.time.LocalDate localDate12 = localDate1.withWeekyear(59);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay17.monthOfYear();
        java.util.Locale locale22 = null;
        int int23 = property21.getMaximumShortTextLength(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumShortTextLength(locale24);
        int int26 = property21.get();
        int int27 = property21.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay29 = property21.addToCopy(10);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay35.withPeriodAdded(readablePeriod36, 11);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay35.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        int int41 = localDate30.get(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType40.getDurationType();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay29.withFieldAdded(durationFieldType43, 52);
        boolean boolean46 = localDate12.isSupported(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        java.lang.Object obj12 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19);
        boolean boolean23 = interval15.isAfter((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = interval22.withPeriodAfterStart(readablePeriod24);
        long long26 = interval22.toDurationMillis();
        org.joda.time.Chronology chronology27 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(obj12, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(369, 8, 27, chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter6.withChronology(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.toString();
        java.lang.String str6 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        boolean boolean8 = dateMidnight6.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.minus(readableDuration9);
        int int11 = dateMidnight6.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        int int16 = dateMidnight14.getYearOfEra();
        boolean boolean17 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight6.minus((long) 15);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight6.plusMonths(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withWeekOfWeekyear(34660);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34660 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusYears(0);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.minusYears(779);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.minusWeeks(17);
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30 + "'", int5 == 30);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime4.withYear(6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime14.plusHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime14.withPeriodAdded(readablePeriod19, 6);
        boolean boolean22 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        boolean boolean38 = yearMonthDay29.isEqual((org.joda.time.ReadablePartial) localDate37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone40.getNameKey((long) (-1));
        long long44 = dateTimeZone40.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight45 = localDate37.toDateMidnight(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = localDate37.plusDays(53);
        org.joda.time.DateTime dateTime48 = dateTime21.withFields((org.joda.time.ReadablePartial) localDate37);
        int int49 = localDate37.size();
        org.joda.time.LocalDate localDate51 = localDate37.plusMonths(1917);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30 + "'", int5 == 30);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30 + "'", int15 == 30);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 5L + "'", long44 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay4.minusDays(33);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay4.minusMonths(15);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.centuries();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusDays((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.dayOfWeek();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean39 = interval35.isBefore((org.joda.time.ReadableInterval) interval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval35.toPeriod(periodType40);
        int int43 = period41.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DateTimeField dateTimeField53 = localDate51.getField(1);
        long long55 = dateTimeField53.roundHalfCeiling((long) (byte) 10);
        long long57 = dateTimeField53.remainder((long) 'a');
        org.joda.time.DurationField durationField58 = dateTimeField53.getRangeDurationField();
        boolean boolean59 = period41.equals((java.lang.Object) durationField58);
        int int60 = period41.size();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay28.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 34522);
        org.joda.time.DateTime dateTime64 = dateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 2022);
        java.lang.String str65 = period41.toString();
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 33);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay67.minusYears(121);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 97L + "'", long57 == 97L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0S" + "'", str65, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay4.dayOfMonth();
        int int6 = property5.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfDay(34627);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime11.withTime((-391), 52935, 39, 575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -391 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        int int10 = localDate7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        int[] intArray16 = yearMonthDay15.getValues();
        boolean boolean17 = localDate7.isAfter((org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.LocalDate.Property property18 = localDate7.weekOfWeekyear();
        int int19 = property18.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        int int62 = dateTime61.getSecondOfMinute();
        org.joda.time.DateTime.Property property63 = dateTime61.dayOfYear();
        org.joda.time.DateTime dateTime64 = property63.withMinimumValue();
        org.joda.time.DateTime dateTime65 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.plus((-1L));
        org.joda.time.Chronology chronology71 = dateMidnight70.getChronology();
        boolean boolean73 = dateMidnight70.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property74 = dateMidnight70.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight70.minusWeeks(17);
        int int77 = dateTime64.compareTo((org.joda.time.ReadableInstant) dateMidnight76);
        int int78 = dateTime64.getSecondOfMinute();
        org.joda.time.DateTime dateTime80 = dateTime64.withMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone81 = dateTime80.getZone();
        org.joda.time.DateTime dateTime82 = dateMidnight56.toDateTime(dateTimeZone81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType83.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight86 = dateMidnight56.withFieldAdded(durationFieldType84, 5601);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30 + "'", int12 == 30);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 30 + "'", int62 == 30);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 30 + "'", int78 == 30);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(durationFieldType84);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime9.monthOfYear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.minus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime9.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime9.withField(dateTimeFieldType16, (int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime18.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears(5);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = dateTime24.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay6.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology43 = timeOfDay6.getChronology();
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay(292279042L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight51, readablePeriod52);
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.DurationFieldType durationFieldType56 = period54.getFieldType(7);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay45.withPeriodAdded((org.joda.time.ReadablePeriod) period54, (-36962));
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay6.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.LocalTime localTime60 = timeOfDay6.toLocalTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(localTime60);
    }
}

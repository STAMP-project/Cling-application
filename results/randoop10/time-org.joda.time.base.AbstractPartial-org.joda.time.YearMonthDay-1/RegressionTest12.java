import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Interval interval5 = yearMonthDay1.toInterval();
        org.joda.time.LocalDate localDate6 = yearMonthDay1.toLocalDate();
        java.util.Date date7 = localDate6.toDate();
        int int8 = date7.getMinutes();
        int int9 = date7.getMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate20 = property18.addWrapFieldToCopy((-19034));
        org.joda.time.LocalDate localDate21 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate22 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate23 = property18.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime39 = localDate21.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.Interval interval41 = yearMonthDay4.toInterval(dateTimeZone35);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone35);
        java.lang.String str43 = dateTimeZone35.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Etc/UTC" + "'", str36, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        long long13 = interval9.toDurationMillis();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.dayOfWeek();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean24 = interval20.isBefore((org.joda.time.ReadableInterval) interval23);
        boolean boolean25 = interval9.overlaps((org.joda.time.ReadableInterval) interval23);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.LocalDate localDate26 = localDate14.plusWeeks(19);
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(12);
        java.lang.String str29 = localDate26.toString();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime();
        int int31 = localDate26.getWeekyear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-06-24" + "'", str29, "2022-06-24");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(70L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime7.withYear(292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(51, 5255, 32769, 131);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.LocalDate localDate16 = dateMidnight12.toLocalDate();
        org.joda.time.Chronology chronology17 = dateMidnight12.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean19 = dateMidnight12.isSupported(dateTimeFieldType18);
        boolean boolean20 = dateMidnight4.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean22 = dateMidnight4.isSupported(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear(53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withZoneUTC();
        java.io.Writer writer16 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate18.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate18.withYearOfEra(12);
        int[] intArray24 = localDate18.getValues();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate18);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        long long44 = dateTimeZone39.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime45 = localDate25.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        long long49 = dateTimeZone39.adjustOffset(36L, false);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(dateTimeZone39);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(writer16, (org.joda.time.ReadablePartial) localDate51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1659458699000L) + "'", long44 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 36L + "'", long49 == 36L);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addToCopy(9);
        java.lang.String str11 = property8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay13 = property8.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[dayOfMonth]" + "'", str11, "Property[dayOfMonth]");
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        long long11 = interval6.getEndMillis();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval21.withPeriodAfterStart(readablePeriod23);
        org.joda.time.Duration duration25 = interval21.toDuration();
        org.joda.time.Interval interval26 = interval21.toInterval();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.hours();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfDay();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 29, (long) 2022, chronology34);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.YearMonthDay yearMonthDay45 = dateMidnight43.toYearMonthDay();
        int[] intArray46 = yearMonthDay45.getValues();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.withPeriodAdded(readablePeriod47, 22);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone54);
        java.util.Date date56 = dateMidnight55.toDate();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.dayOfWeek();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableDuration52, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean62 = interval58.isBefore((org.joda.time.ReadableInterval) interval61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval58.toPeriod(periodType63);
        int int66 = period64.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay49.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight38, (org.joda.time.ReadablePeriod) period64);
        org.joda.time.Interval interval69 = interval37.withPeriodAfterStart((org.joda.time.ReadablePeriod) period64);
        boolean boolean70 = interval21.abuts((org.joda.time.ReadableInterval) interval37);
        boolean boolean72 = interval21.isAfter((long) 10);
        org.joda.time.Interval interval73 = interval6.gap((org.joda.time.ReadableInterval) interval21);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(interval73);
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.DateTime dateTime9 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.Chronology chronology23 = timeOfDay20.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (-1));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.minus(readablePeriod29);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay32.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.dayOfWeek();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean49 = interval45.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval45.toPeriod(periodType50);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay38.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.PeriodType periodType53 = period51.getPeriodType();
        int[] intArray56 = chronology23.get((org.joda.time.ReadablePeriod) period51, (long) (-1), (long) 24);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay8.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.PeriodType periodType58 = period51.getPeriodType();
        int int59 = period51.size();
        int int60 = period51.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1968);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        long long9 = interval7.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        long long24 = dateTimeZone20.convertUTCToLocal((long) 5);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone20.getName((long) 0, locale26);
        org.joda.time.Interval interval28 = yearMonthDay14.toInterval(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = interval28.getStart();
        org.joda.time.Interval interval30 = interval7.gap((org.joda.time.ReadableInterval) interval28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) interval28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-13305600000L) + "'", long9 == (-13305600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5L + "'", long24 == 5L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.DateMidnight dateMidnight7 = property4.addToCopy(10);
        org.joda.time.DateMidnight dateMidnight8 = property4.roundFloorCopy();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property4.getAsShortText(locale9);
        org.joda.time.DateMidnight dateMidnight12 = property4.addToCopy(10035L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Thu" + "'", str10, "Thu");
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minus((long) (-1));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minus(readablePeriod15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = timeOfDay16.toDateTimeToday(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight9.toMutableDateTime(dateTimeZone18);
        long long23 = dateTimeZone18.convertUTCToLocal((long) 22);
        java.lang.String str24 = dateTimeZone18.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1439, 545, 10022, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 545 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 22L + "'", long23 == 22L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Etc/UTC" + "'", str24, "Etc/UTC");
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.DateTime dateTime16 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(24);
        int int19 = dateTime18.getMonthOfYear();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillis((-127L));
        org.joda.time.DateMidnight dateMidnight22 = dateTime18.toDateMidnight();
        org.joda.time.DateTime dateTime23 = dateTime18.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj1, chronology7);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 786, chronology7);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusHours(789);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMinutes(34660);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        long long14 = dateTimeField11.add(1670750220229L, 484);
        boolean boolean15 = dateTimeField11.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:44.610" + "'", str6, "T09:40:44.610");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "44" + "'", str8, "44");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1670750704229L + "'", long14 == 1670750704229L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        java.lang.String str3 = calendar0.getCalendarType();
        calendar0.setTimeInMillis((long) 17);
        calendar0.clear();
        int int7 = calendar0.getFirstDayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = calendar0.getDisplayName(369, 34545, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        int int29 = dateTime26.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight32.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.DateTime dateTime56 = dateTime37.withFields((org.joda.time.ReadablePartial) localDate55);
        boolean boolean57 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime37);
        long long58 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property59 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime61 = dateTime26.plusMillis(292278993);
        org.joda.time.DateTime.Property property62 = dateTime26.millisOfSecond();
        org.joda.time.DateTime dateTime63 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime65 = dateTime26.plusSeconds(34745483);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withYear(11);
        boolean boolean12 = dateMidnight2.isBefore((long) 28);
        org.joda.time.Interval interval13 = dateMidnight2.toInterval();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withCenturyOfEra(13);
        org.joda.time.Chronology chronology16 = dateMidnight2.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight2.minusYears(1904);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight41 = dateMidnight20.withField(dateTimeFieldType37, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(durationFieldType39);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay12 = property7.addWrapFieldToCopy(40);
        java.lang.String str13 = timeOfDay12.toString();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusSeconds(5255);
        int int16 = timeOfDay15.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:44.808" + "'", str6, "T09:40:44.808");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "44" + "'", str8, "44");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T09:40:24.808" + "'", str13, "T09:40:24.808");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minus(readablePeriod6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean26 = interval22.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval22.toPeriod(periodType27);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay15.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar36 = dateMidnight35.toGregorianCalendar();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.centuryOfEra();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay29.withChronologyRetainFields(chronology37);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(0L, chronology37);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) 33330867, chronology1);
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsText(locale10);
        int int12 = property8.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        int int22 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime21);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        long long8 = dateTimeField5.set((long) 14, 17);
        boolean boolean9 = dateTimeField5.isLenient();
        int int11 = dateTimeField5.getMaximumValue(1670750237434L);
        java.lang.String str13 = dateTimeField5.getAsShortText(1993L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        boolean boolean21 = dateMidnight18.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property22 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusWeeks((int) ' ');
        boolean boolean32 = dateMidnight30.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.minus(readableDuration33);
        int int35 = dateMidnight30.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minus((long) (-1));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        int int40 = dateMidnight38.getYearOfEra();
        boolean boolean41 = dateMidnight30.isEqual((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight30.minus((long) 15);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight30.plusMonths(70);
        boolean boolean46 = dateMidnight23.isEqual((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone47 = dateMidnight30.getZone();
        long long49 = dateTimeZone47.nextTransition(50L);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) 1993L, dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1672531199986L) + "'", long8 == (-1672531199986L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "70" + "'", str13, "70");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 33 + "'", int35 == 33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 50L + "'", long49 == 50L);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withField(dateTimeFieldType11, 20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMonthOfYear(32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.secondOfMinute();
        java.lang.String str21 = property20.toString();
        java.lang.String str22 = property20.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay24 = property20.addNoWrapToCopy(17);
        org.joda.time.DurationField durationField25 = property20.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:45.146" + "'", str6, "T09:40:45.146");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[secondOfMinute]" + "'", str21, "Property[secondOfMinute]");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "45" + "'", str22, "45");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        int int18 = localDate11.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        boolean boolean47 = dateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime48 = localDate30.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate50 = localDate30.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate50.minusYears((int) (byte) 1);
        int int53 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property54 = localDate50.dayOfYear();
        org.joda.time.LocalDate.Property property55 = localDate50.year();
        org.joda.time.Chronology chronology56 = localDate50.getChronology();
        boolean boolean57 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate50);
        int int58 = localDate50.getYearOfEra();
        org.joda.time.LocalDate.Property property59 = localDate50.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1022 + "'", int58 == 1022);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime9.minusDays((int) (byte) 10);
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableDuration7, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean17 = localDate6.equals((java.lang.Object) readableDuration7);
        int int18 = localDate6.size();
        org.joda.time.LocalDate.Property property19 = localDate6.year();
        org.joda.time.LocalDate localDate20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate38 = localDate32.withWeekyear(19);
        org.joda.time.LocalTime localTime39 = null;
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.lang.String str43 = dateTimeZone41.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime44 = localDate32.toDateTime(localTime39, dateTimeZone41);
        int int45 = dateTime44.getYear();
        org.joda.time.DateTime.Property property46 = dateTime44.secondOfDay();
        org.joda.time.DateTime dateTime47 = property46.roundFloorCopy();
        org.joda.time.DateTime dateTime48 = property46.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime50 = property46.setCopy(39);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfSecond(36);
        int int53 = property19.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = yearMonthDay1.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate31.property(dateTimeFieldType35);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.Interval interval41 = localDate31.toInterval(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.YearMonthDay yearMonthDay46 = dateMidnight44.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfMinute();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        boolean boolean57 = yearMonthDay48.isEqual((org.joda.time.ReadablePartial) localDate56);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.lang.String str61 = dateTimeZone59.getNameKey((long) (-1));
        long long63 = dateTimeZone59.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight64 = localDate56.toDateMidnight(dateTimeZone59);
        long long68 = dateTimeZone59.convertLocalToUTC((long) '4', true, (long) 52);
        org.joda.time.DateTime dateTime69 = localDate31.toDateTimeAtStartOfDay(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 5L + "'", long63 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        int int5 = localDate4.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate4.withEra(64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate15 = dateTime13.toLocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfCentury(5);
        int int19 = localDate15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.days();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 11, chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.year();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        org.joda.time.DateTime dateTime36 = dateTime32.withField(dateTimeFieldType33, 7);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.DateMidnight.Property property45 = dateMidnight43.dayOfWeek();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43);
        boolean boolean47 = interval39.isAfter((org.joda.time.ReadableInterval) interval46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = interval46.withPeriodAfterStart(readablePeriod48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.dayOfWeek();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableDuration50, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean60 = interval56.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTime dateTime61 = interval56.getEnd();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone67);
        java.util.Date date69 = dateMidnight68.toDate();
        org.joda.time.DateMidnight.Property property70 = dateMidnight68.dayOfWeek();
        org.joda.time.Interval interval71 = new org.joda.time.Interval(readableDuration65, (org.joda.time.ReadableInstant) dateMidnight68);
        boolean boolean72 = interval64.isAfter((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-1L), dateTimeZone74);
        org.joda.time.Interval interval76 = interval64.withStart((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = interval56.overlaps((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Duration duration78 = interval56.toDuration();
        org.joda.time.Interval interval79 = interval49.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateTime dateTime80 = dateTime36.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property82 = dateTime36.property(dateTimeFieldType81);
        int int83 = localDate15.indexOf(dateTimeFieldType81);
        org.joda.time.LocalDate.Property property84 = localDate15.era();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.dayOfWeek();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23);
        boolean boolean27 = interval19.isAfter((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval26.withPeriodAfterStart(readablePeriod28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration58 = interval36.toDuration();
        org.joda.time.Interval interval59 = interval29.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime60 = dateTime16.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property62 = dateTime16.property(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = property62.getDateTime();
        org.joda.time.DateTime dateTime64 = dateTime63.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        java.util.Date date68 = dateMidnight67.toDate();
        org.joda.time.YearMonthDay yearMonthDay69 = dateMidnight67.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.plus((-1L));
        org.joda.time.Chronology chronology75 = dateMidnight74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfMinute();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.DurationField durationField78 = chronology75.days();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay69.withChronologyRetainFields(chronology75);
        org.joda.time.Chronology chronology80 = yearMonthDay79.getChronology();
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight81.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone84 = dateMidnight81.getZone();
        org.joda.time.DateMidnight dateMidnight85 = yearMonthDay79.toDateMidnight(dateTimeZone84);
        java.util.Set<java.lang.String> strSet86 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean87 = dateTimeZone84.equals((java.lang.Object) strSet86);
        long long89 = dateTimeZone84.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone91 = null;
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone91);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight92.plus((-1L));
        org.joda.time.Chronology chronology95 = dateMidnight94.getChronology();
        org.joda.time.DateTimeField dateTimeField96 = chronology95.secondOfMinute();
        org.joda.time.DurationField durationField97 = chronology95.millis();
        boolean boolean98 = dateTimeZone84.equals((java.lang.Object) chronology95);
        org.joda.time.DateTime dateTime99 = dateTime63.withZoneRetainFields(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 14400001L + "'", long89 == 14400001L);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.minusDays(1);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((long) 49);
        boolean boolean23 = dateMidnight4.isAfter((org.joda.time.ReadableInstant) dateMidnight22);
        int int24 = dateMidnight4.getSecondOfDay();
        int int25 = dateMidnight4.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean36 = interval32.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval32.getEnd();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        boolean boolean48 = interval40.isAfter((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = interval40.withStart((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = interval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval32.withPeriodAfterStart(readablePeriod54);
        org.joda.time.Interval interval56 = interval32.toInterval();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.plus((-1L));
        org.joda.time.Chronology chronology62 = dateMidnight61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfMinute();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Interval interval66 = localDate64.toInterval(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        boolean boolean68 = interval56.overlaps((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration69 = interval56.toDuration();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight4.withDurationAdded((org.joda.time.ReadableDuration) duration69, 10022);
        org.joda.time.Instant instant72 = dateMidnight71.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(instant72);
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        int[] intArray6 = yearMonthDay5.getValues();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.withPeriodAdded(readablePeriod7, 22);
        java.lang.String str10 = yearMonthDay5.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate34 = localDate30.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isFixed();
        org.joda.time.DateTime dateTime40 = localDate22.toDateTimeAtCurrentTime(dateTimeZone36);
        java.lang.String str41 = dateTimeZone36.toString();
        org.joda.time.Interval interval42 = yearMonthDay5.toInterval(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 8, dateTimeZone36);
        int int44 = dateTime43.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime43.withMinuteOfHour(34555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34555 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 70 + "'", int44 == 70);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.centuries();
        long long20 = chronology15.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfDay();
        org.joda.time.Chronology chronology22 = chronology15.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology22);
        int int24 = dateTimeFormatter2.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 292279042L + "'", long20 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime1.toCalendar(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime.Property property11 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(34);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(56);
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572445544,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=45,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(22);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis(14400001L);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(366);
        int int12 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime9.plusSeconds(34722164);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTime9.toString("T09:40:13.668");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DurationField durationField19 = chronology16.days();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 11, chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTime dateTime26 = dateTime22.withField(dateTimeFieldType23, 7);
        org.joda.time.LocalDate.Property property27 = localDate7.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate29 = property27.addToCopy(9);
        java.lang.String str30 = property27.toString();
        org.joda.time.LocalDate localDate31 = property27.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[yearOfCentury]" + "'", str30, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval6 = new org.joda.time.Interval((java.lang.Object) dateMidnight5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateMidnight");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay4.plusMonths(34);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay54.year();
        int int56 = property55.getMaximumValue();
        int int57 = property55.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay59 = property55.setCopy("33");
        int int60 = property55.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay62 = property55.addToCopy(34771);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-292275054) + "'", int60 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay62);
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("Mon Jan 01 00:00:00 UTC 1900");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Mon Jan 01 00:00:00 UTC 1900\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate8.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.LocalDate localDate18 = localDate12.withWeekyear(19);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate37.withWeekyear(19);
        org.joda.time.LocalTime localTime44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime49 = localDate37.toDateTime(localTime44, dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getName(1000L);
        org.joda.time.DateTime dateTime52 = yearMonthDay25.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.Interval interval53 = localDate20.toInterval(dateTimeZone46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) ' ', chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.weekyearOfCentury();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology54);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.set((int) (byte) -1, 59, (-1), 52, 21, 22);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        java.util.Date date10 = calendar1.getTime();
        java.lang.Object obj11 = date10.clone();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62043824318000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=11,WEEK_OF_YEAR=48,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=21,SECOND=22,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Dec 01 04:21:22 UTC 3");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "Sat Dec 01 04:21:22 UTC 3");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "Sat Dec 01 04:21:22 UTC 3");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "Sat Dec 01 04:21:22 UTC 3");
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight8.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        int int24 = localDate21.getYearOfCentury();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.DateTime dateTime55 = localDate37.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime(localTime25, dateTimeZone51);
        java.util.TimeZone timeZone57 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime58 = yearMonthDay10.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay10.plusMonths(34);
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay60.year();
        org.joda.time.DateTime dateTime62 = yearMonthDay60.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plus((-1L));
        org.joda.time.Chronology chronology72 = dateMidnight71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.secondOfMinute();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology72);
        org.joda.time.DurationField durationField75 = chronology72.days();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 11, chronology72);
        org.joda.time.DateTimeField dateTimeField77 = chronology72.year();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(32772, 7, 19, chronology72);
        org.joda.time.DateTime dateTime80 = dateTime62.withChronology(chronology72);
        org.joda.time.DateTimeField dateTimeField81 = chronology72.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(135, 800, 64, 0, 2, 858, chronology72);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 858 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.plusWeeks((int) ' ');
        boolean boolean9 = dateMidnight7.equals((java.lang.Object) 100.0f);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.LocalDate localDate12 = localDate0.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property13 = localDate0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        long long26 = property24.remainder();
        int int27 = property24.getMaximumValue();
        boolean boolean28 = localDate0.equals((java.lang.Object) int27);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3283200000L + "'", long26 == 3283200000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        int int10 = localDate7.getEra();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        int int17 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfYear();
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(34522);
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        org.joda.time.DateTime dateTime24 = localDate7.toDateTime(localTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(34816);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34816 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 45 + "'", int17 == 45);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.plusWeeks((int) ' ');
        boolean boolean9 = dateMidnight7.equals((java.lang.Object) 100.0f);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.LocalDate localDate12 = localDate0.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay17.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight29.getZone();
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay27.toDateMidnight(dateTimeZone32);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean35 = dateTimeZone32.equals((java.lang.Object) strSet34);
        org.joda.time.DateTime dateTime36 = localDate0.toDateTimeAtMidnight(dateTimeZone32);
        int int37 = dateTime36.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfMinute();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate15 = localDate11.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate localDate21 = localDate15.withWeekyear(19);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfYear();
        org.joda.time.LocalDate localDate23 = property22.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.LocalDate localDate46 = localDate40.withWeekyear(19);
        org.joda.time.LocalTime localTime47 = null;
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str51 = dateTimeZone49.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime52 = localDate40.toDateTime(localTime47, dateTimeZone49);
        java.lang.String str54 = dateTimeZone49.getName(1000L);
        org.joda.time.DateTime dateTime55 = yearMonthDay28.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.Interval interval56 = localDate23.toInterval(dateTimeZone49);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) ' ', chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(12, 32769, 1984, chronology57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 33330872);
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Interval interval5 = yearMonthDay1.toInterval();
        org.joda.time.LocalDate localDate6 = yearMonthDay1.toLocalDate();
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime37 = localDate19.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate39 = localDate19.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.property(dateTimeFieldType43);
        org.joda.time.LocalDate.Property property45 = localDate39.property(dateTimeFieldType43);
        int int46 = localDate6.get(dateTimeFieldType43);
        org.joda.time.LocalDate localDate48 = localDate6.withWeekyear(175);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localDate6.getValue(1903);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1903");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        int int4 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.plus(1644572152803L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        int[] intArray13 = yearMonthDay12.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.withPeriodAdded(readablePeriod14, 22);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (-1));
        long long22 = dateTimeZone18.convertUTCToLocal((long) 5);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) 0, locale24);
        org.joda.time.Interval interval26 = yearMonthDay12.toInterval(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = interval26.getStart();
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.halfdayOfDay();
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate55 = localDate51.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str58 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime59 = localDate55.toDateTimeAtCurrentTime(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isFixed();
        org.joda.time.DateTime dateTime61 = localDate43.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate63 = localDate43.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.property(dateTimeFieldType67);
        org.joda.time.LocalDate.Property property69 = localDate63.property(dateTimeFieldType67);
        int int70 = dateTime7.get(dateTimeFieldType67);
        java.lang.String str71 = dateTimeFieldType67.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5L + "'", long22 == 5L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 24 + "'", int70 == 24);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "dayOfMonth" + "'", str71, "dayOfMonth");
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.LocalDate localDate19 = localDate13.withWeekyear(19);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.joda.time.LocalDate localDate21 = property20.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate44 = localDate38.withWeekyear(19);
        org.joda.time.LocalTime localTime45 = null;
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str49 = dateTimeZone47.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime50 = localDate38.toDateTime(localTime45, dateTimeZone47);
        java.lang.String str52 = dateTimeZone47.getName(1000L);
        org.joda.time.DateTime dateTime53 = yearMonthDay26.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.Interval interval54 = localDate21.toInterval(dateTimeZone47);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) ' ', chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((-60522611065211L), chronology55);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.property(dateTimeFieldType17);
        int int19 = dateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime21 = dateTime7.withField(dateTimeFieldType17, 24);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(0);
        org.joda.time.DateTime.Property property24 = dateTime21.era();
        org.joda.time.Chronology chronology25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval26 = new org.joda.time.Interval((java.lang.Object) dateTime21, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        int int9 = date3.getDate();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date3);
        date3.setMinutes(575);
        long long13 = date3.getTime();
        date3.setDate(2040);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 01 09:35:00 UTC 1909");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2082810300000L) + "'", long13 == (-2082810300000L));
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("19");
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        int int4 = localDate1.getWeekyear();
        org.joda.time.LocalDate.Property property5 = localDate1.era();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = localDate13.getField(1);
        org.joda.time.LocalDate localDate17 = localDate13.withDayOfYear(2);
        org.joda.time.LocalDate localDate19 = localDate13.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property20 = localDate13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime50 = localDate32.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate52 = localDate32.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getRangeDurationType();
        boolean boolean55 = localDate52.isSupported(durationFieldType54);
        boolean boolean56 = localDate13.isSupported(durationFieldType54);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate58.toDateTime(localTime59, dateTimeZone60);
        org.joda.time.Chronology chronology62 = localDate58.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType54.getField(chronology62);
        java.lang.String str64 = durationFieldType54.getName();
        boolean boolean65 = localDate1.isSupported(durationFieldType54);
        org.joda.time.Chronology chronology66 = null;
        boolean boolean67 = durationFieldType54.isSupported(chronology66);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "days" + "'", str64, "days");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval6.toPeriod(periodType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean23 = interval19.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = interval27.withStart((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = interval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Interval interval42 = interval19.withPeriodAfterStart(readablePeriod41);
        org.joda.time.Interval interval43 = interval19.toInterval();
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        boolean boolean45 = interval6.isAfter((org.joda.time.ReadableInterval) interval43);
        long long46 = interval43.toDurationMillis();
        boolean boolean47 = interval43.isBeforeNow();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        java.lang.String str12 = localDate7.toString();
        int int13 = localDate7.getYearOfEra();
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate7.plusWeeks(44);
        org.joda.time.LocalDate localDate18 = localDate7.withWeekyear(34713);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11" + "'", str12, "2022-02-11");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay4.plusMonths(34);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay54.year();
        int int56 = property55.getMaximumValue();
        int int57 = property55.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay59 = property55.setCopy("33");
        org.joda.time.YearMonthDay yearMonthDay61 = property55.setCopy(2026);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay4.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minus((long) (-1));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.withChronologyRetainFields(chronology31);
        int int35 = yearMonthDay34.getDayOfMonth();
        org.joda.time.Interval interval36 = yearMonthDay34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        java.util.Date date41 = dateMidnight40.toDate();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight43, readablePeriod44);
        boolean boolean46 = interval36.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minus((long) (-1));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DurationField durationField54 = chronology52.seconds();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology52);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus(readablePeriod59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withYearOfCentury(10);
        boolean boolean63 = interval55.contains((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Interval interval65 = interval55.withStartMillis((long) 46);
        long long66 = interval65.toDurationMillis();
        org.joda.time.Period period67 = interval65.toPeriod();
        org.joda.time.Interval interval68 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 85L + "'", long66 == 85L);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean25 = interval21.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval21.toPeriod(periodType26);
        int int29 = period27.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = localDate37.getField(1);
        long long41 = dateTimeField39.roundHalfCeiling((long) (byte) 10);
        long long43 = dateTimeField39.remainder((long) 'a');
        org.joda.time.DurationField durationField44 = dateTimeField39.getRangeDurationField();
        boolean boolean45 = period27.equals((java.lang.Object) durationField44);
        int int46 = period27.size();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay14.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 34522);
        org.joda.time.DateTime dateTime50 = dateTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 2022);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getMonthOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean63 = dateTime59.isSupported(dateTimeFieldType62);
        java.lang.String str64 = dateTimeFieldType62.getName();
        int int65 = dateTime50.get(dateTimeFieldType62);
        org.joda.time.Chronology chronology66 = dateTime50.getChronology();
        boolean boolean68 = dateTime50.isAfter(0L);
        java.util.Locale locale69 = null;
        java.util.Calendar calendar70 = dateTime50.toCalendar(locale69);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 97L + "'", long43 == 97L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 46 + "'", int56 == 46);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "millisOfDay" + "'", str64, "millisOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 34846405 + "'", int65 == 34846405);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644572446405,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=46,MILLISECOND=405,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumTextLength(locale7);
        org.joda.time.DateTime dateTime9 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 46 + "'", int5 == 46);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundFloorCopy();
        boolean boolean6 = dateMidnight5.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withYearOfEra(2000);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (-1));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.LocalTime localTime14 = timeOfDay13.toLocalTime();
        java.lang.String str15 = timeOfDay13.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.minus(readablePeriod16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay13.plusMinutes(29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight8.withFields((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.minus((long) 64);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "T09:40:46.455" + "'", str15, "T09:40:46.455");
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        int[] intArray11 = yearMonthDay10.getValues();
        int[] intArray12 = yearMonthDay10.getValues();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusMonths(28);
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtMidnight();
        int[] intArray16 = yearMonthDay14.getValues();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate18.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate18.withYearOfEra(12);
        int[] intArray24 = localDate18.getValues();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate18);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        long long44 = dateTimeZone39.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime45 = localDate25.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate.Property property47 = localDate25.property(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = yearMonthDay14.get(dateTimeFieldType46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 12, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 12, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1968, 8, 1]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1659458699000L) + "'", long44 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays(9);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime.Property property5 = dateTime3.minuteOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime3.withDate(5601, 33, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(51);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.minus(readableDuration7);
        org.joda.time.DateTime.Property property9 = dateTime3.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime3.withField(dateTimeFieldType10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime12.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury(14);
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfCentury();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (-1));
        long long23 = dateTimeZone19.convertUTCToLocal((long) 5);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone19.getName((long) 0, locale25);
        java.lang.String str27 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone19);
        java.lang.String str30 = dateTimeZone19.getName((-86400000L));
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTime.Property property37 = dateTime35.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime39 = dateTime38.toLocalDateTime();
        boolean boolean40 = dateTimeZone19.isLocalDateTimeGap(localDateTime39);
        boolean boolean41 = dateTimeZone1.equals((java.lang.Object) localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5L + "'", long23 == 5L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 46 + "'", int36 == 46);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsText((int) (short) 1, locale9);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 24);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeField7.getAsShortText(34, locale14);
        org.joda.time.DurationField durationField16 = dateTimeField7.getLeapDurationField();
        java.lang.String str18 = dateTimeField7.getAsShortText((long) 34762);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "24" + "'", str12, "24");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "34" + "'", str15, "34");
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "24" + "'", str18, "24");
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minus((long) (-1));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minus(readablePeriod11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = timeOfDay12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTime3, dateTimeZone14);
        int int18 = dateTime17.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute(1999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1999 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minus((long) (-1));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minus(readablePeriod19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = timeOfDay20.toDateTimeToday(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight13.toMutableDateTime(dateTimeZone22);
        int int27 = dateTimeZone22.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 23, 45L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        long long33 = dateTimeZone22.getMillisKeepLocal(dateTimeZone31, (-1732752000000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(25260000, 70, 25260000, 54, 87, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1732752000000L) + "'", long33 == (-1732752000000L));
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property13 = dateTime10.hourOfDay();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.DateTime dateTime15 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        int int18 = localDate11.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        boolean boolean47 = dateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime48 = localDate30.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate50 = localDate30.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate50.minusYears((int) (byte) 1);
        int int53 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property54 = localDate50.dayOfYear();
        org.joda.time.LocalDate.Property property55 = localDate50.year();
        org.joda.time.Chronology chronology56 = localDate50.getChronology();
        boolean boolean57 = localDate11.isEqual((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.LocalDate.Property property58 = localDate50.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property10.setCopy(2);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minus((long) (-1));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minus(readablePeriod22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus(readablePeriod25);
        org.joda.time.DateTime dateTime27 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime27);
        java.util.Locale locale30 = null;
        java.util.Calendar calendar31 = dateTime16.toCalendar(locale30);
        // The following exception was thrown during execution in test generation
        try {
            calendar31.roll(31, 1984);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644570166933,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=2,SECOND=46,MILLISECOND=933,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weeks();
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate37 = localDate35.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property38 = localDate37.weekyear();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        int int40 = localDate39.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.YearMonthDay yearMonthDay45 = dateMidnight43.toYearMonthDay();
        int[] intArray46 = yearMonthDay45.getValues();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay45.withPeriodAdded(readablePeriod47, 22);
        java.lang.String str50 = yearMonthDay45.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears(5);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone69);
        java.util.Date date71 = dateMidnight70.toDate();
        org.joda.time.DateMidnight.Property property72 = dateMidnight70.dayOfWeek();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableDuration67, (org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean77 = interval73.isBefore((org.joda.time.ReadableInterval) interval76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval73.toPeriod(periodType78);
        org.joda.time.DateTime dateTime80 = dateTime64.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.LocalDate localDate82 = localDate60.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 6);
        org.joda.time.PeriodType periodType83 = period79.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay45.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.LocalDate localDate85 = localDate39.plus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadablePeriod) period79);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(localDate85);
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = localDate15.toInterval(dateTimeZone16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        int int21 = period19.get(durationFieldType20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight28 = dateTime27.toDateMidnight();
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.minusYears(1970);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateMidnight28);
        boolean boolean35 = interval34.isBeforeNow();
        boolean boolean37 = interval34.contains((long) 369);
        org.joda.time.DateTime dateTime38 = interval34.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.months();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.monthOfYear();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDate localDate15 = dateMidnight6.toLocalDate();
        int int16 = dateMidnight6.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        java.util.Date date9 = dateMidnight8.toDate();
        org.joda.time.YearMonthDay yearMonthDay10 = dateMidnight8.toYearMonthDay();
        int[] intArray11 = yearMonthDay10.getValues();
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay10.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay10.minusDays(12);
        java.util.Date date17 = new java.util.Date((long) '4');
        date17.setTime((long) (byte) 1);
        int int20 = date17.getMinutes();
        int int21 = date17.getDate();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.days();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay26.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight38.getZone();
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay36.toDateMidnight(dateTimeZone41);
        java.util.Set<java.lang.String> strSet43 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean44 = dateTimeZone41.equals((java.lang.Object) strSet43);
        long long46 = dateTimeZone41.nextTransition(14400001L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone41.getMillisKeepLocal(dateTimeZone47, (long) 50);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) date17, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(999L, dateTimeZone41);
        org.joda.time.Interval interval52 = yearMonthDay10.toInterval(dateTimeZone41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(999, 358, 26, 34697, 18, 34815702, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34697 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 14400001L + "'", long46 == 14400001L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 50L + "'", long49 == 50L);
        org.junit.Assert.assertNotNull(interval52);
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.withFieldAdded(durationFieldType25, 3);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay14.withFieldAdded(durationFieldType25, 53);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.DateTime dateTime38 = dateTime35.plusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-1L), dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.plus(readableDuration42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.plus(readableDuration46);
        int int48 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        org.joda.time.DateTime dateTime51 = property49.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTimeISO();
        int int53 = dateTime35.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.Instant instant54 = dateTime35.toInstant();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) instant54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval56 = interval30.withEnd((org.joda.time.ReadableInstant) instant54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 47 + "'", int36 == 47);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date3.getDay();
        int int10 = date3.getHours();
        java.time.Instant instant11 = date3.toInstant();
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = yearMonthDay14.getFieldType(33538);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33538");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        long long24 = dateTimeZone17.convertUTCToLocal((long) '4');
        java.lang.String str26 = dateTimeZone17.getName((long) 580);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime5.withChronology(chronology12);
        org.joda.time.DateTime dateTime16 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.dayOfWeek();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28);
        boolean boolean32 = interval24.isAfter((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = interval31.withPeriodAfterStart(readablePeriod33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateMidnight.Property property40 = dateMidnight38.dayOfWeek();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean45 = interval41.isBefore((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTime dateTime46 = interval41.getEnd();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.dayOfWeek();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableDuration50, (org.joda.time.ReadableInstant) dateMidnight53);
        boolean boolean57 = interval49.isAfter((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((-1L), dateTimeZone59);
        org.joda.time.Interval interval61 = interval49.withStart((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = interval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration63 = interval41.toDuration();
        org.joda.time.Interval interval64 = interval34.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime65 = dateTime21.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Instant instant66 = dateTime65.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(instant66);
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(70L, chronology8);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours(10);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusMinutes(24);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay16.withMillisOfSecond(24);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay16.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        java.lang.String str23 = dateTimeFieldType22.toString();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minuteOfHour" + "'", str23, "minuteOfHour");
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYear(24);
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight12.toYearMonthDay();
        int int16 = dateMidnight12.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight12.withMonthOfYear(34585);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34585 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        int int6 = timeOfDay4.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withMinuteOfHour(50);
        org.joda.time.DateTime dateTime9 = timeOfDay8.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 345 + "'", int6 == 345);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDate7.toString("T09:37:24.102");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate18.withWeekyear(19);
        org.joda.time.LocalTime localTime25 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime30 = localDate18.toDateTime(localTime25, dateTimeZone27);
        int int31 = dateTime30.getYear();
        org.joda.time.DateTime.Property property32 = dateTime30.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime30.toYearMonthDay();
        int int34 = yearMonthDay33.size();
        org.joda.time.Chronology chronology35 = yearMonthDay33.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter5.withChronology(chronology35);
        java.io.Writer writer37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minus((long) (-1));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.LocalTime localTime43 = timeOfDay42.toLocalTime();
        java.lang.String str44 = timeOfDay42.toString();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay42.secondOfMinute();
        java.lang.String str46 = property45.getAsText();
        java.util.Locale locale48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = property45.setCopy("11", locale48);
        org.joda.time.TimeOfDay timeOfDay50 = property45.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer37, (org.joda.time.ReadablePartial) timeOfDay50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Etc/UTC" + "'", str21, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "T09:40:47.430" + "'", str44, "T09:40:47.430");
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "47" + "'", str46, "47");
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay50);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.DateTime dateTime9 = timeOfDay8.toDateTimeToday();
        java.lang.String str10 = timeOfDay8.toString();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(1969);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = timeOfDay13.getFieldType(40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 40");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "T09:39:47.476" + "'", str10, "T09:39:47.476");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        long long12 = property10.remainder();
        org.joda.time.LocalDate localDate13 = property10.withMaximumValue();
        boolean boolean15 = property10.equals((java.lang.Object) "T09:36:03.882");
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3283200000L + "'", long12 == 3283200000L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 34771);
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        java.util.Date date5 = new java.util.Date(52, 34585, (int) (short) 0, 17, (-30801));
        date5.setMinutes((-391));
        java.lang.String str8 = date5.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 10 00:29:00 UTC 4834");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jan 10, 4834 12:29:00 AM" + "'", str8, "Jan 10, 4834 12:29:00 AM");
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        int int11 = localDate7.getYear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime12.withField(dateTimeFieldType15, 37);
        org.joda.time.DateTime dateTime19 = dateTime12.plusSeconds(996);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        int[] intArray28 = yearMonthDay27.getValues();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.withPeriodAdded(readablePeriod29, 22);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval40.toPeriod(periodType45);
        int int48 = period46.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay31.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate62 = localDate58.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.String str65 = dateTimeZone64.toString();
        org.joda.time.DateTime dateTime66 = localDate62.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate localDate68 = localDate62.withWeekyear(19);
        org.joda.time.LocalTime localTime69 = null;
        org.joda.time.DateTime dateTime70 = localDate62.toDateTime(localTime69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plus((-1L));
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.secondOfMinute();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        org.joda.time.LocalDate localDate80 = localDate78.withYearOfEra((int) (byte) 10);
        int int81 = localDate78.getYearOfCentury();
        boolean boolean82 = localDate62.isBefore((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.minus((long) (-1));
        org.joda.time.DateTime dateTime86 = localDate62.toDateTime((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period46, (org.joda.time.ReadableInstant) dateMidnight85);
        java.lang.String str88 = period46.toString();
        org.joda.time.DateTime dateTime90 = dateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period46, (-1));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Etc/UTC" + "'", str65, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 22 + "'", int81 == 22);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT0S" + "'", str88, "PT0S");
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour(10);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusWeeks((int) ' ');
        int int14 = dateMidnight13.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withMinuteOfHour(10);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minus((long) (-1));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.minus(readablePeriod26);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.minusMinutes(1970);
        org.joda.time.Chronology chronology32 = timeOfDay29.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minus((long) (-1));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.minus(readablePeriod38);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay41.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.dayOfWeek();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean58 = interval54.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval54.toPeriod(periodType59);
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay47.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.PeriodType periodType62 = period60.getPeriodType();
        int[] intArray65 = chronology32.get((org.joda.time.ReadablePeriod) period60, (long) (-1), (long) 24);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight13.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.weekyear();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.withMillis(0L);
        org.joda.time.DateMidnight.Property property71 = dateMidnight67.era();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight67.plusWeeks(996);
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight73.toMutableDateTime();
        boolean boolean75 = dateTime5.isAfter((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = dateMidnight8.toCalendar(locale11);
        // The following exception was thrown during execution in test generation
        try {
            calendar12.add(42, 833);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-2678400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = dateTimeFormatter2.parseLocalDateTime("Sat May 11 09:36:12 UTC 2030");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = calendar0.getActualMaximum(34709682);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 34709682");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate(59, 69, 8);
        java.util.Calendar calendar13 = builder8.build();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        int int25 = localDate22.getYearOfCentury();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate50 = localDate46.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime54 = localDate50.toDateTimeAtCurrentTime(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.DateTime dateTime56 = localDate38.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = localDate22.toDateTime(localTime26, dateTimeZone52);
        java.util.TimeZone timeZone58 = dateTimeZone52.toTimeZone();
        calendar14.setTimeZone(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone58);
        calendar13.setTimeZone(timeZone58);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-60123067021001,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=64,MONTH=9,WEEK_OF_YEAR=41,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=286,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=2,SECOND=58,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572447720,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=47,MILLISECOND=720,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Etc/UTC" + "'", str53, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644572447720,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=47,MILLISECOND=720,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime.Property property9 = dateTime7.centuryOfEra();
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(17);
        org.joda.time.DateTime dateTime15 = property10.addToCopy(1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((-86400000L), dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(34697823, 40, 34709682, (int) '#', 5255, 34796, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Etc/UTC" + "'", str9, "Etc/UTC");
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(50);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateMidnight2.toString("Fri", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-1672531199986L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        java.util.Locale locale14 = null;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = calendar15.getDisplayName((int) (short) -1, (-1), locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572460000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        java.lang.String str8 = yearMonthDay7.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime20.dayOfYear();
        boolean boolean23 = dateMidnight11.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime41 = interval36.getEnd();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        boolean boolean52 = interval44.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval44.withStart((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration58 = interval36.toDuration();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight29.withDurationAdded((org.joda.time.ReadableDuration) duration58, 24);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight11.withDurationAdded((org.joda.time.ReadableDuration) duration58, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.property(dateTimeFieldType63);
        int int65 = yearMonthDay7.get(dateTimeFieldType63);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay7.minusYears(345);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 47 + "'", int21 == 47);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay67);
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay14 = property12.addWrapFieldToCopy(292278994);
        org.joda.time.TimeOfDay timeOfDay15 = property12.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 49, 47, 897]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate7.withYear(6);
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtMidnight();
        boolean boolean18 = dateTime17.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfDay(54);
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.Instant instant22 = dateTime20.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime20.withYearOfEra((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(4L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minus(readablePeriod2);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.minus(readableDuration15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate25.toInterval(dateTimeZone26);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime16, chronology28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay9.withChronologyRetainFields(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.era();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight2.toMutableDateTime(chronology28);
        org.joda.time.LocalDate localDate36 = dateMidnight2.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) 29, (long) 2022, chronology44);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        int[] intArray56 = yearMonthDay55.getValues();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.withPeriodAdded(readablePeriod57, 22);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        java.util.Date date66 = dateMidnight65.toDate();
        org.joda.time.DateMidnight.Property property67 = dateMidnight65.dayOfWeek();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableDuration62, (org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean72 = interval68.isBefore((org.joda.time.ReadableInterval) interval71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = interval68.toPeriod(periodType73);
        int int76 = period74.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay59.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight48, (org.joda.time.ReadablePeriod) period74);
        org.joda.time.Interval interval79 = interval47.withPeriodAfterStart((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Chronology chronology80 = interval79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.centuryOfEra();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((java.lang.Object) dateMidnight2, chronology80);
        org.joda.time.DateTime.Property property83 = dateTime82.millisOfDay();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 5, chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        boolean boolean25 = dateMidnight22.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property26 = dateMidnight22.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight22.minusWeeks(17);
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateMidnight28);
        int int30 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTime dateTime32 = dateTime16.withMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime32.getZone();
        org.joda.time.DateTime dateTime34 = dateTime32.withLaterOffsetAtOverlap();
        int int35 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48 + "'", int30 == 48);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateMidnight6.toCalendar(locale15);
        // The following exception was thrown during execution in test generation
        try {
            calendar16.setWeekDate(5601, 56, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 23");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=19353600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        int[] intArray10 = yearMonthDay9.getValues();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withPeriodAdded(readablePeriod11, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight16.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay18.withChronologyRetainFields(chronology24);
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod11, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(27, 314, 2008, 50400000, (-30801), chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean23 = interval19.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = interval27.withStart((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = interval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration41 = interval19.toDuration();
        org.joda.time.Interval interval42 = interval12.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) 29, (long) 2022, chronology50);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        java.util.Date date60 = dateMidnight59.toDate();
        org.joda.time.YearMonthDay yearMonthDay61 = dateMidnight59.toYearMonthDay();
        int[] intArray62 = yearMonthDay61.getValues();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay61.withPeriodAdded(readablePeriod63, 22);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay65.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone70);
        java.util.Date date72 = dateMidnight71.toDate();
        org.joda.time.DateMidnight.Property property73 = dateMidnight71.dayOfWeek();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean78 = interval74.isBefore((org.joda.time.ReadableInterval) interval77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval74.toPeriod(periodType79);
        int int82 = period80.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay65.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadablePeriod) period80);
        org.joda.time.Interval interval85 = interval53.withPeriodAfterStart((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Interval interval86 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType88 = period80.getFieldType(789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra((int) (byte) 10);
        int int24 = localDate21.getYearOfCentury();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.DateTime dateTime55 = localDate37.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime(localTime25, dateTimeZone51);
        java.util.TimeZone timeZone57 = dateTimeZone51.toTimeZone();
        calendar13.setTimeZone(timeZone57);
        int int59 = calendar13.getWeeksInWeekYear();
        calendar13.setFirstDayOfWeek((int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.hours();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfDay();
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeField69.getAsText((int) (short) 1, locale71);
        boolean boolean73 = calendar13.after((java.lang.Object) (short) 1);
        java.util.TimeZone timeZone74 = calendar13.getTimeZone();
        java.util.Calendar.Builder builder75 = builder8.setTimeZone(timeZone74);
        java.util.Locale locale76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone74, locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572448186,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=35,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=48,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay22 = property20.addNoWrapToCopy(21);
        int int23 = property20.getMinimumValue();
        java.lang.String str24 = property20.toString();
        org.joda.time.TimeOfDay timeOfDay25 = property20.withMaximumValue();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.hourOfDay();
        int int27 = property26.getMinimumValue();
        int int28 = property26.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property26.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:48.205" + "'", str6, "T09:40:48.205");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[secondOfMinute]" + "'", str24, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getSeconds();
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int6 = timeOfDay5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = property13.addToCopy((long) 1999);
        org.joda.time.DateMidnight dateMidnight17 = property13.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight18 = property13.roundFloorCopy();
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = property13.setCopy("", locale20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.addToCopy(996);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        org.joda.time.LocalDate localDate23 = localDate19.withDayOfYear(2);
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfCentury();
        org.joda.time.LocalDate localDate26 = localDate23.withYear((int) '4');
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight32, readablePeriod33);
        org.joda.time.DateTime dateTime35 = interval34.getStart();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.monthOfYear();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime37.minus(readableDuration41);
        org.joda.time.DateTime.Property property43 = dateTime37.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime46 = dateTime37.withField(dateTimeFieldType44, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.YearMonthDay yearMonthDay51 = dateMidnight49.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.monthOfYear();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime53.minus(readableDuration57);
        org.joda.time.DateMidnight dateMidnight59 = dateTime58.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.secondOfMinute();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Interval interval69 = localDate67.toInterval(dateTimeZone68);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateTime58, chronology70);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay51.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType44.getField(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = dateTimeField73.getType();
        int int75 = dateTime35.get(dateTimeField73);
        org.joda.time.DateTime.Property property76 = dateTime35.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property76.getFieldType();
        int int78 = localDate26.indexOf(dateTimeFieldType77);
        org.joda.time.YearMonthDay.Property property79 = yearMonthDay11.property(dateTimeFieldType77);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay11.minusDays(25);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 212 + "'", int75 == 212);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = localDate70.toDateMidnight(dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusMonths(34796);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight21.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears(5);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.dayOfWeek();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean55 = interval51.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval51.toPeriod(periodType56);
        org.joda.time.DateTime dateTime58 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDate localDate60 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 6);
        org.joda.time.PeriodType periodType61 = period57.getPeriodType();
        org.joda.time.DateTime dateTime63 = dateTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period57, (int) '#');
        org.joda.time.DateTime dateTime65 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 35);
        java.lang.String str66 = period57.toString();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-1L), dateTimeZone68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime72 = dateTime69.withFieldAdded(durationFieldType70, 16);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period57, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period74 = period57.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = period57.getValue(48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0S" + "'", str66, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.Calendar.Builder builder23 = builder16.setTimeOfDay(9, 314, 53, 55);
        java.util.Calendar.Builder builder28 = builder23.setTimeOfDay(57, 1984, 34697, 32772);
        java.util.Calendar.Builder builder32 = builder23.setTimeOfDay(1200000, 27, 2026);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property7.addNoWrapToCopy(1970);
        int int10 = property7.getMaximumValue();
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay12 = property7.getTimeOfDay();
        org.joda.time.DateTime dateTime13 = timeOfDay12.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:48.444" + "'", str6, "T09:40:48.444");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getWeeksInWeekYear();
        calendar0.set((int) '#', 22, (int) (short) 10, (int) '#', (int) (byte) 1, 44);
        int int54 = calendar0.getFirstDayOfWeek();
        java.util.Date date61 = new java.util.Date(99, (-19034), 47, 365, 20, 557);
        boolean boolean62 = calendar0.equals((java.lang.Object) (-19034));
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35,MONTH=22,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35,MINUTE=1,SECOND=44,MILLISECOND=459,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals(date61.toString(), "Wed Jan 01 05:29:17 UTC 413");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        int[] intArray13 = yearMonthDay12.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.withPeriodAdded(readablePeriod14, 22);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean29 = interval25.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = interval25.toPeriod(periodType30);
        int int33 = period31.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay16.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime36 = dateTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 1);
        org.joda.time.DateTime dateTime38 = dateTime36.withEra((int) (short) 0);
        org.joda.time.DateTime dateTime40 = dateTime36.withCenturyOfEra(513);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        boolean boolean8 = dateMidnight6.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.minus(readableDuration9);
        int int11 = dateMidnight6.getMillisOfSecond();
        long long12 = dateMidnight6.getMillis();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight6.plusMonths(34844635);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 0);
        boolean boolean22 = dateTimeFormatter21.isParser();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        boolean boolean30 = dateMidnight27.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property31 = dateMidnight27.centuryOfEra();
        boolean boolean32 = property31.isLeap();
        org.joda.time.DateMidnight dateMidnight34 = property31.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight37.toYearMonthDay();
        int[] intArray40 = yearMonthDay39.getValues();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay39.withPeriodAdded(readablePeriod41, 22);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (-1));
        long long49 = dateTimeZone45.convertUTCToLocal((long) 5);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone45.getName((long) 0, locale51);
        org.joda.time.Interval interval53 = yearMonthDay39.toInterval(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight34.toMutableDateTime(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter21.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 1969);
        org.joda.time.Chronology chronology58 = dateTimeFormatter57.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = dateMidnight14.toString(dateTimeFormatter57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 19353600000L + "'", long12 == 19353600000L);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5L + "'", long49 == 5L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNull(chronology58);
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = localDate7.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks(100);
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtCurrentTime();
        int int20 = localDate16.getYearOfEra();
        org.joda.time.LocalDate localDate22 = localDate16.minusWeeks(45);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        int[] intArray30 = yearMonthDay29.getValues();
        org.joda.time.LocalDate localDate31 = yearMonthDay29.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str33 = dateTimeFieldType32.getName();
        int int34 = yearMonthDay29.indexOf(dateTimeFieldType32);
        org.joda.time.DateMidnight.Property property35 = dateMidnight24.property(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10022 + "'", int20 == 10022);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfDay" + "'", str33, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMonths((-1));
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight37.withYear(11);
        boolean boolean46 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateTime.Property property47 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.parse("T09:35:29.752");
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight51 = dateTime49.toDateMidnight();
        boolean boolean52 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateMidnight51);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T09:40:48.565Z" + "'", str32, "1970-01-01T09:40:48.565Z");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withSecondOfMinute(31);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusSeconds(1439);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withMillisOfSecond(3);
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = timeOfDay11.toString("", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(1644572440699L);
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date3.getDay();
        int int10 = date3.getHours();
        java.lang.String str11 = date3.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Thu Jan 01 00:00:00 UTC 1970" + "'", str11, "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay22 = property20.setCopy(27);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusSeconds(135);
        org.joda.time.LocalTime localTime25 = timeOfDay24.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay24.plusMillis(428);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeOfDay24.toString("T09:36:29.169", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:48.719" + "'", str6, "T09:40:48.719");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter7.withChronology(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.years();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(281741794000L, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear(820);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 820 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        java.util.Date date1 = new java.util.Date(2595599609L);
        org.junit.Assert.assertEquals(date1.toString(), "Sat Jan 31 00:59:59 UTC 1970");
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 53);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds(252);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withHourOfDay(953);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 953 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay4.withFieldAdded(durationFieldType10, (int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.minusYears(41);
        int int15 = yearMonthDay14.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate27 = localDate23.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.LocalDate localDate33 = localDate27.withWeekyear(19);
        org.joda.time.LocalTime localTime34 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime39 = localDate27.toDateTime(localTime34, dateTimeZone36);
        int int40 = dateTime39.getYear();
        org.joda.time.DateTime.Property property41 = dateTime39.secondOfDay();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime dateTime43 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str45 = dateTimeFieldType44.getName();
        boolean boolean46 = dateTime43.isSupported(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = yearMonthDay14.get(dateTimeFieldType44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfHour" + "'", str45, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        int int11 = dateTimeField6.get(0L);
        int int12 = dateTimeField6.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.dayOfWeek();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22);
        boolean boolean26 = interval18.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration27 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration27, 52);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTime dateTime32 = dateTime11.withFieldAdded(durationFieldType30, 53);
        org.joda.time.TimeOfDay timeOfDay33 = dateTime32.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime32.withWeekOfWeekyear(999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay2 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight5.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime10 = yearMonthDay7.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(5);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        java.util.Date date33 = dateMidnight32.toDate();
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.dayOfWeek();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean39 = interval35.isBefore((org.joda.time.ReadableInterval) interval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = interval35.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = dateTime26.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.LocalDate localDate44 = localDate22.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 6);
        org.joda.time.PeriodType periodType45 = period41.getPeriodType();
        org.joda.time.DateTime dateTime47 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period41, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime10.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime10.getZone();
        org.joda.time.DateTime dateTime51 = dateTime10.minusMonths(17);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        boolean boolean62 = interval54.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Interval interval64 = interval61.withPeriodAfterStart(readablePeriod63);
        long long65 = interval61.toDurationMillis();
        org.joda.time.Interval interval66 = interval61.toInterval();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone69);
        java.util.Date date71 = dateMidnight70.toDate();
        org.joda.time.DateMidnight.Property property72 = dateMidnight70.dayOfWeek();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableDuration67, (org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean77 = interval73.isBefore((org.joda.time.ReadableInterval) interval76);
        org.joda.time.DateTime dateTime78 = interval73.getEnd();
        org.joda.time.Interval interval81 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone84);
        java.util.Date date86 = dateMidnight85.toDate();
        org.joda.time.DateMidnight.Property property87 = dateMidnight85.dayOfWeek();
        org.joda.time.Interval interval88 = new org.joda.time.Interval(readableDuration82, (org.joda.time.ReadableInstant) dateMidnight85);
        boolean boolean89 = interval81.isAfter((org.joda.time.ReadableInterval) interval88);
        org.joda.time.DateTimeZone dateTimeZone91 = null;
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((-1L), dateTimeZone91);
        org.joda.time.Interval interval93 = interval81.withStart((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = interval73.overlaps((org.joda.time.ReadableInterval) interval81);
        org.joda.time.Duration duration95 = interval73.toDuration();
        org.joda.time.Interval interval96 = interval66.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration95);
        org.joda.time.Interval interval97 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration95);
        org.joda.time.DateMidnight dateMidnight99 = dateMidnight0.withDurationAdded((org.joda.time.ReadableDuration) duration95, 762);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertNotNull(dateMidnight99);
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.lang.Object obj9 = null;
        boolean boolean10 = property6.equals(obj9);
        org.joda.time.DateTime dateTime11 = property6.roundCeilingCopy();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        gregorianCalendar12.set(34713, 175, 2023, 37, 117660000, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight22.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight22.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar30 = dateMidnight28.toGregorianCalendar();
        gregorianCalendar30.setLenient(false);
        gregorianCalendar30.setMinimalDaysInFirstWeek(252);
        org.joda.time.YearMonthDay yearMonthDay35 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        int int36 = gregorianCalendar30.getWeeksInWeekYear();
        int int37 = gregorianCalendar12.compareTo((java.util.Calendar) gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod6, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plus((-1L));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate.Property property36 = localDate35.centuryOfEra();
        org.joda.time.LocalDate localDate37 = property36.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate37.minus(readablePeriod38);
        org.joda.time.LocalDate localDate41 = localDate37.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property42 = localDate41.weekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight46.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay48.withPeriodAdded(readablePeriod49, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.withFieldAdded(durationFieldType53, 3);
        org.joda.time.Interval interval56 = yearMonthDay51.toInterval();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay51.plusDays(34585);
        int[] intArray59 = yearMonthDay51.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = dateTimeField27.set((org.joda.time.ReadablePartial) localDate41, 323, intArray59, 395);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 395 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1]");
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2, 0, 235, 786, 34629952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 786 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        java.lang.String str2 = timeOfDay1.toString();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.minusMillis(69);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "T00:00:01.970" + "'", str2, "T00:00:01.970");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(34805967, 135, 34, 1439, 34585, 34713, 41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        int int21 = localDate16.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate23 = localDate16.minusDays(24);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (-1));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTime dateTime29 = localDate28.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.hours();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType30.getField(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime29.withChronology(chronology36);
        org.joda.time.DateTime dateTime40 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime45 = dateTime40.withZoneRetainFields(dateTimeZone44);
        org.joda.time.Interval interval46 = localDate16.toInterval(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate58 = localDate54.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str61 = dateTimeZone60.toString();
        org.joda.time.DateTime dateTime62 = localDate58.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.LocalDate localDate64 = localDate58.withWeekyear(19);
        org.joda.time.LocalTime localTime65 = null;
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str69 = dateTimeZone67.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime70 = localDate58.toDateTime(localTime65, dateTimeZone67);
        org.joda.time.LocalDate.Property property71 = localDate58.weekyear();
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minus((long) (-1));
        org.joda.time.Chronology chronology75 = dateMidnight74.getChronology();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology75);
        boolean boolean77 = property71.equals((java.lang.Object) chronology75);
        org.joda.time.LocalDate localDate79 = property71.setCopy(17);
        int int80 = localDate16.compareTo((org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = localDate79.toDateMidnight(dateTimeZone81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone84);
        java.util.Date date86 = dateMidnight85.toDate();
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight85.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight88, readablePeriod89);
        org.joda.time.Period period91 = interval90.toPeriod();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight82.plus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight6.plus((org.joda.time.ReadablePeriod) period91);
        boolean boolean95 = dateMidnight93.isAfter((-1340409599948L));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime54 = dateTime52.withYear(32772);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.plus((-1L));
        org.joda.time.Chronology chronology62 = dateMidnight61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfMinute();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.LocalDate localDate66 = localDate64.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate68 = localDate64.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        java.lang.String str71 = dateTimeZone70.toString();
        org.joda.time.DateTime dateTime72 = localDate68.toDateTimeAtCurrentTime(dateTimeZone70);
        java.lang.String str73 = dateTimeZone70.toString();
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeZone70.getShortName(0L, locale75);
        long long79 = dateTimeZone70.convertLocalToUTC((long) 45, false);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) 51, 1644624000000L, dateTimeZone70);
        int int82 = dateTimeZone70.getOffset((long) 6);
        org.joda.time.DateTime dateTime83 = dateTime54.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime85 = dateTime83.plusDays(47);
        org.joda.time.Chronology chronology86 = dateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.dayOfMonth();
        java.lang.String str88 = chronology86.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Etc/UTC" + "'", str71, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Etc/UTC" + "'", str73, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 45L + "'", long79 == 45L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str88, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusMillis(32);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay10.plusSeconds((-292275054));
        int int16 = timeOfDay15.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 49, 49, 152]");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 18 + "'", int16 == 18);
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay4.plusMinutes(29);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay4.minusMinutes(48);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusSeconds(58);
        java.lang.String str15 = timeOfDay12.toString();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:49.324" + "'", str6, "T09:40:49.324");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "T08:52:49.324" + "'", str15, "T08:52:49.324");
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate31.property(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.property(dateTimeFieldType47);
        int int49 = dateTime41.get(dateTimeFieldType47);
        org.joda.time.LocalDate.Property property50 = localDate31.property(dateTimeFieldType47);
        org.joda.time.Interval interval51 = localDate31.toInterval();
        int int52 = localDate31.getWeekyear();
        org.joda.time.LocalDate localDate54 = localDate31.minusWeeks(34732484);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 11 + "'", int49 == 11);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1022 + "'", int52 == 1022);
        org.junit.Assert.assertNotNull(localDate54);
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        int[] intArray14 = yearMonthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withPeriodAdded(readablePeriod15, 22);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        int[] intArray27 = yearMonthDay26.getValues();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.withPeriodAdded(readablePeriod28, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean43 = interval39.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval39.toPeriod(periodType44);
        int int47 = period45.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay30.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period45);
        int[] intArray52 = chronology7.get((org.joda.time.ReadablePeriod) period45, (long) 42, 1644537600029L);
        org.joda.time.DateTimeField dateTimeField53 = chronology7.minuteOfHour();
        int int55 = dateTimeField53.getLeapAmount(292278994L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.centuryOfEra();
        int int17 = dateMidnight5.compareTo((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.plusMonths(24);
        org.joda.time.DateMidnight.Property property20 = dateMidnight5.weekyear();
        long long21 = dateMidnight5.getMillis();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-13305600000L) + "'", long21 == (-13305600000L));
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate19.withDayOfWeek(235);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 235 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.year();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.util.Locale locale19 = null;
        int int20 = property17.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DurationField durationField10 = chronology7.years();
        org.joda.time.DurationField durationField11 = chronology7.months();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology7.getDateTimeMillis(779, 34612781, 560, (int) (short) 1, (-36962), 40, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -36962 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime9.monthOfYear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.minus(readableDuration13);
        org.joda.time.DateTime.Property property15 = dateTime9.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime9.withField(dateTimeFieldType16, (int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime18.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears(5);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = dateTime24.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime41 = dateTime20.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay6.plus((org.joda.time.ReadablePeriod) period39);
        int int44 = timeOfDay42.getValue(0);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int int12 = timeOfDay10.getValue(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(5);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay17 = property15.addNoWrapToCopy(575);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = property15.setCopy(34773284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34773284 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1L));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfMinute();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate34 = localDate30.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isFixed();
        org.joda.time.DateTime dateTime40 = localDate22.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate42 = localDate22.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property43 = localDate22.year();
        boolean boolean44 = localDate9.equals((java.lang.Object) localDate22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = localDate9.withEra(34805967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34805967 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        java.lang.String str11 = property8.getAsShortText();
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.YearMonthDay yearMonthDay15 = property8.addToCopy(428);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        int int17 = calendar16.getFirstDayOfWeek();
        int int18 = calendar16.getWeekYear();
        long long19 = calendar16.getTimeInMillis();
        java.lang.String str20 = calendar16.getCalendarType();
        boolean boolean21 = property8.equals((java.lang.Object) calendar16);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan" + "'", str11, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572449629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=49,MILLISECOND=629,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572449629L + "'", long19 == 1644572449629L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        long long8 = dateTimeField5.add((long) (-391), (long) 52);
        java.lang.String str9 = dateTimeField5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField5.getType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        java.lang.String str12 = durationFieldType11.toString();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1640995199609L + "'", long8 == 1640995199609L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str9, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weekyears" + "'", str12, "weekyears");
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (-1));
        long long8 = dateTimeZone4.convertUTCToLocal((long) 5);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone4);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone4);
        java.lang.String str12 = dateTimeZone4.getNameKey((-820540800000L));
        int int14 = dateTimeZone4.getStandardOffset((long) 292278994);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(925, 21, 117660000, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 5L + "'", long8 == 5L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property14 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = property14.addWrapFieldToCopy(13);
        int int18 = localDate17.size();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(20);
        int int27 = localDate22.getDayOfWeek();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        boolean boolean29 = localDate22.isSupported(durationFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays((int) 'a');
        org.joda.time.Interval interval47 = interval14.withEnd((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime48 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        int int51 = dateTimeZone49.getStandardOffset(1644572255763L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withFieldAdded(durationFieldType9, 3);
        java.lang.String str12 = yearMonthDay7.toString();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfWeek();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean23 = interval19.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime24 = interval19.getEnd();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        java.util.Date date32 = dateMidnight31.toDate();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean35 = interval27.isAfter((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-1L), dateTimeZone37);
        org.joda.time.Interval interval39 = interval27.withStart((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = interval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Interval interval42 = interval19.withPeriodAfterStart(readablePeriod41);
        org.joda.time.Interval interval43 = interval19.toInterval();
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withField(dateTimeFieldType45, 4);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType45.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay7.withFieldAdded(durationFieldType48, 34773284);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(durationFieldType48);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 12);
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        int int8 = dateTime7.getSecondOfMinute();
        int int9 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        long long7 = chronology3.add((long) 16, (long) (byte) 10, (int) '#');
        org.joda.time.DurationField durationField8 = chronology3.weeks();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology3);
        boolean boolean10 = dateTime9.isAfterNow();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 366L + "'", long7 == 366L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        date7.setYear(0);
        date7.setTime((long) 7);
        date7.setMinutes(200022);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue May 19 21:42:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.withPeriodAdded(readablePeriod6, 11);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekOfWeekyear((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(25);
        int int22 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime24 = dateTime17.withDayOfYear(175);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.plus(readablePeriod25);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        long long13 = interval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = interval9.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        boolean boolean25 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        boolean boolean33 = dateMidnight30.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property34 = dateMidnight30.weekyear();
        org.joda.time.DateMidnight dateMidnight36 = property34.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.monthOfYear();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.minus(readableDuration44);
        boolean boolean46 = dateMidnight38.isAfter((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean47 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        boolean boolean56 = dateMidnight53.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property57 = dateMidnight53.centuryOfEra();
        java.lang.String str58 = property57.getAsText();
        org.joda.time.DateMidnight dateMidnight59 = property57.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight59.withChronology(chronology65);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology65);
        org.joda.time.DateTime dateTime70 = dateTime40.toDateTime(chronology65);
        org.joda.time.DateTime dateTime72 = dateTime70.withMillis(1644537600779L);
        org.joda.time.DateTime dateTime74 = dateTime72.plusDays(1984);
        org.joda.time.DateTime dateTime77 = dateTime72.withDurationAdded((long) 55, 46);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "19" + "'", str58, "19");
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateMidnight dateMidnight20 = property17.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        int[] intArray26 = yearMonthDay25.getValues();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withPeriodAdded(readablePeriod27, 22);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (-1));
        long long35 = dateTimeZone31.convertUTCToLocal((long) 5);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone31.getName((long) 0, locale37);
        org.joda.time.Interval interval39 = yearMonthDay25.toInterval(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight20.toMutableDateTime(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter7.withZone(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 1969);
        org.joda.time.Chronology chronology44 = dateTimeFormatter43.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter43.withPivotYear((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.parse("55996", dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 5L + "'", long35 == 5L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean25 = interval21.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTime dateTime26 = interval21.getEnd();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        boolean boolean37 = interval29.isAfter((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.Interval interval41 = interval29.withStart((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = interval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration43 = interval21.toDuration();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration43, 24);
        org.joda.time.DateTime dateTime47 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration43, 24);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears(16);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minus((long) (-1));
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.minus(readablePeriod55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = timeOfDay54.getFieldTypes();
        org.joda.time.DateTime dateTime58 = timeOfDay54.toDateTimeToday();
        boolean boolean59 = dateTime49.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property60 = dateTime49.year();
        java.util.Locale locale61 = null;
        int int62 = property60.getMaximumShortTextLength(locale61);
        java.lang.String str63 = property60.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[year]" + "'", str63, "Property[year]");
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withPeriodAdded(readablePeriod16, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = localDate26.toInterval(dateTimeZone27);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.Period period30 = interval28.toPeriod();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weekyears();
        int int32 = period30.get(durationFieldType31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.minusYears(1970);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 57);
        org.joda.time.DateTime dateTime48 = yearMonthDay47.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis(10);
        int int51 = dateTime48.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsText((int) (short) 1, locale9);
        org.joda.time.DurationField durationField11 = dateTimeField7.getDurationField();
        java.lang.String str13 = dateTimeField7.getAsText(30000L);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate15.toDateTime(localTime16, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate15.withYearOfEra(12);
        int[] intArray21 = localDate15.getValues();
        int int22 = localDate15.getYearOfEra();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDate15, 34612781, locale24);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "24" + "'", str13, "24");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "34612781" + "'", str25, "34612781");
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = property13.setCopy(8);
        org.joda.time.DateMidnight dateMidnight18 = property13.addWrapFieldToCopy(34647002);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime22.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property25.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.dayOfWeek();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean44 = interval40.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTime dateTime45 = interval40.getEnd();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        java.util.Date date53 = dateMidnight52.toDate();
        org.joda.time.DateMidnight.Property property54 = dateMidnight52.dayOfWeek();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean56 = interval48.isAfter((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((-1L), dateTimeZone58);
        org.joda.time.Interval interval60 = interval48.withStart((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = interval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration62 = interval40.toDuration();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight33.withDurationAdded((org.joda.time.ReadableDuration) duration62, 24);
        org.joda.time.DateTime dateTime66 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration62, 24);
        long long67 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 20L + "'", long67 == 20L);
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy((long) 6);
        org.joda.time.DateMidnight dateMidnight13 = property8.addToCopy((long) 44);
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.util.Date date22 = dateMidnight21.toDate();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.dayOfWeek();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21);
        boolean boolean25 = interval17.isAfter((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((-1L), dateTimeZone27);
        org.joda.time.Interval interval29 = interval17.withStart((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) 5, chronology36);
        org.joda.time.Interval interval39 = interval17.withEnd((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Interval interval40 = interval14.gap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minus((long) (-1));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        int int45 = dateMidnight43.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        java.util.Date date49 = dateMidnight48.toDate();
        org.joda.time.YearMonthDay yearMonthDay50 = dateMidnight48.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime53 = yearMonthDay50.toDateTimeAtMidnight(dateTimeZone52);
        long long55 = dateTimeZone52.previousTransition((long) 252);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight43.withZoneRetainFields(dateTimeZone52);
        boolean boolean57 = interval40.isAfter((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight.Property property58 = dateMidnight56.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 252L + "'", long55 == 252L);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime();
        int int20 = dateTime19.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getYearOfCentury();
        boolean boolean12 = localDate7.equals((java.lang.Object) "19");
        int[] intArray13 = localDate7.getValues();
        org.joda.time.LocalDate localDate15 = localDate7.plusYears(44);
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        int int17 = property16.get();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 11]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2066 + "'", int17 == 2066);
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        int int13 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        boolean boolean22 = dateMidnight19.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property23 = dateMidnight19.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = property23.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight26 = property23.roundCeilingCopy();
        org.joda.time.Interval interval27 = dateMidnight26.toInterval();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(22, 11, 7, 7, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.DateTime dateTime40 = dateTime36.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime42 = dateTime36.minusDays((int) (byte) 10);
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = dateTime42.isEqualNow();
        org.joda.time.DateTime dateTime46 = dateTime42.withWeekOfWeekyear(11);
        boolean boolean47 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plus((-1L));
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.secondOfMinute();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = localDate55.toInterval(dateTimeZone56);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.Period period59 = interval57.toPeriod();
        org.joda.time.DateTime dateTime61 = dateTime33.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (byte) 100);
        org.joda.time.Interval interval62 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime64 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 996);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight6.plusDays(46);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks(1970);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.withYearOfEra(1968);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withYearOfEra(2000);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withCenturyOfEra(34799);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setTime((long) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = localDate14.getField(1);
        org.joda.time.LocalDate localDate18 = localDate14.withDayOfYear(2);
        org.joda.time.LocalDate localDate20 = localDate14.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        boolean boolean24 = localDate14.isSupported(durationFieldType23);
        java.lang.String str25 = localDate14.toString();
        boolean boolean26 = property6.equals((java.lang.Object) localDate14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField28 = localDate14.getField(34522);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34522");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11" + "'", str25, "2022-02-11");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears(5);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minus(readablePeriod16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = timeOfDay17.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) dateTime8, dateTimeZone19);
        long long24 = dateTimeZone2.getMillisKeepLocal(dateTimeZone19, 0L);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(dateTimeZone19);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 369, dateTimeZone19);
        java.util.TimeZone timeZone28 = dateTimeZone19.toTimeZone();
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone8.getShortName((long) 41, locale10);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(dateTimeZone8);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone8.getName(46800046L, locale14);
        int int17 = dateTimeZone8.getOffsetFromLocal((long) 2810341);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone8);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addToCopy(12);
        java.lang.String str11 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays(54);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.centuries();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.plusDays((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean40 = interval36.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval36.toPeriod(periodType41);
        int int44 = period42.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = localDate52.getField(1);
        long long56 = dateTimeField54.roundHalfCeiling((long) (byte) 10);
        long long58 = dateTimeField54.remainder((long) 'a');
        org.joda.time.DurationField durationField59 = dateTimeField54.getRangeDurationField();
        boolean boolean60 = period42.equals((java.lang.Object) durationField59);
        int int61 = period42.size();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay29.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 34522);
        org.joda.time.DateTime dateTime65 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 2022);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTimeISO();
        int int71 = dateTime70.getSecondOfMinute();
        int int72 = dateTime70.getMonthOfYear();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = dateTime70.toDateTime(chronology73);
        org.joda.time.DateTime dateTime76 = dateTime74.withYearOfEra((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean78 = dateTime74.isSupported(dateTimeFieldType77);
        java.lang.String str79 = dateTimeFieldType77.getName();
        int int80 = dateTime65.get(dateTimeFieldType77);
        org.joda.time.Chronology chronology81 = dateTime65.getChronology();
        boolean boolean82 = yearMonthDay12.equals((java.lang.Object) dateTime65);
        int int83 = dateTime65.getCenturyOfEra();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 97L + "'", long58 == 97L);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "millisOfDay" + "'", str79, "millisOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 34850528 + "'", int80 == 34850528);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 20 + "'", int83 == 20);
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.addWrapFieldToCopy(32);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusYears(34627);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusMonths(858);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.dayOfWeek();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.minusDays(1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight25.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        boolean boolean38 = yearMonthDay29.isEqual((org.joda.time.ReadablePartial) localDate37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone40.getNameKey((long) (-1));
        long long44 = dateTimeZone40.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight45 = localDate37.toDateMidnight(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = dateMidnight22.toDateTime(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) calendar0, dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 5L + "'", long44 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.withFieldAdded(durationFieldType25, 3);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay14.withFieldAdded(durationFieldType25, 53);
        org.joda.time.Interval interval30 = yearMonthDay29.toInterval();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.Interval interval49 = new org.joda.time.Interval(18746052L, 3283200000L, dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getNameKey((long) 2022);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.Interval interval53 = yearMonthDay29.toInterval(dateTimeZone46);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay29.plusDays(7200000);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.seconds();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 100, (long) 131, chronology5);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus(readablePeriod12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withYearOfCentury(10);
        boolean boolean16 = interval8.contains((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.era();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.minus((long) 16);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight13.plus((long) 23);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        int int11 = dateTimeField8.getDifference((-1028665186000L), 366L);
        long long14 = dateTimeField8.add((long) 16, 366L);
        long long17 = dateTimeField8.getDifferenceAsLong(87651714038400000L, 1644624000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField8.getType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        int int29 = localDate26.getYearOfCentury();
        boolean boolean31 = localDate26.equals((java.lang.Object) "19");
        org.joda.time.LocalDate.Property property32 = localDate26.dayOfMonth();
        org.joda.time.LocalDate.Property property33 = localDate26.year();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.centuries();
        long long45 = chronology40.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.yearOfEra();
        org.joda.time.DurationField durationField47 = chronology40.days();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateTimeField dateTimeField49 = chronology40.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minus((long) (-1));
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.minus(readablePeriod55);
        org.joda.time.TimeOfDay.Property property57 = timeOfDay56.millisOfSecond();
        int[] intArray59 = chronology40.get((org.joda.time.ReadablePartial) timeOfDay56, (-1732788000000L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = dateTimeField8.set((org.joda.time.ReadablePartial) localDate26, 34805967, intArray59, 254);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 254 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-391) + "'", int11 == (-391));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 962409600016L + "'", long14 == 962409600016L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 33330241L + "'", long17 == 33330241L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 292279042L + "'", long45 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[14, 0, 0, 0]");
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long4 = dateTimeZone1.convertLocalToUTC((long) 5, true);
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minus(292278994L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime37 = localDate19.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays((int) 'a');
        org.joda.time.DateTime dateTime41 = dateTime39.plusWeeks(49);
        boolean boolean42 = dateMidnight7.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = dateTime41.get(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 5L + "'", long4 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = localDate32.getField(1);
        org.joda.time.LocalDate localDate36 = localDate32.withDayOfYear(2);
        org.joda.time.LocalDate localDate38 = localDate32.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate51 = localDate47.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfMinute();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.LocalDate localDate61 = localDate59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate63 = localDate59.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.lang.String str66 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtCurrentTime(dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isFixed();
        org.joda.time.DateTime dateTime69 = localDate51.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate71 = localDate51.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getRangeDurationType();
        boolean boolean74 = localDate71.isSupported(durationFieldType73);
        boolean boolean75 = localDate32.isSupported(durationFieldType73);
        org.joda.time.LocalDate localDate77 = localDate32.plusMonths(6);
        int int78 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = localDate11.toDateTimeAtStartOfDay(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = localDate11.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DurationField durationField10 = property8.getDurationField();
        org.joda.time.DateMidnight dateMidnight11 = property8.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight13 = property8.addToCopy((long) 34697);
        org.joda.time.DurationField durationField14 = property8.getDurationField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        java.lang.String str13 = property12.getName();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = timeOfDay14.getValue(34771);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34771");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hourOfDay" + "'", str13, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = interval9.contains((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime23.toYearMonthDay();
        int int27 = yearMonthDay26.size();
        org.joda.time.Chronology chronology28 = yearMonthDay26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyearOfCentury();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField29.getAsText(34693, locale31);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "34693" + "'", str32, "34693");
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withWeekOfWeekyear(6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minus(readablePeriod8);
        int int10 = dateMidnight9.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withWeekOfWeekyear((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay12 = property7.addWrapFieldToCopy(40);
        java.lang.String str13 = timeOfDay12.toString();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusMinutes(34545);
        int[] intArray16 = timeOfDay12.getValues();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay12.minusSeconds(31);
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = timeOfDay18.toString("2022-02-11T09:40:04.185Z", locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:50.984" + "'", str6, "T09:40:50.984");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "50" + "'", str8, "50");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T09:40:30.984" + "'", str13, "T09:40:30.984");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[9, 40, 30, 984]");
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        java.util.Date date14 = new java.util.Date((long) '4');
        date14.setTime((long) (byte) 1);
        int int17 = date14.getYear();
        boolean boolean18 = date0.after(date14);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1971);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime.Property property34 = dateTime32.dayOfYear();
        boolean boolean35 = dateMidnight23.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean52 = interval48.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTime dateTime53 = interval48.getEnd();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        java.util.Date date61 = dateMidnight60.toDate();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.dayOfWeek();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration57, (org.joda.time.ReadableInstant) dateMidnight60);
        boolean boolean64 = interval56.isAfter((org.joda.time.ReadableInterval) interval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((-1L), dateTimeZone66);
        org.joda.time.Interval interval68 = interval56.withStart((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = interval48.overlaps((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration70 = interval48.toDuration();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight41.withDurationAdded((org.joda.time.ReadableDuration) duration70, 24);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight23.withDurationAdded((org.joda.time.ReadableDuration) duration70, 19);
        org.joda.time.DateMidnight.Property property75 = dateMidnight23.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone78);
        java.util.Date date80 = dateMidnight79.toDate();
        org.joda.time.DateMidnight.Property property81 = dateMidnight79.dayOfWeek();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableDuration76, (org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean86 = interval82.isBefore((org.joda.time.ReadableInterval) interval85);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = interval82.toPeriod(periodType87);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight23.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.LocalDate localDate91 = localDate20.withPeriodAdded((org.joda.time.ReadablePeriod) period88, 10);
        org.joda.time.LocalDate.Property property92 = localDate91.era();
        org.joda.time.LocalDate localDate93 = property92.roundHalfEvenCopy();
        java.util.Date date94 = localDate93.toDate();
        boolean boolean95 = date0.before(date94);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:40:50 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Jan 01 00:00:00 UTC 1");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay4.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        boolean boolean23 = yearMonthDay14.isEqual((org.joda.time.ReadablePartial) localDate22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        long long29 = dateTimeZone25.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight30 = localDate22.toDateMidnight(dateTimeZone25);
        long long34 = dateTimeZone25.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str36 = dateTimeZone25.getNameKey((long) 33);
        long long38 = dateTimeZone25.previousTransition((long) 32772);
        org.joda.time.DateTime dateTime39 = localDate7.toDateTimeAtCurrentTime(dateTimeZone25);
        int int40 = dateTime39.getSecondOfMinute();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32772L + "'", long38 == 32772L);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 51 + "'", int40 == 51);
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = property8.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.minus(readableDuration18);
        boolean boolean20 = dateMidnight12.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate22.toDateTime(localTime23, dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate22.withYearOfEra(12);
        int[] intArray28 = localDate22.getValues();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(22, 11, 7, 7, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime37.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime37.minusDays((int) (byte) 10);
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableDuration35, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = dateTime43.isEqualNow();
        org.joda.time.DateTime dateTime47 = dateTime43.withWeekOfWeekyear(11);
        boolean boolean48 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfMinute();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate56.toInterval(dateTimeZone57);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.Period period60 = interval58.toPeriod();
        org.joda.time.DateTime dateTime62 = dateTime34.withPeriodAdded((org.joda.time.ReadablePeriod) period60, (int) (byte) 100);
        org.joda.time.LocalDate localDate64 = localDate22.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 212);
        java.lang.String str65 = period60.toString();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight12.minus((org.joda.time.ReadablePeriod) period60);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "P1D" + "'", str65, "P1D");
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.era();
        org.joda.time.Interval interval8 = dateMidnight4.toInterval();
        org.joda.time.DateMidnight.Property property9 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight.Property property10 = dateMidnight4.dayOfWeek();
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.weekyear();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = property11.setCopy("Wednesday", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Wednesday\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        long long11 = dateTimeField6.remainder((long) (short) -1);
        int int14 = dateTimeField6.getDifference(947L, 97L);
        java.lang.String str16 = dateTimeField6.getAsShortText(1644572426146L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 999L + "'", long11 == 999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "26" + "'", str16, "26");
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withWeekyear(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withFieldAdded(durationFieldType11, 32769);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays(2000);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-1L), dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime.Property property32 = dateTime30.dayOfYear();
        boolean boolean33 = dateMidnight21.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.DateMidnight.Property property45 = dateMidnight43.dayOfWeek();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean50 = interval46.isBefore((org.joda.time.ReadableInterval) interval49);
        org.joda.time.DateTime dateTime51 = interval46.getEnd();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.dayOfWeek();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58);
        boolean boolean62 = interval54.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((-1L), dateTimeZone64);
        org.joda.time.Interval interval66 = interval54.withStart((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean67 = interval46.overlaps((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Duration duration68 = interval46.toDuration();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight39.withDurationAdded((org.joda.time.ReadableDuration) duration68, 24);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight21.withDurationAdded((org.joda.time.ReadableDuration) duration68, 19);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone78);
        java.util.Date date80 = dateMidnight79.toDate();
        org.joda.time.DateMidnight.Property property81 = dateMidnight79.dayOfWeek();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableDuration76, (org.joda.time.ReadableInstant) dateMidnight79);
        boolean boolean83 = interval75.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Duration duration84 = interval82.toDuration();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight72.withDurationAdded((org.joda.time.ReadableDuration) duration84, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration84, readableInstant87);
        org.joda.time.DateTime dateTime90 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration84, 27);
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration84);
        boolean boolean92 = dateMidnight15.isAfterNow();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 51 + "'", int31 == 51);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setTime((long) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay4.monthOfYear();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumShortTextLength(locale7);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.plusWeeks(53);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtStartOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        java.util.Date date35 = calendar34.getTime();
        boolean boolean36 = calendar34.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar34.set(29, 34727424);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1676592000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=48,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 17 00:00:00 UTC 2023");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        int int9 = dateTimeFormatter8.getDefaultYear();
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable10, (long) 47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.YearMonthDay yearMonthDay20 = dateMidnight18.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withPeriodAdded(readablePeriod21, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.withFieldAdded(durationFieldType25, 3);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay14.withFieldAdded(durationFieldType25, 53);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime31.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        boolean boolean40 = durationFieldType25.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.halfdayOfDay();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        java.lang.String str10 = property9.getAsString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969" + "'", str10, "1969");
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        java.util.Date date5 = dateMidnight4.toDate();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay6.withChronologyRetainFields(chronology12);
        org.joda.time.DurationField durationField17 = chronology12.months();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology12.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 34693, (long) 820, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMinutes((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusSeconds(6);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = localDate13.getField(1);
        org.joda.time.LocalDate localDate17 = localDate13.withDayOfYear(2);
        org.joda.time.LocalDate localDate19 = localDate13.minusWeeks((int) (byte) 1);
        org.joda.time.Interval interval20 = localDate13.toInterval();
        org.joda.time.LocalDate.Property property21 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        int int25 = localDate22.get(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = timeOfDay5.withField(dateTimeFieldType23, 1903);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = localDate28.withDayOfWeek(32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.weekOfWeekyear();
        int int12 = property11.get();
        org.joda.time.DateMidnight dateMidnight14 = property11.addWrapFieldToCopy(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = property11.setCopy(34628);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34628 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate17 = localDate13.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.LocalDate localDate23 = localDate17.withWeekyear(19);
        org.joda.time.LocalTime localTime24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime29 = localDate17.toDateTime(localTime24, dateTimeZone26);
        org.joda.time.LocalDate.Property property30 = localDate17.weekyear();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minus((long) (-1));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        boolean boolean36 = property30.equals((java.lang.Object) chronology34);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) 0, 100L, chronology34);
        org.joda.time.DurationField durationField38 = chronology34.eras();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 35);
        org.joda.time.Chronology chronology42 = chronology34.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField43 = chronology42.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(252, 131, 0, 5, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Interval interval29 = interval6.withPeriodAfterStart(readablePeriod28);
        org.joda.time.Interval interval30 = interval6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = localDate38.toInterval(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        boolean boolean42 = interval30.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean51 = interval49.isAfter(366L);
        boolean boolean52 = interval40.equals((java.lang.Object) boolean51);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone58);
        java.util.Date date60 = dateMidnight59.toDate();
        org.joda.time.DateMidnight.Property property61 = dateMidnight59.dayOfWeek();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableDuration56, (org.joda.time.ReadableInstant) dateMidnight59);
        boolean boolean63 = interval55.isAfter((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((-1L), dateTimeZone65);
        org.joda.time.Interval interval67 = interval55.withStart((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = interval55.isAfter((long) 23);
        long long70 = interval55.getStartMillis();
        boolean boolean71 = interval55.isAfterNow();
        org.joda.time.DateTime dateTime72 = interval55.getStart();
        boolean boolean73 = interval40.contains((org.joda.time.ReadableInterval) interval55);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.halfdayOfDay();
        int int9 = dateTimeField7.get(1670750124773L);
        long long11 = dateTimeField7.roundHalfFloor(1644572255659L);
        int int13 = dateTimeField7.getLeapAmount((long) 34714550);
        long long15 = dateTimeField7.roundHalfFloor((long) 34722164);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644580800000L + "'", long11 == 1644580800000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 43200000L + "'", long15 == 43200000L);
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        calendar0.set(55, 0, 0, (int) (short) 10, 50, 33330867);
        calendar0.setFirstDayOfWeek(70);
        java.lang.String str25 = calendar0.getCalendarType();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter30.withOffsetParsed();
        java.util.Locale locale32 = dateTimeFormatter31.getLocale();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.YearMonthDay yearMonthDay37 = dateMidnight35.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime40 = yearMonthDay37.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.LocalDate localDate50 = localDate48.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate48.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtCurrentTime(dateTimeZone54);
        boolean boolean57 = dateTimeZone54.isFixed();
        org.joda.time.DateTime dateTime58 = yearMonthDay37.toDateTimeAtMidnight(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter31.withZone(dateTimeZone54);
        boolean boolean60 = calendar0.before((java.lang.Object) dateTimeFormatter31);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone66);
        java.util.Date date68 = dateMidnight67.toDate();
        org.joda.time.DateMidnight.Property property69 = dateMidnight67.dayOfWeek();
        org.joda.time.Interval interval70 = new org.joda.time.Interval(readableDuration64, (org.joda.time.ReadableInstant) dateMidnight67);
        boolean boolean71 = interval63.isAfter((org.joda.time.ReadableInterval) interval70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone73);
        java.util.Date date75 = dateMidnight74.toDate();
        org.joda.time.YearMonthDay yearMonthDay76 = dateMidnight74.toYearMonthDay();
        int[] intArray77 = yearMonthDay76.getValues();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay76.withPeriodAdded(readablePeriod78, 22);
        java.lang.String str81 = yearMonthDay76.toString();
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay76.minusDays(33);
        org.joda.time.Interval interval84 = yearMonthDay83.toInterval();
        boolean boolean86 = interval84.isAfter(1644572146319L);
        boolean boolean88 = interval84.contains((long) (short) 100);
        boolean boolean89 = interval84.isBeforeNow();
        org.joda.time.Duration duration90 = interval84.toDuration();
        org.joda.time.Interval interval91 = interval70.gap((org.joda.time.ReadableInterval) interval84);
        java.lang.String str92 = interval91.toString();
        boolean boolean93 = calendar0.after((java.lang.Object) interval91);
        org.joda.time.YearMonthDay yearMonthDay94 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.DurationFieldType durationFieldType95 = org.joda.time.DurationFieldType.millis();
        java.lang.String str96 = durationFieldType95.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay98 = yearMonthDay94.withFieldAdded(durationFieldType95, 34713);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60398418933000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=70,minimalDaysInFirstWeek=16,ERA=1,YEAR=56,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=24,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-01-01" + "'", str81, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1969-11-30T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str92, "1969-11-30T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertNotNull(durationFieldType95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "millis" + "'", str96, "millis");
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval6.toPeriod(periodType11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) (-1));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.minus(readablePeriod27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = timeOfDay28.toDateTimeToday(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(dateTimeZone30);
        int int35 = dateTimeZone30.getStandardOffset((long) 10);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) 23, 45L, dateTimeZone30);
        boolean boolean38 = period12.equals((java.lang.Object) dateTimeZone30);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfCentury();
        java.lang.String str7 = property6.getName();
        boolean boolean8 = property6.isLeap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfCentury" + "'", str7, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        java.util.Date date3 = new java.util.Date((-1), 8, 0);
        long long4 = date3.getTime();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date3);
        int int6 = date3.getYear();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 31 00:00:00 UTC 1899");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2219616000000L) + "'", long4 == (-2219616000000L));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Interval interval5 = yearMonthDay1.toInterval();
        org.joda.time.LocalDate localDate6 = yearMonthDay1.toLocalDate();
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime37 = localDate19.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate39 = localDate19.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.property(dateTimeFieldType43);
        org.joda.time.LocalDate.Property property45 = localDate39.property(dateTimeFieldType43);
        int int46 = localDate6.get(dateTimeFieldType43);
        org.joda.time.LocalDate.Property property47 = localDate6.centuryOfEra();
        org.joda.time.LocalDate.Property property48 = localDate6.dayOfMonth();
        java.lang.String str49 = property48.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.withPeriodAdded(readablePeriod19, 22);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfWeek();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean34 = interval30.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval30.toPeriod(periodType35);
        int int38 = period36.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period36);
        int int41 = period36.size();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.YearMonthDay yearMonthDay40 = dateMidnight38.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.days();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay40.withChronologyRetainFields(chronology46);
        org.joda.time.Chronology chronology51 = yearMonthDay50.getChronology();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight52.getZone();
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay50.toDateMidnight(dateTimeZone55);
        java.util.Set<java.lang.String> strSet57 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean58 = dateTimeZone55.equals((java.lang.Object) strSet57);
        org.joda.time.DateTime dateTime59 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone55);
        boolean boolean61 = dateTimeZone55.isStandardOffset((long) (-1974));
        boolean boolean63 = dateTimeZone55.isStandardOffset(1644572195872L);
        long long66 = dateTimeZone55.convertLocalToUTC((long) 33330872, true);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 33330872L + "'", long66 == 33330872L);
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        java.lang.String str8 = localDate7.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localDate7.toString("T09:40:44.808");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31" + "'", str8, "1969-12-31");
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withYear(11);
        boolean boolean12 = dateMidnight2.isBefore((long) 28);
        org.joda.time.Interval interval13 = dateMidnight2.toInterval();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withCenturyOfEra(13);
        org.joda.time.Chronology chronology16 = dateMidnight2.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight2.minusYears(1904);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property29 = localDate28.weekyear();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        long long31 = property29.remainder();
        org.joda.time.LocalDate localDate32 = property29.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(0);
        boolean boolean35 = dateMidnight2.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3283200000L + "'", long31 == 3283200000L);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight7 = property5.setCopy("T09:39:41.922");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:39:41.922\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, (int) (short) 0);
        org.joda.time.Interval interval8 = yearMonthDay7.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval10 = interval8.withEndMillis((long) (-19034));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) -1, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate14 = localDate10.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = localDate22.getField(1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight27.toYearMonthDay();
        int[] intArray30 = yearMonthDay29.getValues();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.withPeriodAdded(readablePeriod31, 22);
        java.lang.String str34 = yearMonthDay29.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate46 = localDate42.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.LocalDate localDate56 = localDate54.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate58 = localDate54.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str61 = dateTimeZone60.toString();
        org.joda.time.DateTime dateTime62 = localDate58.toDateTimeAtCurrentTime(dateTimeZone60);
        boolean boolean63 = dateTimeZone60.isFixed();
        org.joda.time.DateTime dateTime64 = localDate46.toDateTimeAtCurrentTime(dateTimeZone60);
        java.lang.String str65 = dateTimeZone60.toString();
        org.joda.time.Interval interval66 = yearMonthDay29.toInterval(dateTimeZone60);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.LocalDate localDate68 = localDate22.withFields((org.joda.time.ReadablePartial) localDate67);
        boolean boolean69 = localDate10.isAfter((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.DateTime dateTime70 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime70.withTime(579, 34665286, 6, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Etc/UTC" + "'", str65, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) 617);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.centuries();
        long long18 = chronology13.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField20 = chronology13.days();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateTimeField dateTimeField22 = chronology13.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight7.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology13.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(34815702, 34612781, (-51), (int) (short) 100, 39, (-51), chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 292279042L + "'", long18 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        long long5 = dateTimeZone1.nextTransition((long) 70);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone1);
        int int7 = dateMidnight6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay12.withPeriodAdded(readablePeriod13, 11);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay17 = property16.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusMonths(2022);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusWeeks(27);
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight20.toYearMonthDay();
        org.joda.time.DateMidnight.Property property24 = dateMidnight20.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight26 = property24.setCopy("11 Feb 2022 09:40:05 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11 Feb 2022 09:40:05 GMT\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 70L + "'", long5 == 70L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        boolean boolean9 = dateMidnight6.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property10 = dateMidnight6.centuryOfEra();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateMidnight dateMidnight12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight12.withChronology(chronology18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.halfdayOfDay();
        org.joda.time.Chronology chronology24 = chronology18.withUTC();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) 575, chronology24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        long long12 = chronology8.add(14400001L, (long) 20, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10022, 809, 1903, 15, 34762, (-626), chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34762 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 14402001L + "'", long12 == 14402001L);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withYear(11);
        boolean boolean12 = dateMidnight2.isBefore((long) 28);
        org.joda.time.Interval interval13 = dateMidnight2.toInterval();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withCenturyOfEra(13);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusYears(23);
        int int18 = dateMidnight17.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate7.minusDays(24);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minus((long) (-1));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime20.withChronology(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.DateTime dateTime36 = dateTime31.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Interval interval37 = localDate7.toInterval(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = localDate49.withWeekyear(19);
        org.joda.time.LocalTime localTime56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime61 = localDate49.toDateTime(localTime56, dateTimeZone58);
        org.joda.time.LocalDate.Property property62 = localDate49.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology66);
        boolean boolean68 = property62.equals((java.lang.Object) chronology66);
        org.joda.time.LocalDate localDate70 = property62.setCopy(17);
        int int71 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfYear(34);
        org.joda.time.LocalDate localDate75 = localDate73.withWeekyear(32769);
        int int76 = localDate75.getCenturyOfEra();
        org.joda.time.LocalDate localDate78 = localDate75.plusWeeks(12);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 327 + "'", int76 == 327);
        org.junit.Assert.assertNotNull(localDate78);
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addToCopy(12);
        java.lang.String str11 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusDays(18);
        org.joda.time.Interval interval15 = yearMonthDay14.toInterval();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay14.dayOfMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 34555);
        int int2 = dateTime1.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 555 + "'", int2 == 555);
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.lang.String str9 = property8.toString();
        org.joda.time.DurationField durationField10 = property8.getDurationField();
        java.util.Locale locale11 = null;
        int int12 = property8.getMaximumTextLength(locale11);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate31.property(dateTimeFieldType35);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.Interval interval41 = localDate31.toInterval(dateTimeZone39);
        org.joda.time.LocalDate.Property property42 = localDate31.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = property42.setCopy("T09:39:32.284");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:39:32.284\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate(59, 69, 8);
        java.util.Calendar.Builder builder16 = builder8.setWeekDate(29, 32, 29);
        java.util.Calendar.Builder builder20 = builder16.setDate((-378559), 33330867, 37);
        java.util.Calendar calendar21 = builder20.build();
        java.util.Calendar.Builder builder25 = builder20.setWeekDate((-391), 51, 14);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder30 = builder25.set(719528, 1999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=75644936568178999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2399062,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=2,SECOND=58,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime2.minusDays(11);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int14 = dateTime11.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 34545, (-292275054));
        org.joda.time.DateTime dateTime20 = dateTime11.withDurationAdded(5L, 28);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.plus(readableDuration26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readableDuration30);
        int int32 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime25.minusDays(11);
        org.joda.time.DateTime.Property property35 = dateTime34.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int37 = dateTime34.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 34545, (-292275054));
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight47, readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight47.withPeriodAdded(readablePeriod50, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight57 = dateTime56.toDateMidnight();
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.centuryOfEra();
        int int59 = dateMidnight47.compareTo((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        int int62 = dateMidnight47.get(dateTimeFieldType60);
        org.joda.time.DateTime.Property property63 = dateTime41.property(dateTimeFieldType60);
        java.lang.String str64 = dateTimeFieldType60.toString();
        int int65 = dateTime20.get(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType60.getDurationType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "dayOfMonth" + "'", str64, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        org.junit.Assert.assertNotNull(durationFieldType66);
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay4.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(5);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        org.joda.time.DateTime dateTime56 = dateTime40.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.LocalDate localDate58 = localDate36.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.PeriodType periodType59 = period55.getPeriodType();
        org.joda.time.DateTime dateTime61 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period55, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        java.util.Date date67 = dateMidnight66.toDate();
        org.joda.time.YearMonthDay yearMonthDay68 = dateMidnight66.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property73 = dateTime70.monthOfYear();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime70.minus(readableDuration74);
        org.joda.time.DateMidnight dateMidnight76 = dateTime75.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.plus((-1L));
        org.joda.time.Chronology chronology82 = dateMidnight81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.secondOfMinute();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(chronology82);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.Interval interval86 = localDate84.toInterval(dateTimeZone85);
        org.joda.time.Chronology chronology87 = interval86.getChronology();
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((java.lang.Object) dateTime75, chronology87);
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay68.withChronologyRetainFields(chronology87);
        org.joda.time.DurationField durationField90 = durationFieldType63.getField(chronology87);
        org.joda.time.YearMonthDay yearMonthDay92 = yearMonthDay4.withFieldAdded(durationFieldType63, 13);
        org.joda.time.YearMonthDay yearMonthDay94 = yearMonthDay92.plusDays(254);
        org.joda.time.YearMonthDay.Property property95 = yearMonthDay94.dayOfMonth();
        org.joda.time.DateTime dateTime96 = yearMonthDay94.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(yearMonthDay92);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate50 = localDate44.withDayOfYear((int) '4');
        org.joda.time.LocalDate.Property property51 = localDate44.centuryOfEra();
        org.joda.time.LocalDate localDate52 = property51.roundCeilingCopy();
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime34.toMutableDateTime(chronology53);
        boolean boolean56 = dateTime34.isEqualNow();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.minus(readableDuration15);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((-1L));
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfMinute();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate25.toInterval(dateTimeZone26);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime16, chronology28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay9.withChronologyRetainFields(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology28.seconds();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.era();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight2.toMutableDateTime(chronology28);
        org.joda.time.LocalDate localDate36 = dateMidnight2.toLocalDate();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.LocalDate localDate40 = localDate36.withEra(0);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        java.time.Instant instant13 = date8.toInstant();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromDateFields(date8);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:40:52 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property13 = dateTime10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        int int17 = dateTime16.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2021 + "'", int17 == 2021);
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minus((long) (-1));
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        boolean boolean30 = property24.equals((java.lang.Object) chronology28);
        org.joda.time.LocalDate localDate32 = property24.setCopy(17);
        org.joda.time.LocalDate localDate33 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1L), dateTimeZone35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime39 = dateTime36.withFieldAdded(durationFieldType37, 16);
        boolean boolean40 = localDate33.isSupported(durationFieldType37);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        java.util.Date date44 = dateMidnight43.toDate();
        org.joda.time.YearMonthDay yearMonthDay45 = dateMidnight43.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay45.withPeriodAdded(readablePeriod46, 11);
        org.joda.time.LocalDate localDate49 = localDate33.withFields((org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.Interval interval50 = localDate49.toInterval();
        boolean boolean51 = interval50.isBeforeNow();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusMonths(33);
        int[] intArray19 = yearMonthDay16.getValues();
        int int20 = yearMonthDay16.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        int int14 = property12.getMaximumValueOverall();
        java.util.Locale locale15 = null;
        int int16 = property12.getMaximumTextLength(locale15);
        java.lang.String str17 = property12.getAsShortText();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = property12.setCopy("T09:39:43.381", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:39:43.381\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 49, 52, 556]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "49" + "'", str17, "49");
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay4.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(5);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        org.joda.time.DateTime dateTime56 = dateTime40.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.LocalDate localDate58 = localDate36.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.PeriodType periodType59 = period55.getPeriodType();
        org.joda.time.DateTime dateTime61 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period55, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutablePeriod mutablePeriod63 = period55.toMutablePeriod();
        org.joda.time.PeriodType periodType64 = period55.getPeriodType();
        org.joda.time.Period period65 = period55.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) period65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        boolean boolean8 = dateMidnight6.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.minus(readableDuration9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight6.minusWeeks((int) '4');
        java.util.GregorianCalendar gregorianCalendar13 = dateMidnight12.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate31.minusYears((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = localDate31.getValue(34616473);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34616473");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight4.withDayOfYear(33);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        boolean boolean21 = dateMidnight18.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property22 = dateMidnight18.centuryOfEra();
        java.lang.String str23 = property22.getAsShortText();
        org.joda.time.DateMidnight dateMidnight25 = property22.addToCopy((long) 6);
        org.joda.time.DateMidnight dateMidnight27 = property22.addToCopy((long) 44);
        org.joda.time.Interval interval28 = dateMidnight27.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears(5);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.dayOfWeek();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean56 = interval52.isBefore((org.joda.time.ReadableInterval) interval55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval52.toPeriod(periodType57);
        org.joda.time.DateTime dateTime59 = dateTime43.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.LocalDate localDate61 = localDate39.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 6);
        org.joda.time.PeriodType periodType62 = period58.getPeriodType();
        org.joda.time.Period period63 = mutableInterval29.toPeriod(periodType62);
        org.joda.time.Period period64 = period63.toPeriod();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight4.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 786);
        org.joda.time.DateMidnight.Property property67 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight4.withWeekOfWeekyear(14);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight4.withWeekyear(1200000);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "19" + "'", str23, "19");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withChronologyRetainFields(chronology26);
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = yearMonthDay28.toInterval(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        java.util.Calendar.Builder builder77 = builder12.setTimeZone(timeZone76);
        java.util.Calendar.Builder builder81 = builder77.setDate(779, 32769, 33435);
        java.util.Calendar.Builder builder86 = builder81.setTimeOfDay(34722164, 34713, 21, 70);
        java.util.Calendar.Builder builder90 = builder86.setWeekDate(32770, 34790, 12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder93 = builder86.setWeekDefinition(366, (-30801));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Etc/UTC" + "'", str68, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(32, 28, 122, 1999, 1200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((-1L), dateTimeZone12);
        org.joda.time.Interval interval14 = interval2.withStart((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Interval interval16 = interval2.withPeriodBeforeEnd(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = property21.roundHalfCeilingCopy();
        org.joda.time.Interval interval23 = interval2.withEnd((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        int int30 = dateTime29.getSecondOfMinute();
        org.joda.time.DateTime.Property property31 = dateTime29.dayOfYear();
        java.util.Locale locale32 = null;
        int int33 = property31.getMaximumTextLength(locale32);
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        int int40 = dateTime37.getWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime37.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded((long) 34, 33330867);
        long long46 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean47 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean49 = dateTime42.isBefore(1644572304341L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-719528L) + "'", long46 == (-719528L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy((long) 6);
        org.joda.time.DateMidnight dateMidnight13 = property8.addToCopy((long) 44);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusYears(26);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusWeeks(22);
        int int22 = dateMidnight18.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime(dateTimeZone29);
        org.joda.time.DateTime.Property property31 = dateTime27.millisOfDay();
        org.joda.time.DateTime.Property property32 = dateTime27.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears(5);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minus((long) (-1));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.minus(readablePeriod44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime49 = timeOfDay45.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime36, dateTimeZone47);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        org.joda.time.DateMidnight.Property property59 = dateMidnight57.dayOfWeek();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableDuration54, (org.joda.time.ReadableInstant) dateMidnight57);
        boolean boolean61 = interval53.isAfter((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration62 = interval60.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration62, 20);
        org.joda.time.DateTime dateTime65 = dateTime27.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight18.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight15.minus((org.joda.time.ReadableDuration) duration62);
        java.lang.String str68 = dateMidnight67.toString();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight67.minusMonths(5);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "19" + "'", str9, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "6343-12-31T00:00:00.000Z" + "'", str68, "6343-12-31T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight70);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1, 34674, 17, 1, 47, 0, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34674 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.YearMonthDay yearMonthDay14 = dateMidnight12.toYearMonthDay();
        int[] intArray15 = yearMonthDay14.getValues();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.withPeriodAdded(readablePeriod16, 22);
        java.lang.String str19 = yearMonthDay14.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.toString();
        org.joda.time.Interval interval51 = yearMonthDay14.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate53 = localDate7.withFields((org.joda.time.ReadablePartial) localDate52);
        java.util.Date date54 = localDate53.toDate();
        org.joda.time.LocalDate.Property property55 = localDate53.yearOfEra();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumShortTextLength(locale56);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        int int6 = property4.getMinimumValue();
        java.lang.String str7 = property4.toString();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight9 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday" + "'", str5, "Thursday");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfWeek]" + "'", str7, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate12 = localDate9.plusWeeks(36);
        org.joda.time.Interval interval13 = localDate9.toInterval();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.plusWeeks((int) ' ');
        boolean boolean22 = dateMidnight20.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.minus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        int int44 = localDate39.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property45 = localDate39.yearOfEra();
        long long47 = chronology30.set((org.joda.time.ReadablePartial) localDate39, (long) 29);
        boolean boolean48 = dateMidnight20.equals((java.lang.Object) 29);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight20.withMillis(100L);
        int int51 = dateMidnight50.getDayOfWeek();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.Interval interval53 = interval13.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.hourOfDay();
        java.util.Locale locale56 = null;
        int int57 = dateTimeField55.getMaximumShortTextLength(locale56);
        long long60 = dateTimeField55.getDifferenceAsLong((-481350400189000L), 1644572345715L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1644537600029L + "'", long47 == 1644537600029L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-134165270L) + "'", long60 == (-134165270L));
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.Chronology chronology11 = timeOfDay8.getChronology();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay26.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay8.minus((org.joda.time.ReadablePeriod) period39);
        java.lang.String str42 = period39.toString();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        boolean boolean44 = period39.isSupported(durationFieldType43);
        org.joda.time.PeriodType periodType45 = period39.getPeriodType();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime4.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime11 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfYear();
        boolean boolean27 = dateMidnight15.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property28 = dateTime24.era();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        boolean boolean39 = interval31.isAfter((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration40 = interval38.toDuration();
        org.joda.time.DateTime dateTime42 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration40, 52);
        org.joda.time.DateTime dateTime44 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration40, 6);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears(5);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minus((long) (-1));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.minus(readablePeriod60);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str64 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime65 = timeOfDay61.toDateTimeToday(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) dateTime52, dateTimeZone63);
        long long68 = dateTimeZone46.getMillisKeepLocal(dateTimeZone63, 0L);
        org.joda.time.DateTime dateTime69 = dateTime11.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime71 = dateTime69.minusSeconds(0);
        org.joda.time.DateTime dateTime73 = dateTime71.plusMinutes(40);
        int int74 = dateTime73.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Etc/UTC" + "'", str64, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 34 + "'", int74 == 34);
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDate11.getFields();
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfYear();
        org.joda.time.LocalDate localDate15 = property14.roundHalfEvenCopy();
        int int16 = property14.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 366 + "'", int16 == 366);
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        gregorianCalendar8.setMinimalDaysInFirstWeek((int) 'a');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(14, 64, (int) (short) 100, 0, 34697823, 578, 34831);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34697823 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        date0.setYear((int) 'a');
        java.util.Date date20 = new java.util.Date((int) (byte) 100, 32769, 1970, 34, 52);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        boolean boolean29 = date24.before(date28);
        int int30 = date24.getDay();
        int int31 = date24.getHours();
        date24.setSeconds((int) '4');
        java.lang.String str34 = date24.toLocaleString();
        int int35 = date24.getYear();
        boolean boolean36 = date20.before(date24);
        boolean boolean37 = date0.after(date24);
        int int38 = date24.getSeconds();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date24);
        java.util.Date date41 = new java.util.Date((long) '4');
        date41.setHours(70);
        boolean boolean44 = date24.before(date41);
        java.time.Instant instant45 = date24.toInstant();
        int int46 = date24.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 11 09:40:53 UTC 1997");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Feb 22 10:52:00 UTC 4736");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Jan 1, 1970 12:00:52 AM" + "'", str34, "Jan 1, 1970 12:00:52 AM");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Jan 03 22:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long8 = dateTimeField6.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField9 = dateTimeField6.getLeapDurationField();
        long long12 = dateTimeField6.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        int int23 = localDate20.getYearOfCentury();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime54 = localDate36.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = localDate20.toDateTime(localTime24, dateTimeZone50);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate57.toDateTime(localTime58, dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate57.withYearOfEra(12);
        int[] intArray63 = localDate57.getValues();
        int int64 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate20, intArray63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getRangeDurationType();
        org.joda.time.LocalDate localDate68 = localDate20.withFieldAdded(durationFieldType66, 32772);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDate localDate70 = localDate20.plus(readablePeriod69);
        org.joda.time.LocalDate.Property property71 = localDate70.era();
        int int72 = property71.getLeapAmount();
        org.joda.time.LocalDate localDate74 = property71.addWrapFieldToCopy(21);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1000L + "'", long8 == 1000L);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10035L + "'", long12 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDate74);
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 575);
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withLocale(locale16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((java.lang.Object) locale16);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        java.util.Date date3 = new java.util.Date(69, 21, 0);
        java.lang.String str4 = date3.toLocaleString();
        int int5 = date3.getTimezoneOffset();
        long long6 = date3.getTime();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str9 = dateTimeFieldType8.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = yearMonthDay7.get(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Wed Sep 30 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Sep 30, 1970 12:00:00 AM" + "'", str4, "Sep 30, 1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 23500800000L + "'", long6 == 23500800000L);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfHour" + "'", str9, "minuteOfHour");
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField10 = chronology6.minutes();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((-1L), chronology6);
        org.joda.time.DurationField durationField13 = chronology6.hours();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((java.lang.Object) chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        java.util.Date date3 = new java.util.Date((-1), 8, 0);
        date3.setMinutes(0);
        int int6 = date3.getYear();
        java.lang.String str7 = date3.toGMTString();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 31 00:00:00 UTC 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "31 Aug 1899 00:00:00 GMT" + "'", str7, "31 Aug 1899 00:00:00 GMT");
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((-1L));
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(70L, chronology9);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology9);
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(chronology13);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(87651714038400000L, chronology13);
        int int16 = timeOfDay15.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate27 = localDate11.withCenturyOfEra(12);
        int int28 = localDate11.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.property(dateTimeFieldType54);
        org.joda.time.DateMidnight dateMidnight56 = property55.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight57 = property55.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight59 = property55.addWrapFieldToCopy(28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateMidnight59.toString("Feb 11, 2022 9:38:02 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withSecondOfMinute(31);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusSeconds(1439);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withMillisOfSecond(3);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay11.withSecondOfMinute(42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = timeOfDay17.toString("T09:39:04.567");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        boolean boolean9 = property8.isLeap();
        org.joda.time.DateMidnight dateMidnight11 = property8.setCopy(2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withYearOfEra(1);
        int int14 = dateMidnight11.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight11.withDurationAdded(18731052L, 34628);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfMinute();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate22 = localDate18.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate22.era();
        int int24 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        int int25 = dateTimeField10.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1644572146480L);
        org.joda.time.LocalTime localTime28 = timeOfDay27.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay27.minusMinutes(54);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay30.minusHours(34732484);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withHourOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        long long47 = dateTimeField44.getDifferenceAsLong((long) 4, 0L);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        int int49 = calendar48.getFirstDayOfWeek();
        int int50 = calendar48.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        java.util.Date date58 = dateMidnight57.toDate();
        boolean boolean59 = date54.before(date58);
        int int60 = date54.getMonth();
        calendar48.setTime(date54);
        calendar48.setMinimalDaysInFirstWeek(16);
        org.joda.time.TimeOfDay timeOfDay64 = org.joda.time.TimeOfDay.fromCalendarFields(calendar48);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.withSecondOfMinute(3);
        int int67 = timeOfDay64.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minus((long) (-1));
        org.joda.time.Chronology chronology71 = dateMidnight70.getChronology();
        org.joda.time.TimeOfDay timeOfDay72 = new org.joda.time.TimeOfDay(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay72.minus(readablePeriod73);
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay74.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay76.minusMinutes(1970);
        int[] intArray79 = timeOfDay78.getValues();
        int int80 = dateTimeField44.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay64, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay36, 36000000, intArray79, 34654870);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=16,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 49, 53, 416]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 59 + "'", int80 == 59);
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        java.util.Date date3 = new java.util.Date(11, 9, 1);
        int int4 = date3.getYear();
        int int5 = date3.getMinutes();
        org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 01 00:00:00 UTC 1911");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        java.lang.String str11 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addNoWrapToCopy(3);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:53.460" + "'", str6, "T09:40:53.460");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "53" + "'", str8, "53");
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53" + "'", str11, "53");
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 16);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(22);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis(14400001L);
        org.joda.time.DateTime dateTime11 = dateTime5.withCenturyOfEra(34702);
        org.joda.time.DateTime.Property property12 = dateTime5.minuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.halfdayOfDay();
        org.joda.time.Chronology chronology23 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        int int26 = dateTimeField24.getMaximumValue(1644572430708L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, readablePeriod6);
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        long long9 = interval7.getEndMillis();
        org.joda.time.DateTime dateTime10 = interval7.getEnd();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime14.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property17.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean36 = interval32.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval32.getEnd();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        java.util.Date date45 = dateMidnight44.toDate();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.dayOfWeek();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44);
        boolean boolean48 = interval40.isAfter((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((-1L), dateTimeZone50);
        org.joda.time.Interval interval52 = interval40.withStart((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = interval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration54 = interval32.toDuration();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight25.withDurationAdded((org.joda.time.ReadableDuration) duration54, 24);
        org.joda.time.DateTime dateTime58 = dateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration54, 24);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(16);
        boolean boolean61 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property62 = dateTime10.dayOfWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-13305600000L) + "'", long9 == (-13305600000L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("T09:39:31.395");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T09:39:31.395\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTime(chronology7);
        int int9 = dateTime1.getYear();
        org.joda.time.DateTime dateTime11 = dateTime1.plusMonths(34647002);
        org.joda.time.DateTime dateTime13 = dateTime1.minus((long) 2922789);
        int int14 = dateTime1.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.months();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTime.Property property29 = dateTime27.dayOfYear();
        boolean boolean30 = dateMidnight18.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury(8);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        java.util.Date date38 = dateMidnight37.toDate();
        org.joda.time.YearMonthDay yearMonthDay39 = dateMidnight37.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime44 = dateTime42.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.Chronology chronology50 = dateMidnight49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfMinute();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears(5);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        java.util.Date date65 = dateMidnight64.toDate();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.dayOfWeek();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean71 = interval67.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = interval67.toPeriod(periodType72);
        org.joda.time.DateTime dateTime74 = dateTime58.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDate localDate76 = localDate54.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 6);
        org.joda.time.PeriodType periodType77 = period73.getPeriodType();
        org.joda.time.DateTime dateTime79 = dateTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period73, (int) '#');
        org.joda.time.DateTime dateTime81 = dateTime34.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 35);
        java.lang.String str82 = period73.toString();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((-1L), dateTimeZone84);
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime88 = dateTime85.withFieldAdded(durationFieldType86, 16);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period73, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutablePeriod mutablePeriod90 = period73.toMutablePeriod();
        long long93 = chronology10.add((org.joda.time.ReadablePeriod) period73, 1644572184690L, 212);
        org.joda.time.Period period94 = period73.toPeriod();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT0S" + "'", str82, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(mutablePeriod90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1644572184690L + "'", long93 == 1644572184690L);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.yearOfEra();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField9.getAsShortText(3283200000L, locale11);
        java.lang.String str14 = dateTimeField9.getAsShortText((long) 34555);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Interval interval5 = yearMonthDay1.toInterval();
        org.joda.time.LocalDate localDate6 = yearMonthDay1.toLocalDate();
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone33);
        boolean boolean36 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime37 = localDate19.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate39 = localDate19.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.property(dateTimeFieldType43);
        org.joda.time.LocalDate.Property property45 = localDate39.property(dateTimeFieldType43);
        int int46 = localDate6.get(dateTimeFieldType43);
        org.joda.time.LocalDate.Property property47 = localDate6.centuryOfEra();
        org.joda.time.LocalDate.Property property48 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate49 = property48.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate51 = property48.addWrapFieldToCopy(33435);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Etc/UTC" + "'", str34, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (-1));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType8.getField(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime7.withChronology(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval(1670750151900L, 1644572120548L, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(34846405, 34833);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 34833");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus(readablePeriod3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(19);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfYear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((-1L));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfMinute();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate44 = localDate40.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate50 = localDate44.withWeekyear(19);
        org.joda.time.LocalTime localTime51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime56 = localDate44.toDateTime(localTime51, dateTimeZone53);
        java.lang.String str58 = dateTimeZone53.getName(1000L);
        org.joda.time.DateTime dateTime59 = yearMonthDay32.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.Interval interval60 = localDate27.toInterval(dateTimeZone53);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight7.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.weekOfWeekyear();
        org.joda.time.DurationField durationField64 = chronology61.years();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.millisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate46 = localDate26.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        boolean boolean49 = localDate46.isSupported(durationFieldType48);
        boolean boolean50 = localDate7.isSupported(durationFieldType48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        int[] intArray56 = yearMonthDay55.getValues();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay55.withPeriodAdded(readablePeriod57, 22);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.Chronology chronology69 = dateMidnight68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.secondOfMinute();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DateTimeField dateTimeField73 = localDate71.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = dateTimeField73.getType();
        java.lang.String str75 = dateTimeFieldType74.toString();
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay63.property(dateTimeFieldType74);
        boolean boolean77 = localDate7.equals((java.lang.Object) property76);
        org.joda.time.LocalDate.Property property78 = localDate7.dayOfMonth();
        java.lang.String str79 = property78.getAsText();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "monthOfYear" + "'", str75, "monthOfYear");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "11" + "'", str79, "11");
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.lang.String str16 = yearMonthDay6.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.plusDays((int) (byte) 10);
        org.joda.time.Interval interval19 = yearMonthDay6.toInterval();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay6.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay22 = property20.setCopy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31" + "'", str16, "1969-12-31");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withChronology(chronology12);
        boolean boolean17 = dateTimeFormatter6.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter6.withPivotYear(40);
        java.lang.Appendable appendable20 = null;
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(appendable20, readablePartial21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 11, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.year();
        org.joda.time.DateTime dateTime30 = dateTime15.toDateTime(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = chronology24.getDateTimeMillis(292278993, 34825, 34745483, (-626));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -626 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime11.withMinuteOfHour(8);
        boolean boolean17 = dateMidnight4.equals((java.lang.Object) 8);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight4.minus((-60522647075197L));
        org.joda.time.Interval interval20 = dateMidnight4.toInterval();
        boolean boolean22 = interval20.isBefore((long) 513);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.Chronology chronology11 = timeOfDay8.getChronology();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.dayOfWeek();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean37 = interval33.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval33.toPeriod(periodType38);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay26.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.PeriodType periodType41 = period39.getPeriodType();
        int[] intArray44 = chronology11.get((org.joda.time.ReadablePeriod) period39, (long) (-1), (long) 24);
        org.joda.time.DateTimeField dateTimeField45 = chronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = chronology11.secondOfMinute();
        java.util.Locale locale47 = null;
        int int48 = dateTimeField46.getMaximumTextLength(locale47);
        long long51 = dateTimeField46.addWrapField(1644572235227L, 34627);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644572242227L + "'", long51 == 1644572242227L);
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = localDate4.toString("T09:35:21.683", locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        org.joda.time.YearMonthDay yearMonthDay11 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay13 = property8.addWrapFieldToCopy(33435);
        java.util.Locale locale14 = null;
        int int15 = property8.getMaximumShortTextLength(locale14);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        java.util.Locale locale9 = null;
        int int10 = property8.getMaximumShortTextLength(locale9);
        org.joda.time.DateMidnight dateMidnight11 = property8.roundFloorCopy();
        java.lang.String str12 = property8.getName();
        java.lang.String str13 = property8.getAsString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "31" + "'", str13, "31");
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(0);
        int int7 = dateTime6.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1L), dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTime.Property property25 = dateTime23.dayOfYear();
        boolean boolean26 = dateMidnight14.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        java.util.Date date30 = dateMidnight29.toDate();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean43 = interval39.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTime dateTime44 = interval39.getEnd();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.dayOfWeek();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51);
        boolean boolean55 = interval47.isAfter((org.joda.time.ReadableInterval) interval54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((-1L), dateTimeZone57);
        org.joda.time.Interval interval59 = interval47.withStart((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = interval39.overlaps((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Duration duration61 = interval39.toDuration();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight32.withDurationAdded((org.joda.time.ReadableDuration) duration61, 24);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight14.withDurationAdded((org.joda.time.ReadableDuration) duration61, 19);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        java.util.Date date73 = dateMidnight72.toDate();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.dayOfWeek();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72);
        boolean boolean76 = interval68.isAfter((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Duration duration77 = interval75.toDuration();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight65.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration77, readableInstant80);
        org.joda.time.DateTime dateTime83 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration77, 27);
        org.joda.time.DateTime.Property property84 = dateTime83.weekOfWeekyear();
        long long85 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime.Property property86 = dateTime83.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 54 + "'", int24 == 54);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-102737L) + "'", long85 == (-102737L));
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 575);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter15.getParser();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withZoneUTC();
        org.joda.time.Chronology chronology20 = dateTimeFormatter15.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeZone16);
        org.junit.Assert.assertNull(dateTimeParser17);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.year();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.withDayOfMonth(579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 575);
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = dateTimeFormatter6.parseLocalDate("9");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = timeOfDay19.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withMinuteOfHour(19);
        int int23 = timeOfDay19.size();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:54.242" + "'", str6, "T09:40:54.242");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54 + "'", int20 == 54);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight5.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay7.withPeriodAdded(readablePeriod8, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withChronologyRetainFields(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(0L, chronology16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 428, (long) 1200000, chronology16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime25.withMinuteOfHour(8);
        org.joda.time.Interval interval31 = interval20.withStart((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 54 + "'", int26 == 54);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.plusHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withPeriodAdded(readablePeriod9, 6);
        boolean boolean13 = dateTime11.isEqual(0L);
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54 + "'", int5 == 54);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean31 = localDate11.equals((java.lang.Object) 1000L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        boolean boolean39 = dateMidnight36.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property40 = dateMidnight36.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight36.minusWeeks(17);
        org.joda.time.DateMidnight.Property property43 = dateMidnight36.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight45 = property43.addToCopy((long) 2000);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        int int64 = localDate61.getDayOfMonth();
        int int65 = localDate61.getYear();
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDate61, (int) (short) 0, locale67);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean70 = localDate61.isSupported(durationFieldType69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        java.util.Date date74 = dateMidnight73.toDate();
        org.joda.time.YearMonthDay yearMonthDay75 = dateMidnight73.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.plus((-1L));
        org.joda.time.Chronology chronology81 = dateMidnight80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.secondOfMinute();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.DurationField durationField84 = chronology81.days();
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay75.withChronologyRetainFields(chronology81);
        org.joda.time.DurationField durationField86 = chronology81.months();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology81);
        org.joda.time.DateTimeField dateTimeField88 = chronology81.minuteOfDay();
        org.joda.time.DurationField durationField89 = durationFieldType69.getField(chronology81);
        boolean boolean90 = localDate11.isSupported(durationFieldType69);
        java.util.Date date91 = localDate11.toDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 11 + "'", int64 == 11);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Fri Feb 11 00:00:00 UTC 2022");
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = yearMonthDay11.getField(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.lang.Object obj9 = null;
        boolean boolean10 = property6.equals(obj9);
        org.joda.time.DateTime dateTime12 = property6.addToCopy((long) 49);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime15 = property6.addWrapFieldToCopy(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(50400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54 + "'", int5 == 54);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.monthOfYear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.minus(readableDuration21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfMinute();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = localDate31.toInterval(dateTimeZone32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, chronology34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay15.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType8.getField(chronology34);
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(chronology34);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus(45L);
        boolean boolean42 = dateMidnight38.isEqual((long) 34522);
        int int43 = dateMidnight38.getYear();
        org.joda.time.LocalDate localDate44 = dateMidnight38.toLocalDate();
        long long45 = dateMidnight38.getMillis();
        int int46 = dateMidnight38.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644537600000L + "'", long45 == 1644537600000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        java.lang.String str12 = localDate7.toString();
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate15 = localDate7.withWeekyear(32);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight18.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight18.withYear(11);
        boolean boolean28 = dateMidnight18.isBefore((long) 28);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.property(dateTimeFieldType38);
        int int40 = dateTime32.get(dateTimeFieldType38);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight18.withField(dateTimeFieldType38, 17);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight18.minusMonths(27);
        org.joda.time.DateTime dateTime45 = localDate15.toDateTime((org.joda.time.ReadableInstant) dateMidnight18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = localDate15.withEra(34833);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34833 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11" + "'", str12, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        java.util.Date date5 = new java.util.Date((int) '#', (int) (byte) 0, 7, 44, (int) (byte) -1);
        java.lang.String str6 = date5.toLocaleString();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setYear((int) (short) -1);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Jan 08 19:59:00 UTC 1899");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jan 8, 1935 7:59:00 PM" + "'", str6, "Jan 8, 1935 7:59:00 PM");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DurationField durationField13 = chronology6.millis();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        int int11 = calendar10.getFirstDayOfWeek();
        int int12 = calendar10.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        boolean boolean21 = date16.before(date20);
        int int22 = date16.getMonth();
        calendar10.setTime(date16);
        calendar10.setMinimalDaysInFirstWeek(16);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromCalendarFields(calendar10);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withSecondOfMinute(3);
        int int29 = timeOfDay26.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minus((long) (-1));
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.minus(readablePeriod35);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusMinutes(1970);
        int[] intArray41 = timeOfDay40.getValues();
        int int42 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay26, intArray41);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = timeOfDay26.getValue(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=16,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 49, 54, 638]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        java.util.Locale locale10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = property7.setCopy("11", locale10);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusHours(58);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusMillis(34702);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:54.655" + "'", str6, "T09:40:54.655");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "54" + "'", str8, "54");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
        org.joda.time.DurationField durationField11 = property7.getDurationField();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property7.getAsShortText(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = property7.setCopy("T09:37:27.419");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:37:27.419\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:54.667" + "'", str6, "T09:40:54.667");
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "54" + "'", str8, "54");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(durationField11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "54" + "'", str13, "54");
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = property8.setCopy(45);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime13 = dateTime10.withYearOfCentury(14);
        org.joda.time.DateTime dateTime15 = dateTime10.withMillis((long) 235);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54 + "'", int5 == 54);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.DateMidnight dateMidnight6 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.plusMonths(14);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar15 = dateMidnight14.toGregorianCalendar();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone19);
        java.util.Date date21 = dateMidnight20.toDate();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight20.toYearMonthDay();
        int[] intArray23 = yearMonthDay22.getValues();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay22.withPeriodAdded(readablePeriod24, 22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        int[] intArray36 = yearMonthDay35.getValues();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay35.withPeriodAdded(readablePeriod37, 22);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay39.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean52 = interval48.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval48.toPeriod(periodType53);
        int int56 = period54.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay39.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay30.plus((org.joda.time.ReadablePeriod) period54);
        int[] intArray61 = chronology16.get((org.joda.time.ReadablePeriod) period54, (long) 42, 1644537600029L);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        org.joda.time.Chronology chronology68 = chronology66.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology66.getZone();
        org.joda.time.DateTime dateTime71 = yearMonthDay62.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.Instant instant72 = dateTime71.toInstant();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        int int10 = dateTimeField6.getMinimumValue();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minus((long) (-1));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minus(readablePeriod16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minusMinutes(1970);
        int int23 = timeOfDay21.getValue(1);
        int int24 = timeOfDay21.getMillisOfSecond();
        java.lang.String str25 = timeOfDay21.toString();
        int int26 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay21);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate44 = localDate38.withWeekyear(19);
        int int45 = localDate38.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = timeOfDay21.compareTo((org.joda.time.ReadablePartial) localDate38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 49 + "'", int23 == 49);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 773 + "'", int24 == 773);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "T00:49:54.773" + "'", str25, "T00:49:54.773");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(22, 28, 34);
        java.util.Calendar.Builder builder13 = builder0.setDate(37, 10, 14);
        java.util.Calendar calendar14 = builder0.build();
        calendar14.clear();
        calendar14.setLenient(true);
        calendar14.set(36000000, 8, (-1), 24, 34);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=36000000,MONTH=8,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=24,MINUTE=34,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay15.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        long long34 = dateTimeField32.roundCeiling((long) (short) 100);
        org.joda.time.DurationField durationField35 = dateTimeField32.getLeapDurationField();
        long long38 = dateTimeField32.add((long) '#', (long) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus((-1L));
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfMinute();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfEra((int) (byte) 10);
        int int49 = localDate46.getYearOfCentury();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate62 = localDate58.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plus((-1L));
        org.joda.time.Chronology chronology68 = dateMidnight67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfMinute();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.LocalDate localDate72 = localDate70.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate74 = localDate70.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        java.lang.String str77 = dateTimeZone76.toString();
        org.joda.time.DateTime dateTime78 = localDate74.toDateTimeAtCurrentTime(dateTimeZone76);
        boolean boolean79 = dateTimeZone76.isFixed();
        org.joda.time.DateTime dateTime80 = localDate62.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.DateTime dateTime81 = localDate46.toDateTime(localTime50, dateTimeZone76);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = localDate83.toDateTime(localTime84, dateTimeZone85);
        org.joda.time.LocalDate localDate88 = localDate83.withYearOfEra(12);
        int[] intArray89 = localDate83.getValues();
        int int90 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDate46, intArray89);
        chronology5.validate((org.joda.time.ReadablePartial) yearMonthDay25, intArray89);
        org.joda.time.DateTimeZone dateTimeZone92 = chronology5.getZone();
        org.joda.time.DateTimeField dateTimeField93 = chronology5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1000L + "'", long34 == 1000L);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10035L + "'", long38 == 10035L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Etc/UTC" + "'", str77, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate localDate13 = property10.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.DateTimeField dateTimeField14 = property10.getField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = localDate22.getField(1);
        org.joda.time.LocalDate localDate26 = localDate22.withDayOfYear(2);
        org.joda.time.LocalDate localDate28 = localDate22.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        boolean boolean58 = dateTimeZone55.isFixed();
        org.joda.time.DateTime dateTime59 = localDate41.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate61 = localDate41.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getRangeDurationType();
        boolean boolean64 = localDate61.isSupported(durationFieldType63);
        boolean boolean65 = localDate22.isSupported(durationFieldType63);
        org.joda.time.LocalDate localDate67 = localDate22.plusMonths(6);
        int int68 = localDate22.getEra();
        org.joda.time.LocalDate localDate70 = localDate22.withYear((-292275054));
        org.joda.time.LocalDate localDate72 = localDate22.plusDays((-378559));
        org.joda.time.LocalDate.Property property73 = localDate22.dayOfYear();
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDate22, 578, locale75);
        org.joda.time.ReadablePartial readablePartial77 = null;
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = dateTimeField14.getAsText(readablePartial77, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "578" + "'", str76, "578");
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek((int) (byte) 1);
        calendar0.set(34833, (-1959), 5601);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1032388243200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34685,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter6.withDefaultYear(369);
        boolean boolean44 = dateTimeFormatter43.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(0);
        org.joda.time.DateMidnight dateMidnight7 = dateTime6.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        java.util.Date date11 = dateMidnight10.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight10.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.monthOfYear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.minus(readableDuration18);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = localDate28.toInterval(dateTimeZone29);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, chronology31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay12.withChronologyRetainFields(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.yearOfEra();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight7.withChronology(chronology31);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight7.withFieldAdded(durationFieldType39, 1904);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight45.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay47.withPeriodAdded(readablePeriod48, 11);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.centuries();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay50.withChronologyRetainFields(chronology56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(0L, chronology56);
        org.joda.time.DurationField durationField60 = chronology56.weekyears();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateTimeField dateTimeField62 = chronology56.yearOfEra();
        org.joda.time.DateTime dateTime63 = dateMidnight7.toDateTime(chronology56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean25 = interval21.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval21.toPeriod(periodType26);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay14.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay14.minusMinutes(719528);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime8.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 16);
        org.joda.time.DateTime dateTime36 = dateTime34.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime34.getZone();
        long long39 = dateTimeZone37.previousTransition((long) 36);
        org.joda.time.DateTime dateTime40 = dateTime27.withZone(dateTimeZone37);
        int int41 = dateTime27.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 36L + "'", long39 == 36L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime3.property(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime2.minusDays((int) (byte) 10);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.withEarlierOffsetAtOverlap();
        int int11 = dateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.plusWeeks((int) ' ');
        boolean boolean18 = dateMidnight16.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.minus(readableDuration19);
        int int21 = dateMidnight16.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) (-1));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        int int26 = dateMidnight24.getYearOfEra();
        boolean boolean27 = dateMidnight16.isEqual((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.minus((long) 15);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight16.plusMonths(70);
        boolean boolean32 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) dateMidnight16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight34 = dateMidnight16.withDayOfWeek(800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 800 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 33 + "'", int21 == 33);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(6);
        org.joda.time.DateTime.Property property10 = dateTime9.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withDayOfYear(53);
        int int13 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(999);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 55 + "'", int5 == 55);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear(38);
        boolean boolean9 = dateTimeFormatter2.isParser();
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = dateTimeFormatter13.parseLocalDateTime("T09:39:10.625");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.monthOfYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.minus(readableDuration7);
        org.joda.time.DateTime.Property property9 = dateTime3.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime3.withField(dateTimeFieldType10, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.monthOfYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.minus(readableDuration23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.Interval interval35 = localDate33.toInterval(dateTimeZone34);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime24, chronology36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay17.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType10.getField(chronology36);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(34736, 9, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34736 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withFieldAdded(durationFieldType9, 3);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withDayOfMonth(26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonthDay13.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) 16);
        org.joda.time.DateTime dateTime23 = dateTime21.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        org.joda.time.DateTime dateTime25 = yearMonthDay13.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter29.withPivotYear((java.lang.Integer) 0);
        boolean boolean34 = dateTimeFormatter33.isParser();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        boolean boolean42 = dateMidnight39.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property43 = dateMidnight39.centuryOfEra();
        boolean boolean44 = property43.isLeap();
        org.joda.time.DateMidnight dateMidnight46 = property43.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.YearMonthDay yearMonthDay51 = dateMidnight49.toYearMonthDay();
        int[] intArray52 = yearMonthDay51.getValues();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.withPeriodAdded(readablePeriod53, 22);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        java.lang.String str59 = dateTimeZone57.getNameKey((long) (-1));
        long long61 = dateTimeZone57.convertUTCToLocal((long) 5);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeZone57.getName((long) 0, locale63);
        org.joda.time.Interval interval65 = yearMonthDay51.toInterval(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime66 = dateMidnight46.toMutableDateTime(dateTimeZone57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter33.withZone(dateTimeZone57);
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = dateTimeFormatter33.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter33.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter69.withPivotYear((java.lang.Integer) 35);
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatter71.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = localDate26.toString(dateTimeFormatter71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 5L + "'", long61 == 5L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(dateTimePrinter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(dateTimeParser72);
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate8.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.LocalDate localDate18 = localDate12.withWeekyear(19);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate37.withWeekyear(19);
        org.joda.time.LocalTime localTime44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime49 = localDate37.toDateTime(localTime44, dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getName(1000L);
        org.joda.time.DateTime dateTime52 = yearMonthDay25.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.Interval interval53 = localDate20.toInterval(dateTimeZone46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) ' ', chronology54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusWeeks(22);
        int int62 = dateMidnight58.getMillisOfDay();
        boolean boolean63 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.plus((-1L));
        org.joda.time.Chronology chronology69 = dateMidnight68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.secondOfMinute();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DurationField durationField72 = chronology69.days();
        org.joda.time.DateTimeField dateTimeField73 = chronology69.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.centuryOfEra();
        org.joda.time.DurationField durationField75 = chronology69.millis();
        org.joda.time.MutableDateTime mutableDateTime76 = dateMidnight58.toMutableDateTime(chronology69);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight58.withYearOfEra(27);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight58.withYear(40);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        long long13 = interval9.toDurationMillis();
        org.joda.time.Interval interval14 = interval9.toInterval();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean25 = interval21.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTime dateTime26 = interval21.getEnd();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.DateMidnight.Property property35 = dateMidnight33.dayOfWeek();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33);
        boolean boolean37 = interval29.isAfter((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((-1L), dateTimeZone39);
        org.joda.time.Interval interval41 = interval29.withStart((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = interval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration43 = interval21.toDuration();
        org.joda.time.Interval interval44 = interval14.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plus((-1L));
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.plusWeeks((int) ' ');
        boolean boolean53 = dateMidnight51.equals((java.lang.Object) 100.0f);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight51.plusWeeks(575);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfYear();
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.monthOfYear();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight55);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        int int4 = dateMidnight2.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight7.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone11);
        long long14 = dateTimeZone11.previousTransition((long) 252);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        boolean boolean23 = dateMidnight20.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property24 = dateMidnight20.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.minusWeeks(17);
        org.joda.time.DateMidnight.Property property27 = dateMidnight20.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight29 = property27.addToCopy((long) 15);
        boolean boolean30 = dateTimeZone11.equals((java.lang.Object) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusYears(25);
        org.joda.time.LocalDate localDate33 = dateMidnight29.toLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.plusWeeks(34722164);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 252L + "'", long14 == 252L);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology5.days();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar21 = dateMidnight20.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight26.toYearMonthDay();
        int[] intArray29 = yearMonthDay28.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.withPeriodAdded(readablePeriod30, 22);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        int[] intArray42 = yearMonthDay41.getValues();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.withPeriodAdded(readablePeriod43, 22);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        java.util.Date date52 = dateMidnight51.toDate();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.dayOfWeek();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean58 = interval54.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval54.toPeriod(periodType59);
        int int62 = period60.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay45.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay36.plus((org.joda.time.ReadablePeriod) period60);
        int[] intArray67 = chronology22.get((org.joda.time.ReadablePeriod) period60, (long) 42, 1644537600029L);
        int[] intArray69 = chronology5.get((org.joda.time.ReadablePeriod) period60, (-60522398665211L));
        org.joda.time.DateTimeField dateTimeField70 = chronology5.secondOfDay();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone76);
        java.util.Date date78 = dateMidnight77.toDate();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.dayOfWeek();
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77);
        boolean boolean81 = interval73.isAfter((org.joda.time.ReadableInterval) interval80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((-1L), dateTimeZone83);
        org.joda.time.Interval interval85 = interval73.withStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDate localDate86 = dateTime84.toLocalDate();
        org.joda.time.LocalDate.Property property87 = localDate86.yearOfEra();
        org.joda.time.LocalDate localDate89 = localDate86.withYearOfCentury(5);
        int int90 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) localDate89);
        org.joda.time.LocalDate localDate92 = localDate89.withDayOfYear(45);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, -100070, 0, -17, -24, -25, -211]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(localDate92);
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minus((long) (-1));
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minus(readablePeriod6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMinutes(1970);
        org.joda.time.Chronology chronology12 = timeOfDay9.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        int int15 = dateTimeField14.getMinimumValue();
        long long17 = dateTimeField14.roundHalfCeiling(10L);
        java.lang.String str18 = dateTimeField14.getName();
        int int20 = dateTimeField14.getMinimumValue(108953532532802001L);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "secondOfDay" + "'", str18, "secondOfDay");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (-1));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.LocalTime localTime14 = timeOfDay13.toLocalTime();
        java.lang.String str15 = timeOfDay13.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.minus(readablePeriod16);
        int int18 = timeOfDay13.getMinuteOfHour();
        boolean boolean19 = dateMidnight8.equals((java.lang.Object) int18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight8.plus(readablePeriod20);
        int int22 = dateMidnight21.getYear();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "T09:40:55.473" + "'", str15, "T09:40:55.473");
        org.junit.Assert.assertNotNull(timeOfDay17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1969 + "'", int22 == 1969);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(577);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay4.withDayOfMonth((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 0);
        boolean boolean35 = dateTimeFormatter34.isPrinter();
        int int36 = dateTimeFormatter34.getDefaultYear();
        boolean boolean37 = dateTimeFormatter34.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter34.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter34.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter34.withOffsetParsed();
        java.util.Locale locale43 = dateTimeFormatter42.getLocale();
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter42.withLocale(locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = yearMonthDay4.toString(dateTimeFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2000 + "'", int36 == 2000);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withPeriodAdded(readablePeriod16, 11);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plus((-1L));
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.centuries();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay18.withChronologyRetainFields(chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone29);
        java.util.Date date31 = dateMidnight30.toDate();
        org.joda.time.YearMonthDay yearMonthDay32 = dateMidnight30.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        boolean boolean43 = yearMonthDay34.isEqual((org.joda.time.ReadablePartial) localDate42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (-1));
        long long49 = dateTimeZone45.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight50 = localDate42.toDateMidnight(dateTimeZone45);
        long long54 = dateTimeZone45.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str56 = dateTimeZone45.getNameKey((long) 33);
        boolean boolean58 = dateTimeZone45.isStandardOffset((long) 34);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) dateTime27, dateTimeZone45);
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        java.util.Date date64 = dateMidnight63.toDate();
        org.joda.time.YearMonthDay yearMonthDay65 = dateMidnight63.toYearMonthDay();
        int[] intArray66 = yearMonthDay65.getValues();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay65.withPeriodAdded(readablePeriod67, 22);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone74);
        java.util.Date date76 = dateMidnight75.toDate();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfWeek();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableDuration72, (org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean82 = interval78.isBefore((org.joda.time.ReadableInterval) interval81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval78.toPeriod(periodType83);
        int int86 = period84.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay69.plus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.LocalDate localDate89 = localDate59.withPeriodAdded((org.joda.time.ReadablePeriod) period84, 13);
        org.joda.time.LocalDate localDate90 = localDate7.plus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.LocalDate.Property property91 = localDate90.year();
        org.joda.time.LocalDate localDate93 = property91.addToCopy(10022);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5L + "'", long49 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 52L + "'", long54 == 52L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDate93);
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime6 = dateTime1.withMillisOfSecond(40);
        org.joda.time.DateTime.Property property7 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime1.plusMinutes(1999);
        org.joda.time.DateTime dateTime11 = dateTime1.minusMinutes(17);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 0);
        boolean boolean19 = dateTimeFormatter18.isPrinter();
        int int20 = dateTimeFormatter18.getDefaultYear();
        boolean boolean21 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter18.withZoneUTC();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter18.withLocale(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTime1.toString(dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2000 + "'", int20 == 2000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = dateTimeFormatter6.parseMutableDateTime("T09:36:08.020");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight5.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay7.withPeriodAdded(readablePeriod8, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((-1L));
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay10.withChronologyRetainFields(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(0L, chronology16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) 428, (long) 1200000, chronology16);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfMinute();
        org.joda.time.DurationField durationField28 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        java.util.Date date35 = dateMidnight34.toDate();
        org.joda.time.YearMonthDay yearMonthDay36 = dateMidnight34.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay36.withPeriodAdded(readablePeriod37, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plus((-1L));
        org.joda.time.Chronology chronology45 = dateMidnight44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfMinute();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = localDate47.toInterval(dateTimeZone48);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.Period period51 = interval49.toPeriod();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.weekyears();
        int int53 = period51.get(durationFieldType52);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay36.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight60 = dateTime59.toDateMidnight();
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withWeekOfWeekyear(6);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight60.minusYears(1970);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period51, (org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay31.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 57);
        org.joda.time.Interval interval69 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        long long70 = interval20.getEndMillis();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1200000L + "'", long70 == 1200000L);
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.LocalDate localDate8 = dateMidnight4.toLocalDate();
        org.joda.time.Chronology chronology9 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean13 = dateTimeFormatter6.isOffsetParsed();
        java.util.Locale locale14 = dateTimeFormatter6.getLocale();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withLocale(locale15);
        java.io.Writer writer17 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        boolean boolean28 = interval20.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-1L), dateTimeZone30);
        org.joda.time.Interval interval32 = interval20.withStart((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = dateTime31.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        boolean boolean36 = localDate33.isSupported(durationFieldType35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        boolean boolean44 = dateMidnight41.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property45 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight46 = property45.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        java.util.Date date50 = dateMidnight49.toDate();
        org.joda.time.YearMonthDay yearMonthDay51 = dateMidnight49.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        boolean boolean62 = yearMonthDay53.isEqual((org.joda.time.ReadablePartial) localDate61);
        int int63 = property45.compareTo((org.joda.time.ReadablePartial) yearMonthDay53);
        int[] intArray64 = yearMonthDay53.getValues();
        int int65 = yearMonthDay53.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay53.minusMonths(2022);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay53.minusMonths(46);
        boolean boolean70 = localDate33.isEqual((org.joda.time.ReadablePartial) yearMonthDay53);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(writer17, (org.joda.time.ReadablePartial) yearMonthDay53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1969, 12, 31]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 31 + "'", int65 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        long long13 = interval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = interval9.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        boolean boolean25 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        boolean boolean33 = dateMidnight30.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property34 = dateMidnight30.weekyear();
        org.joda.time.DateMidnight dateMidnight36 = property34.addWrapFieldToCopy(100);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.monthOfYear();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.minus(readableDuration44);
        boolean boolean46 = dateMidnight38.isAfter((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean47 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plus((-1L));
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        boolean boolean56 = dateMidnight53.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property57 = dateMidnight53.centuryOfEra();
        java.lang.String str58 = property57.getAsText();
        org.joda.time.DateMidnight dateMidnight59 = property57.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plus((-1L));
        org.joda.time.Chronology chronology65 = dateMidnight64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight59.withChronology(chronology65);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology65);
        org.joda.time.DateTime dateTime70 = dateTime40.toDateTime(chronology65);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfEra(34778);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "19" + "'", str58, "19");
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTime(localTime2, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate1.withYearOfEra(12);
        int[] intArray7 = localDate1.getValues();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) localDate1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        long long27 = dateTimeZone22.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate.Property property30 = localDate8.property(dateTimeFieldType29);
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        int int32 = localDate31.size();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = localDate31.getValue(34620);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34620");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1659458699000L) + "'", long27 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        int int8 = dateTimeFormatter6.getDefaultYear();
        boolean boolean9 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter6.withOffsetParsed();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField25 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(8);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate9.getValue(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 40");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        java.lang.String str1 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "months" + "'", str1, "months");
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay13.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) readablePeriod6, chronology24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.yearOfEra();
        org.joda.time.DateMidnight dateMidnight27 = property26.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(17);
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight4.plusDays(10);
        int int14 = dateMidnight13.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear(87);
        int int7 = localDate4.getEra();
        org.joda.time.LocalDate localDate9 = localDate4.withYearOfCentury(22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology5.days();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateTimeField dateTimeField14 = chronology5.centuryOfEra();
        int int16 = dateTimeField14.getLeapAmount(292279042L);
        long long18 = dateTimeField14.remainder((long) 58);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 58L + "'", long18 == 58L);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        long long13 = interval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = interval9.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        boolean boolean25 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) interval24);
        boolean boolean26 = mutableInterval14.isBeforeNow();
        boolean boolean28 = mutableInterval14.isBefore((long) 24);
        boolean boolean30 = mutableInterval14.isAfter((long) (-1959));
        java.lang.String str31 = mutableInterval14.toString();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str31, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime4.toMutableDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(34693, 25260000, 34627, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25260000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime9.minusDays((int) (byte) 10);
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableDuration7, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean17 = localDate6.equals((java.lang.Object) readableDuration7);
        int int18 = localDate6.size();
        org.joda.time.LocalDate localDate20 = localDate6.minusYears(996);
        org.joda.time.LocalDate localDate22 = localDate20.plusMonths(0);
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        long long16 = calendar0.getTimeInMillis();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime19.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime19.minusDays((int) (byte) 10);
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration17, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = dateTime25.isEqualNow();
        org.joda.time.DateTime dateTime29 = dateTime25.minusSeconds(32772);
        boolean boolean30 = calendar0.after((java.lang.Object) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        int int41 = localDate38.getYearOfCentury();
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((-1L));
        org.joda.time.Chronology chronology48 = dateMidnight47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.secondOfMinute();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.LocalDate localDate52 = localDate50.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate54 = localDate50.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plus((-1L));
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.secondOfMinute();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.LocalDate localDate64 = localDate62.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate66 = localDate62.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str69 = dateTimeZone68.toString();
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtCurrentTime(dateTimeZone68);
        boolean boolean71 = dateTimeZone68.isFixed();
        org.joda.time.DateTime dateTime72 = localDate54.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = localDate38.toDateTime(localTime42, dateTimeZone68);
        java.util.TimeZone timeZone74 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        calendar0.setTimeZone(timeZone74);
        calendar0.set((int) 'a', 33538, 580, 34762, 34699, 25260000);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=97,MONTH=33538,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=580,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=34762,MINUTE=34699,SECOND=25260000,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone75);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfMinute();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra((int) (byte) 10);
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((-1L));
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime49 = localDate31.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTime(localTime19, dateTimeZone45);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime52 = yearMonthDay4.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay4.plusMonths(34);
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay54.year();
        org.joda.time.DateTime dateTime56 = yearMonthDay54.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.plus((-1L));
        org.joda.time.Chronology chronology66 = dateMidnight65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfMinute();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 11, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.year();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(32772, 7, 19, chronology66);
        org.joda.time.DateTime dateTime74 = dateTime56.withChronology(chronology66);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(chronology66);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Etc/UTC" + "'", str46, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury(8);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone24);
        java.util.Date date26 = dateMidnight25.toDate();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.dayOfWeek();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean29 = interval21.isAfter((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = interval28.withPeriodAfterStart(readablePeriod30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.util.Date date36 = dateMidnight35.toDate();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.dayOfWeek();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean42 = interval38.isBefore((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTime dateTime43 = interval38.getEnd();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone49);
        java.util.Date date51 = dateMidnight50.toDate();
        org.joda.time.DateMidnight.Property property52 = dateMidnight50.dayOfWeek();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean54 = interval46.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((-1L), dateTimeZone56);
        org.joda.time.Interval interval58 = interval46.withStart((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration60 = interval38.toDuration();
        org.joda.time.Interval interval61 = interval31.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime63 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration60, 22);
        org.joda.time.DateTime dateTime65 = dateTime63.plusHours(25260000);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 56 + "'", int12 == 56);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 16);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) 25);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        boolean boolean19 = interval11.isAfter((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-1L), dateTimeZone21);
        org.joda.time.Interval interval23 = interval11.withStart((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = interval11.withPeriodBeforeEnd(readablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        java.util.Date date29 = dateMidnight28.toDate();
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight28.toYearMonthDay();
        int[] intArray31 = yearMonthDay30.getValues();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.withPeriodAdded(readablePeriod32, 22);
        java.lang.String str35 = yearMonthDay30.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay30.minusDays(33);
        org.joda.time.Interval interval38 = yearMonthDay37.toInterval();
        boolean boolean40 = interval38.isAfter(1644572146319L);
        boolean boolean42 = interval38.contains((long) (short) 100);
        boolean boolean43 = interval38.isBeforeNow();
        org.joda.time.Duration duration44 = interval38.toDuration();
        org.joda.time.Interval interval45 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = interval45.toPeriod();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) period46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime6.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01" + "'", str35, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        date8.setSeconds(48);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        int int19 = date18.getHours();
        int int20 = date18.getDay();
        int int21 = date18.getDay();
        java.time.Instant instant22 = date18.toInstant();
        boolean boolean23 = date8.after(date18);
        int int24 = date8.getDay();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:40:56 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:48 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.dayOfYear();
        org.joda.time.LocalDate localDate25 = property24.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) property24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.LocalDate localDate11 = localDate7.withDayOfYear(2);
        org.joda.time.LocalDate localDate13 = localDate7.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((-1L));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime44 = localDate26.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate46 = localDate26.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        boolean boolean49 = localDate46.isSupported(durationFieldType48);
        boolean boolean50 = localDate7.isSupported(durationFieldType48);
        org.joda.time.LocalDate localDate52 = localDate7.plusMonths(6);
        int int53 = localDate7.getEra();
        int int54 = localDate7.getWeekOfWeekyear();
        int int55 = localDate7.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) int55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.days();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay5.withChronologyRetainFields(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfHour();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 16, chronology11);
        org.joda.time.DateTimeField dateTimeField19 = chronology11.clockhourOfDay();
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMinuteOfHour(10);
        boolean boolean14 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime9);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateMidnight6.toCalendar(locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-1L), dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readableDuration24);
        int int26 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minus((long) (-1));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.minus(readablePeriod32);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay35.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.dayOfWeek();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean52 = interval48.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval48.toPeriod(periodType53);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay41.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime57 = dateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 19);
        boolean boolean58 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.plus((-1L));
        org.joda.time.Chronology chronology64 = dateMidnight63.getChronology();
        boolean boolean66 = dateMidnight63.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property67 = dateMidnight63.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight68 = property67.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime72.plusYears(5);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone77);
        java.util.Date date79 = dateMidnight78.toDate();
        org.joda.time.DateMidnight.Property property80 = dateMidnight78.dayOfWeek();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration75, (org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean85 = interval81.isBefore((org.joda.time.ReadableInterval) interval84);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.Period period87 = interval81.toPeriod(periodType86);
        org.joda.time.DateTime dateTime88 = dateTime72.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadablePeriod) period87);
        org.joda.time.DateTime dateTime91 = dateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period87, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = period87.getValue(5601);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5601");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=19353600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = dateMidnight15.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withMillis((long) 428);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withWeekOfWeekyear(1904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1904 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        int int15 = localDate12.getYearOfCentury();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime46 = localDate28.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate12.toDateTime(localTime16, dateTimeZone42);
        java.util.TimeZone timeZone48 = dateTimeZone42.toTimeZone();
        calendar4.setTimeZone(timeZone48);
        calendar0.setTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.YearMonthDay yearMonthDay55 = dateMidnight53.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay55.withPeriodAdded(readablePeriod56, 11);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay55.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.withMinimumValue();
        boolean boolean61 = calendar0.before((java.lang.Object) yearMonthDay60);
        boolean boolean62 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572456336,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=56,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572456336,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=56,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        int int6 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property7 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = property7.withMinimumValue();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.eras();
        boolean boolean10 = property7.equals((java.lang.Object) durationFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        int int14 = dateMidnight13.getYear();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfDay();
        org.joda.time.DurationField durationField17 = durationFieldType9.getField(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 56 + "'", int6 == 56);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        java.util.Date date1 = new java.util.Date((long) 100);
        int int2 = date1.getSeconds();
        date1.setTime(1644573600000L);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 10:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 25, 1644572312371L);
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((-2219616000000L), dateTimeZone1);
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        boolean boolean8 = date3.before(date7);
        int int9 = date3.getDay();
        int int10 = date3.getHours();
        java.lang.String str11 = date3.toGMTString();
        date3.setMinutes(1);
        int int14 = date3.getDate();
        date3.setMinutes(79);
        java.util.Date date22 = new java.util.Date(32769, 33330867, 2, (int) (byte) 10, (-391));
        int int23 = date22.getMonth();
        boolean boolean24 = date3.after(date22);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:19:00 UTC 1970");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str11, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Apr 02 03:29:00 UTC 2812241");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        java.util.Date date1 = new java.util.Date(70751104L);
        date1.setTime((-2082810300000L));
        org.junit.Assert.assertEquals(date1.toString(), "Fri Jan 01 09:35:00 UTC 1904");
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay7.millisOfSecond();
        java.lang.String str10 = property9.toString();
        org.joda.time.TimeOfDay timeOfDay12 = property9.addToCopy(34805967);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property9.getAsText(locale13);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572456459,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=56,MILLISECOND=459,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[millisOfSecond]" + "'", str10, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(timeOfDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "459" + "'", str14, "459");
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate16 = localDate12.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str19 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate22 = localDate16.withWeekyear(19);
        org.joda.time.LocalTime localTime23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime28 = localDate16.toDateTime(localTime23, dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getName(1000L);
        org.joda.time.DateTime dateTime31 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.property(dateTimeFieldType33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate36.toDateTime(localTime37, dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate36.withYearOfEra(12);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate59 = localDate53.withWeekyear(19);
        org.joda.time.LocalTime localTime60 = null;
        org.joda.time.DateTime dateTime61 = localDate53.toDateTime(localTime60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plus((-1L));
        org.joda.time.Chronology chronology67 = dateMidnight66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfMinute();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.LocalDate localDate71 = localDate69.withYearOfEra((int) (byte) 10);
        int int72 = localDate69.getYearOfCentury();
        boolean boolean73 = localDate53.isBefore((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minus((long) (-1));
        org.joda.time.DateTime dateTime77 = localDate53.toDateTime((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.DateTime dateTime78 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = dateTime78.withLaterOffsetAtOverlap();
        boolean boolean80 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = dateTime78.withDayOfWeek(2066);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2066 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 22 + "'", int72 == 22);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate(59, 69, 8);
        java.util.Calendar.Builder builder16 = builder8.setWeekDate(29, 32, 29);
        java.util.Calendar.Builder builder20 = builder16.setTimeOfDay(135, 575, 53);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay(33626254, 0, (-1), 2022);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plusMonths((-1));
        boolean boolean8 = dateMidnight4.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withMillis(1000L);
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight10.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate18 = localDate14.plusYears((int) (byte) 0);
        int int19 = localDate14.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property20 = localDate14.yearOfEra();
        long long22 = chronology5.set((org.joda.time.ReadablePartial) localDate14, (long) 29);
        org.joda.time.DateTimeField dateTimeField23 = chronology5.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology5.getDateTimeMillis(33, 59, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1644537600029L + "'", long22 == 1644537600029L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property8.getAsText(locale10);
        org.joda.time.YearMonthDay yearMonthDay12 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay13 = property8.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField14 = property8.getField();
        int int15 = property8.get();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        java.util.Date date1 = new java.util.Date((long) '4');
        int int2 = date1.getDay();
        int int3 = date1.getSeconds();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=49,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=59,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=36,MINUTE=0,SECOND=20,MILLISECOND=371,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        int[] intArray11 = timeOfDay10.getValues();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property12.addWrapFieldToCopy(32770);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.minuteOfHour();
        int int17 = property16.get();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property16.getAsText(locale18);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 49, 56, 569]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "59" + "'", str19, "59");
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek(16);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        boolean boolean17 = calendar0.isWeekDateSupported();
        calendar0.setFirstDayOfWeek(2008);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2008,minimalDaysInFirstWeek=16,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes(12);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusMinutes(8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = timeOfDay14.getFieldType((-36962));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -36962");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.set(42, (-292275054), 40);
        int int18 = calendar0.getWeeksInWeekYear();
        calendar0.setFirstDayOfWeek(45);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=45,minimalDaysInFirstWeek=1,ERA=1,YEAR=42,MONTH=-292275054,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=40,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone5);
        java.util.Date date7 = dateMidnight6.toDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfWeek();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        boolean boolean10 = interval2.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Interval interval12 = interval9.withPeriodAfterStart(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Interval interval14 = interval12.withPeriodAfterStart(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((-1L));
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.centuries();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(70L, chronology29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(chronology29);
        org.joda.time.Interval interval33 = interval14.withChronology(chronology29);
        boolean boolean35 = interval33.isBefore((long) (-19034));
        boolean boolean37 = interval33.contains((long) 54);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury(14);
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType10.isSupported(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus((-1L));
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.centuries();
        long long24 = chronology19.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType10.getField(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 292279042L + "'", long24 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateMidnight dateMidnight7 = dateTime6.toDateMidnight();
        boolean boolean9 = dateMidnight7.isEqual(1644572146319L);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight7.withWeekOfWeekyear(18);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withYearOfCentury(18);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateMidnight13.toCalendar(locale16);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1651795200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=126,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology14.minutes();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((-1L), chronology14);
        org.joda.time.DurationField durationField21 = chronology14.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.hourOfDay();
        java.lang.String str26 = dateTimeField24.getAsText(1000L);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField24.set(32L, "11 Feb 2022 09:37:27 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11 Feb 2022 09:37:27 GMT\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 0);
        boolean boolean24 = dateTimeFormatter23.isParser();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        boolean boolean32 = dateMidnight29.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property33 = dateMidnight29.centuryOfEra();
        boolean boolean34 = property33.isLeap();
        org.joda.time.DateMidnight dateMidnight36 = property33.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        int[] intArray42 = yearMonthDay41.getValues();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.withPeriodAdded(readablePeriod43, 22);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str49 = dateTimeZone47.getNameKey((long) (-1));
        long long51 = dateTimeZone47.convertUTCToLocal((long) 5);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone47.getName((long) 0, locale53);
        org.joda.time.Interval interval55 = yearMonthDay41.toInterval(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight36.toMutableDateTime(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter23.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter6.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeFormatter59.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeFormatter61.parseMillis("35");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 5L + "'", long51 == 5L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("70");
        org.joda.time.Chronology chronology2 = dateMidnight1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(59);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withZoneRetainFields(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears(5);
        org.joda.time.DateTime.Property property6 = dateTime3.yearOfCentury();
        java.util.Locale locale7 = null;
        int int8 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.DateTime dateTime10 = property6.addWrapFieldToCopy(51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays(9);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType5.getField(chronology11);
        org.joda.time.DateTime.Property property14 = dateTime3.property(dateTimeFieldType5);
        int int15 = property14.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(8);
        int int10 = localDate9.size();
        org.joda.time.LocalDate localDate12 = localDate9.plusMonths((-5599659));
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        calendar0.clear();
        java.lang.String str47 = calendar0.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = calendar0.isSet(34816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "gregory" + "'", str47, "gregory");
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setMinimalDaysInFirstWeek((int) (byte) 1);
        java.lang.String str16 = calendar0.getCalendarType();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.LocalDate localDate34 = localDate28.withWeekyear(19);
        org.joda.time.LocalTime localTime35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime40 = localDate28.toDateTime(localTime35, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(dateTimeZone37);
        boolean boolean42 = calendar0.before((java.lang.Object) dateMidnight41);
        int int43 = dateMidnight41.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus(readablePeriod46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight45.dayOfYear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate.Property property16 = localDate11.dayOfYear();
        int int17 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate localDate19 = localDate11.withYear(34699);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property25 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate27 = localDate11.minusWeeks(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = localDate27.getField(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate29.toDateTime(localTime30, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate29.withYearOfEra(12);
        int[] intArray35 = localDate29.getValues();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) localDate29);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plus((-1L));
        org.joda.time.Chronology chronology42 = dateMidnight41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.LocalDate localDate46 = localDate44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str51 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        long long55 = dateTimeZone50.adjustOffset((-1659458699000L), true);
        org.joda.time.DateTime dateTime56 = localDate36.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.Chronology chronology58 = chronology23.withZone(dateTimeZone50);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1659458699000L) + "'", long55 == (-1659458699000L));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        long long16 = calendar0.getTimeInMillis();
        int int17 = calendar0.getFirstDayOfWeek();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        int int19 = calendar18.getFirstDayOfWeek();
        int int20 = calendar18.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        boolean boolean29 = date24.before(date28);
        int int30 = date24.getMonth();
        calendar18.setTime(date24);
        calendar18.setMinimalDaysInFirstWeek((int) (byte) 1);
        java.lang.String str34 = calendar18.getCalendarType();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plus((-1L));
        org.joda.time.Chronology chronology40 = dateMidnight39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfMinute();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate46 = localDate42.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str49 = dateTimeZone48.toString();
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.LocalDate localDate52 = localDate46.withWeekyear(19);
        org.joda.time.LocalTime localTime53 = null;
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.lang.String str57 = dateTimeZone55.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime58 = localDate46.toDateTime(localTime53, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight59 = org.joda.time.DateMidnight.now(dateTimeZone55);
        boolean boolean60 = calendar18.before((java.lang.Object) dateMidnight59);
        int int61 = calendar0.compareTo(calendar18);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "gregory" + "'", str34, "gregory");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Etc/UTC" + "'", str49, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 314, (-54132552840000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.LocalDate localDate16 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime();
        boolean boolean18 = dateTime17.isBeforeNow();
        boolean boolean19 = dateTime17.isBeforeNow();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 57 + "'", int12 == 57);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, chronology23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.yearOfEra();
        org.joda.time.DurationField durationField30 = chronology23.weeks();
        java.lang.String str31 = chronology23.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str31, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(2022, 53, 1);
        java.util.Calendar.Builder builder16 = builder12.setDate(11, 252, 44);
        java.util.Calendar.Builder builder20 = builder16.setTimeOfDay(31, 37, 0);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(58, 1, 18);
        java.util.Calendar.Builder builder28 = builder20.setTimeOfDay(0, 29, (-1959));
        java.util.Calendar.Builder builder30 = builder28.setLenient(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(786, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 786 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = dateMidnight5.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.LocalDate localDate26 = localDate20.withWeekyear(19);
        org.joda.time.LocalTime localTime27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime32 = localDate20.toDateTime(localTime27, dateTimeZone29);
        java.lang.String str33 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime34 = localDate8.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withDayOfYear(34844635);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34844635 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        java.lang.String str6 = timeOfDay4.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minus(readablePeriod7);
        int int9 = timeOfDay4.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusWeeks(22);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, readablePeriod16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay4.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay22 = property20.addWrapFieldToCopy(47);
        org.joda.time.TimeOfDay timeOfDay24 = property20.addToCopy(33538);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T09:40:57.157" + "'", str6, "T09:40:57.157");
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder12 = builder5.setTimeOfDay(8, 32770, 2);
        java.util.Calendar calendar13 = builder12.build();
        calendar13.set(12, 2000, 48, 27, 0);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromCalendarFields(calendar13);
        int int21 = calendar13.getWeeksInWeekYear();
        calendar13.setMinimalDaysInFirstWeek(0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-56524942798000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=178,MONTH=9,WEEK_OF_YEAR=43,WEEK_OF_MONTH=4,DAY_OF_MONTH=19,DAY_OF_YEAR=292,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean10 = interval6.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = interval6.getEnd();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        java.util.Date date19 = dateMidnight18.toDate();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.dayOfWeek();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean22 = interval14.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-1L), dateTimeZone24);
        org.joda.time.Interval interval26 = interval14.withStart((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = interval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate localDate47 = localDate41.withWeekyear(19);
        org.joda.time.LocalTime localTime48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        java.lang.String str52 = dateTimeZone50.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime53 = localDate41.toDateTime(localTime48, dateTimeZone50);
        org.joda.time.LocalDate.Property property54 = localDate41.weekyear();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minus((long) (-1));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        boolean boolean60 = property54.equals((java.lang.Object) chronology58);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) 0, 100L, chronology58);
        long long62 = interval61.getEndMillis();
        org.joda.time.Interval interval63 = interval14.overlap((org.joda.time.ReadableInterval) interval61);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Etc/UTC" + "'", str44, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(interval63);
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(1);
        long long11 = dateTimeField9.roundHalfCeiling((long) (byte) 10);
        long long13 = dateTimeField9.remainder((long) 'a');
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField9.getAsShortText((long) 15, locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = localDate24.getField(1);
        org.joda.time.LocalDate localDate28 = localDate24.withDayOfYear(2);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        boolean boolean37 = dateMidnight34.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property38 = dateMidnight34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight39 = property38.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone41);
        java.util.Date date43 = dateMidnight42.toDate();
        org.joda.time.YearMonthDay yearMonthDay44 = dateMidnight42.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plus((-1L));
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.secondOfMinute();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        boolean boolean55 = yearMonthDay46.isEqual((org.joda.time.ReadablePartial) localDate54);
        int int56 = property38.compareTo((org.joda.time.ReadablePartial) yearMonthDay46);
        int[] intArray57 = yearMonthDay46.getValues();
        int[] intArray59 = dateTimeField9.add((org.joda.time.ReadablePartial) localDate28, 39, intArray57, 135);
        int int60 = localDate28.getMonthOfYear();
        int int61 = localDate28.getEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 97L + "'", long13 == 97L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1981, 3, 31]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        long long16 = dateTimeField14.roundFloor((long) 1439);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 0);
        boolean boolean25 = dateTimeFormatter24.isPrinter();
        int int26 = dateTimeFormatter24.getDefaultYear();
        boolean boolean27 = dateTimeFormatter24.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter24.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withDefaultYear(1984);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.days();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 11, chronology43);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.year();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(32772, 7, 19, chronology43);
        org.joda.time.DurationField durationField51 = chronology43.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter31.withChronology(chronology43);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) 34545, chronology43);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.plus((-1L));
        org.joda.time.Chronology chronology61 = dateMidnight60.getChronology();
        boolean boolean63 = dateMidnight60.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property64 = dateMidnight60.centuryOfEra();
        java.lang.String str65 = property64.getAsText();
        org.joda.time.DateMidnight dateMidnight66 = property64.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.plus((-1L));
        org.joda.time.Chronology chronology72 = dateMidnight71.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.hours();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight66.withChronology(chronology72);
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology72);
        org.joda.time.DateTimeField dateTimeField77 = chronology72.halfdayOfDay();
        org.joda.time.Chronology chronology78 = chronology72.withUTC();
        org.joda.time.DateTimeField dateTimeField79 = chronology72.clockhourOfDay();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance();
        int int81 = calendar80.getFirstDayOfWeek();
        int int82 = calendar80.getWeekYear();
        long long83 = calendar80.getTimeInMillis();
        java.lang.String str84 = calendar80.getCalendarType();
        org.joda.time.LocalDate localDate85 = org.joda.time.LocalDate.fromCalendarFields(calendar80);
        org.joda.time.LocalDate.Property property86 = localDate85.era();
        int[] intArray88 = chronology72.get((org.joda.time.ReadablePartial) localDate85, 1L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField14.add((org.joda.time.ReadablePartial) yearMonthDay53, 56, intArray88, (-378559));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "19" + "'", str65, "19");
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644572457319,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=57,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1644572457319L + "'", long83 == 1644572457319L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "gregory" + "'", str84, "gregory");
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1]");
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.LocalDate localDate6 = yearMonthDay4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.minusYears((int) (short) 10);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeField7.getAsText((int) (short) 1, locale9);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 24);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.LocalDate localDate19 = yearMonthDay17.toLocalDate();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime28 = dateTime22.minusDays((int) (byte) 10);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration20, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = localDate19.equals((java.lang.Object) readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        java.util.Date date34 = dateMidnight33.toDate();
        org.joda.time.YearMonthDay yearMonthDay35 = dateMidnight33.toYearMonthDay();
        int[] intArray36 = yearMonthDay35.getValues();
        int int37 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate19, intArray36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((-1L));
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfMinute();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate49 = localDate45.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfMinute();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.LocalDate localDate59 = localDate57.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate61 = localDate57.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        java.lang.String str64 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtCurrentTime(dateTimeZone63);
        boolean boolean66 = dateTimeZone63.isFixed();
        org.joda.time.DateTime dateTime67 = localDate49.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate69 = localDate49.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.property(dateTimeFieldType73);
        org.joda.time.LocalDate.Property property75 = localDate69.property(dateTimeFieldType73);
        org.joda.time.LocalDate localDate77 = localDate19.withField(dateTimeFieldType73, 9);
        org.joda.time.LocalDate.Property property78 = localDate77.dayOfWeek();
        org.joda.time.LocalDate localDate79 = property78.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "24" + "'", str12, "24");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 24 + "'", int37 == 24);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Etc/UTC" + "'", str64, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDate79);
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        int int10 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        java.lang.String str12 = localDate7.toString();
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate15 = localDate7.withWeekyear(32);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight18.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight18.withYear(11);
        boolean boolean28 = dateMidnight18.isBefore((long) 28);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears(5);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.property(dateTimeFieldType38);
        int int40 = dateTime32.get(dateTimeFieldType38);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight18.withField(dateTimeFieldType38, 17);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight18.minusMonths(27);
        org.joda.time.DateTime dateTime45 = localDate15.toDateTime((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateTime.Property property46 = dateTime45.secondOfMinute();
        int int47 = dateTime45.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11" + "'", str12, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.withMinimumValue();
        java.lang.String str12 = property8.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = property8.addWrapFieldToCopy(44);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[monthOfYear]" + "'", str12, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.LocalDate localDate17 = dateMidnight13.toLocalDate();
        org.joda.time.Chronology chronology18 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((-1L));
        org.joda.time.Chronology chronology25 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfMinute();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears((int) (byte) 0);
        org.joda.time.LocalDate.Property property32 = localDate31.era();
        int int33 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate localDate35 = localDate31.minusWeeks(20);
        org.joda.time.LocalDate localDate37 = localDate31.plusMonths((int) (byte) -1);
        int int38 = localDate37.getDayOfMonth();
        boolean boolean39 = localDate7.equals((java.lang.Object) localDate37);
        int int40 = localDate7.getMonthOfYear();
        java.lang.String str42 = localDate7.toString("2");
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        java.util.Date date46 = dateMidnight45.toDate();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight45.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plus((-1L));
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfMinute();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        boolean boolean58 = yearMonthDay49.isEqual((org.joda.time.ReadablePartial) localDate57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        java.lang.String str62 = dateTimeZone60.getNameKey((long) (-1));
        long long64 = dateTimeZone60.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight65 = localDate57.toDateMidnight(dateTimeZone60);
        long long67 = dateTimeZone60.convertUTCToLocal((long) '4');
        org.joda.time.Interval interval68 = localDate7.toInterval(dateTimeZone60);
        int int70 = dateTimeZone60.getOffset(1644572341440L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 24 + "'", int33 == 24);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 5L + "'", long64 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        long long4 = dateTimeZone1.convertLocalToUTC((long) 5, true);
        long long7 = dateTimeZone1.convertLocalToUTC((-1732790905000L), true);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = timeOfDay9.getFieldType(34736);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34736");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 5L + "'", long4 == 5L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1732790905000L) + "'", long7 == (-1732790905000L));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.yearOfEra();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (-1));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minus(readablePeriod17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.minusMinutes(1970);
        int[] intArray23 = timeOfDay22.getValues();
        org.joda.time.TimeOfDay.Property property24 = timeOfDay22.minuteOfHour();
        int[] intArray26 = chronology5.get((org.joda.time.ReadablePartial) timeOfDay22, 59L);
        org.joda.time.DateTimeField dateTimeField27 = chronology5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeField27.set(2678400000L, "T09:38:42.053");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T09:38:42.053\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 49, 57, 571]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 59]");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime16.yearOfEra();
        org.joda.time.DateTime.Property property25 = dateTime16.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime.Property property32 = dateTime30.dayOfYear();
        org.joda.time.DateTime dateTime33 = property32.withMinimumValue();
        org.joda.time.DurationField durationField34 = property32.getDurationField();
        java.lang.Object obj35 = null;
        boolean boolean36 = property32.equals(obj35);
        org.joda.time.DateTime dateTime38 = property32.addToCopy((long) 49);
        org.joda.time.DateTime dateTime40 = property32.setCopy("70");
        org.joda.time.DateTime dateTime41 = property32.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime43 = dateTime41.plusDays(40);
        int int44 = property25.getDifference((org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str45 = property25.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = property25.setCopy("2022-02-11T09:40:28.770Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:40:28.770Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 57 + "'", int31 == 57);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 719528 + "'", int44 == 719528);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Fri" + "'", str45, "Fri");
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate17.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((-1L));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.LocalDate localDate31 = localDate29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        boolean boolean38 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime39 = localDate21.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.Interval interval41 = yearMonthDay4.toInterval(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay4.withYear(69);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight46.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay48.withPeriodAdded(readablePeriod49, 11);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plus((-1L));
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.centuries();
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay51.withChronologyRetainFields(chronology57);
        org.joda.time.LocalDate localDate60 = yearMonthDay59.toLocalDate();
        boolean boolean61 = yearMonthDay43.isEqual((org.joda.time.ReadablePartial) yearMonthDay59);
        org.joda.time.YearMonthDay.Property property62 = yearMonthDay59.dayOfMonth();
        int int63 = property62.get();
        int int64 = property62.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay65 = property62.getYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.plus((-1L));
        org.joda.time.Chronology chronology71 = dateMidnight70.getChronology();
        boolean boolean73 = dateMidnight70.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property74 = dateMidnight70.weekyear();
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight70.toMutableDateTimeISO();
        int int76 = property62.compareTo((org.joda.time.ReadableInstant) dateMidnight70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay78 = property62.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Etc/UTC" + "'", str36, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTime dateTime16 = dateTime12.withField(dateTimeFieldType13, 7);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readableDuration19);
        int int21 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime18.minusYears((int) '#');
        boolean boolean25 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime27 = dateTime16.plusHours(252);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((-36962));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -36962 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plus((-1L));
        org.joda.time.Chronology chronology15 = dateMidnight14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.halfdayOfDay();
        int int20 = dateTimeField19.getMinimumValue();
        int int21 = dateMidnight9.get(dateTimeField19);
        long long23 = dateTimeField19.roundHalfEven(31622399999L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31622400000L + "'", long23 == 31622400000L);
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(1644572146480L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((-1L));
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        int[] intArray13 = localDate11.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean16 = localDate11.isSupported(dateTimeFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property17 = timeOfDay1.property(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, 2, 11]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate24 = localDate14.plusDays(53);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology30.minutes();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14, chronology30);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone37);
        java.util.Date date39 = dateMidnight38.toDate();
        org.joda.time.YearMonthDay yearMonthDay40 = dateMidnight38.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((-1L));
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.days();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay40.withChronologyRetainFields(chronology46);
        org.joda.time.Chronology chronology51 = yearMonthDay50.getChronology();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight52.getZone();
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay50.toDateMidnight(dateTimeZone55);
        java.util.Set<java.lang.String> strSet57 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean58 = dateTimeZone55.equals((java.lang.Object) strSet57);
        org.joda.time.DateTime dateTime59 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.DateTime.Property property60 = dateTime59.centuryOfEra();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (-1));
        long long5 = dateTimeZone1.nextTransition((long) 70);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis(999L);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (-1));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.minus(readablePeriod14);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.monthOfYear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.minus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime18.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime27 = dateTime18.withField(dateTimeFieldType25, (int) ' ');
        org.joda.time.DateTime dateTime29 = dateTime27.withYear(32770);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plusYears(5);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean46 = interval42.isBefore((org.joda.time.ReadableInterval) interval45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = interval42.toPeriod(periodType47);
        org.joda.time.DateTime dateTime49 = dateTime33.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime29.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay15.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period48);
        int int53 = dateMidnight8.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight8.withMillis(1644537600779L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 70L + "'", long5 == 70L);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(dateMidnight55);
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        boolean boolean8 = dateMidnight5.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property9 = dateMidnight5.centuryOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight11.withChronology(chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (byte) -1, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfCentury();
        int int25 = dateTimeField23.get(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        int int36 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.Chronology chronology49 = dateMidnight48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfMinute();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        boolean boolean52 = yearMonthDay43.isEqual((org.joda.time.ReadablePartial) localDate51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str56 = dateTimeZone54.getNameKey((long) (-1));
        long long58 = dateTimeZone54.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight59 = localDate51.toDateMidnight(dateTimeZone54);
        org.joda.time.LocalDate localDate61 = localDate51.plusDays(53);
        org.joda.time.LocalDate localDate63 = localDate51.plusWeeks(19);
        org.joda.time.LocalDate localDate65 = localDate63.withCenturyOfEra(12);
        java.lang.String str66 = localDate63.toString();
        org.joda.time.LocalDate localDate68 = localDate63.minusYears(0);
        org.joda.time.LocalDate localDate70 = localDate68.minusYears(135);
        org.joda.time.Interval interval71 = localDate68.toInterval();
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(97L);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getDurationType();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight73.withField(dateTimeFieldType74, 2);
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType74.getRangeDurationType();
        boolean boolean79 = localDate68.isSupported(durationFieldType78);
        boolean boolean80 = localDate35.isSupported(durationFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "19" + "'", str10, "19");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 99 + "'", int36 == 99);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 5L + "'", long58 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-06-24" + "'", str66, "2022-06-24");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        int[] intArray5 = yearMonthDay4.getValues();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.withPeriodAdded(readablePeriod6, 22);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay17.withPeriodAdded(readablePeriod19, 22);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        java.util.Date date28 = dateMidnight27.toDate();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfWeek();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean34 = interval30.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval30.toPeriod(periodType35);
        int int38 = period36.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period36);
        java.lang.String str41 = period36.toString();
        int int42 = period36.size();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0S" + "'", str41, "PT0S");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.plusWeeks(38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime28.withWeekOfWeekyear(1022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1022 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) (byte) 100, 3, (-1), (int) (byte) -1);
        java.util.Calendar.Builder builder8 = builder5.set(4, 0);
        java.util.Calendar.Builder builder10 = builder5.setCalendarType("gregory");
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.YearMonthDay yearMonthDay17 = dateMidnight15.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.withPeriodAdded(readablePeriod18, 11);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((-1L));
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay20.withChronologyRetainFields(chronology26);
        int int29 = yearMonthDay28.getYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((-1L));
        org.joda.time.Chronology chronology35 = dateMidnight34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra((int) (byte) 10);
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plus((-1L));
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.secondOfMinute();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate53 = localDate49.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plus((-1L));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.secondOfMinute();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate65 = localDate61.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime71 = localDate53.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate37.toDateTime(localTime41, dateTimeZone67);
        java.util.TimeZone timeZone73 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = yearMonthDay28.toInterval(dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        java.util.Calendar.Builder builder77 = builder12.setTimeZone(timeZone76);
        java.util.Calendar.Builder builder81 = builder77.setDate(779, 32769, 33435);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone83);
        java.util.Date date85 = dateMidnight84.toDate();
        org.joda.time.YearMonthDay yearMonthDay86 = dateMidnight84.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay86.plusDays((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay90 = yearMonthDay88.minusDays(44);
        int[] intArray91 = yearMonthDay90.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder92 = builder77.setFields(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Etc/UTC" + "'", str68, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1969, 11, 17]");
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1970);
        java.lang.String str2 = timeOfDay1.toString();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusSeconds(24);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.minusHours(2810341);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (-1));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology10);
        org.joda.time.LocalTime localTime12 = timeOfDay11.toLocalTime();
        java.lang.String str13 = timeOfDay11.toString();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay11.secondOfMinute();
        java.lang.String str15 = property14.getAsText();
        java.util.Locale locale17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = property14.setCopy("11", locale17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plusHours(58);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.millisOfSecond();
        java.lang.String str22 = property21.getName();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addWrapFieldToCopy(34715586);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-1L), dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.plus(readableDuration32);
        int int34 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minus((long) (-1));
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.minus(readablePeriod40);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay43.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        java.util.Date date54 = dateMidnight53.toDate();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.dayOfWeek();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableDuration50, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean60 = interval56.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval56.toPeriod(periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay49.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime65 = dateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period62, 19);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.monthOfYear();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime67.minus(readableDuration71);
        org.joda.time.DateTime.Property property73 = dateTime67.yearOfEra();
        java.util.Locale locale74 = null;
        java.util.Calendar calendar75 = dateTime67.toCalendar(locale74);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime67.toTimeOfDay();
        org.joda.time.DateTime.Property property77 = dateTime67.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property77.getFieldType();
        org.joda.time.DateTime dateTime79 = property77.getDateTime();
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period62, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay24.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.TimeOfDay timeOfDay82 = timeOfDay1.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean84 = timeOfDay82.isSupported(dateTimeFieldType83);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "T00:00:01.970" + "'", str2, "T00:00:01.970");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "T09:40:57.988" + "'", str13, "T09:40:57.988");
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "57" + "'", str15, "57");
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfSecond" + "'", str22, "millisOfSecond");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1644572457988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=57,MILLISECOND=988,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((-4871), 33626254, 34699, 69, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4871 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minus((long) (-1));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay2.withChronologyRetainFields(chronology6);
        int int11 = timeOfDay2.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 58 + "'", int11 == 58);
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        boolean boolean16 = dateMidnight13.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property17 = dateMidnight13.centuryOfEra();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateMidnight dateMidnight20 = property17.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        int[] intArray26 = yearMonthDay25.getValues();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withPeriodAdded(readablePeriod27, 22);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (-1));
        long long35 = dateTimeZone31.convertUTCToLocal((long) 5);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone31.getName((long) 0, locale37);
        org.joda.time.Interval interval39 = yearMonthDay25.toInterval(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight20.toMutableDateTime(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter7.withZone(dateTimeZone31);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter7.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withPivotYear(2008);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.parse("T09:38:49.833", dateTimeFormatter44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 5L + "'", long35 == 5L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate23 = localDate19.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime29 = localDate11.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = localDate11.minusYears((int) '#');
        org.joda.time.LocalDate localDate33 = localDate11.minusDays(22);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        boolean boolean41 = dateMidnight38.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property42 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight43 = property42.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plus((-1L));
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.plusWeeks((int) ' ');
        boolean boolean52 = dateMidnight50.equals((java.lang.Object) 100.0f);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight50.minus(readableDuration53);
        int int55 = dateMidnight50.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minus((long) (-1));
        org.joda.time.Chronology chronology59 = dateMidnight58.getChronology();
        int int60 = dateMidnight58.getYearOfEra();
        boolean boolean61 = dateMidnight50.isEqual((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight50.minus((long) 15);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight50.plusMonths(70);
        boolean boolean66 = dateMidnight43.isEqual((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight.Property property68 = dateMidnight43.property(dateTimeFieldType67);
        org.joda.time.LocalDate.Property property69 = localDate11.property(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 33 + "'", int55 == 33);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setYear(33);
        java.util.Date date4 = new java.util.Date();
        java.time.Instant instant5 = date4.toInstant();
        int int6 = date4.getDate();
        boolean boolean7 = date1.after(date4);
        int int8 = date4.getDate();
        org.junit.Assert.assertEquals(date1.toString(), "Sun Jan 01 00:00:00 UTC 1933");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:40:58 UTC 2022");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter6.withPivotYear((java.lang.Integer) (-36962));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime45 = dateTimeFormatter43.parseMutableDateTime("1963");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        java.util.Date date5 = new java.util.Date(27, 34616473, 2, 122, 293);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((-1L));
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withCenturyOfEra(3);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusYears(0);
        boolean boolean15 = dateMidnight12.isAfterNow();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withYearOfEra(18);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusYears(46);
        java.util.Date date20 = dateMidnight17.toDate();
        int int21 = date5.compareTo(date20);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Feb 07 06:53:00 UTC 2886633");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Jan 02 00:00:00 UTC 19");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(1644572212190L);
        org.joda.time.DateTime dateTime6 = dateTime4.minusYears(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime4.withTime(34778, 0, 575, (-30801));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34778 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant47 = calendar0.toInstant();
        java.lang.String str48 = calendar0.getCalendarType();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.setMinimalDaysInFirstWeek(0);
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "gregory" + "'", str48, "gregory");
        org.junit.Assert.assertNotNull(yearMonthDay49);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay4.monthOfYear();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property15.getAsText(locale16);
        int int18 = property15.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "January" + "'", str17, "January");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        int int4 = date3.getHours();
        int int5 = date3.getDay();
        int int6 = date3.getDay();
        date3.setYear(4);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = dateTime10.toString("DateTimeField[halfdayOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 01 00:00:00 UTC 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        boolean boolean7 = dateMidnight4.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.weekyear();
        org.joda.time.DateTime dateTime9 = dateMidnight4.toDateTime();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime12 = dateTime9.withFieldAdded(durationFieldType10, (int) (byte) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 4, 0L);
        int int10 = dateTimeField6.getMinimumValue();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField6.getMaximumShortTextLength(locale11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate localDate30 = localDate24.withWeekyear(19);
        org.joda.time.LocalTime localTime31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime36 = localDate24.toDateTime(localTime31, dateTimeZone33);
        org.joda.time.LocalDate.Property property37 = localDate24.weekyear();
        org.joda.time.LocalDate.Property property38 = localDate24.dayOfWeek();
        org.joda.time.LocalDate localDate39 = property38.roundFloorCopy();
        org.joda.time.LocalDate localDate40 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate42 = localDate40.plusWeeks(235);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((-1L));
        org.joda.time.Chronology chronology48 = dateMidnight47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.hours();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeField50.getAsText((int) (short) 1, locale52);
        java.lang.String str55 = dateTimeField50.getAsShortText((long) 24);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.YearMonthDay yearMonthDay60 = dateMidnight58.toYearMonthDay();
        int[] intArray61 = yearMonthDay60.getValues();
        org.joda.time.LocalDate localDate62 = yearMonthDay60.toLocalDate();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.plus(readableDuration66);
        org.joda.time.DateTime dateTime69 = dateTime65.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime71 = dateTime65.minusDays((int) (byte) 10);
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableDuration63, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean73 = localDate62.equals((java.lang.Object) readableDuration63);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone75);
        java.util.Date date77 = dateMidnight76.toDate();
        org.joda.time.YearMonthDay yearMonthDay78 = dateMidnight76.toYearMonthDay();
        int[] intArray79 = yearMonthDay78.getValues();
        int int80 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDate62, intArray79);
        int int81 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate40, intArray79);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((-1L), dateTimeZone83);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime87 = dateTime84.withFieldAdded(durationFieldType85, 16);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime84.getZone();
        long long91 = dateTimeZone88.convertLocalToUTC((long) 42, false);
        org.joda.time.DateMidnight dateMidnight92 = org.joda.time.DateMidnight.now(dateTimeZone88);
        org.joda.time.DateMidnight dateMidnight93 = localDate40.toDateMidnight(dateTimeZone88);
        org.joda.time.LocalDate localDate95 = localDate40.plusMonths(22);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "24" + "'", str55, "24");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 24 + "'", int80 == 24);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 42L + "'", long91 == 42L);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(localDate95);
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        java.lang.Object obj7 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        java.util.Date date15 = dateMidnight14.toDate();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.dayOfWeek();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableDuration11, (org.joda.time.ReadableInstant) dateMidnight14);
        boolean boolean18 = interval10.isAfter((org.joda.time.ReadableInterval) interval17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Interval interval20 = interval17.withPeriodAfterStart(readablePeriod19);
        long long21 = interval17.toDurationMillis();
        org.joda.time.Chronology chronology22 = interval17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(obj7, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField25 = chronology22.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(0, 329, 2026, 0, 0, 46, 335, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 329 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        long long10 = chronology5.add((long) 292278994, (long) 4, 12);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.hourOfDay();
        org.joda.time.Chronology chronology12 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology5.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 292279042L + "'", long10 == 292279042L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusWeeks(22);
        java.util.GregorianCalendar gregorianCalendar6 = dateMidnight5.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.util.Date date12 = dateMidnight11.toDate();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight11.toYearMonthDay();
        int[] intArray14 = yearMonthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.withPeriodAdded(readablePeriod15, 22);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusMonths(13);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths(25);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight24.toYearMonthDay();
        int[] intArray27 = yearMonthDay26.getValues();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay26.withPeriodAdded(readablePeriod28, 22);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.dayOfWeek();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean43 = interval39.isBefore((org.joda.time.ReadableInterval) interval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval39.toPeriod(periodType44);
        int int47 = period45.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay30.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period45);
        int[] intArray52 = chronology7.get((org.joda.time.ReadablePeriod) period45, (long) 42, 1644537600029L);
        org.joda.time.DateTimeField dateTimeField53 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField54 = chronology7.clockhourOfHalfday();
        int int55 = dateTimeField54.getMaximumValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[52, 1, 1, 2, 23, 59, 59, 987]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 12 + "'", int55 == 12);
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = property25.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime29 = property25.setCopy(39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 557 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(33435, (-1959), 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1959 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus((-1L));
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay4.withChronologyRetainFields(chronology10);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay4.plusMonths(33);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.util.Date date20 = dateMidnight19.toDate();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight19.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths(32769);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfMinute();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.withYearOfEra((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(5);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone45);
        java.util.Date date47 = dateMidnight46.toDate();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.dayOfWeek();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean53 = interval49.isBefore((org.joda.time.ReadableInterval) interval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = interval49.toPeriod(periodType54);
        org.joda.time.DateTime dateTime56 = dateTime40.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.LocalDate localDate58 = localDate36.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 6);
        org.joda.time.PeriodType periodType59 = period55.getPeriodType();
        org.joda.time.DateTime dateTime61 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period55, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.withYear(2);
        org.joda.time.YearMonthDay.Property property65 = yearMonthDay62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        org.joda.time.YearMonthDay yearMonthDay68 = property65.addWrapFieldToCopy(47);
        java.lang.String str69 = property65.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay71 = property65.setCopy(34693);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34693 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "dayOfMonth" + "'", str69, "dayOfMonth");
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-1L));
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        boolean boolean15 = dateMidnight12.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.joda.time.DateMidnight dateMidnight19 = property16.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        int[] intArray25 = yearMonthDay24.getValues();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.withPeriodAdded(readablePeriod26, 22);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (-1));
        long long34 = dateTimeZone30.convertUTCToLocal((long) 5);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        org.joda.time.Interval interval38 = yearMonthDay24.toInterval(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight19.toMutableDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology42 = dateTimeFormatter6.getChronology();
        org.joda.time.Chronology chronology43 = dateTimeFormatter6.getChronolgy();
        java.lang.StringBuffer stringBuffer44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone46);
        java.util.Date date48 = dateMidnight47.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = dateMidnight47.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate52 = yearMonthDay51.toLocalDate();
        java.lang.String str53 = localDate52.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = localDate52.getFields();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer44, (org.joda.time.ReadablePartial) localDate52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNull(chronology42);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969-12-31" + "'", str53, "1969-12-31");
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.halfdayOfDay();
        int int10 = dateTimeField9.getMaximumValue();
        int int12 = dateTimeField9.getLeapAmount((long) 131);
        int int13 = dateTimeField9.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField9.set(23014L, 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate12 = property10.addToCopy((-1));
        org.joda.time.LocalDate localDate13 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(34629952);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, 11);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property8.getAsText(locale9);
        int int11 = property8.getMinimumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property8.getAsShortText(locale12);
        java.lang.String str14 = property8.getAsText();
        org.joda.time.YearMonthDay yearMonthDay16 = property8.setCopy("3");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = property8.setCopy("T08:52:49.324");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T08:52:49.324\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "January" + "'", str10, "January");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jan" + "'", str13, "Jan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "January" + "'", str14, "January");
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        gregorianCalendar10.setLenient(false);
        gregorianCalendar10.setMinimalDaysInFirstWeek(252);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((-1L));
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate27 = localDate23.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.LocalDate localDate33 = localDate27.withWeekyear(19);
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTime dateTime35 = localDate27.toDateTime(localTime34);
        org.joda.time.LocalDate.Property property36 = localDate27.era();
        boolean boolean37 = gregorianCalendar10.after((java.lang.Object) localDate27);
        org.joda.time.LocalDate.Property property38 = localDate27.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalTime localTime18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime23 = localDate11.toDateTime(localTime18, dateTimeZone20);
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime23.toYearMonthDay();
        int int27 = yearMonthDay26.size();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay26.plusDays(8);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusYears(42);
        int int32 = yearMonthDay29.getYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((-1L));
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology14.minutes();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((-1L), chronology14);
        org.joda.time.DurationField durationField21 = chronology14.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withChronology(chronology14);
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withLocale(locale23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = dateTimeFormatter24.parseMutableDateTime("T09:35:56.001");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minus(readablePeriod5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(1);
        int int9 = timeOfDay8.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withHourOfDay(23);
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        long long16 = dateTimeField14.roundFloor((long) 1439);
        boolean boolean17 = dateTimeField14.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField14.set((long) 33330872, 2040);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2040 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(779, (-51), 0, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -51 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.centuries();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(70L, chronology8);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(23, (int) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        int int14 = timeOfDay13.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withMinuteOfHour(34555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34555 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        java.lang.Appendable appendable8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.minus(readableDuration14);
        org.joda.time.DateMidnight dateMidnight16 = dateTime15.toDateMidnight();
        org.joda.time.LocalTime localTime17 = dateTime15.toLocalTime();
        org.joda.time.DateTime dateTime19 = dateTime15.plusSeconds((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(appendable8, (org.joda.time.ReadableInstant) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.YearMonthDay yearMonthDay7 = dateMidnight5.toYearMonthDay();
        int[] intArray8 = yearMonthDay7.getValues();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay7.withPeriodAdded(readablePeriod9, 22);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.plusMonths(13);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.dayOfWeek();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean24 = interval20.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval20.toPeriod(periodType25);
        int int28 = period26.getValue((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus((-1L));
        org.joda.time.Chronology chronology36 = dateMidnight35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfMinute();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.LocalDate localDate40 = localDate38.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate48 = localDate42.withWeekyear(19);
        org.joda.time.LocalTime localTime49 = null;
        org.joda.time.DateTime dateTime50 = localDate42.toDateTime(localTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.plus((-1L));
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfMinute();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfEra((int) (byte) 10);
        int int61 = localDate58.getYearOfCentury();
        boolean boolean62 = localDate42.isBefore((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minus((long) (-1));
        org.joda.time.DateTime dateTime66 = localDate42.toDateTime((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight65);
        int int68 = period26.size();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = period26.getValue(809);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 809");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Etc/UTC" + "'", str45, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withPeriodAdded(readablePeriod5, (int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusYears((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int11 = yearMonthDay7.getValue(33538);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33538");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 44);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((-1L));
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTime(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime16.withDayOfWeek(11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0, (int) (short) 0, 5255);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        java.util.Date date3 = dateMidnight2.toDate();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        boolean boolean15 = yearMonthDay6.isEqual((org.joda.time.ReadablePartial) localDate14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (-1));
        long long21 = dateTimeZone17.convertUTCToLocal((long) 5);
        org.joda.time.DateMidnight dateMidnight22 = localDate14.toDateMidnight(dateTimeZone17);
        long long26 = dateTimeZone17.convertLocalToUTC((long) '4', true, (long) 52);
        java.lang.String str28 = dateTimeZone17.getNameKey((long) 33);
        boolean boolean29 = dateTimeZone17.isFixed();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5L + "'", long21 == 5L);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property10.setCopy(2);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minus((long) (-1));
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minus(readablePeriod22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus(readablePeriod25);
        org.joda.time.DateTime dateTime27 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime27);
        java.util.Locale locale30 = null;
        java.util.Calendar calendar31 = dateTime16.toCalendar(locale30);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime16.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644570179165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=2,SECOND=59,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(gregorianCalendar32);
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 32);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(28);
        java.lang.String str6 = dateTime3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str6, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.util.Date date4 = dateMidnight3.toDate();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.util.Date date8 = dateMidnight7.toDate();
        boolean boolean9 = date4.before(date8);
        int int10 = date8.getHours();
        int int11 = date8.getMonth();
        boolean boolean12 = date0.after(date8);
        date8.setSeconds(48);
        int int15 = date8.getMonth();
        int int16 = date8.getDate();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:40:59 UTC 2022");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:48 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        int int11 = localDate8.getYearOfCentury();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime42 = localDate24.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime(localTime12, dateTimeZone38);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        calendar0.setTimeZone(timeZone44);
        int int46 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withDefaultYear((int) '#');
        boolean boolean52 = calendar0.after((java.lang.Object) dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withPivotYear(996);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear((java.lang.Integer) 1022);
        int int57 = dateTimeFormatter56.getDefaultYear();
        int int58 = dateTimeFormatter56.getDefaultYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572459209,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=59,MILLISECOND=209,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2000 + "'", int57 == 2000);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2000 + "'", int58 == 2000);
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate17.withDayOfWeek(34709682);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34709682 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((-1L), dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readableDuration4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        int int10 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone12);
        java.util.Date date14 = dateMidnight13.toDate();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        boolean boolean19 = date14.before(date18);
        int int20 = date14.getDay();
        int int21 = date14.getHours();
        date14.setSeconds((int) '4');
        boolean boolean24 = dateTime9.equals((java.lang.Object) date14);
        org.joda.time.DateTime dateTime26 = dateTime9.withYearOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime28 = dateTime9.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) 16);
        org.joda.time.DateTime dateTime37 = dateTime35.minus((long) 25);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        long long40 = dateTimeZone38.previousTransition((long) 36);
        org.joda.time.DateTime dateTime41 = dateTime28.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(52L, dateTimeZone38);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(996);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((-1L), dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.plus(readableDuration48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.plus(readableDuration52);
        int int54 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minus((long) (-1));
        org.joda.time.Chronology chronology58 = dateMidnight57.getChronology();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.minus(readablePeriod60);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay63.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay63.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay67.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone72);
        java.util.Date date74 = dateMidnight73.toDate();
        org.joda.time.DateMidnight.Property property75 = dateMidnight73.dayOfWeek();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableDuration70, (org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean80 = interval76.isBefore((org.joda.time.ReadableInterval) interval79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval76.toPeriod(periodType81);
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay69.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.DateTime dateTime85 = dateTime47.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 19);
        java.lang.String str86 = period82.toString();
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone89);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight90.plus((-1L));
        org.joda.time.Chronology chronology93 = dateMidnight92.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.secondOfMinute();
        org.joda.time.DurationField durationField95 = chronology93.millis();
        org.joda.time.DurationField durationField96 = durationFieldType87.getField(chronology93);
        int int97 = period82.get(durationFieldType87);
        org.joda.time.DateTime dateTime99 = dateTime44.withFieldAdded(durationFieldType87, 39);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 36L + "'", long40 == 36L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0S" + "'", str86, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField10 = chronology6.minutes();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((-1L), chronology6);
        org.joda.time.DurationField durationField13 = chronology6.hours();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField15 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology6.weekyears();
        org.joda.time.DurationField durationField17 = chronology6.hours();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfYear();
        boolean boolean14 = dateMidnight2.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone16);
        java.util.Date date18 = dateMidnight17.toDate();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.minusWeeks(22);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone23);
        java.util.Date date25 = dateMidnight24.toDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.dayOfWeek();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean31 = interval27.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval27.getEnd();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.dayOfWeek();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean43 = interval35.isAfter((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Interval interval47 = interval35.withStart((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = interval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration49 = interval27.toDuration();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight20.withDurationAdded((org.joda.time.ReadableDuration) duration49, 24);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight2.withDurationAdded((org.joda.time.ReadableDuration) duration49, 19);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        java.util.Date date61 = dateMidnight60.toDate();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.dayOfWeek();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration57, (org.joda.time.ReadableInstant) dateMidnight60);
        boolean boolean64 = interval56.isAfter((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration65 = interval63.toDuration();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight53.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = dateMidnight67.getZone();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = org.joda.time.DateMidnight.now();
        int int71 = dateTimeZone68.getOffset((org.joda.time.ReadableInstant) dateMidnight70);
        int int73 = dateTimeZone68.getOffset(34674L);
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone68);
        boolean boolean76 = dateTimeZone68.isStandardOffset(1644572347855L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1L), dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        int int9 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone11);
        java.util.Date date13 = dateMidnight12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone15);
        java.util.Date date17 = dateMidnight16.toDate();
        boolean boolean18 = date13.before(date17);
        int int19 = date13.getDay();
        int int20 = date13.getHours();
        date13.setSeconds((int) '4');
        boolean boolean23 = dateTime8.equals((java.lang.Object) date13);
        org.joda.time.DateTime dateTime25 = dateTime8.withYearOfEra((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((-1L));
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology32.minutes();
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now(chronology32);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((-1L), chronology32);
        org.joda.time.DurationField durationField39 = chronology32.hours();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime25.toMutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.centuryOfEra();
        long long43 = dateTimeField41.roundHalfCeiling((long) 36000000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:52 UTC 1970");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 946684800000L + "'", long43 == 946684800000L);
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property13 = dateTime10.hourOfDay();
        java.lang.Class<?> wildcardClass14 = dateTime10.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.centuries();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(70L, chronology6);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusSeconds(996);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate11 = localDate7.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate11.withWeekyear(19);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfMinute();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate36 = localDate32.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate42 = localDate36.withWeekyear(19);
        org.joda.time.LocalTime localTime43 = null;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime48 = localDate36.toDateTime(localTime43, dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.getName(1000L);
        org.joda.time.DateTime dateTime51 = yearMonthDay24.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.Interval interval52 = localDate19.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate54 = localDate19.withYear(36);
        int int55 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate.Property property56 = localDate19.weekOfWeekyear();
        org.joda.time.LocalDate localDate57 = property56.roundFloorCopy();
        org.joda.time.LocalDate localDate58 = property56.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Etc/UTC" + "'", str14, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Etc/UTC" + "'", str39, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.days();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 11, chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.year();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology6);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        java.lang.String str14 = gregorianCalendar13.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.add(54, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plus((-1L));
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withDefaultYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 0);
        boolean boolean24 = dateTimeFormatter23.isParser();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((-1L));
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        boolean boolean32 = dateMidnight29.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property33 = dateMidnight29.centuryOfEra();
        boolean boolean34 = property33.isLeap();
        org.joda.time.DateMidnight dateMidnight36 = property33.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone38);
        java.util.Date date40 = dateMidnight39.toDate();
        org.joda.time.YearMonthDay yearMonthDay41 = dateMidnight39.toYearMonthDay();
        int[] intArray42 = yearMonthDay41.getValues();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.withPeriodAdded(readablePeriod43, 22);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str49 = dateTimeZone47.getNameKey((long) (-1));
        long long51 = dateTimeZone47.convertUTCToLocal((long) 5);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone47.getName((long) 0, locale53);
        org.joda.time.Interval interval55 = yearMonthDay41.toInterval(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight36.toMutableDateTime(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter23.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter6.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean60 = dateTimeFormatter59.isPrinter();
        boolean boolean61 = dateTimeFormatter59.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeFormatter59.parseMillis("T09:38:32.572");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 5L + "'", long51 == 5L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((-1L));
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 5, chronology8);
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DurationField durationField12 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 2022, (long) 2022, chronology8);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Duration duration16 = interval14.toDuration();
        org.joda.time.DateTime dateTime17 = interval14.getStart();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) '4');
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        int int9 = property3.compareTo((org.joda.time.ReadableInstant) dateTime7);
        java.lang.String str10 = property3.getName();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfMonth" + "'", str10, "dayOfMonth");
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField9 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.hourOfDay();
        java.lang.String str13 = property12.getName();
        org.joda.time.TimeOfDay timeOfDay14 = property12.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withMillisOfSecond(36);
        org.joda.time.LocalTime localTime17 = timeOfDay14.toLocalTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hourOfDay" + "'", str13, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        org.joda.time.YearMonthDay yearMonthDay11 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plus((-1L));
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DurationField durationField20 = chronology17.days();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay11.withChronologyRetainFields(chronology17);
        org.joda.time.DurationField durationField22 = chronology17.months();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plus((-1L));
        org.joda.time.Chronology chronology34 = dateMidnight33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfMinute();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.days();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay28.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight40.getZone();
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay38.toDateMidnight(dateTimeZone43);
        java.util.Set<java.lang.String> strSet45 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean46 = dateTimeZone43.equals((java.lang.Object) strSet45);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str51 = dateTimeZone49.getNameKey((long) (-1));
        long long53 = dateTimeZone49.convertUTCToLocal((long) 5);
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeZone49.getName((long) 0, locale55);
        java.lang.String str57 = dateTimeZone49.toString();
        java.lang.String str58 = dateTimeZone49.getID();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(10L, dateTimeZone49);
        long long63 = dateTimeZone49.convertLocalToUTC(292278994L, false);
        long long65 = dateTimeZone43.getMillisKeepLocal(dateTimeZone49, 1644572235227L);
        org.joda.time.DateTime dateTime66 = dateTime23.toDateTime(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(34616473, 38, 254, 43, 9, 1903, 34585, dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5L + "'", long53 == 5L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 292278994L + "'", long63 == 292278994L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572235227L + "'", long65 == 1644572235227L);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.monthOfYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime1.withField(dateTimeFieldType8, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(15);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.weekOfWeekyear();
        long long16 = property15.remainder();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 121215652L + "'", long16 == 121215652L);
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.plusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.minusMonths((int) (short) 1);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight8.toGregorianCalendar();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYear(24);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.minus(readableDuration20);
        org.joda.time.DateTime.Property property22 = dateTime16.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime dateTime25 = dateTime16.withField(dateTimeFieldType23, (int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis(12);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((-1L), dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.plus(readableDuration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readableDuration35);
        int int37 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minus((long) (-1));
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.minus(readablePeriod43);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minusMinutes(1);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMinutes(1970);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay46.minusSeconds(1);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusMinutes(12);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone55);
        java.util.Date date57 = dateMidnight56.toDate();
        org.joda.time.DateMidnight.Property property58 = dateMidnight56.dayOfWeek();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableDuration53, (org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((-1L), 1L);
        boolean boolean63 = interval59.isBefore((org.joda.time.ReadableInterval) interval62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval59.toPeriod(periodType64);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay52.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime68 = dateTime30.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 19);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight14.plus((org.joda.time.ReadablePeriod) period65);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateMidnight70);
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plus((-1L));
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfMinute();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate12 = property10.addToCopy((-1));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((-1L));
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        boolean boolean20 = dateMidnight17.isBefore((long) ' ');
        org.joda.time.DateMidnight.Property property21 = dateMidnight17.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight17.minusWeeks(17);
        org.joda.time.DateMidnight.Property property24 = dateMidnight17.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight26 = property24.addToCopy((long) 15);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        int int32 = dateTime31.getSecondOfMinute();
        int int33 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTimeISO();
        boolean boolean35 = dateMidnight26.isEqual((org.joda.time.ReadableInstant) dateTime31);
        int int36 = property10.getDifference((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.LocalDate localDate37 = property10.getLocalDate();
        int int38 = localDate37.getDayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 42 + "'", int33 == 42);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1974) + "'", int36 == (-1974));
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 42 + "'", int38 == 42);
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((-1L));
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate8.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.LocalDate localDate18 = localDate12.withWeekyear(19);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone22);
        java.util.Date date24 = dateMidnight23.toDate();
        org.joda.time.YearMonthDay yearMonthDay25 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((-1L));
        org.joda.time.Chronology chronology31 = dateMidnight30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate37.withWeekyear(19);
        org.joda.time.LocalTime localTime44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (-1));
        org.joda.time.DateTime dateTime49 = localDate37.toDateTime(localTime44, dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getName(1000L);
        org.joda.time.DateTime dateTime52 = yearMonthDay25.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.Interval interval53 = localDate20.toInterval(dateTimeZone46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) ' ', chronology54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone57);
        java.util.Date date59 = dateMidnight58.toDate();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusWeeks(22);
        int int62 = dateMidnight58.getMillisOfDay();
        boolean boolean63 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType64.getRangeDurationType();
        boolean boolean66 = dateMidnight58.isSupported(dateTimeFieldType64);
        int int67 = dateMidnight58.getYear();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight58.minus((long) 557);
        long long70 = dateMidnight69.getMillis();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-86400000L) + "'", long70 == (-86400000L));
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = property4.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusWeeks(20);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((-1L), 1L);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone14);
        java.util.Date date16 = dateMidnight15.toDate();
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.dayOfWeek();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15);
        boolean boolean19 = interval11.isAfter((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Interval interval21 = interval18.withPeriodAfterStart(readablePeriod20);
        long long22 = interval18.toDurationMillis();
        org.joda.time.Interval interval23 = interval18.toInterval();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (-1));
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.LocalTime localTime29 = timeOfDay28.toLocalTime();
        java.lang.String str30 = timeOfDay28.toString();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay28.minus(readablePeriod31);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay28.plusMinutes(29);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withMinuteOfHour(28);
        org.joda.time.DateTime dateTime37 = timeOfDay36.toDateTimeToday();
        org.joda.time.DateTime dateTime39 = dateTime37.minusYears(11);
        boolean boolean40 = interval23.equals((java.lang.Object) dateTime37);
        boolean boolean41 = dateMidnight8.equals((java.lang.Object) dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "T09:40:59.825" + "'", str30, "T09:40:59.825");
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int2 = calendar0.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone4);
        java.util.Date date6 = dateMidnight5.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone8);
        java.util.Date date10 = dateMidnight9.toDate();
        boolean boolean11 = date6.before(date10);
        int int12 = date6.getMonth();
        calendar0.setTime(date6);
        calendar0.setFirstDayOfWeek((int) (short) 1);
        java.time.Instant instant16 = calendar0.toInstant();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int19 = calendar17.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone21);
        java.util.Date date23 = dateMidnight22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone25);
        java.util.Date date27 = dateMidnight26.toDate();
        boolean boolean28 = date23.before(date27);
        int int29 = date23.getMonth();
        calendar17.setTime(date23);
        java.util.TimeZone timeZone31 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        calendar0.setTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((-1L));
        org.joda.time.Chronology chronology39 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.withYearOfEra((int) (byte) 10);
        int int44 = localDate41.getYearOfCentury();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus((-1L));
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfMinute();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate57 = localDate53.plusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((-1L));
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.secondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate69 = localDate65.plusYears((int) (byte) 0);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str72 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime73 = localDate69.toDateTimeAtCurrentTime(dateTimeZone71);
        boolean boolean74 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime75 = localDate57.toDateTimeAtCurrentTime(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = localDate41.toDateTime(localTime45, dateTimeZone71);
        java.util.TimeZone timeZone77 = dateTimeZone71.toTimeZone();
        calendar0.setTimeZone(timeZone77);
        calendar0.add(100, (int) (byte) 0);
        calendar0.set(252, 30, 55, (int) (byte) 1, (-19034));
        calendar0.set(32, (int) 'a', (int) (short) 0);
        java.util.Date date92 = calendar0.getTime();
        int int93 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60903634440000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=40,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=17,DAY_OF_YEAR=17,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Etc/UTC" + "'", str72, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 17 19:46:00 UTC 40");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }
}
